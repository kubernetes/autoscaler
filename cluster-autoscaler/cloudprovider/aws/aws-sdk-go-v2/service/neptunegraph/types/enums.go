// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type BlankNodeHandling string

// Enum values for BlankNodeHandling
const (
	BlankNodeHandlingConvertToIri BlankNodeHandling = "convertToIri"
)

// Values returns all known values for BlankNodeHandling. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (BlankNodeHandling) Values() []BlankNodeHandling {
	return []BlankNodeHandling{
		"convertToIri",
	}
}

type ConflictExceptionReason string

// Enum values for ConflictExceptionReason
const (
	ConflictExceptionReasonConcurrentModification ConflictExceptionReason = "CONCURRENT_MODIFICATION"
)

// Values returns all known values for ConflictExceptionReason. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ConflictExceptionReason) Values() []ConflictExceptionReason {
	return []ConflictExceptionReason{
		"CONCURRENT_MODIFICATION",
	}
}

type ExplainMode string

// Enum values for ExplainMode
const (
	ExplainModeStatic  ExplainMode = "STATIC"
	ExplainModeDetails ExplainMode = "DETAILS"
)

// Values returns all known values for ExplainMode. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ExplainMode) Values() []ExplainMode {
	return []ExplainMode{
		"STATIC",
		"DETAILS",
	}
}

type ExportFormat string

// Enum values for ExportFormat
const (
	ExportFormatParquet ExportFormat = "PARQUET"
	ExportFormatCsv     ExportFormat = "CSV"
)

// Values returns all known values for ExportFormat. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ExportFormat) Values() []ExportFormat {
	return []ExportFormat{
		"PARQUET",
		"CSV",
	}
}

type ExportTaskStatus string

// Enum values for ExportTaskStatus
const (
	ExportTaskStatusInitializing ExportTaskStatus = "INITIALIZING"
	ExportTaskStatusExporting    ExportTaskStatus = "EXPORTING"
	ExportTaskStatusSucceeded    ExportTaskStatus = "SUCCEEDED"
	ExportTaskStatusFailed       ExportTaskStatus = "FAILED"
	ExportTaskStatusCancelling   ExportTaskStatus = "CANCELLING"
	ExportTaskStatusCancelled    ExportTaskStatus = "CANCELLED"
	ExportTaskStatusDeleted      ExportTaskStatus = "DELETED"
)

// Values returns all known values for ExportTaskStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ExportTaskStatus) Values() []ExportTaskStatus {
	return []ExportTaskStatus{
		"INITIALIZING",
		"EXPORTING",
		"SUCCEEDED",
		"FAILED",
		"CANCELLING",
		"CANCELLED",
		"DELETED",
	}
}

type Format string

// Enum values for Format
const (
	FormatCsv        Format = "CSV"
	FormatOpenCypher Format = "OPEN_CYPHER"
	FormatParquet    Format = "PARQUET"
	FormatNtriples   Format = "NTRIPLES"
)

// Values returns all known values for Format. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Format) Values() []Format {
	return []Format{
		"CSV",
		"OPEN_CYPHER",
		"PARQUET",
		"NTRIPLES",
	}
}

type GraphStatus string

// Enum values for GraphStatus
const (
	GraphStatusCreating     GraphStatus = "CREATING"
	GraphStatusAvailable    GraphStatus = "AVAILABLE"
	GraphStatusDeleting     GraphStatus = "DELETING"
	GraphStatusResetting    GraphStatus = "RESETTING"
	GraphStatusUpdating     GraphStatus = "UPDATING"
	GraphStatusSnapshotting GraphStatus = "SNAPSHOTTING"
	GraphStatusFailed       GraphStatus = "FAILED"
	GraphStatusImporting    GraphStatus = "IMPORTING"
)

// Values returns all known values for GraphStatus. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GraphStatus) Values() []GraphStatus {
	return []GraphStatus{
		"CREATING",
		"AVAILABLE",
		"DELETING",
		"RESETTING",
		"UPDATING",
		"SNAPSHOTTING",
		"FAILED",
		"IMPORTING",
	}
}

type GraphSummaryMode string

// Enum values for GraphSummaryMode
const (
	GraphSummaryModeBasic    GraphSummaryMode = "BASIC"
	GraphSummaryModeDetailed GraphSummaryMode = "DETAILED"
)

// Values returns all known values for GraphSummaryMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GraphSummaryMode) Values() []GraphSummaryMode {
	return []GraphSummaryMode{
		"BASIC",
		"DETAILED",
	}
}

type ImportTaskStatus string

// Enum values for ImportTaskStatus
const (
	ImportTaskStatusInitializing   ImportTaskStatus = "INITIALIZING"
	ImportTaskStatusExporting      ImportTaskStatus = "EXPORTING"
	ImportTaskStatusAnalyzingData  ImportTaskStatus = "ANALYZING_DATA"
	ImportTaskStatusImporting      ImportTaskStatus = "IMPORTING"
	ImportTaskStatusReprovisioning ImportTaskStatus = "REPROVISIONING"
	ImportTaskStatusRollingBack    ImportTaskStatus = "ROLLING_BACK"
	ImportTaskStatusSucceeded      ImportTaskStatus = "SUCCEEDED"
	ImportTaskStatusFailed         ImportTaskStatus = "FAILED"
	ImportTaskStatusCancelling     ImportTaskStatus = "CANCELLING"
	ImportTaskStatusCancelled      ImportTaskStatus = "CANCELLED"
	ImportTaskStatusDeleted        ImportTaskStatus = "DELETED"
)

// Values returns all known values for ImportTaskStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ImportTaskStatus) Values() []ImportTaskStatus {
	return []ImportTaskStatus{
		"INITIALIZING",
		"EXPORTING",
		"ANALYZING_DATA",
		"IMPORTING",
		"REPROVISIONING",
		"ROLLING_BACK",
		"SUCCEEDED",
		"FAILED",
		"CANCELLING",
		"CANCELLED",
		"DELETED",
	}
}

type MultiValueHandlingType string

// Enum values for MultiValueHandlingType
const (
	MultiValueHandlingTypeToList    MultiValueHandlingType = "TO_LIST"
	MultiValueHandlingTypePickFirst MultiValueHandlingType = "PICK_FIRST"
)

// Values returns all known values for MultiValueHandlingType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MultiValueHandlingType) Values() []MultiValueHandlingType {
	return []MultiValueHandlingType{
		"TO_LIST",
		"PICK_FIRST",
	}
}

type ParquetType string

// Enum values for ParquetType
const (
	ParquetTypeColumnar ParquetType = "COLUMNAR"
)

// Values returns all known values for ParquetType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ParquetType) Values() []ParquetType {
	return []ParquetType{
		"COLUMNAR",
	}
}

type PlanCacheType string

// Enum values for PlanCacheType
const (
	PlanCacheTypeEnabled  PlanCacheType = "ENABLED"
	PlanCacheTypeDisabled PlanCacheType = "DISABLED"
	PlanCacheTypeAuto     PlanCacheType = "AUTO"
)

// Values returns all known values for PlanCacheType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PlanCacheType) Values() []PlanCacheType {
	return []PlanCacheType{
		"ENABLED",
		"DISABLED",
		"AUTO",
	}
}

type PrivateGraphEndpointStatus string

// Enum values for PrivateGraphEndpointStatus
const (
	PrivateGraphEndpointStatusCreating  PrivateGraphEndpointStatus = "CREATING"
	PrivateGraphEndpointStatusAvailable PrivateGraphEndpointStatus = "AVAILABLE"
	PrivateGraphEndpointStatusDeleting  PrivateGraphEndpointStatus = "DELETING"
	PrivateGraphEndpointStatusFailed    PrivateGraphEndpointStatus = "FAILED"
)

// Values returns all known values for PrivateGraphEndpointStatus. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PrivateGraphEndpointStatus) Values() []PrivateGraphEndpointStatus {
	return []PrivateGraphEndpointStatus{
		"CREATING",
		"AVAILABLE",
		"DELETING",
		"FAILED",
	}
}

type QueryLanguage string

// Enum values for QueryLanguage
const (
	QueryLanguageOpenCypher QueryLanguage = "OPEN_CYPHER"
)

// Values returns all known values for QueryLanguage. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (QueryLanguage) Values() []QueryLanguage {
	return []QueryLanguage{
		"OPEN_CYPHER",
	}
}

type QueryState string

// Enum values for QueryState
const (
	QueryStateRunning    QueryState = "RUNNING"
	QueryStateWaiting    QueryState = "WAITING"
	QueryStateCancelling QueryState = "CANCELLING"
)

// Values returns all known values for QueryState. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (QueryState) Values() []QueryState {
	return []QueryState{
		"RUNNING",
		"WAITING",
		"CANCELLING",
	}
}

type QueryStateInput string

// Enum values for QueryStateInput
const (
	QueryStateInputAll        QueryStateInput = "ALL"
	QueryStateInputRunning    QueryStateInput = "RUNNING"
	QueryStateInputWaiting    QueryStateInput = "WAITING"
	QueryStateInputCancelling QueryStateInput = "CANCELLING"
)

// Values returns all known values for QueryStateInput. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (QueryStateInput) Values() []QueryStateInput {
	return []QueryStateInput{
		"ALL",
		"RUNNING",
		"WAITING",
		"CANCELLING",
	}
}

type SnapshotStatus string

// Enum values for SnapshotStatus
const (
	SnapshotStatusCreating  SnapshotStatus = "CREATING"
	SnapshotStatusAvailable SnapshotStatus = "AVAILABLE"
	SnapshotStatusDeleting  SnapshotStatus = "DELETING"
	SnapshotStatusFailed    SnapshotStatus = "FAILED"
)

// Values returns all known values for SnapshotStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SnapshotStatus) Values() []SnapshotStatus {
	return []SnapshotStatus{
		"CREATING",
		"AVAILABLE",
		"DELETING",
		"FAILED",
	}
}

type UnprocessableExceptionReason string

// Enum values for UnprocessableExceptionReason
const (
	UnprocessableExceptionReasonQueryTimeout          UnprocessableExceptionReason = "QUERY_TIMEOUT"
	UnprocessableExceptionReasonInternalLimitExceeded UnprocessableExceptionReason = "INTERNAL_LIMIT_EXCEEDED"
	UnprocessableExceptionReasonMemoryLimitExceeded   UnprocessableExceptionReason = "MEMORY_LIMIT_EXCEEDED"
	UnprocessableExceptionReasonStorageLimitExceeded  UnprocessableExceptionReason = "STORAGE_LIMIT_EXCEEDED"
	UnprocessableExceptionReasonPartitionFull         UnprocessableExceptionReason = "PARTITION_FULL"
)

// Values returns all known values for UnprocessableExceptionReason. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (UnprocessableExceptionReason) Values() []UnprocessableExceptionReason {
	return []UnprocessableExceptionReason{
		"QUERY_TIMEOUT",
		"INTERNAL_LIMIT_EXCEEDED",
		"MEMORY_LIMIT_EXCEEDED",
		"STORAGE_LIMIT_EXCEEDED",
		"PARTITION_FULL",
	}
}

type ValidationExceptionReason string

// Enum values for ValidationExceptionReason
const (
	ValidationExceptionReasonConstraintViolation  ValidationExceptionReason = "CONSTRAINT_VIOLATION"
	ValidationExceptionReasonIllegalArgument      ValidationExceptionReason = "ILLEGAL_ARGUMENT"
	ValidationExceptionReasonMalformedQuery       ValidationExceptionReason = "MALFORMED_QUERY"
	ValidationExceptionReasonQueryCancelled       ValidationExceptionReason = "QUERY_CANCELLED"
	ValidationExceptionReasonQueryTooLarge        ValidationExceptionReason = "QUERY_TOO_LARGE"
	ValidationExceptionReasonUnsupportedOperation ValidationExceptionReason = "UNSUPPORTED_OPERATION"
	ValidationExceptionReasonBadRequest           ValidationExceptionReason = "BAD_REQUEST"
)

// Values returns all known values for ValidationExceptionReason. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ValidationExceptionReason) Values() []ValidationExceptionReason {
	return []ValidationExceptionReason{
		"CONSTRAINT_VIOLATION",
		"ILLEGAL_ARGUMENT",
		"MALFORMED_QUERY",
		"QUERY_CANCELLED",
		"QUERY_TOO_LARGE",
		"UNSUPPORTED_OPERATION",
		"BAD_REQUEST",
	}
}
