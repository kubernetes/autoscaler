// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AwsClosedLostReason string

// Enum values for AwsClosedLostReason
const (
	AwsClosedLostReasonAdministrative               AwsClosedLostReason = "Administrative"
	AwsClosedLostReasonBusinessAssociateAgreement   AwsClosedLostReason = "Business Associate Agreement"
	AwsClosedLostReasonCompanyAcquiredDissolved     AwsClosedLostReason = "Company Acquired/Dissolved"
	AwsClosedLostReasonCompetitiveOffering          AwsClosedLostReason = "Competitive Offering"
	AwsClosedLostReasonCustomerDataRequirement      AwsClosedLostReason = "Customer Data Requirement"
	AwsClosedLostReasonCustomerDeficiency           AwsClosedLostReason = "Customer Deficiency"
	AwsClosedLostReasonCustomerExperience           AwsClosedLostReason = "Customer Experience"
	AwsClosedLostReasonDelayCancellationOfProject   AwsClosedLostReason = "Delay / Cancellation of Project"
	AwsClosedLostReasonDuplicate                    AwsClosedLostReason = "Duplicate"
	AwsClosedLostReasonDuplicateOpportunity         AwsClosedLostReason = "Duplicate Opportunity"
	AwsClosedLostReasonExecutiveBlocker             AwsClosedLostReason = "Executive Blocker"
	AwsClosedLostReasonFailedVetting                AwsClosedLostReason = "Failed Vetting"
	AwsClosedLostReasonFeatureLimitation            AwsClosedLostReason = "Feature Limitation"
	AwsClosedLostReasonFinancialCommercial          AwsClosedLostReason = "Financial/Commercial"
	AwsClosedLostReasonInsufficientAmazonValue      AwsClosedLostReason = "Insufficient Amazon Value"
	AwsClosedLostReasonInsufficientAwsValue         AwsClosedLostReason = "Insufficient AWS Value"
	AwsClosedLostReasonInternationalConstraints     AwsClosedLostReason = "International Constraints"
	AwsClosedLostReasonLegalTaxRegulatory           AwsClosedLostReason = "Legal / Tax / Regulatory"
	AwsClosedLostReasonLegalTermsAndConditions      AwsClosedLostReason = "Legal Terms and Conditions"
	AwsClosedLostReasonLostToCompetitor             AwsClosedLostReason = "Lost to Competitor"
	AwsClosedLostReasonLostToCompetitorGoogle       AwsClosedLostReason = "Lost to Competitor - Google"
	AwsClosedLostReasonLostToCompetitorMicrosoft    AwsClosedLostReason = "Lost to Competitor - Microsoft"
	AwsClosedLostReasonLostToCompetitorOther        AwsClosedLostReason = "Lost to Competitor - Other"
	AwsClosedLostReasonLostToCompetitorRackspace    AwsClosedLostReason = "Lost to Competitor - Rackspace"
	AwsClosedLostReasonLostToCompetitorSoftlayer    AwsClosedLostReason = "Lost to Competitor - SoftLayer"
	AwsClosedLostReasonLostToCompetitorVmware       AwsClosedLostReason = "Lost to Competitor - VMWare"
	AwsClosedLostReasonNoCustomerReference          AwsClosedLostReason = "No Customer Reference"
	AwsClosedLostReasonNoIntegrationResources       AwsClosedLostReason = "No Integration Resources"
	AwsClosedLostReasonNoOpportunity                AwsClosedLostReason = "No Opportunity"
	AwsClosedLostReasonNoPerceivedValueOfMp         AwsClosedLostReason = "No Perceived Value of MP"
	AwsClosedLostReasonNoResponse                   AwsClosedLostReason = "No Response"
	AwsClosedLostReasonNotCommittedToAws            AwsClosedLostReason = "Not Committed to AWS"
	AwsClosedLostReasonNoUpdate                     AwsClosedLostReason = "No Update"
	AwsClosedLostReasonOnPremisesDeployment         AwsClosedLostReason = "On Premises Deployment"
	AwsClosedLostReasonOther                        AwsClosedLostReason = "Other"
	AwsClosedLostReasonOtherDetailsInDescription    AwsClosedLostReason = "Other (Details in Description)"
	AwsClosedLostReasonPartnerGap                   AwsClosedLostReason = "Partner Gap"
	AwsClosedLostReasonPastDue                      AwsClosedLostReason = "Past Due"
	AwsClosedLostReasonPeopleRelationshipGovernance AwsClosedLostReason = "People/Relationship/Governance"
	AwsClosedLostReasonPlatformTechnologyLimitation AwsClosedLostReason = "Platform Technology Limitation"
	AwsClosedLostReasonPreferenceForCompetitor      AwsClosedLostReason = "Preference for Competitor"
	AwsClosedLostReasonPrice                        AwsClosedLostReason = "Price"
	AwsClosedLostReasonProductTechnology            AwsClosedLostReason = "Product/Technology"
	AwsClosedLostReasonProductNotOnAws              AwsClosedLostReason = "Product Not on AWS"
	AwsClosedLostReasonSecurityCompliance           AwsClosedLostReason = "Security / Compliance"
	AwsClosedLostReasonSelfService                  AwsClosedLostReason = "Self-Service"
	AwsClosedLostReasonTechnicalLimitations         AwsClosedLostReason = "Technical Limitations"
	AwsClosedLostReasonTermSheetImpasse             AwsClosedLostReason = "Term Sheet Impasse"
)

// Values returns all known values for AwsClosedLostReason. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AwsClosedLostReason) Values() []AwsClosedLostReason {
	return []AwsClosedLostReason{
		"Administrative",
		"Business Associate Agreement",
		"Company Acquired/Dissolved",
		"Competitive Offering",
		"Customer Data Requirement",
		"Customer Deficiency",
		"Customer Experience",
		"Delay / Cancellation of Project",
		"Duplicate",
		"Duplicate Opportunity",
		"Executive Blocker",
		"Failed Vetting",
		"Feature Limitation",
		"Financial/Commercial",
		"Insufficient Amazon Value",
		"Insufficient AWS Value",
		"International Constraints",
		"Legal / Tax / Regulatory",
		"Legal Terms and Conditions",
		"Lost to Competitor",
		"Lost to Competitor - Google",
		"Lost to Competitor - Microsoft",
		"Lost to Competitor - Other",
		"Lost to Competitor - Rackspace",
		"Lost to Competitor - SoftLayer",
		"Lost to Competitor - VMWare",
		"No Customer Reference",
		"No Integration Resources",
		"No Opportunity",
		"No Perceived Value of MP",
		"No Response",
		"Not Committed to AWS",
		"No Update",
		"On Premises Deployment",
		"Other",
		"Other (Details in Description)",
		"Partner Gap",
		"Past Due",
		"People/Relationship/Governance",
		"Platform Technology Limitation",
		"Preference for Competitor",
		"Price",
		"Product/Technology",
		"Product Not on AWS",
		"Security / Compliance",
		"Self-Service",
		"Technical Limitations",
		"Term Sheet Impasse",
	}
}

type AwsFundingUsed string

// Enum values for AwsFundingUsed
const (
	AwsFundingUsedYes AwsFundingUsed = "Yes"
	AwsFundingUsedNo  AwsFundingUsed = "No"
)

// Values returns all known values for AwsFundingUsed. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AwsFundingUsed) Values() []AwsFundingUsed {
	return []AwsFundingUsed{
		"Yes",
		"No",
	}
}

type AwsMemberBusinessTitle string

// Enum values for AwsMemberBusinessTitle
const (
	AwsMemberBusinessTitleAwsSalesRep     AwsMemberBusinessTitle = "AWSSalesRep"
	AwsMemberBusinessTitleAwsAccountOwner AwsMemberBusinessTitle = "AWSAccountOwner"
	AwsMemberBusinessTitleWwpspdm         AwsMemberBusinessTitle = "WWPSPDM"
	AwsMemberBusinessTitlePdm             AwsMemberBusinessTitle = "PDM"
	AwsMemberBusinessTitlePsm             AwsMemberBusinessTitle = "PSM"
	AwsMemberBusinessTitleIsvsm           AwsMemberBusinessTitle = "ISVSM"
)

// Values returns all known values for AwsMemberBusinessTitle. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AwsMemberBusinessTitle) Values() []AwsMemberBusinessTitle {
	return []AwsMemberBusinessTitle{
		"AWSSalesRep",
		"AWSAccountOwner",
		"WWPSPDM",
		"PDM",
		"PSM",
		"ISVSM",
	}
}

type AwsOpportunityStage string

// Enum values for AwsOpportunityStage
const (
	AwsOpportunityStageNotStarted           AwsOpportunityStage = "Not Started"
	AwsOpportunityStageInProgress           AwsOpportunityStage = "In Progress"
	AwsOpportunityStageProspect             AwsOpportunityStage = "Prospect"
	AwsOpportunityStageEngaged              AwsOpportunityStage = "Engaged"
	AwsOpportunityStageIdentified           AwsOpportunityStage = "Identified"
	AwsOpportunityStageQualify              AwsOpportunityStage = "Qualify"
	AwsOpportunityStageResearch             AwsOpportunityStage = "Research"
	AwsOpportunityStageSellerEngaged        AwsOpportunityStage = "Seller Engaged"
	AwsOpportunityStageEvaluating           AwsOpportunityStage = "Evaluating"
	AwsOpportunityStageSellerRegistered     AwsOpportunityStage = "Seller Registered"
	AwsOpportunityStageTermSheetNegotiation AwsOpportunityStage = "Term Sheet Negotiation"
	AwsOpportunityStageContractNegotiation  AwsOpportunityStage = "Contract Negotiation"
	AwsOpportunityStageOnboarding           AwsOpportunityStage = "Onboarding"
	AwsOpportunityStageBuildingIntegration  AwsOpportunityStage = "Building Integration"
	AwsOpportunityStageQualified            AwsOpportunityStage = "Qualified"
	AwsOpportunityStageOnHold               AwsOpportunityStage = "On-hold"
	AwsOpportunityStageTechnicalValidation  AwsOpportunityStage = "Technical Validation"
	AwsOpportunityStageBusinessValidation   AwsOpportunityStage = "Business Validation"
	AwsOpportunityStageCommitted            AwsOpportunityStage = "Committed"
	AwsOpportunityStageLaunched             AwsOpportunityStage = "Launched"
	AwsOpportunityStageDeferredToPartner    AwsOpportunityStage = "Deferred to Partner"
	AwsOpportunityStageClosedLost           AwsOpportunityStage = "Closed Lost"
	AwsOpportunityStageCompleted            AwsOpportunityStage = "Completed"
	AwsOpportunityStageClosedIncomplete     AwsOpportunityStage = "Closed Incomplete"
)

// Values returns all known values for AwsOpportunityStage. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AwsOpportunityStage) Values() []AwsOpportunityStage {
	return []AwsOpportunityStage{
		"Not Started",
		"In Progress",
		"Prospect",
		"Engaged",
		"Identified",
		"Qualify",
		"Research",
		"Seller Engaged",
		"Evaluating",
		"Seller Registered",
		"Term Sheet Negotiation",
		"Contract Negotiation",
		"Onboarding",
		"Building Integration",
		"Qualified",
		"On-hold",
		"Technical Validation",
		"Business Validation",
		"Committed",
		"Launched",
		"Deferred to Partner",
		"Closed Lost",
		"Completed",
		"Closed Incomplete",
	}
}

type Channel string

// Enum values for Channel
const (
	ChannelAwsMarketingCentral Channel = "AWS Marketing Central"
	ChannelContentSyndication  Channel = "Content Syndication"
	ChannelDisplay             Channel = "Display"
	ChannelEmail               Channel = "Email"
	ChannelLiveEvent           Channel = "Live Event"
	ChannelOutOfHome           Channel = "Out Of Home (OOH)"
	ChannelPrint               Channel = "Print"
	ChannelSearch              Channel = "Search"
	ChannelSocial              Channel = "Social"
	ChannelTelemarketing       Channel = "Telemarketing"
	ChannelTv                  Channel = "TV"
	ChannelVideo               Channel = "Video"
	ChannelVirtualEvent        Channel = "Virtual Event"
)

// Values returns all known values for Channel. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Channel) Values() []Channel {
	return []Channel{
		"AWS Marketing Central",
		"Content Syndication",
		"Display",
		"Email",
		"Live Event",
		"Out Of Home (OOH)",
		"Print",
		"Search",
		"Social",
		"Telemarketing",
		"TV",
		"Video",
		"Virtual Event",
	}
}

type ClosedLostReason string

// Enum values for ClosedLostReason
const (
	ClosedLostReasonCustomerDeficiency           ClosedLostReason = "Customer Deficiency"
	ClosedLostReasonDelayCancellationOfProject   ClosedLostReason = "Delay / Cancellation of Project"
	ClosedLostReasonLegalTaxRegulatory           ClosedLostReason = "Legal / Tax / Regulatory"
	ClosedLostReasonLostToCompetitorGoogle       ClosedLostReason = "Lost to Competitor - Google"
	ClosedLostReasonLostToCompetitorMicrosoft    ClosedLostReason = "Lost to Competitor - Microsoft"
	ClosedLostReasonLostToCompetitorSoftlayer    ClosedLostReason = "Lost to Competitor - SoftLayer"
	ClosedLostReasonLostToCompetitorVmware       ClosedLostReason = "Lost to Competitor - VMWare"
	ClosedLostReasonLostToCompetitorOther        ClosedLostReason = "Lost to Competitor - Other"
	ClosedLostReasonNoOpportunity                ClosedLostReason = "No Opportunity"
	ClosedLostReasonOnPremisesDeployment         ClosedLostReason = "On Premises Deployment"
	ClosedLostReasonPartnerGap                   ClosedLostReason = "Partner Gap"
	ClosedLostReasonPrice                        ClosedLostReason = "Price"
	ClosedLostReasonSecurityCompliance           ClosedLostReason = "Security / Compliance"
	ClosedLostReasonTechnicalLimitations         ClosedLostReason = "Technical Limitations"
	ClosedLostReasonCustomerExperience           ClosedLostReason = "Customer Experience"
	ClosedLostReasonOther                        ClosedLostReason = "Other"
	ClosedLostReasonPeoplerelationshipgovernance ClosedLostReason = "People/Relationship/Governance"
	ClosedLostReasonProducttechnology            ClosedLostReason = "Product/Technology"
	ClosedLostReasonFinancialcommercial          ClosedLostReason = "Financial/Commercial"
)

// Values returns all known values for ClosedLostReason. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ClosedLostReason) Values() []ClosedLostReason {
	return []ClosedLostReason{
		"Customer Deficiency",
		"Delay / Cancellation of Project",
		"Legal / Tax / Regulatory",
		"Lost to Competitor - Google",
		"Lost to Competitor - Microsoft",
		"Lost to Competitor - SoftLayer",
		"Lost to Competitor - VMWare",
		"Lost to Competitor - Other",
		"No Opportunity",
		"On Premises Deployment",
		"Partner Gap",
		"Price",
		"Security / Compliance",
		"Technical Limitations",
		"Customer Experience",
		"Other",
		"People/Relationship/Governance",
		"Product/Technology",
		"Financial/Commercial",
	}
}

type CompetitorName string

// Enum values for CompetitorName
const (
	CompetitorNameOracleCloud           CompetitorName = "Oracle Cloud"
	CompetitorNameOnPrem                CompetitorName = "On-Prem"
	CompetitorNameCoLocation            CompetitorName = "Co-location"
	CompetitorNameAkamai                CompetitorName = "Akamai"
	CompetitorNameAlicloud              CompetitorName = "AliCloud"
	CompetitorNameGoogleCloudPlatform   CompetitorName = "Google Cloud Platform"
	CompetitorNameIbmSoftlayer          CompetitorName = "IBM Softlayer"
	CompetitorNameMicrosoftAzure        CompetitorName = "Microsoft Azure"
	CompetitorNameOtherCostOptimization CompetitorName = "Other- Cost Optimization"
	CompetitorNameNoCompetition         CompetitorName = "No Competition"
	CompetitorNameOther                 CompetitorName = "*Other"
)

// Values returns all known values for CompetitorName. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CompetitorName) Values() []CompetitorName {
	return []CompetitorName{
		"Oracle Cloud",
		"On-Prem",
		"Co-location",
		"Akamai",
		"AliCloud",
		"Google Cloud Platform",
		"IBM Softlayer",
		"Microsoft Azure",
		"Other- Cost Optimization",
		"No Competition",
		"*Other",
	}
}

type CountryCode string

// Enum values for CountryCode
const (
	CountryCodeUs CountryCode = "US"
	CountryCodeAf CountryCode = "AF"
	CountryCodeAx CountryCode = "AX"
	CountryCodeAl CountryCode = "AL"
	CountryCodeDz CountryCode = "DZ"
	CountryCodeAs CountryCode = "AS"
	CountryCodeAd CountryCode = "AD"
	CountryCodeAo CountryCode = "AO"
	CountryCodeAi CountryCode = "AI"
	CountryCodeAq CountryCode = "AQ"
	CountryCodeAg CountryCode = "AG"
	CountryCodeAr CountryCode = "AR"
	CountryCodeAm CountryCode = "AM"
	CountryCodeAw CountryCode = "AW"
	CountryCodeAu CountryCode = "AU"
	CountryCodeAt CountryCode = "AT"
	CountryCodeAz CountryCode = "AZ"
	CountryCodeBs CountryCode = "BS"
	CountryCodeBh CountryCode = "BH"
	CountryCodeBd CountryCode = "BD"
	CountryCodeBb CountryCode = "BB"
	CountryCodeBy CountryCode = "BY"
	CountryCodeBe CountryCode = "BE"
	CountryCodeBz CountryCode = "BZ"
	CountryCodeBj CountryCode = "BJ"
	CountryCodeBm CountryCode = "BM"
	CountryCodeBt CountryCode = "BT"
	CountryCodeBo CountryCode = "BO"
	CountryCodeBq CountryCode = "BQ"
	CountryCodeBa CountryCode = "BA"
	CountryCodeBw CountryCode = "BW"
	CountryCodeBv CountryCode = "BV"
	CountryCodeBr CountryCode = "BR"
	CountryCodeIo CountryCode = "IO"
	CountryCodeBn CountryCode = "BN"
	CountryCodeBg CountryCode = "BG"
	CountryCodeBf CountryCode = "BF"
	CountryCodeBi CountryCode = "BI"
	CountryCodeKh CountryCode = "KH"
	CountryCodeCm CountryCode = "CM"
	CountryCodeCa CountryCode = "CA"
	CountryCodeCv CountryCode = "CV"
	CountryCodeKy CountryCode = "KY"
	CountryCodeCf CountryCode = "CF"
	CountryCodeTd CountryCode = "TD"
	CountryCodeCl CountryCode = "CL"
	CountryCodeCn CountryCode = "CN"
	CountryCodeCx CountryCode = "CX"
	CountryCodeCc CountryCode = "CC"
	CountryCodeCo CountryCode = "CO"
	CountryCodeKm CountryCode = "KM"
	CountryCodeCg CountryCode = "CG"
	CountryCodeCk CountryCode = "CK"
	CountryCodeCr CountryCode = "CR"
	CountryCodeCi CountryCode = "CI"
	CountryCodeHr CountryCode = "HR"
	CountryCodeCu CountryCode = "CU"
	CountryCodeCw CountryCode = "CW"
	CountryCodeCy CountryCode = "CY"
	CountryCodeCz CountryCode = "CZ"
	CountryCodeCd CountryCode = "CD"
	CountryCodeDk CountryCode = "DK"
	CountryCodeDj CountryCode = "DJ"
	CountryCodeDm CountryCode = "DM"
	CountryCodeDo CountryCode = "DO"
	CountryCodeEc CountryCode = "EC"
	CountryCodeEg CountryCode = "EG"
	CountryCodeSv CountryCode = "SV"
	CountryCodeGq CountryCode = "GQ"
	CountryCodeEr CountryCode = "ER"
	CountryCodeEe CountryCode = "EE"
	CountryCodeEt CountryCode = "ET"
	CountryCodeFk CountryCode = "FK"
	CountryCodeFo CountryCode = "FO"
	CountryCodeFj CountryCode = "FJ"
	CountryCodeFi CountryCode = "FI"
	CountryCodeFr CountryCode = "FR"
	CountryCodeGf CountryCode = "GF"
	CountryCodePf CountryCode = "PF"
	CountryCodeTf CountryCode = "TF"
	CountryCodeGa CountryCode = "GA"
	CountryCodeGm CountryCode = "GM"
	CountryCodeGe CountryCode = "GE"
	CountryCodeDe CountryCode = "DE"
	CountryCodeGh CountryCode = "GH"
	CountryCodeGi CountryCode = "GI"
	CountryCodeGr CountryCode = "GR"
	CountryCodeGl CountryCode = "GL"
	CountryCodeGd CountryCode = "GD"
	CountryCodeGp CountryCode = "GP"
	CountryCodeGu CountryCode = "GU"
	CountryCodeGt CountryCode = "GT"
	CountryCodeGg CountryCode = "GG"
	CountryCodeGn CountryCode = "GN"
	CountryCodeGw CountryCode = "GW"
	CountryCodeGy CountryCode = "GY"
	CountryCodeHt CountryCode = "HT"
	CountryCodeHm CountryCode = "HM"
	CountryCodeVa CountryCode = "VA"
	CountryCodeHn CountryCode = "HN"
	CountryCodeHk CountryCode = "HK"
	CountryCodeHu CountryCode = "HU"
	CountryCodeIs CountryCode = "IS"
	CountryCodeIn CountryCode = "IN"
	CountryCodeId CountryCode = "ID"
	CountryCodeIr CountryCode = "IR"
	CountryCodeIq CountryCode = "IQ"
	CountryCodeIe CountryCode = "IE"
	CountryCodeIm CountryCode = "IM"
	CountryCodeIl CountryCode = "IL"
	CountryCodeIt CountryCode = "IT"
	CountryCodeJm CountryCode = "JM"
	CountryCodeJp CountryCode = "JP"
	CountryCodeJe CountryCode = "JE"
	CountryCodeJo CountryCode = "JO"
	CountryCodeKz CountryCode = "KZ"
	CountryCodeKe CountryCode = "KE"
	CountryCodeKi CountryCode = "KI"
	CountryCodeKr CountryCode = "KR"
	CountryCodeKw CountryCode = "KW"
	CountryCodeKg CountryCode = "KG"
	CountryCodeLa CountryCode = "LA"
	CountryCodeLv CountryCode = "LV"
	CountryCodeLb CountryCode = "LB"
	CountryCodeLs CountryCode = "LS"
	CountryCodeLr CountryCode = "LR"
	CountryCodeLy CountryCode = "LY"
	CountryCodeLi CountryCode = "LI"
	CountryCodeLt CountryCode = "LT"
	CountryCodeLu CountryCode = "LU"
	CountryCodeMo CountryCode = "MO"
	CountryCodeMk CountryCode = "MK"
	CountryCodeMg CountryCode = "MG"
	CountryCodeMw CountryCode = "MW"
	CountryCodeMy CountryCode = "MY"
	CountryCodeMv CountryCode = "MV"
	CountryCodeMl CountryCode = "ML"
	CountryCodeMt CountryCode = "MT"
	CountryCodeMh CountryCode = "MH"
	CountryCodeMq CountryCode = "MQ"
	CountryCodeMr CountryCode = "MR"
	CountryCodeMu CountryCode = "MU"
	CountryCodeYt CountryCode = "YT"
	CountryCodeMx CountryCode = "MX"
	CountryCodeFm CountryCode = "FM"
	CountryCodeMd CountryCode = "MD"
	CountryCodeMc CountryCode = "MC"
	CountryCodeMn CountryCode = "MN"
	CountryCodeMe CountryCode = "ME"
	CountryCodeMs CountryCode = "MS"
	CountryCodeMa CountryCode = "MA"
	CountryCodeMz CountryCode = "MZ"
	CountryCodeMm CountryCode = "MM"
	CountryCodeNa CountryCode = "NA"
	CountryCodeNr CountryCode = "NR"
	CountryCodeNp CountryCode = "NP"
	CountryCodeNl CountryCode = "NL"
	CountryCodeAn CountryCode = "AN"
	CountryCodeNc CountryCode = "NC"
	CountryCodeNz CountryCode = "NZ"
	CountryCodeNi CountryCode = "NI"
	CountryCodeNe CountryCode = "NE"
	CountryCodeNg CountryCode = "NG"
	CountryCodeNu CountryCode = "NU"
	CountryCodeNf CountryCode = "NF"
	CountryCodeMp CountryCode = "MP"
	CountryCodeNo CountryCode = "NO"
	CountryCodeOm CountryCode = "OM"
	CountryCodePk CountryCode = "PK"
	CountryCodePw CountryCode = "PW"
	CountryCodePs CountryCode = "PS"
	CountryCodePa CountryCode = "PA"
	CountryCodePg CountryCode = "PG"
	CountryCodePy CountryCode = "PY"
	CountryCodePe CountryCode = "PE"
	CountryCodePh CountryCode = "PH"
	CountryCodePn CountryCode = "PN"
	CountryCodePl CountryCode = "PL"
	CountryCodePt CountryCode = "PT"
	CountryCodePr CountryCode = "PR"
	CountryCodeQa CountryCode = "QA"
	CountryCodeRe CountryCode = "RE"
	CountryCodeRo CountryCode = "RO"
	CountryCodeRu CountryCode = "RU"
	CountryCodeRw CountryCode = "RW"
	CountryCodeBl CountryCode = "BL"
	CountryCodeSh CountryCode = "SH"
	CountryCodeKn CountryCode = "KN"
	CountryCodeLc CountryCode = "LC"
	CountryCodeMf CountryCode = "MF"
	CountryCodePm CountryCode = "PM"
	CountryCodeVc CountryCode = "VC"
	CountryCodeWs CountryCode = "WS"
	CountryCodeSm CountryCode = "SM"
	CountryCodeSt CountryCode = "ST"
	CountryCodeSa CountryCode = "SA"
	CountryCodeSn CountryCode = "SN"
	CountryCodeRs CountryCode = "RS"
	CountryCodeSc CountryCode = "SC"
	CountryCodeSl CountryCode = "SL"
	CountryCodeSg CountryCode = "SG"
	CountryCodeSx CountryCode = "SX"
	CountryCodeSk CountryCode = "SK"
	CountryCodeSi CountryCode = "SI"
	CountryCodeSb CountryCode = "SB"
	CountryCodeSo CountryCode = "SO"
	CountryCodeZa CountryCode = "ZA"
	CountryCodeGs CountryCode = "GS"
	CountryCodeSs CountryCode = "SS"
	CountryCodeEs CountryCode = "ES"
	CountryCodeLk CountryCode = "LK"
	CountryCodeSd CountryCode = "SD"
	CountryCodeSr CountryCode = "SR"
	CountryCodeSj CountryCode = "SJ"
	CountryCodeSz CountryCode = "SZ"
	CountryCodeSe CountryCode = "SE"
	CountryCodeCh CountryCode = "CH"
	CountryCodeSy CountryCode = "SY"
	CountryCodeTw CountryCode = "TW"
	CountryCodeTj CountryCode = "TJ"
	CountryCodeTz CountryCode = "TZ"
	CountryCodeTh CountryCode = "TH"
	CountryCodeTl CountryCode = "TL"
	CountryCodeTg CountryCode = "TG"
	CountryCodeTk CountryCode = "TK"
	CountryCodeTo CountryCode = "TO"
	CountryCodeTt CountryCode = "TT"
	CountryCodeTn CountryCode = "TN"
	CountryCodeTr CountryCode = "TR"
	CountryCodeTm CountryCode = "TM"
	CountryCodeTc CountryCode = "TC"
	CountryCodeTv CountryCode = "TV"
	CountryCodeUg CountryCode = "UG"
	CountryCodeUa CountryCode = "UA"
	CountryCodeAe CountryCode = "AE"
	CountryCodeGb CountryCode = "GB"
	CountryCodeUm CountryCode = "UM"
	CountryCodeUy CountryCode = "UY"
	CountryCodeUz CountryCode = "UZ"
	CountryCodeVu CountryCode = "VU"
	CountryCodeVe CountryCode = "VE"
	CountryCodeVn CountryCode = "VN"
	CountryCodeVg CountryCode = "VG"
	CountryCodeVi CountryCode = "VI"
	CountryCodeWf CountryCode = "WF"
	CountryCodeEh CountryCode = "EH"
	CountryCodeYe CountryCode = "YE"
	CountryCodeZm CountryCode = "ZM"
	CountryCodeZw CountryCode = "ZW"
)

// Values returns all known values for CountryCode. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CountryCode) Values() []CountryCode {
	return []CountryCode{
		"US",
		"AF",
		"AX",
		"AL",
		"DZ",
		"AS",
		"AD",
		"AO",
		"AI",
		"AQ",
		"AG",
		"AR",
		"AM",
		"AW",
		"AU",
		"AT",
		"AZ",
		"BS",
		"BH",
		"BD",
		"BB",
		"BY",
		"BE",
		"BZ",
		"BJ",
		"BM",
		"BT",
		"BO",
		"BQ",
		"BA",
		"BW",
		"BV",
		"BR",
		"IO",
		"BN",
		"BG",
		"BF",
		"BI",
		"KH",
		"CM",
		"CA",
		"CV",
		"KY",
		"CF",
		"TD",
		"CL",
		"CN",
		"CX",
		"CC",
		"CO",
		"KM",
		"CG",
		"CK",
		"CR",
		"CI",
		"HR",
		"CU",
		"CW",
		"CY",
		"CZ",
		"CD",
		"DK",
		"DJ",
		"DM",
		"DO",
		"EC",
		"EG",
		"SV",
		"GQ",
		"ER",
		"EE",
		"ET",
		"FK",
		"FO",
		"FJ",
		"FI",
		"FR",
		"GF",
		"PF",
		"TF",
		"GA",
		"GM",
		"GE",
		"DE",
		"GH",
		"GI",
		"GR",
		"GL",
		"GD",
		"GP",
		"GU",
		"GT",
		"GG",
		"GN",
		"GW",
		"GY",
		"HT",
		"HM",
		"VA",
		"HN",
		"HK",
		"HU",
		"IS",
		"IN",
		"ID",
		"IR",
		"IQ",
		"IE",
		"IM",
		"IL",
		"IT",
		"JM",
		"JP",
		"JE",
		"JO",
		"KZ",
		"KE",
		"KI",
		"KR",
		"KW",
		"KG",
		"LA",
		"LV",
		"LB",
		"LS",
		"LR",
		"LY",
		"LI",
		"LT",
		"LU",
		"MO",
		"MK",
		"MG",
		"MW",
		"MY",
		"MV",
		"ML",
		"MT",
		"MH",
		"MQ",
		"MR",
		"MU",
		"YT",
		"MX",
		"FM",
		"MD",
		"MC",
		"MN",
		"ME",
		"MS",
		"MA",
		"MZ",
		"MM",
		"NA",
		"NR",
		"NP",
		"NL",
		"AN",
		"NC",
		"NZ",
		"NI",
		"NE",
		"NG",
		"NU",
		"NF",
		"MP",
		"NO",
		"OM",
		"PK",
		"PW",
		"PS",
		"PA",
		"PG",
		"PY",
		"PE",
		"PH",
		"PN",
		"PL",
		"PT",
		"PR",
		"QA",
		"RE",
		"RO",
		"RU",
		"RW",
		"BL",
		"SH",
		"KN",
		"LC",
		"MF",
		"PM",
		"VC",
		"WS",
		"SM",
		"ST",
		"SA",
		"SN",
		"RS",
		"SC",
		"SL",
		"SG",
		"SX",
		"SK",
		"SI",
		"SB",
		"SO",
		"ZA",
		"GS",
		"SS",
		"ES",
		"LK",
		"SD",
		"SR",
		"SJ",
		"SZ",
		"SE",
		"CH",
		"SY",
		"TW",
		"TJ",
		"TZ",
		"TH",
		"TL",
		"TG",
		"TK",
		"TO",
		"TT",
		"TN",
		"TR",
		"TM",
		"TC",
		"TV",
		"UG",
		"UA",
		"AE",
		"GB",
		"UM",
		"UY",
		"UZ",
		"VU",
		"VE",
		"VN",
		"VG",
		"VI",
		"WF",
		"EH",
		"YE",
		"ZM",
		"ZW",
	}
}

type CurrencyCode string

// Enum values for CurrencyCode
const (
	CurrencyCodeUsd CurrencyCode = "USD"
	CurrencyCodeEur CurrencyCode = "EUR"
	CurrencyCodeGbp CurrencyCode = "GBP"
	CurrencyCodeAud CurrencyCode = "AUD"
	CurrencyCodeCad CurrencyCode = "CAD"
	CurrencyCodeCny CurrencyCode = "CNY"
	CurrencyCodeNzd CurrencyCode = "NZD"
	CurrencyCodeInr CurrencyCode = "INR"
	CurrencyCodeJpy CurrencyCode = "JPY"
	CurrencyCodeChf CurrencyCode = "CHF"
	CurrencyCodeSek CurrencyCode = "SEK"
	CurrencyCodeAed CurrencyCode = "AED"
	CurrencyCodeAfn CurrencyCode = "AFN"
	CurrencyCodeAll CurrencyCode = "ALL"
	CurrencyCodeAmd CurrencyCode = "AMD"
	CurrencyCodeAng CurrencyCode = "ANG"
	CurrencyCodeAoa CurrencyCode = "AOA"
	CurrencyCodeArs CurrencyCode = "ARS"
	CurrencyCodeAwg CurrencyCode = "AWG"
	CurrencyCodeAzn CurrencyCode = "AZN"
	CurrencyCodeBam CurrencyCode = "BAM"
	CurrencyCodeBbd CurrencyCode = "BBD"
	CurrencyCodeBdt CurrencyCode = "BDT"
	CurrencyCodeBgn CurrencyCode = "BGN"
	CurrencyCodeBhd CurrencyCode = "BHD"
	CurrencyCodeBif CurrencyCode = "BIF"
	CurrencyCodeBmd CurrencyCode = "BMD"
	CurrencyCodeBnd CurrencyCode = "BND"
	CurrencyCodeBob CurrencyCode = "BOB"
	CurrencyCodeBov CurrencyCode = "BOV"
	CurrencyCodeBrl CurrencyCode = "BRL"
	CurrencyCodeBsd CurrencyCode = "BSD"
	CurrencyCodeBtn CurrencyCode = "BTN"
	CurrencyCodeBwp CurrencyCode = "BWP"
	CurrencyCodeByn CurrencyCode = "BYN"
	CurrencyCodeBzd CurrencyCode = "BZD"
	CurrencyCodeCdf CurrencyCode = "CDF"
	CurrencyCodeChe CurrencyCode = "CHE"
	CurrencyCodeChw CurrencyCode = "CHW"
	CurrencyCodeClf CurrencyCode = "CLF"
	CurrencyCodeClp CurrencyCode = "CLP"
	CurrencyCodeCop CurrencyCode = "COP"
	CurrencyCodeCou CurrencyCode = "COU"
	CurrencyCodeCrc CurrencyCode = "CRC"
	CurrencyCodeCuc CurrencyCode = "CUC"
	CurrencyCodeCup CurrencyCode = "CUP"
	CurrencyCodeCve CurrencyCode = "CVE"
	CurrencyCodeCzk CurrencyCode = "CZK"
	CurrencyCodeDjf CurrencyCode = "DJF"
	CurrencyCodeDkk CurrencyCode = "DKK"
	CurrencyCodeDop CurrencyCode = "DOP"
	CurrencyCodeDzd CurrencyCode = "DZD"
	CurrencyCodeEgp CurrencyCode = "EGP"
	CurrencyCodeErn CurrencyCode = "ERN"
	CurrencyCodeEtb CurrencyCode = "ETB"
	CurrencyCodeFjd CurrencyCode = "FJD"
	CurrencyCodeFkp CurrencyCode = "FKP"
	CurrencyCodeGel CurrencyCode = "GEL"
	CurrencyCodeGhs CurrencyCode = "GHS"
	CurrencyCodeGip CurrencyCode = "GIP"
	CurrencyCodeGmd CurrencyCode = "GMD"
	CurrencyCodeGnf CurrencyCode = "GNF"
	CurrencyCodeGtq CurrencyCode = "GTQ"
	CurrencyCodeGyd CurrencyCode = "GYD"
	CurrencyCodeHkd CurrencyCode = "HKD"
	CurrencyCodeHnl CurrencyCode = "HNL"
	CurrencyCodeHrk CurrencyCode = "HRK"
	CurrencyCodeHtg CurrencyCode = "HTG"
	CurrencyCodeHuf CurrencyCode = "HUF"
	CurrencyCodeIdr CurrencyCode = "IDR"
	CurrencyCodeIls CurrencyCode = "ILS"
	CurrencyCodeIqd CurrencyCode = "IQD"
	CurrencyCodeIrr CurrencyCode = "IRR"
	CurrencyCodeIsk CurrencyCode = "ISK"
	CurrencyCodeJmd CurrencyCode = "JMD"
	CurrencyCodeJod CurrencyCode = "JOD"
	CurrencyCodeKes CurrencyCode = "KES"
	CurrencyCodeKgs CurrencyCode = "KGS"
	CurrencyCodeKhr CurrencyCode = "KHR"
	CurrencyCodeKmf CurrencyCode = "KMF"
	CurrencyCodeKpw CurrencyCode = "KPW"
	CurrencyCodeKrw CurrencyCode = "KRW"
	CurrencyCodeKwd CurrencyCode = "KWD"
	CurrencyCodeKyd CurrencyCode = "KYD"
	CurrencyCodeKzt CurrencyCode = "KZT"
	CurrencyCodeLak CurrencyCode = "LAK"
	CurrencyCodeLbp CurrencyCode = "LBP"
	CurrencyCodeLkr CurrencyCode = "LKR"
	CurrencyCodeLrd CurrencyCode = "LRD"
	CurrencyCodeLsl CurrencyCode = "LSL"
	CurrencyCodeLyd CurrencyCode = "LYD"
	CurrencyCodeMad CurrencyCode = "MAD"
	CurrencyCodeMdl CurrencyCode = "MDL"
	CurrencyCodeMga CurrencyCode = "MGA"
	CurrencyCodeMkd CurrencyCode = "MKD"
	CurrencyCodeMmk CurrencyCode = "MMK"
	CurrencyCodeMnt CurrencyCode = "MNT"
	CurrencyCodeMop CurrencyCode = "MOP"
	CurrencyCodeMru CurrencyCode = "MRU"
	CurrencyCodeMur CurrencyCode = "MUR"
	CurrencyCodeMvr CurrencyCode = "MVR"
	CurrencyCodeMwk CurrencyCode = "MWK"
	CurrencyCodeMxn CurrencyCode = "MXN"
	CurrencyCodeMxv CurrencyCode = "MXV"
	CurrencyCodeMyr CurrencyCode = "MYR"
	CurrencyCodeMzn CurrencyCode = "MZN"
	CurrencyCodeNad CurrencyCode = "NAD"
	CurrencyCodeNgn CurrencyCode = "NGN"
	CurrencyCodeNio CurrencyCode = "NIO"
	CurrencyCodeNok CurrencyCode = "NOK"
	CurrencyCodeNpr CurrencyCode = "NPR"
	CurrencyCodeOmr CurrencyCode = "OMR"
	CurrencyCodePab CurrencyCode = "PAB"
	CurrencyCodePen CurrencyCode = "PEN"
	CurrencyCodePgk CurrencyCode = "PGK"
	CurrencyCodePhp CurrencyCode = "PHP"
	CurrencyCodePkr CurrencyCode = "PKR"
	CurrencyCodePln CurrencyCode = "PLN"
	CurrencyCodePyg CurrencyCode = "PYG"
	CurrencyCodeQar CurrencyCode = "QAR"
	CurrencyCodeRon CurrencyCode = "RON"
	CurrencyCodeRsd CurrencyCode = "RSD"
	CurrencyCodeRub CurrencyCode = "RUB"
	CurrencyCodeRwf CurrencyCode = "RWF"
	CurrencyCodeSar CurrencyCode = "SAR"
	CurrencyCodeSbd CurrencyCode = "SBD"
	CurrencyCodeScr CurrencyCode = "SCR"
	CurrencyCodeSdg CurrencyCode = "SDG"
	CurrencyCodeSgd CurrencyCode = "SGD"
	CurrencyCodeShp CurrencyCode = "SHP"
	CurrencyCodeSll CurrencyCode = "SLL"
	CurrencyCodeSos CurrencyCode = "SOS"
	CurrencyCodeSrd CurrencyCode = "SRD"
	CurrencyCodeSsp CurrencyCode = "SSP"
	CurrencyCodeStn CurrencyCode = "STN"
	CurrencyCodeSvc CurrencyCode = "SVC"
	CurrencyCodeSyp CurrencyCode = "SYP"
	CurrencyCodeSzl CurrencyCode = "SZL"
	CurrencyCodeThb CurrencyCode = "THB"
	CurrencyCodeTjs CurrencyCode = "TJS"
	CurrencyCodeTmt CurrencyCode = "TMT"
	CurrencyCodeTnd CurrencyCode = "TND"
	CurrencyCodeTop CurrencyCode = "TOP"
	CurrencyCodeTry CurrencyCode = "TRY"
	CurrencyCodeTtd CurrencyCode = "TTD"
	CurrencyCodeTwd CurrencyCode = "TWD"
	CurrencyCodeTzs CurrencyCode = "TZS"
	CurrencyCodeUah CurrencyCode = "UAH"
	CurrencyCodeUgx CurrencyCode = "UGX"
	CurrencyCodeUsn CurrencyCode = "USN"
	CurrencyCodeUyi CurrencyCode = "UYI"
	CurrencyCodeUyu CurrencyCode = "UYU"
	CurrencyCodeUzs CurrencyCode = "UZS"
	CurrencyCodeVef CurrencyCode = "VEF"
	CurrencyCodeVnd CurrencyCode = "VND"
	CurrencyCodeVuv CurrencyCode = "VUV"
	CurrencyCodeWst CurrencyCode = "WST"
	CurrencyCodeXaf CurrencyCode = "XAF"
	CurrencyCodeXcd CurrencyCode = "XCD"
	CurrencyCodeXdr CurrencyCode = "XDR"
	CurrencyCodeXof CurrencyCode = "XOF"
	CurrencyCodeXpf CurrencyCode = "XPF"
	CurrencyCodeXsu CurrencyCode = "XSU"
	CurrencyCodeXua CurrencyCode = "XUA"
	CurrencyCodeYer CurrencyCode = "YER"
	CurrencyCodeZar CurrencyCode = "ZAR"
	CurrencyCodeZmw CurrencyCode = "ZMW"
	CurrencyCodeZwl CurrencyCode = "ZWL"
)

// Values returns all known values for CurrencyCode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CurrencyCode) Values() []CurrencyCode {
	return []CurrencyCode{
		"USD",
		"EUR",
		"GBP",
		"AUD",
		"CAD",
		"CNY",
		"NZD",
		"INR",
		"JPY",
		"CHF",
		"SEK",
		"AED",
		"AFN",
		"ALL",
		"AMD",
		"ANG",
		"AOA",
		"ARS",
		"AWG",
		"AZN",
		"BAM",
		"BBD",
		"BDT",
		"BGN",
		"BHD",
		"BIF",
		"BMD",
		"BND",
		"BOB",
		"BOV",
		"BRL",
		"BSD",
		"BTN",
		"BWP",
		"BYN",
		"BZD",
		"CDF",
		"CHE",
		"CHW",
		"CLF",
		"CLP",
		"COP",
		"COU",
		"CRC",
		"CUC",
		"CUP",
		"CVE",
		"CZK",
		"DJF",
		"DKK",
		"DOP",
		"DZD",
		"EGP",
		"ERN",
		"ETB",
		"FJD",
		"FKP",
		"GEL",
		"GHS",
		"GIP",
		"GMD",
		"GNF",
		"GTQ",
		"GYD",
		"HKD",
		"HNL",
		"HRK",
		"HTG",
		"HUF",
		"IDR",
		"ILS",
		"IQD",
		"IRR",
		"ISK",
		"JMD",
		"JOD",
		"KES",
		"KGS",
		"KHR",
		"KMF",
		"KPW",
		"KRW",
		"KWD",
		"KYD",
		"KZT",
		"LAK",
		"LBP",
		"LKR",
		"LRD",
		"LSL",
		"LYD",
		"MAD",
		"MDL",
		"MGA",
		"MKD",
		"MMK",
		"MNT",
		"MOP",
		"MRU",
		"MUR",
		"MVR",
		"MWK",
		"MXN",
		"MXV",
		"MYR",
		"MZN",
		"NAD",
		"NGN",
		"NIO",
		"NOK",
		"NPR",
		"OMR",
		"PAB",
		"PEN",
		"PGK",
		"PHP",
		"PKR",
		"PLN",
		"PYG",
		"QAR",
		"RON",
		"RSD",
		"RUB",
		"RWF",
		"SAR",
		"SBD",
		"SCR",
		"SDG",
		"SGD",
		"SHP",
		"SLL",
		"SOS",
		"SRD",
		"SSP",
		"STN",
		"SVC",
		"SYP",
		"SZL",
		"THB",
		"TJS",
		"TMT",
		"TND",
		"TOP",
		"TRY",
		"TTD",
		"TWD",
		"TZS",
		"UAH",
		"UGX",
		"USN",
		"UYI",
		"UYU",
		"UZS",
		"VEF",
		"VND",
		"VUV",
		"WST",
		"XAF",
		"XCD",
		"XDR",
		"XOF",
		"XPF",
		"XSU",
		"XUA",
		"YER",
		"ZAR",
		"ZMW",
		"ZWL",
	}
}

type DeliveryModel string

// Enum values for DeliveryModel
const (
	DeliveryModelSaasOrPaas           DeliveryModel = "SaaS or PaaS"
	DeliveryModelByolOrAmi            DeliveryModel = "BYOL or AMI"
	DeliveryModelManagedServices      DeliveryModel = "Managed Services"
	DeliveryModelProfessionalServices DeliveryModel = "Professional Services"
	DeliveryModelResell               DeliveryModel = "Resell"
	DeliveryModelOther                DeliveryModel = "Other"
)

// Values returns all known values for DeliveryModel. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DeliveryModel) Values() []DeliveryModel {
	return []DeliveryModel{
		"SaaS or PaaS",
		"BYOL or AMI",
		"Managed Services",
		"Professional Services",
		"Resell",
		"Other",
	}
}

type EngagementContextType string

// Enum values for EngagementContextType
const (
	EngagementContextTypeCustomerProject EngagementContextType = "CustomerProject"
)

// Values returns all known values for EngagementContextType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EngagementContextType) Values() []EngagementContextType {
	return []EngagementContextType{
		"CustomerProject",
	}
}

type EngagementInvitationPayloadType string

// Enum values for EngagementInvitationPayloadType
const (
	EngagementInvitationPayloadTypeOpportunityInvitation EngagementInvitationPayloadType = "OpportunityInvitation"
)

// Values returns all known values for EngagementInvitationPayloadType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EngagementInvitationPayloadType) Values() []EngagementInvitationPayloadType {
	return []EngagementInvitationPayloadType{
		"OpportunityInvitation",
	}
}

type EngagementScore string

// Enum values for EngagementScore
const (
	EngagementScoreHigh   EngagementScore = "High"
	EngagementScoreMedium EngagementScore = "Medium"
	EngagementScoreLow    EngagementScore = "Low"
)

// Values returns all known values for EngagementScore. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EngagementScore) Values() []EngagementScore {
	return []EngagementScore{
		"High",
		"Medium",
		"Low",
	}
}

type EngagementSortName string

// Enum values for EngagementSortName
const (
	EngagementSortNameCreatedDate EngagementSortName = "CreatedDate"
)

// Values returns all known values for EngagementSortName. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EngagementSortName) Values() []EngagementSortName {
	return []EngagementSortName{
		"CreatedDate",
	}
}

type Industry string

// Enum values for Industry
const (
	IndustryAerospaceSatellite      Industry = "Aerospace"
	IndustryAgriculture             Industry = "Agriculture"
	IndustryAutomotive              Industry = "Automotive"
	IndustryComputersElectronics    Industry = "Computers and Electronics"
	IndustryConsumerGoods           Industry = "Consumer Goods"
	IndustryEducation               Industry = "Education"
	IndustryEnergyOilGas            Industry = "Energy - Oil and Gas"
	IndustryEnergyPowerUtilities    Industry = "Energy - Power and Utilities"
	IndustryFinancialServices       Industry = "Financial Services"
	IndustryGaming                  Industry = "Gaming"
	IndustryGovernment              Industry = "Government"
	IndustryHealthcare              Industry = "Healthcare"
	IndustryHospitality             Industry = "Hospitality"
	IndustryLifeSciences            Industry = "Life Sciences"
	IndustryManufacturing           Industry = "Manufacturing"
	IndustryMarketingAdvertising    Industry = "Marketing and Advertising"
	IndustryMediaEntertainment      Industry = "Media and Entertainment"
	IndustryMining                  Industry = "Mining"
	IndustryNonProfitOrganization   Industry = "Non-Profit Organization"
	IndustryProfessionalServices    Industry = "Professional Services"
	IndustryRealestateConstruction  Industry = "Real Estate and Construction"
	IndustryRetail                  Industry = "Retail"
	IndustrySoftwareInternet        Industry = "Software and Internet"
	IndustryTelecommunications      Industry = "Telecommunications"
	IndustryTransportationLogistics Industry = "Transportation and Logistics"
	IndustryTravel                  Industry = "Travel"
	IndustryWholesaleDistribution   Industry = "Wholesale and Distribution"
	IndustryOther                   Industry = "Other"
)

// Values returns all known values for Industry. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Industry) Values() []Industry {
	return []Industry{
		"Aerospace",
		"Agriculture",
		"Automotive",
		"Computers and Electronics",
		"Consumer Goods",
		"Education",
		"Energy - Oil and Gas",
		"Energy - Power and Utilities",
		"Financial Services",
		"Gaming",
		"Government",
		"Healthcare",
		"Hospitality",
		"Life Sciences",
		"Manufacturing",
		"Marketing and Advertising",
		"Media and Entertainment",
		"Mining",
		"Non-Profit Organization",
		"Professional Services",
		"Real Estate and Construction",
		"Retail",
		"Software and Internet",
		"Telecommunications",
		"Transportation and Logistics",
		"Travel",
		"Wholesale and Distribution",
		"Other",
	}
}

type InvitationStatus string

// Enum values for InvitationStatus
const (
	InvitationStatusAccepted InvitationStatus = "ACCEPTED"
	InvitationStatusPending  InvitationStatus = "PENDING"
	InvitationStatusRejected InvitationStatus = "REJECTED"
	InvitationStatusExpired  InvitationStatus = "EXPIRED"
)

// Values returns all known values for InvitationStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InvitationStatus) Values() []InvitationStatus {
	return []InvitationStatus{
		"ACCEPTED",
		"PENDING",
		"REJECTED",
		"EXPIRED",
	}
}

type InvolvementTypeChangeReason string

// Enum values for InvolvementTypeChangeReason
const (
	InvolvementTypeChangeReasonExpansionOpportunity    InvolvementTypeChangeReason = "Expansion Opportunity"
	InvolvementTypeChangeReasonChangeInDealInformation InvolvementTypeChangeReason = "Change in Deal Information"
	InvolvementTypeChangeReasonCustomerRequested       InvolvementTypeChangeReason = "Customer Requested"
	InvolvementTypeChangeReasonTechnicalComplexity     InvolvementTypeChangeReason = "Technical Complexity"
	InvolvementTypeChangeReasonRiskMitigation          InvolvementTypeChangeReason = "Risk Mitigation"
)

// Values returns all known values for InvolvementTypeChangeReason. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InvolvementTypeChangeReason) Values() []InvolvementTypeChangeReason {
	return []InvolvementTypeChangeReason{
		"Expansion Opportunity",
		"Change in Deal Information",
		"Customer Requested",
		"Technical Complexity",
		"Risk Mitigation",
	}
}

type ListTasksSortName string

// Enum values for ListTasksSortName
const (
	ListTasksSortNameStartTime ListTasksSortName = "StartTime"
)

// Values returns all known values for ListTasksSortName. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ListTasksSortName) Values() []ListTasksSortName {
	return []ListTasksSortName{
		"StartTime",
	}
}

type MarketingSource string

// Enum values for MarketingSource
const (
	MarketingSourceMarketingActivity MarketingSource = "Marketing Activity"
	MarketingSourceNone              MarketingSource = "None"
)

// Values returns all known values for MarketingSource. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MarketingSource) Values() []MarketingSource {
	return []MarketingSource{
		"Marketing Activity",
		"None",
	}
}

type NationalSecurity string

// Enum values for NationalSecurity
const (
	NationalSecurityYes NationalSecurity = "Yes"
	NationalSecurityNo  NationalSecurity = "No"
)

// Values returns all known values for NationalSecurity. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NationalSecurity) Values() []NationalSecurity {
	return []NationalSecurity{
		"Yes",
		"No",
	}
}

type OpportunityEngagementInvitationSortName string

// Enum values for OpportunityEngagementInvitationSortName
const (
	OpportunityEngagementInvitationSortNameInvitationDate OpportunityEngagementInvitationSortName = "InvitationDate"
)

// Values returns all known values for OpportunityEngagementInvitationSortName.
// Note that this can be expanded in the future, and so it is only as up to date as
// the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (OpportunityEngagementInvitationSortName) Values() []OpportunityEngagementInvitationSortName {
	return []OpportunityEngagementInvitationSortName{
		"InvitationDate",
	}
}

type OpportunityOrigin string

// Enum values for OpportunityOrigin
const (
	OpportunityOriginAwsReferral     OpportunityOrigin = "AWS Referral"
	OpportunityOriginPartnerReferral OpportunityOrigin = "Partner Referral"
)

// Values returns all known values for OpportunityOrigin. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (OpportunityOrigin) Values() []OpportunityOrigin {
	return []OpportunityOrigin{
		"AWS Referral",
		"Partner Referral",
	}
}

type OpportunitySortName string

// Enum values for OpportunitySortName
const (
	OpportunitySortNameLastModifieddate    OpportunitySortName = "LastModifiedDate"
	OpportunitySortNameIdentifier          OpportunitySortName = "Identifier"
	OpportunitySortNameCustomerCompanyName OpportunitySortName = "CustomerCompanyName"
)

// Values returns all known values for OpportunitySortName. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (OpportunitySortName) Values() []OpportunitySortName {
	return []OpportunitySortName{
		"LastModifiedDate",
		"Identifier",
		"CustomerCompanyName",
	}
}

type OpportunityType string

// Enum values for OpportunityType
const (
	OpportunityTypeNetNewBusiness OpportunityType = "Net New Business"
	OpportunityTypeFlatRenewal    OpportunityType = "Flat Renewal"
	OpportunityTypeExpansion      OpportunityType = "Expansion"
)

// Values returns all known values for OpportunityType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (OpportunityType) Values() []OpportunityType {
	return []OpportunityType{
		"Net New Business",
		"Flat Renewal",
		"Expansion",
	}
}

type ParticipantType string

// Enum values for ParticipantType
const (
	ParticipantTypeSender   ParticipantType = "SENDER"
	ParticipantTypeReceiver ParticipantType = "RECEIVER"
)

// Values returns all known values for ParticipantType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ParticipantType) Values() []ParticipantType {
	return []ParticipantType{
		"SENDER",
		"RECEIVER",
	}
}

type PaymentFrequency string

// Enum values for PaymentFrequency
const (
	PaymentFrequencyMonthly PaymentFrequency = "Monthly"
)

// Values returns all known values for PaymentFrequency. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PaymentFrequency) Values() []PaymentFrequency {
	return []PaymentFrequency{
		"Monthly",
	}
}

type PrimaryNeedFromAws string

// Enum values for PrimaryNeedFromAws
const (
	PrimaryNeedFromAwsCoSellArchitecturalValidation        PrimaryNeedFromAws = "Co-Sell - Architectural Validation"
	PrimaryNeedFromAwsCoSellBusinessPresentation           PrimaryNeedFromAws = "Co-Sell - Business Presentation"
	PrimaryNeedFromAwsCoSellCompetitiveInformation         PrimaryNeedFromAws = "Co-Sell - Competitive Information"
	PrimaryNeedFromAwsCoSellPricingAssistance              PrimaryNeedFromAws = "Co-Sell - Pricing Assistance"
	PrimaryNeedFromAwsCoSellTechnicalConsultation          PrimaryNeedFromAws = "Co-Sell - Technical Consultation"
	PrimaryNeedFromAwsCoSellTotalCostOfOwnershipEvaluation PrimaryNeedFromAws = "Co-Sell - Total Cost of Ownership Evaluation"
	PrimaryNeedFromAwsCoSellDealSupport                    PrimaryNeedFromAws = "Co-Sell - Deal Support"
	PrimaryNeedFromAwsCoSellSupportForPublicTenderRfx      PrimaryNeedFromAws = "Co-Sell - Support for Public Tender / RFx"
)

// Values returns all known values for PrimaryNeedFromAws. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PrimaryNeedFromAws) Values() []PrimaryNeedFromAws {
	return []PrimaryNeedFromAws{
		"Co-Sell - Architectural Validation",
		"Co-Sell - Business Presentation",
		"Co-Sell - Competitive Information",
		"Co-Sell - Pricing Assistance",
		"Co-Sell - Technical Consultation",
		"Co-Sell - Total Cost of Ownership Evaluation",
		"Co-Sell - Deal Support",
		"Co-Sell - Support for Public Tender / RFx",
	}
}

type ReasonCode string

// Enum values for ReasonCode
const (
	ReasonCodeInvitationAccessDenied              ReasonCode = "InvitationAccessDenied"
	ReasonCodeInvitationValidationFailed          ReasonCode = "InvitationValidationFailed"
	ReasonCodeEngagementAccessDenied              ReasonCode = "EngagementAccessDenied"
	ReasonCodeOpportunityAccessDenied             ReasonCode = "OpportunityAccessDenied"
	ReasonCodeResourceSnapshotJobAccessDenied     ReasonCode = "ResourceSnapshotJobAccessDenied"
	ReasonCodeResourceSnapshotJobValidationFailed ReasonCode = "ResourceSnapshotJobValidationFailed"
	ReasonCodeResourceSnapshotJobConflict         ReasonCode = "ResourceSnapshotJobConflict"
	ReasonCodeEngagementValidationFailed          ReasonCode = "EngagementValidationFailed"
	ReasonCodeEngagementConflict                  ReasonCode = "EngagementConflict"
	ReasonCodeOpportunitySubmissionFailed         ReasonCode = "OpportunitySubmissionFailed"
	ReasonCodeEngagementInvitationConflict        ReasonCode = "EngagementInvitationConflict"
	ReasonCodeInternalError                       ReasonCode = "InternalError"
	ReasonCodeOpportunityValidationFailed         ReasonCode = "OpportunityValidationFailed"
	ReasonCodeOpportunityConflict                 ReasonCode = "OpportunityConflict"
	ReasonCodeResourceSnapshotAccessDenied        ReasonCode = "ResourceSnapshotAccessDenied"
	ReasonCodeResourceSnapshotValidationFailed    ReasonCode = "ResourceSnapshotValidationFailed"
	ReasonCodeResourceSnapshotConflict            ReasonCode = "ResourceSnapshotConflict"
	ReasonCodeServiceQuotaExceeded                ReasonCode = "ServiceQuotaExceeded"
	ReasonCodeRequestThrottled                    ReasonCode = "RequestThrottled"
)

// Values returns all known values for ReasonCode. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ReasonCode) Values() []ReasonCode {
	return []ReasonCode{
		"InvitationAccessDenied",
		"InvitationValidationFailed",
		"EngagementAccessDenied",
		"OpportunityAccessDenied",
		"ResourceSnapshotJobAccessDenied",
		"ResourceSnapshotJobValidationFailed",
		"ResourceSnapshotJobConflict",
		"EngagementValidationFailed",
		"EngagementConflict",
		"OpportunitySubmissionFailed",
		"EngagementInvitationConflict",
		"InternalError",
		"OpportunityValidationFailed",
		"OpportunityConflict",
		"ResourceSnapshotAccessDenied",
		"ResourceSnapshotValidationFailed",
		"ResourceSnapshotConflict",
		"ServiceQuotaExceeded",
		"RequestThrottled",
	}
}

type ReceiverResponsibility string

// Enum values for ReceiverResponsibility
const (
	ReceiverResponsibilityDistributor            ReceiverResponsibility = "Distributor"
	ReceiverResponsibilityReseller               ReceiverResponsibility = "Reseller"
	ReceiverResponsibilityHardwarePartner        ReceiverResponsibility = "Hardware Partner"
	ReceiverResponsibilityManagedServiceProvider ReceiverResponsibility = "Managed Service Provider"
	ReceiverResponsibilitySoftwarePartner        ReceiverResponsibility = "Software Partner"
	ReceiverResponsibilityServicesPartner        ReceiverResponsibility = "Services Partner"
	ReceiverResponsibilityTrainingPartner        ReceiverResponsibility = "Training Partner"
	ReceiverResponsibilityCoSellFacilitator      ReceiverResponsibility = "Co-Sell Facilitator"
	ReceiverResponsibilityFacilitator            ReceiverResponsibility = "Facilitator"
)

// Values returns all known values for ReceiverResponsibility. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ReceiverResponsibility) Values() []ReceiverResponsibility {
	return []ReceiverResponsibility{
		"Distributor",
		"Reseller",
		"Hardware Partner",
		"Managed Service Provider",
		"Software Partner",
		"Services Partner",
		"Training Partner",
		"Co-Sell Facilitator",
		"Facilitator",
	}
}

type RelatedEntityType string

// Enum values for RelatedEntityType
const (
	RelatedEntityTypeSolutions            RelatedEntityType = "Solutions"
	RelatedEntityTypeAwsProducts          RelatedEntityType = "AwsProducts"
	RelatedEntityTypeAwsMarketplaceOffers RelatedEntityType = "AwsMarketplaceOffers"
)

// Values returns all known values for RelatedEntityType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RelatedEntityType) Values() []RelatedEntityType {
	return []RelatedEntityType{
		"Solutions",
		"AwsProducts",
		"AwsMarketplaceOffers",
	}
}

type ResourceSnapshotJobStatus string

// Enum values for ResourceSnapshotJobStatus
const (
	ResourceSnapshotJobStatusRunning ResourceSnapshotJobStatus = "Running"
	ResourceSnapshotJobStatusStopped ResourceSnapshotJobStatus = "Stopped"
)

// Values returns all known values for ResourceSnapshotJobStatus. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ResourceSnapshotJobStatus) Values() []ResourceSnapshotJobStatus {
	return []ResourceSnapshotJobStatus{
		"Running",
		"Stopped",
	}
}

type ResourceType string

// Enum values for ResourceType
const (
	ResourceTypeOpportunity ResourceType = "Opportunity"
)

// Values returns all known values for ResourceType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ResourceType) Values() []ResourceType {
	return []ResourceType{
		"Opportunity",
	}
}

type RevenueModel string

// Enum values for RevenueModel
const (
	RevenueModelContract     RevenueModel = "Contract"
	RevenueModelPayAsYouGo   RevenueModel = "Pay-as-you-go"
	RevenueModelSubscription RevenueModel = "Subscription"
)

// Values returns all known values for RevenueModel. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RevenueModel) Values() []RevenueModel {
	return []RevenueModel{
		"Contract",
		"Pay-as-you-go",
		"Subscription",
	}
}

type ReviewStatus string

// Enum values for ReviewStatus
const (
	ReviewStatusPendingSubmission ReviewStatus = "Pending Submission"
	ReviewStatusSubmitted         ReviewStatus = "Submitted"
	ReviewStatusInReview          ReviewStatus = "In review"
	ReviewStatusApproved          ReviewStatus = "Approved"
	ReviewStatusRejected          ReviewStatus = "Rejected"
	ReviewStatusActionRequired    ReviewStatus = "Action Required"
)

// Values returns all known values for ReviewStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ReviewStatus) Values() []ReviewStatus {
	return []ReviewStatus{
		"Pending Submission",
		"Submitted",
		"In review",
		"Approved",
		"Rejected",
		"Action Required",
	}
}

type SalesActivity string

// Enum values for SalesActivity
const (
	SalesActivityInitializedDiscussionsWithCustomer SalesActivity = "Initialized discussions with customer"
	SalesActivityCustomerHasShownInterest           SalesActivity = "Customer has shown interest in solution"
	SalesActivityConductedPocDemo                   SalesActivity = "Conducted POC / Demo"
	SalesActivityInEvaluationPlanningStage          SalesActivity = "In evaluation / planning stage"
	SalesActivityAgreedOnSolutionToBusinessProblem  SalesActivity = "Agreed on solution to Business Problem"
	SalesActivityCompletedActionPlan                SalesActivity = "Completed Action Plan"
	SalesActivityFinalizedDeploymentNeeds           SalesActivity = "Finalized Deployment Need"
	SalesActivitySowSigned                          SalesActivity = "SOW Signed"
)

// Values returns all known values for SalesActivity. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SalesActivity) Values() []SalesActivity {
	return []SalesActivity{
		"Initialized discussions with customer",
		"Customer has shown interest in solution",
		"Conducted POC / Demo",
		"In evaluation / planning stage",
		"Agreed on solution to Business Problem",
		"Completed Action Plan",
		"Finalized Deployment Need",
		"SOW Signed",
	}
}

type SalesInvolvementType string

// Enum values for SalesInvolvementType
const (
	SalesInvolvementTypeForVisibilityOnly SalesInvolvementType = "For Visibility Only"
	SalesInvolvementTypeCoSell            SalesInvolvementType = "Co-Sell"
)

// Values returns all known values for SalesInvolvementType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SalesInvolvementType) Values() []SalesInvolvementType {
	return []SalesInvolvementType{
		"For Visibility Only",
		"Co-Sell",
	}
}

type SolutionSortName string

// Enum values for SolutionSortName
const (
	SolutionSortNameIdentifier  SolutionSortName = "Identifier"
	SolutionSortNameName        SolutionSortName = "Name"
	SolutionSortNameStatus      SolutionSortName = "Status"
	SolutionSortNameCategory    SolutionSortName = "Category"
	SolutionSortNameCreateddate SolutionSortName = "CreatedDate"
)

// Values returns all known values for SolutionSortName. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SolutionSortName) Values() []SolutionSortName {
	return []SolutionSortName{
		"Identifier",
		"Name",
		"Status",
		"Category",
		"CreatedDate",
	}
}

type SolutionStatus string

// Enum values for SolutionStatus
const (
	SolutionStatusActive   SolutionStatus = "Active"
	SolutionStatusInactive SolutionStatus = "Inactive"
	SolutionStatusDraft    SolutionStatus = "Draft"
)

// Values returns all known values for SolutionStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SolutionStatus) Values() []SolutionStatus {
	return []SolutionStatus{
		"Active",
		"Inactive",
		"Draft",
	}
}

type SortBy string

// Enum values for SortBy
const (
	SortByCreatedDate SortBy = "CreatedDate"
)

// Values returns all known values for SortBy. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SortBy) Values() []SortBy {
	return []SortBy{
		"CreatedDate",
	}
}

type SortOrder string

// Enum values for SortOrder
const (
	SortOrderAscending  SortOrder = "ASCENDING"
	SortOrderDescending SortOrder = "DESCENDING"
)

// Values returns all known values for SortOrder. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SortOrder) Values() []SortOrder {
	return []SortOrder{
		"ASCENDING",
		"DESCENDING",
	}
}

type Stage string

// Enum values for Stage
const (
	StageProspect            Stage = "Prospect"
	StageQualified           Stage = "Qualified"
	StageTechnicalValidation Stage = "Technical Validation"
	StageBusinessValidation  Stage = "Business Validation"
	StageCommitted           Stage = "Committed"
	StageLaunched            Stage = "Launched"
	StageClosedLost          Stage = "Closed Lost"
)

// Values returns all known values for Stage. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Stage) Values() []Stage {
	return []Stage{
		"Prospect",
		"Qualified",
		"Technical Validation",
		"Business Validation",
		"Committed",
		"Launched",
		"Closed Lost",
	}
}

type TaskStatus string

// Enum values for TaskStatus
const (
	TaskStatusInProgress TaskStatus = "IN_PROGRESS"
	TaskStatusComplete   TaskStatus = "COMPLETE"
	TaskStatusFailed     TaskStatus = "FAILED"
)

// Values returns all known values for TaskStatus. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TaskStatus) Values() []TaskStatus {
	return []TaskStatus{
		"IN_PROGRESS",
		"COMPLETE",
		"FAILED",
	}
}

type ValidationExceptionErrorCode string

// Enum values for ValidationExceptionErrorCode
const (
	ValidationExceptionErrorCodeRequiredFieldMissing ValidationExceptionErrorCode = "REQUIRED_FIELD_MISSING"
	ValidationExceptionErrorCodeInvalidEnumValue     ValidationExceptionErrorCode = "INVALID_ENUM_VALUE"
	ValidationExceptionErrorCodeInvalidStringFormat  ValidationExceptionErrorCode = "INVALID_STRING_FORMAT"
	ValidationExceptionErrorCodeInvalidValue         ValidationExceptionErrorCode = "INVALID_VALUE"
	ValidationExceptionErrorCodeTooManyValues        ValidationExceptionErrorCode = "TOO_MANY_VALUES"
	ValidationExceptionErrorCodeInvalidResourceState ValidationExceptionErrorCode = "INVALID_RESOURCE_STATE"
	ValidationExceptionErrorCodeDuplicateKeyValue    ValidationExceptionErrorCode = "DUPLICATE_KEY_VALUE"
	ValidationExceptionErrorCodeValueOutOfRange      ValidationExceptionErrorCode = "VALUE_OUT_OF_RANGE"
	ValidationExceptionErrorCodeActionNotPermitted   ValidationExceptionErrorCode = "ACTION_NOT_PERMITTED"
)

// Values returns all known values for ValidationExceptionErrorCode. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ValidationExceptionErrorCode) Values() []ValidationExceptionErrorCode {
	return []ValidationExceptionErrorCode{
		"REQUIRED_FIELD_MISSING",
		"INVALID_ENUM_VALUE",
		"INVALID_STRING_FORMAT",
		"INVALID_VALUE",
		"TOO_MANY_VALUES",
		"INVALID_RESOURCE_STATE",
		"DUPLICATE_KEY_VALUE",
		"VALUE_OUT_OF_RANGE",
		"ACTION_NOT_PERMITTED",
	}
}

type ValidationExceptionReason string

// Enum values for ValidationExceptionReason
const (
	ValidationExceptionReasonRequestValidationFailed  ValidationExceptionReason = "REQUEST_VALIDATION_FAILED"
	ValidationExceptionReasonBusinessValidationFailed ValidationExceptionReason = "BUSINESS_VALIDATION_FAILED"
)

// Values returns all known values for ValidationExceptionReason. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ValidationExceptionReason) Values() []ValidationExceptionReason {
	return []ValidationExceptionReason{
		"REQUEST_VALIDATION_FAILED",
		"BUSINESS_VALIDATION_FAILED",
	}
}

type Visibility string

// Enum values for Visibility
const (
	VisibilityFull    Visibility = "Full"
	VisibilityLimited Visibility = "Limited"
)

// Values returns all known values for Visibility. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Visibility) Values() []Visibility {
	return []Visibility{
		"Full",
		"Limited",
	}
}
