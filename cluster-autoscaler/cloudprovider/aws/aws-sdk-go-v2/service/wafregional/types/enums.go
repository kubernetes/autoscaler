// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type ChangeAction string

// Enum values for ChangeAction
const (
	ChangeActionInsert ChangeAction = "INSERT"
	ChangeActionDelete ChangeAction = "DELETE"
)

// Values returns all known values for ChangeAction. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ChangeAction) Values() []ChangeAction {
	return []ChangeAction{
		"INSERT",
		"DELETE",
	}
}

type ChangeTokenStatus string

// Enum values for ChangeTokenStatus
const (
	ChangeTokenStatusProvisioned ChangeTokenStatus = "PROVISIONED"
	ChangeTokenStatusPending     ChangeTokenStatus = "PENDING"
	ChangeTokenStatusInsync      ChangeTokenStatus = "INSYNC"
)

// Values returns all known values for ChangeTokenStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ChangeTokenStatus) Values() []ChangeTokenStatus {
	return []ChangeTokenStatus{
		"PROVISIONED",
		"PENDING",
		"INSYNC",
	}
}

type ComparisonOperator string

// Enum values for ComparisonOperator
const (
	ComparisonOperatorEq ComparisonOperator = "EQ"
	ComparisonOperatorNe ComparisonOperator = "NE"
	ComparisonOperatorLe ComparisonOperator = "LE"
	ComparisonOperatorLt ComparisonOperator = "LT"
	ComparisonOperatorGe ComparisonOperator = "GE"
	ComparisonOperatorGt ComparisonOperator = "GT"
)

// Values returns all known values for ComparisonOperator. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ComparisonOperator) Values() []ComparisonOperator {
	return []ComparisonOperator{
		"EQ",
		"NE",
		"LE",
		"LT",
		"GE",
		"GT",
	}
}

type GeoMatchConstraintType string

// Enum values for GeoMatchConstraintType
const (
	GeoMatchConstraintTypeCountry GeoMatchConstraintType = "Country"
)

// Values returns all known values for GeoMatchConstraintType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GeoMatchConstraintType) Values() []GeoMatchConstraintType {
	return []GeoMatchConstraintType{
		"Country",
	}
}

type GeoMatchConstraintValue string

// Enum values for GeoMatchConstraintValue
const (
	GeoMatchConstraintValueAf GeoMatchConstraintValue = "AF"
	GeoMatchConstraintValueAx GeoMatchConstraintValue = "AX"
	GeoMatchConstraintValueAl GeoMatchConstraintValue = "AL"
	GeoMatchConstraintValueDz GeoMatchConstraintValue = "DZ"
	GeoMatchConstraintValueAs GeoMatchConstraintValue = "AS"
	GeoMatchConstraintValueAd GeoMatchConstraintValue = "AD"
	GeoMatchConstraintValueAo GeoMatchConstraintValue = "AO"
	GeoMatchConstraintValueAi GeoMatchConstraintValue = "AI"
	GeoMatchConstraintValueAq GeoMatchConstraintValue = "AQ"
	GeoMatchConstraintValueAg GeoMatchConstraintValue = "AG"
	GeoMatchConstraintValueAr GeoMatchConstraintValue = "AR"
	GeoMatchConstraintValueAm GeoMatchConstraintValue = "AM"
	GeoMatchConstraintValueAw GeoMatchConstraintValue = "AW"
	GeoMatchConstraintValueAu GeoMatchConstraintValue = "AU"
	GeoMatchConstraintValueAt GeoMatchConstraintValue = "AT"
	GeoMatchConstraintValueAz GeoMatchConstraintValue = "AZ"
	GeoMatchConstraintValueBs GeoMatchConstraintValue = "BS"
	GeoMatchConstraintValueBh GeoMatchConstraintValue = "BH"
	GeoMatchConstraintValueBd GeoMatchConstraintValue = "BD"
	GeoMatchConstraintValueBb GeoMatchConstraintValue = "BB"
	GeoMatchConstraintValueBy GeoMatchConstraintValue = "BY"
	GeoMatchConstraintValueBe GeoMatchConstraintValue = "BE"
	GeoMatchConstraintValueBz GeoMatchConstraintValue = "BZ"
	GeoMatchConstraintValueBj GeoMatchConstraintValue = "BJ"
	GeoMatchConstraintValueBm GeoMatchConstraintValue = "BM"
	GeoMatchConstraintValueBt GeoMatchConstraintValue = "BT"
	GeoMatchConstraintValueBo GeoMatchConstraintValue = "BO"
	GeoMatchConstraintValueBq GeoMatchConstraintValue = "BQ"
	GeoMatchConstraintValueBa GeoMatchConstraintValue = "BA"
	GeoMatchConstraintValueBw GeoMatchConstraintValue = "BW"
	GeoMatchConstraintValueBv GeoMatchConstraintValue = "BV"
	GeoMatchConstraintValueBr GeoMatchConstraintValue = "BR"
	GeoMatchConstraintValueIo GeoMatchConstraintValue = "IO"
	GeoMatchConstraintValueBn GeoMatchConstraintValue = "BN"
	GeoMatchConstraintValueBg GeoMatchConstraintValue = "BG"
	GeoMatchConstraintValueBf GeoMatchConstraintValue = "BF"
	GeoMatchConstraintValueBi GeoMatchConstraintValue = "BI"
	GeoMatchConstraintValueKh GeoMatchConstraintValue = "KH"
	GeoMatchConstraintValueCm GeoMatchConstraintValue = "CM"
	GeoMatchConstraintValueCa GeoMatchConstraintValue = "CA"
	GeoMatchConstraintValueCv GeoMatchConstraintValue = "CV"
	GeoMatchConstraintValueKy GeoMatchConstraintValue = "KY"
	GeoMatchConstraintValueCf GeoMatchConstraintValue = "CF"
	GeoMatchConstraintValueTd GeoMatchConstraintValue = "TD"
	GeoMatchConstraintValueCl GeoMatchConstraintValue = "CL"
	GeoMatchConstraintValueCn GeoMatchConstraintValue = "CN"
	GeoMatchConstraintValueCx GeoMatchConstraintValue = "CX"
	GeoMatchConstraintValueCc GeoMatchConstraintValue = "CC"
	GeoMatchConstraintValueCo GeoMatchConstraintValue = "CO"
	GeoMatchConstraintValueKm GeoMatchConstraintValue = "KM"
	GeoMatchConstraintValueCg GeoMatchConstraintValue = "CG"
	GeoMatchConstraintValueCd GeoMatchConstraintValue = "CD"
	GeoMatchConstraintValueCk GeoMatchConstraintValue = "CK"
	GeoMatchConstraintValueCr GeoMatchConstraintValue = "CR"
	GeoMatchConstraintValueCi GeoMatchConstraintValue = "CI"
	GeoMatchConstraintValueHr GeoMatchConstraintValue = "HR"
	GeoMatchConstraintValueCu GeoMatchConstraintValue = "CU"
	GeoMatchConstraintValueCw GeoMatchConstraintValue = "CW"
	GeoMatchConstraintValueCy GeoMatchConstraintValue = "CY"
	GeoMatchConstraintValueCz GeoMatchConstraintValue = "CZ"
	GeoMatchConstraintValueDk GeoMatchConstraintValue = "DK"
	GeoMatchConstraintValueDj GeoMatchConstraintValue = "DJ"
	GeoMatchConstraintValueDm GeoMatchConstraintValue = "DM"
	GeoMatchConstraintValueDo GeoMatchConstraintValue = "DO"
	GeoMatchConstraintValueEc GeoMatchConstraintValue = "EC"
	GeoMatchConstraintValueEg GeoMatchConstraintValue = "EG"
	GeoMatchConstraintValueSv GeoMatchConstraintValue = "SV"
	GeoMatchConstraintValueGq GeoMatchConstraintValue = "GQ"
	GeoMatchConstraintValueEr GeoMatchConstraintValue = "ER"
	GeoMatchConstraintValueEe GeoMatchConstraintValue = "EE"
	GeoMatchConstraintValueEt GeoMatchConstraintValue = "ET"
	GeoMatchConstraintValueFk GeoMatchConstraintValue = "FK"
	GeoMatchConstraintValueFo GeoMatchConstraintValue = "FO"
	GeoMatchConstraintValueFj GeoMatchConstraintValue = "FJ"
	GeoMatchConstraintValueFi GeoMatchConstraintValue = "FI"
	GeoMatchConstraintValueFr GeoMatchConstraintValue = "FR"
	GeoMatchConstraintValueGf GeoMatchConstraintValue = "GF"
	GeoMatchConstraintValuePf GeoMatchConstraintValue = "PF"
	GeoMatchConstraintValueTf GeoMatchConstraintValue = "TF"
	GeoMatchConstraintValueGa GeoMatchConstraintValue = "GA"
	GeoMatchConstraintValueGm GeoMatchConstraintValue = "GM"
	GeoMatchConstraintValueGe GeoMatchConstraintValue = "GE"
	GeoMatchConstraintValueDe GeoMatchConstraintValue = "DE"
	GeoMatchConstraintValueGh GeoMatchConstraintValue = "GH"
	GeoMatchConstraintValueGi GeoMatchConstraintValue = "GI"
	GeoMatchConstraintValueGr GeoMatchConstraintValue = "GR"
	GeoMatchConstraintValueGl GeoMatchConstraintValue = "GL"
	GeoMatchConstraintValueGd GeoMatchConstraintValue = "GD"
	GeoMatchConstraintValueGp GeoMatchConstraintValue = "GP"
	GeoMatchConstraintValueGu GeoMatchConstraintValue = "GU"
	GeoMatchConstraintValueGt GeoMatchConstraintValue = "GT"
	GeoMatchConstraintValueGg GeoMatchConstraintValue = "GG"
	GeoMatchConstraintValueGn GeoMatchConstraintValue = "GN"
	GeoMatchConstraintValueGw GeoMatchConstraintValue = "GW"
	GeoMatchConstraintValueGy GeoMatchConstraintValue = "GY"
	GeoMatchConstraintValueHt GeoMatchConstraintValue = "HT"
	GeoMatchConstraintValueHm GeoMatchConstraintValue = "HM"
	GeoMatchConstraintValueVa GeoMatchConstraintValue = "VA"
	GeoMatchConstraintValueHn GeoMatchConstraintValue = "HN"
	GeoMatchConstraintValueHk GeoMatchConstraintValue = "HK"
	GeoMatchConstraintValueHu GeoMatchConstraintValue = "HU"
	GeoMatchConstraintValueIs GeoMatchConstraintValue = "IS"
	GeoMatchConstraintValueIn GeoMatchConstraintValue = "IN"
	GeoMatchConstraintValueId GeoMatchConstraintValue = "ID"
	GeoMatchConstraintValueIr GeoMatchConstraintValue = "IR"
	GeoMatchConstraintValueIq GeoMatchConstraintValue = "IQ"
	GeoMatchConstraintValueIe GeoMatchConstraintValue = "IE"
	GeoMatchConstraintValueIm GeoMatchConstraintValue = "IM"
	GeoMatchConstraintValueIl GeoMatchConstraintValue = "IL"
	GeoMatchConstraintValueIt GeoMatchConstraintValue = "IT"
	GeoMatchConstraintValueJm GeoMatchConstraintValue = "JM"
	GeoMatchConstraintValueJp GeoMatchConstraintValue = "JP"
	GeoMatchConstraintValueJe GeoMatchConstraintValue = "JE"
	GeoMatchConstraintValueJo GeoMatchConstraintValue = "JO"
	GeoMatchConstraintValueKz GeoMatchConstraintValue = "KZ"
	GeoMatchConstraintValueKe GeoMatchConstraintValue = "KE"
	GeoMatchConstraintValueKi GeoMatchConstraintValue = "KI"
	GeoMatchConstraintValueKp GeoMatchConstraintValue = "KP"
	GeoMatchConstraintValueKr GeoMatchConstraintValue = "KR"
	GeoMatchConstraintValueKw GeoMatchConstraintValue = "KW"
	GeoMatchConstraintValueKg GeoMatchConstraintValue = "KG"
	GeoMatchConstraintValueLa GeoMatchConstraintValue = "LA"
	GeoMatchConstraintValueLv GeoMatchConstraintValue = "LV"
	GeoMatchConstraintValueLb GeoMatchConstraintValue = "LB"
	GeoMatchConstraintValueLs GeoMatchConstraintValue = "LS"
	GeoMatchConstraintValueLr GeoMatchConstraintValue = "LR"
	GeoMatchConstraintValueLy GeoMatchConstraintValue = "LY"
	GeoMatchConstraintValueLi GeoMatchConstraintValue = "LI"
	GeoMatchConstraintValueLt GeoMatchConstraintValue = "LT"
	GeoMatchConstraintValueLu GeoMatchConstraintValue = "LU"
	GeoMatchConstraintValueMo GeoMatchConstraintValue = "MO"
	GeoMatchConstraintValueMk GeoMatchConstraintValue = "MK"
	GeoMatchConstraintValueMg GeoMatchConstraintValue = "MG"
	GeoMatchConstraintValueMw GeoMatchConstraintValue = "MW"
	GeoMatchConstraintValueMy GeoMatchConstraintValue = "MY"
	GeoMatchConstraintValueMv GeoMatchConstraintValue = "MV"
	GeoMatchConstraintValueMl GeoMatchConstraintValue = "ML"
	GeoMatchConstraintValueMt GeoMatchConstraintValue = "MT"
	GeoMatchConstraintValueMh GeoMatchConstraintValue = "MH"
	GeoMatchConstraintValueMq GeoMatchConstraintValue = "MQ"
	GeoMatchConstraintValueMr GeoMatchConstraintValue = "MR"
	GeoMatchConstraintValueMu GeoMatchConstraintValue = "MU"
	GeoMatchConstraintValueYt GeoMatchConstraintValue = "YT"
	GeoMatchConstraintValueMx GeoMatchConstraintValue = "MX"
	GeoMatchConstraintValueFm GeoMatchConstraintValue = "FM"
	GeoMatchConstraintValueMd GeoMatchConstraintValue = "MD"
	GeoMatchConstraintValueMc GeoMatchConstraintValue = "MC"
	GeoMatchConstraintValueMn GeoMatchConstraintValue = "MN"
	GeoMatchConstraintValueMe GeoMatchConstraintValue = "ME"
	GeoMatchConstraintValueMs GeoMatchConstraintValue = "MS"
	GeoMatchConstraintValueMa GeoMatchConstraintValue = "MA"
	GeoMatchConstraintValueMz GeoMatchConstraintValue = "MZ"
	GeoMatchConstraintValueMm GeoMatchConstraintValue = "MM"
	GeoMatchConstraintValueNa GeoMatchConstraintValue = "NA"
	GeoMatchConstraintValueNr GeoMatchConstraintValue = "NR"
	GeoMatchConstraintValueNp GeoMatchConstraintValue = "NP"
	GeoMatchConstraintValueNl GeoMatchConstraintValue = "NL"
	GeoMatchConstraintValueNc GeoMatchConstraintValue = "NC"
	GeoMatchConstraintValueNz GeoMatchConstraintValue = "NZ"
	GeoMatchConstraintValueNi GeoMatchConstraintValue = "NI"
	GeoMatchConstraintValueNe GeoMatchConstraintValue = "NE"
	GeoMatchConstraintValueNg GeoMatchConstraintValue = "NG"
	GeoMatchConstraintValueNu GeoMatchConstraintValue = "NU"
	GeoMatchConstraintValueNf GeoMatchConstraintValue = "NF"
	GeoMatchConstraintValueMp GeoMatchConstraintValue = "MP"
	GeoMatchConstraintValueNo GeoMatchConstraintValue = "NO"
	GeoMatchConstraintValueOm GeoMatchConstraintValue = "OM"
	GeoMatchConstraintValuePk GeoMatchConstraintValue = "PK"
	GeoMatchConstraintValuePw GeoMatchConstraintValue = "PW"
	GeoMatchConstraintValuePs GeoMatchConstraintValue = "PS"
	GeoMatchConstraintValuePa GeoMatchConstraintValue = "PA"
	GeoMatchConstraintValuePg GeoMatchConstraintValue = "PG"
	GeoMatchConstraintValuePy GeoMatchConstraintValue = "PY"
	GeoMatchConstraintValuePe GeoMatchConstraintValue = "PE"
	GeoMatchConstraintValuePh GeoMatchConstraintValue = "PH"
	GeoMatchConstraintValuePn GeoMatchConstraintValue = "PN"
	GeoMatchConstraintValuePl GeoMatchConstraintValue = "PL"
	GeoMatchConstraintValuePt GeoMatchConstraintValue = "PT"
	GeoMatchConstraintValuePr GeoMatchConstraintValue = "PR"
	GeoMatchConstraintValueQa GeoMatchConstraintValue = "QA"
	GeoMatchConstraintValueRe GeoMatchConstraintValue = "RE"
	GeoMatchConstraintValueRo GeoMatchConstraintValue = "RO"
	GeoMatchConstraintValueRu GeoMatchConstraintValue = "RU"
	GeoMatchConstraintValueRw GeoMatchConstraintValue = "RW"
	GeoMatchConstraintValueBl GeoMatchConstraintValue = "BL"
	GeoMatchConstraintValueSh GeoMatchConstraintValue = "SH"
	GeoMatchConstraintValueKn GeoMatchConstraintValue = "KN"
	GeoMatchConstraintValueLc GeoMatchConstraintValue = "LC"
	GeoMatchConstraintValueMf GeoMatchConstraintValue = "MF"
	GeoMatchConstraintValuePm GeoMatchConstraintValue = "PM"
	GeoMatchConstraintValueVc GeoMatchConstraintValue = "VC"
	GeoMatchConstraintValueWs GeoMatchConstraintValue = "WS"
	GeoMatchConstraintValueSm GeoMatchConstraintValue = "SM"
	GeoMatchConstraintValueSt GeoMatchConstraintValue = "ST"
	GeoMatchConstraintValueSa GeoMatchConstraintValue = "SA"
	GeoMatchConstraintValueSn GeoMatchConstraintValue = "SN"
	GeoMatchConstraintValueRs GeoMatchConstraintValue = "RS"
	GeoMatchConstraintValueSc GeoMatchConstraintValue = "SC"
	GeoMatchConstraintValueSl GeoMatchConstraintValue = "SL"
	GeoMatchConstraintValueSg GeoMatchConstraintValue = "SG"
	GeoMatchConstraintValueSx GeoMatchConstraintValue = "SX"
	GeoMatchConstraintValueSk GeoMatchConstraintValue = "SK"
	GeoMatchConstraintValueSi GeoMatchConstraintValue = "SI"
	GeoMatchConstraintValueSb GeoMatchConstraintValue = "SB"
	GeoMatchConstraintValueSo GeoMatchConstraintValue = "SO"
	GeoMatchConstraintValueZa GeoMatchConstraintValue = "ZA"
	GeoMatchConstraintValueGs GeoMatchConstraintValue = "GS"
	GeoMatchConstraintValueSs GeoMatchConstraintValue = "SS"
	GeoMatchConstraintValueEs GeoMatchConstraintValue = "ES"
	GeoMatchConstraintValueLk GeoMatchConstraintValue = "LK"
	GeoMatchConstraintValueSd GeoMatchConstraintValue = "SD"
	GeoMatchConstraintValueSr GeoMatchConstraintValue = "SR"
	GeoMatchConstraintValueSj GeoMatchConstraintValue = "SJ"
	GeoMatchConstraintValueSz GeoMatchConstraintValue = "SZ"
	GeoMatchConstraintValueSe GeoMatchConstraintValue = "SE"
	GeoMatchConstraintValueCh GeoMatchConstraintValue = "CH"
	GeoMatchConstraintValueSy GeoMatchConstraintValue = "SY"
	GeoMatchConstraintValueTw GeoMatchConstraintValue = "TW"
	GeoMatchConstraintValueTj GeoMatchConstraintValue = "TJ"
	GeoMatchConstraintValueTz GeoMatchConstraintValue = "TZ"
	GeoMatchConstraintValueTh GeoMatchConstraintValue = "TH"
	GeoMatchConstraintValueTl GeoMatchConstraintValue = "TL"
	GeoMatchConstraintValueTg GeoMatchConstraintValue = "TG"
	GeoMatchConstraintValueTk GeoMatchConstraintValue = "TK"
	GeoMatchConstraintValueTo GeoMatchConstraintValue = "TO"
	GeoMatchConstraintValueTt GeoMatchConstraintValue = "TT"
	GeoMatchConstraintValueTn GeoMatchConstraintValue = "TN"
	GeoMatchConstraintValueTr GeoMatchConstraintValue = "TR"
	GeoMatchConstraintValueTm GeoMatchConstraintValue = "TM"
	GeoMatchConstraintValueTc GeoMatchConstraintValue = "TC"
	GeoMatchConstraintValueTv GeoMatchConstraintValue = "TV"
	GeoMatchConstraintValueUg GeoMatchConstraintValue = "UG"
	GeoMatchConstraintValueUa GeoMatchConstraintValue = "UA"
	GeoMatchConstraintValueAe GeoMatchConstraintValue = "AE"
	GeoMatchConstraintValueGb GeoMatchConstraintValue = "GB"
	GeoMatchConstraintValueUs GeoMatchConstraintValue = "US"
	GeoMatchConstraintValueUm GeoMatchConstraintValue = "UM"
	GeoMatchConstraintValueUy GeoMatchConstraintValue = "UY"
	GeoMatchConstraintValueUz GeoMatchConstraintValue = "UZ"
	GeoMatchConstraintValueVu GeoMatchConstraintValue = "VU"
	GeoMatchConstraintValueVe GeoMatchConstraintValue = "VE"
	GeoMatchConstraintValueVn GeoMatchConstraintValue = "VN"
	GeoMatchConstraintValueVg GeoMatchConstraintValue = "VG"
	GeoMatchConstraintValueVi GeoMatchConstraintValue = "VI"
	GeoMatchConstraintValueWf GeoMatchConstraintValue = "WF"
	GeoMatchConstraintValueEh GeoMatchConstraintValue = "EH"
	GeoMatchConstraintValueYe GeoMatchConstraintValue = "YE"
	GeoMatchConstraintValueZm GeoMatchConstraintValue = "ZM"
	GeoMatchConstraintValueZw GeoMatchConstraintValue = "ZW"
)

// Values returns all known values for GeoMatchConstraintValue. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GeoMatchConstraintValue) Values() []GeoMatchConstraintValue {
	return []GeoMatchConstraintValue{
		"AF",
		"AX",
		"AL",
		"DZ",
		"AS",
		"AD",
		"AO",
		"AI",
		"AQ",
		"AG",
		"AR",
		"AM",
		"AW",
		"AU",
		"AT",
		"AZ",
		"BS",
		"BH",
		"BD",
		"BB",
		"BY",
		"BE",
		"BZ",
		"BJ",
		"BM",
		"BT",
		"BO",
		"BQ",
		"BA",
		"BW",
		"BV",
		"BR",
		"IO",
		"BN",
		"BG",
		"BF",
		"BI",
		"KH",
		"CM",
		"CA",
		"CV",
		"KY",
		"CF",
		"TD",
		"CL",
		"CN",
		"CX",
		"CC",
		"CO",
		"KM",
		"CG",
		"CD",
		"CK",
		"CR",
		"CI",
		"HR",
		"CU",
		"CW",
		"CY",
		"CZ",
		"DK",
		"DJ",
		"DM",
		"DO",
		"EC",
		"EG",
		"SV",
		"GQ",
		"ER",
		"EE",
		"ET",
		"FK",
		"FO",
		"FJ",
		"FI",
		"FR",
		"GF",
		"PF",
		"TF",
		"GA",
		"GM",
		"GE",
		"DE",
		"GH",
		"GI",
		"GR",
		"GL",
		"GD",
		"GP",
		"GU",
		"GT",
		"GG",
		"GN",
		"GW",
		"GY",
		"HT",
		"HM",
		"VA",
		"HN",
		"HK",
		"HU",
		"IS",
		"IN",
		"ID",
		"IR",
		"IQ",
		"IE",
		"IM",
		"IL",
		"IT",
		"JM",
		"JP",
		"JE",
		"JO",
		"KZ",
		"KE",
		"KI",
		"KP",
		"KR",
		"KW",
		"KG",
		"LA",
		"LV",
		"LB",
		"LS",
		"LR",
		"LY",
		"LI",
		"LT",
		"LU",
		"MO",
		"MK",
		"MG",
		"MW",
		"MY",
		"MV",
		"ML",
		"MT",
		"MH",
		"MQ",
		"MR",
		"MU",
		"YT",
		"MX",
		"FM",
		"MD",
		"MC",
		"MN",
		"ME",
		"MS",
		"MA",
		"MZ",
		"MM",
		"NA",
		"NR",
		"NP",
		"NL",
		"NC",
		"NZ",
		"NI",
		"NE",
		"NG",
		"NU",
		"NF",
		"MP",
		"NO",
		"OM",
		"PK",
		"PW",
		"PS",
		"PA",
		"PG",
		"PY",
		"PE",
		"PH",
		"PN",
		"PL",
		"PT",
		"PR",
		"QA",
		"RE",
		"RO",
		"RU",
		"RW",
		"BL",
		"SH",
		"KN",
		"LC",
		"MF",
		"PM",
		"VC",
		"WS",
		"SM",
		"ST",
		"SA",
		"SN",
		"RS",
		"SC",
		"SL",
		"SG",
		"SX",
		"SK",
		"SI",
		"SB",
		"SO",
		"ZA",
		"GS",
		"SS",
		"ES",
		"LK",
		"SD",
		"SR",
		"SJ",
		"SZ",
		"SE",
		"CH",
		"SY",
		"TW",
		"TJ",
		"TZ",
		"TH",
		"TL",
		"TG",
		"TK",
		"TO",
		"TT",
		"TN",
		"TR",
		"TM",
		"TC",
		"TV",
		"UG",
		"UA",
		"AE",
		"GB",
		"US",
		"UM",
		"UY",
		"UZ",
		"VU",
		"VE",
		"VN",
		"VG",
		"VI",
		"WF",
		"EH",
		"YE",
		"ZM",
		"ZW",
	}
}

type IPSetDescriptorType string

// Enum values for IPSetDescriptorType
const (
	IPSetDescriptorTypeIpv4 IPSetDescriptorType = "IPV4"
	IPSetDescriptorTypeIpv6 IPSetDescriptorType = "IPV6"
)

// Values returns all known values for IPSetDescriptorType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IPSetDescriptorType) Values() []IPSetDescriptorType {
	return []IPSetDescriptorType{
		"IPV4",
		"IPV6",
	}
}

type MatchFieldType string

// Enum values for MatchFieldType
const (
	MatchFieldTypeUri            MatchFieldType = "URI"
	MatchFieldTypeQueryString    MatchFieldType = "QUERY_STRING"
	MatchFieldTypeHeader         MatchFieldType = "HEADER"
	MatchFieldTypeMethod         MatchFieldType = "METHOD"
	MatchFieldTypeBody           MatchFieldType = "BODY"
	MatchFieldTypeSingleQueryArg MatchFieldType = "SINGLE_QUERY_ARG"
	MatchFieldTypeAllQueryArgs   MatchFieldType = "ALL_QUERY_ARGS"
)

// Values returns all known values for MatchFieldType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MatchFieldType) Values() []MatchFieldType {
	return []MatchFieldType{
		"URI",
		"QUERY_STRING",
		"HEADER",
		"METHOD",
		"BODY",
		"SINGLE_QUERY_ARG",
		"ALL_QUERY_ARGS",
	}
}

type MigrationErrorType string

// Enum values for MigrationErrorType
const (
	MigrationErrorTypeEntityNotSupported    MigrationErrorType = "ENTITY_NOT_SUPPORTED"
	MigrationErrorTypeEntityNotFound        MigrationErrorType = "ENTITY_NOT_FOUND"
	MigrationErrorTypeS3BucketNoPermission  MigrationErrorType = "S3_BUCKET_NO_PERMISSION"
	MigrationErrorTypeS3BucketNotAccessible MigrationErrorType = "S3_BUCKET_NOT_ACCESSIBLE"
	MigrationErrorTypeS3BucketNotFound      MigrationErrorType = "S3_BUCKET_NOT_FOUND"
	MigrationErrorTypeS3BucketInvalidRegion MigrationErrorType = "S3_BUCKET_INVALID_REGION"
	MigrationErrorTypeS3InternalError       MigrationErrorType = "S3_INTERNAL_ERROR"
)

// Values returns all known values for MigrationErrorType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MigrationErrorType) Values() []MigrationErrorType {
	return []MigrationErrorType{
		"ENTITY_NOT_SUPPORTED",
		"ENTITY_NOT_FOUND",
		"S3_BUCKET_NO_PERMISSION",
		"S3_BUCKET_NOT_ACCESSIBLE",
		"S3_BUCKET_NOT_FOUND",
		"S3_BUCKET_INVALID_REGION",
		"S3_INTERNAL_ERROR",
	}
}

type ParameterExceptionField string

// Enum values for ParameterExceptionField
const (
	ParameterExceptionFieldChangeAction                     ParameterExceptionField = "CHANGE_ACTION"
	ParameterExceptionFieldWafAction                        ParameterExceptionField = "WAF_ACTION"
	ParameterExceptionFieldWafOverrideAction                ParameterExceptionField = "WAF_OVERRIDE_ACTION"
	ParameterExceptionFieldPredicateType                    ParameterExceptionField = "PREDICATE_TYPE"
	ParameterExceptionFieldIpsetType                        ParameterExceptionField = "IPSET_TYPE"
	ParameterExceptionFieldByteMatchFieldType               ParameterExceptionField = "BYTE_MATCH_FIELD_TYPE"
	ParameterExceptionFieldSqlInjectionMatchFieldType       ParameterExceptionField = "SQL_INJECTION_MATCH_FIELD_TYPE"
	ParameterExceptionFieldByteMatchTextTransformation      ParameterExceptionField = "BYTE_MATCH_TEXT_TRANSFORMATION"
	ParameterExceptionFieldByteMatchPositionalConstraint    ParameterExceptionField = "BYTE_MATCH_POSITIONAL_CONSTRAINT"
	ParameterExceptionFieldSizeConstraintComparisonOperator ParameterExceptionField = "SIZE_CONSTRAINT_COMPARISON_OPERATOR"
	ParameterExceptionFieldGeoMatchLocationType             ParameterExceptionField = "GEO_MATCH_LOCATION_TYPE"
	ParameterExceptionFieldGeoMatchLocationValue            ParameterExceptionField = "GEO_MATCH_LOCATION_VALUE"
	ParameterExceptionFieldRateKey                          ParameterExceptionField = "RATE_KEY"
	ParameterExceptionFieldRuleType                         ParameterExceptionField = "RULE_TYPE"
	ParameterExceptionFieldNextMarker                       ParameterExceptionField = "NEXT_MARKER"
	ParameterExceptionFieldResourceArn                      ParameterExceptionField = "RESOURCE_ARN"
	ParameterExceptionFieldTags                             ParameterExceptionField = "TAGS"
	ParameterExceptionFieldTagKeys                          ParameterExceptionField = "TAG_KEYS"
)

// Values returns all known values for ParameterExceptionField. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ParameterExceptionField) Values() []ParameterExceptionField {
	return []ParameterExceptionField{
		"CHANGE_ACTION",
		"WAF_ACTION",
		"WAF_OVERRIDE_ACTION",
		"PREDICATE_TYPE",
		"IPSET_TYPE",
		"BYTE_MATCH_FIELD_TYPE",
		"SQL_INJECTION_MATCH_FIELD_TYPE",
		"BYTE_MATCH_TEXT_TRANSFORMATION",
		"BYTE_MATCH_POSITIONAL_CONSTRAINT",
		"SIZE_CONSTRAINT_COMPARISON_OPERATOR",
		"GEO_MATCH_LOCATION_TYPE",
		"GEO_MATCH_LOCATION_VALUE",
		"RATE_KEY",
		"RULE_TYPE",
		"NEXT_MARKER",
		"RESOURCE_ARN",
		"TAGS",
		"TAG_KEYS",
	}
}

type ParameterExceptionReason string

// Enum values for ParameterExceptionReason
const (
	ParameterExceptionReasonInvalidOption      ParameterExceptionReason = "INVALID_OPTION"
	ParameterExceptionReasonIllegalCombination ParameterExceptionReason = "ILLEGAL_COMBINATION"
	ParameterExceptionReasonIllegalArgument    ParameterExceptionReason = "ILLEGAL_ARGUMENT"
	ParameterExceptionReasonInvalidTagKey      ParameterExceptionReason = "INVALID_TAG_KEY"
)

// Values returns all known values for ParameterExceptionReason. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ParameterExceptionReason) Values() []ParameterExceptionReason {
	return []ParameterExceptionReason{
		"INVALID_OPTION",
		"ILLEGAL_COMBINATION",
		"ILLEGAL_ARGUMENT",
		"INVALID_TAG_KEY",
	}
}

type PositionalConstraint string

// Enum values for PositionalConstraint
const (
	PositionalConstraintExactly      PositionalConstraint = "EXACTLY"
	PositionalConstraintStartsWith   PositionalConstraint = "STARTS_WITH"
	PositionalConstraintEndsWith     PositionalConstraint = "ENDS_WITH"
	PositionalConstraintContains     PositionalConstraint = "CONTAINS"
	PositionalConstraintContainsWord PositionalConstraint = "CONTAINS_WORD"
)

// Values returns all known values for PositionalConstraint. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PositionalConstraint) Values() []PositionalConstraint {
	return []PositionalConstraint{
		"EXACTLY",
		"STARTS_WITH",
		"ENDS_WITH",
		"CONTAINS",
		"CONTAINS_WORD",
	}
}

type PredicateType string

// Enum values for PredicateType
const (
	PredicateTypeIpMatch           PredicateType = "IPMatch"
	PredicateTypeByteMatch         PredicateType = "ByteMatch"
	PredicateTypeSqlInjectionMatch PredicateType = "SqlInjectionMatch"
	PredicateTypeGeoMatch          PredicateType = "GeoMatch"
	PredicateTypeSizeConstraint    PredicateType = "SizeConstraint"
	PredicateTypeXssMatch          PredicateType = "XssMatch"
	PredicateTypeRegexMatch        PredicateType = "RegexMatch"
)

// Values returns all known values for PredicateType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PredicateType) Values() []PredicateType {
	return []PredicateType{
		"IPMatch",
		"ByteMatch",
		"SqlInjectionMatch",
		"GeoMatch",
		"SizeConstraint",
		"XssMatch",
		"RegexMatch",
	}
}

type RateKey string

// Enum values for RateKey
const (
	RateKeyIp RateKey = "IP"
)

// Values returns all known values for RateKey. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RateKey) Values() []RateKey {
	return []RateKey{
		"IP",
	}
}

type ResourceType string

// Enum values for ResourceType
const (
	ResourceTypeApplicationLoadBalancer ResourceType = "APPLICATION_LOAD_BALANCER"
	ResourceTypeApiGateway              ResourceType = "API_GATEWAY"
)

// Values returns all known values for ResourceType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ResourceType) Values() []ResourceType {
	return []ResourceType{
		"APPLICATION_LOAD_BALANCER",
		"API_GATEWAY",
	}
}

type TextTransformation string

// Enum values for TextTransformation
const (
	TextTransformationNone               TextTransformation = "NONE"
	TextTransformationCompressWhiteSpace TextTransformation = "COMPRESS_WHITE_SPACE"
	TextTransformationHtmlEntityDecode   TextTransformation = "HTML_ENTITY_DECODE"
	TextTransformationLowercase          TextTransformation = "LOWERCASE"
	TextTransformationCmdLine            TextTransformation = "CMD_LINE"
	TextTransformationUrlDecode          TextTransformation = "URL_DECODE"
)

// Values returns all known values for TextTransformation. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TextTransformation) Values() []TextTransformation {
	return []TextTransformation{
		"NONE",
		"COMPRESS_WHITE_SPACE",
		"HTML_ENTITY_DECODE",
		"LOWERCASE",
		"CMD_LINE",
		"URL_DECODE",
	}
}

type WafActionType string

// Enum values for WafActionType
const (
	WafActionTypeBlock WafActionType = "BLOCK"
	WafActionTypeAllow WafActionType = "ALLOW"
	WafActionTypeCount WafActionType = "COUNT"
)

// Values returns all known values for WafActionType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (WafActionType) Values() []WafActionType {
	return []WafActionType{
		"BLOCK",
		"ALLOW",
		"COUNT",
	}
}

type WafOverrideActionType string

// Enum values for WafOverrideActionType
const (
	WafOverrideActionTypeNone  WafOverrideActionType = "NONE"
	WafOverrideActionTypeCount WafOverrideActionType = "COUNT"
)

// Values returns all known values for WafOverrideActionType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (WafOverrideActionType) Values() []WafOverrideActionType {
	return []WafOverrideActionType{
		"NONE",
		"COUNT",
	}
}

type WafRuleType string

// Enum values for WafRuleType
const (
	WafRuleTypeRegular   WafRuleType = "REGULAR"
	WafRuleTypeRateBased WafRuleType = "RATE_BASED"
	WafRuleTypeGroup     WafRuleType = "GROUP"
)

// Values returns all known values for WafRuleType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (WafRuleType) Values() []WafRuleType {
	return []WafRuleType{
		"REGULAR",
		"RATE_BASED",
		"GROUP",
	}
}
