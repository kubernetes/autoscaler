// Code generated by smithy-go-codegen DO NOT EDIT.

package apptest

import (
	"context"
	"fmt"
	awsmiddleware "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/aws/middleware"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/service/apptest/types"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/middleware"
	smithyhttp "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/transport/http"
	"time"
)

// Gets a test configuration.
func (c *Client) GetTestConfiguration(ctx context.Context, params *GetTestConfigurationInput, optFns ...func(*Options)) (*GetTestConfigurationOutput, error) {
	if params == nil {
		params = &GetTestConfigurationInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "GetTestConfiguration", params, optFns, c.addOperationGetTestConfigurationMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*GetTestConfigurationOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetTestConfigurationInput struct {

	// The request test configuration ID.
	//
	// This member is required.
	TestConfigurationId *string

	// The test configuration version.
	TestConfigurationVersion *int32

	noSmithyDocumentSerde
}

type GetTestConfigurationOutput struct {

	// The creation time of the test configuration.
	//
	// This member is required.
	CreationTime *time.Time

	// The last update time of the test configuration.
	//
	// This member is required.
	LastUpdateTime *time.Time

	// The latest version of the test configuration.
	//
	// This member is required.
	LatestVersion *types.TestConfigurationLatestVersion

	// The test configuration name
	//
	// This member is required.
	Name *string

	// The properties of the test configuration.
	//
	// This member is required.
	Properties map[string]string

	// The resources of the test configuration.
	//
	// This member is required.
	Resources []types.Resource

	// The status of the test configuration.
	//
	// This member is required.
	Status types.TestConfigurationLifecycle

	// The test configuration Amazon Resource Name (ARN).
	//
	// This member is required.
	TestConfigurationArn *string

	// The response test configuration ID.
	//
	// This member is required.
	TestConfigurationId *string

	// The test configuration version.
	//
	// This member is required.
	TestConfigurationVersion *int32

	// The description of the test configuration.
	Description *string

	// The service settings of the test configuration.
	ServiceSettings *types.ServiceSettings

	// The status reason of the test configuration.
	StatusReason *string

	// The tags of the test configuration.
	Tags map[string]string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationGetTestConfigurationMiddlewares(stack *middleware.Stack, options Options) (err error) {
	if err := stack.Serialize.Add(&setOperationInputMiddleware{}, middleware.After); err != nil {
		return err
	}
	err = stack.Serialize.Add(&awsRestjson1_serializeOpGetTestConfiguration{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpGetTestConfiguration{}, middleware.After)
	if err != nil {
		return err
	}
	if err := addProtocolFinalizerMiddlewares(stack, options, "GetTestConfiguration"); err != nil {
		return fmt.Errorf("add protocol finalizers: %v", err)
	}

	if err = addlegacyEndpointContextSetter(stack, options); err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = addClientRequestID(stack); err != nil {
		return err
	}
	if err = addComputeContentLength(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = addComputePayloadSHA256(stack); err != nil {
		return err
	}
	if err = addRetry(stack, options); err != nil {
		return err
	}
	if err = addRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = addRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addSpanRetryLoop(stack, options); err != nil {
		return err
	}
	if err = addClientUserAgent(stack, options); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addSetLegacyContextSigningOptionsMiddleware(stack); err != nil {
		return err
	}
	if err = addTimeOffsetBuild(stack, c); err != nil {
		return err
	}
	if err = addUserAgentRetryMode(stack, options); err != nil {
		return err
	}
	if err = addCredentialSource(stack, options); err != nil {
		return err
	}
	if err = addOpGetTestConfigurationValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opGetTestConfiguration(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRecursionDetection(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	if err = addDisableHTTPSMiddleware(stack, options); err != nil {
		return err
	}
	if err = addSpanInitializeStart(stack); err != nil {
		return err
	}
	if err = addSpanInitializeEnd(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestStart(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestEnd(stack); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opGetTestConfiguration(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		OperationName: "GetTestConfiguration",
	}
}
