// Code generated by smithy-go-codegen DO NOT EDIT.

package apptest

import (
	"context"
	"fmt"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/service/apptest/types"
	smithy "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/middleware"
)

type validateOpCreateTestCase struct {
}

func (*validateOpCreateTestCase) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateTestCase) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateTestCaseInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateTestCaseInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateTestConfiguration struct {
}

func (*validateOpCreateTestConfiguration) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateTestConfiguration) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateTestConfigurationInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateTestConfigurationInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateTestSuite struct {
}

func (*validateOpCreateTestSuite) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateTestSuite) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateTestSuiteInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateTestSuiteInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteTestCase struct {
}

func (*validateOpDeleteTestCase) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteTestCase) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteTestCaseInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteTestCaseInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteTestConfiguration struct {
}

func (*validateOpDeleteTestConfiguration) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteTestConfiguration) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteTestConfigurationInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteTestConfigurationInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteTestRun struct {
}

func (*validateOpDeleteTestRun) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteTestRun) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteTestRunInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteTestRunInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteTestSuite struct {
}

func (*validateOpDeleteTestSuite) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteTestSuite) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteTestSuiteInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteTestSuiteInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetTestCase struct {
}

func (*validateOpGetTestCase) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetTestCase) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetTestCaseInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetTestCaseInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetTestConfiguration struct {
}

func (*validateOpGetTestConfiguration) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetTestConfiguration) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetTestConfigurationInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetTestConfigurationInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetTestRunStep struct {
}

func (*validateOpGetTestRunStep) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetTestRunStep) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetTestRunStepInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetTestRunStepInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetTestSuite struct {
}

func (*validateOpGetTestSuite) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetTestSuite) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetTestSuiteInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetTestSuiteInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListTagsForResource struct {
}

func (*validateOpListTagsForResource) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListTagsForResource) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListTagsForResourceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListTagsForResourceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListTestRunSteps struct {
}

func (*validateOpListTestRunSteps) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListTestRunSteps) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListTestRunStepsInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListTestRunStepsInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListTestRunTestCases struct {
}

func (*validateOpListTestRunTestCases) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListTestRunTestCases) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListTestRunTestCasesInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListTestRunTestCasesInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpStartTestRun struct {
}

func (*validateOpStartTestRun) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpStartTestRun) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*StartTestRunInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpStartTestRunInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpTagResource struct {
}

func (*validateOpTagResource) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpTagResource) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*TagResourceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpTagResourceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUntagResource struct {
}

func (*validateOpUntagResource) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUntagResource) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UntagResourceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUntagResourceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateTestCase struct {
}

func (*validateOpUpdateTestCase) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateTestCase) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateTestCaseInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateTestCaseInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateTestConfiguration struct {
}

func (*validateOpUpdateTestConfiguration) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateTestConfiguration) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateTestConfigurationInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateTestConfigurationInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateTestSuite struct {
}

func (*validateOpUpdateTestSuite) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateTestSuite) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateTestSuiteInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateTestSuiteInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

func addOpCreateTestCaseValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateTestCase{}, middleware.After)
}

func addOpCreateTestConfigurationValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateTestConfiguration{}, middleware.After)
}

func addOpCreateTestSuiteValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateTestSuite{}, middleware.After)
}

func addOpDeleteTestCaseValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteTestCase{}, middleware.After)
}

func addOpDeleteTestConfigurationValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteTestConfiguration{}, middleware.After)
}

func addOpDeleteTestRunValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteTestRun{}, middleware.After)
}

func addOpDeleteTestSuiteValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteTestSuite{}, middleware.After)
}

func addOpGetTestCaseValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetTestCase{}, middleware.After)
}

func addOpGetTestConfigurationValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetTestConfiguration{}, middleware.After)
}

func addOpGetTestRunStepValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetTestRunStep{}, middleware.After)
}

func addOpGetTestSuiteValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetTestSuite{}, middleware.After)
}

func addOpListTagsForResourceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListTagsForResource{}, middleware.After)
}

func addOpListTestRunStepsValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListTestRunSteps{}, middleware.After)
}

func addOpListTestRunTestCasesValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListTestRunTestCases{}, middleware.After)
}

func addOpStartTestRunValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpStartTestRun{}, middleware.After)
}

func addOpTagResourceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpTagResource{}, middleware.After)
}

func addOpUntagResourceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUntagResource{}, middleware.After)
}

func addOpUpdateTestCaseValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateTestCase{}, middleware.After)
}

func addOpUpdateTestConfigurationValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateTestConfiguration{}, middleware.After)
}

func addOpUpdateTestSuiteValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateTestSuite{}, middleware.After)
}

func validateBatch(v *types.Batch) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "Batch"}
	if v.BatchJobName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("BatchJobName"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateCloudFormation(v *types.CloudFormation) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CloudFormation"}
	if v.TemplateLocation == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TemplateLocation"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateCloudFormationAction(v *types.CloudFormationAction) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CloudFormationAction"}
	if v.Resource == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Resource"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateCompareAction(v *types.CompareAction) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CompareAction"}
	if v.Input == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Input"))
	} else if v.Input != nil {
		if err := validateInput(v.Input); err != nil {
			invalidParams.AddNested("Input", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateDatabaseCDC(v *types.DatabaseCDC) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DatabaseCDC"}
	if v.SourceMetadata == nil {
		invalidParams.Add(smithy.NewErrParamRequired("SourceMetadata"))
	} else if v.SourceMetadata != nil {
		if err := validateSourceDatabaseMetadata(v.SourceMetadata); err != nil {
			invalidParams.AddNested("SourceMetadata", err.(smithy.InvalidParamsError))
		}
	}
	if v.TargetMetadata == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TargetMetadata"))
	} else if v.TargetMetadata != nil {
		if err := validateTargetDatabaseMetadata(v.TargetMetadata); err != nil {
			invalidParams.AddNested("TargetMetadata", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateDataSet(v *types.DataSet) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DataSet"}
	if len(v.Type) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Type"))
	}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.Ccsid == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Ccsid"))
	}
	if len(v.Format) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Format"))
	}
	if v.Length == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Length"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateDataSetList(v []types.DataSet) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DataSetList"}
	for i := range v {
		if err := validateDataSet(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateFileMetadata(v types.FileMetadata) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "FileMetadata"}
	switch uv := v.(type) {
	case *types.FileMetadataMemberDatabaseCDC:
		if err := validateDatabaseCDC(&uv.Value); err != nil {
			invalidParams.AddNested("[databaseCDC]", err.(smithy.InvalidParamsError))
		}

	case *types.FileMetadataMemberDataSets:
		if err := validateDataSetList(uv.Value); err != nil {
			invalidParams.AddNested("[dataSets]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateInput(v types.Input) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "Input"}
	switch uv := v.(type) {
	case *types.InputMemberFile:
		if err := validateInputFile(&uv.Value); err != nil {
			invalidParams.AddNested("[file]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateInputFile(v *types.InputFile) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "InputFile"}
	if v.SourceLocation == nil {
		invalidParams.Add(smithy.NewErrParamRequired("SourceLocation"))
	}
	if v.TargetLocation == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TargetLocation"))
	}
	if v.FileMetadata == nil {
		invalidParams.Add(smithy.NewErrParamRequired("FileMetadata"))
	} else if v.FileMetadata != nil {
		if err := validateFileMetadata(v.FileMetadata); err != nil {
			invalidParams.AddNested("FileMetadata", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateM2ManagedApplication(v *types.M2ManagedApplication) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "M2ManagedApplication"}
	if v.ApplicationId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApplicationId"))
	}
	if len(v.Runtime) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Runtime"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateM2ManagedApplicationAction(v *types.M2ManagedApplicationAction) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "M2ManagedApplicationAction"}
	if v.Resource == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Resource"))
	}
	if len(v.ActionType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("ActionType"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateM2NonManagedApplication(v *types.M2NonManagedApplication) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "M2NonManagedApplication"}
	if v.VpcEndpointServiceName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("VpcEndpointServiceName"))
	}
	if v.ListenerPort == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ListenerPort"))
	}
	if len(v.Runtime) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Runtime"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateM2NonManagedApplicationAction(v *types.M2NonManagedApplicationAction) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "M2NonManagedApplicationAction"}
	if v.Resource == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Resource"))
	}
	if len(v.ActionType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("ActionType"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateMainframeAction(v *types.MainframeAction) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "MainframeAction"}
	if v.Resource == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Resource"))
	}
	if v.ActionType == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ActionType"))
	} else if v.ActionType != nil {
		if err := validateMainframeActionType(v.ActionType); err != nil {
			invalidParams.AddNested("ActionType", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateMainframeActionType(v types.MainframeActionType) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "MainframeActionType"}
	switch uv := v.(type) {
	case *types.MainframeActionTypeMemberBatch:
		if err := validateBatch(&uv.Value); err != nil {
			invalidParams.AddNested("[batch]", err.(smithy.InvalidParamsError))
		}

	case *types.MainframeActionTypeMemberTn3270:
		if err := validateTN3270(&uv.Value); err != nil {
			invalidParams.AddNested("[tn3270]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateResource(v *types.Resource) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "Resource"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.Type == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Type"))
	} else if v.Type != nil {
		if err := validateResourceType(v.Type); err != nil {
			invalidParams.AddNested("Type", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateResourceAction(v types.ResourceAction) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ResourceAction"}
	switch uv := v.(type) {
	case *types.ResourceActionMemberCloudFormationAction:
		if err := validateCloudFormationAction(&uv.Value); err != nil {
			invalidParams.AddNested("[cloudFormationAction]", err.(smithy.InvalidParamsError))
		}

	case *types.ResourceActionMemberM2ManagedApplicationAction:
		if err := validateM2ManagedApplicationAction(&uv.Value); err != nil {
			invalidParams.AddNested("[m2ManagedApplicationAction]", err.(smithy.InvalidParamsError))
		}

	case *types.ResourceActionMemberM2NonManagedApplicationAction:
		if err := validateM2NonManagedApplicationAction(&uv.Value); err != nil {
			invalidParams.AddNested("[m2NonManagedApplicationAction]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateResourceList(v []types.Resource) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ResourceList"}
	for i := range v {
		if err := validateResource(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateResourceType(v types.ResourceType) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ResourceType"}
	switch uv := v.(type) {
	case *types.ResourceTypeMemberCloudFormation:
		if err := validateCloudFormation(&uv.Value); err != nil {
			invalidParams.AddNested("[cloudFormation]", err.(smithy.InvalidParamsError))
		}

	case *types.ResourceTypeMemberM2ManagedApplication:
		if err := validateM2ManagedApplication(&uv.Value); err != nil {
			invalidParams.AddNested("[m2ManagedApplication]", err.(smithy.InvalidParamsError))
		}

	case *types.ResourceTypeMemberM2NonManagedApplication:
		if err := validateM2NonManagedApplication(&uv.Value); err != nil {
			invalidParams.AddNested("[m2NonManagedApplication]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateScript(v *types.Script) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "Script"}
	if v.ScriptLocation == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ScriptLocation"))
	}
	if len(v.Type) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Type"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateSourceDatabaseMetadata(v *types.SourceDatabaseMetadata) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "SourceDatabaseMetadata"}
	if len(v.Type) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Type"))
	}
	if len(v.CaptureTool) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("CaptureTool"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateStep(v *types.Step) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "Step"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.Action == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Action"))
	} else if v.Action != nil {
		if err := validateStepAction(v.Action); err != nil {
			invalidParams.AddNested("Action", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateStepAction(v types.StepAction) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "StepAction"}
	switch uv := v.(type) {
	case *types.StepActionMemberCompareAction:
		if err := validateCompareAction(&uv.Value); err != nil {
			invalidParams.AddNested("[compareAction]", err.(smithy.InvalidParamsError))
		}

	case *types.StepActionMemberMainframeAction:
		if err := validateMainframeAction(&uv.Value); err != nil {
			invalidParams.AddNested("[mainframeAction]", err.(smithy.InvalidParamsError))
		}

	case *types.StepActionMemberResourceAction:
		if err := validateResourceAction(uv.Value); err != nil {
			invalidParams.AddNested("[resourceAction]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateStepList(v []types.Step) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "StepList"}
	for i := range v {
		if err := validateStep(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateTargetDatabaseMetadata(v *types.TargetDatabaseMetadata) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "TargetDatabaseMetadata"}
	if len(v.Type) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Type"))
	}
	if len(v.CaptureTool) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("CaptureTool"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateTN3270(v *types.TN3270) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "TN3270"}
	if v.Script == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Script"))
	} else if v.Script != nil {
		if err := validateScript(v.Script); err != nil {
			invalidParams.AddNested("Script", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateTestCaseInput(v *CreateTestCaseInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateTestCaseInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.Steps == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Steps"))
	} else if v.Steps != nil {
		if err := validateStepList(v.Steps); err != nil {
			invalidParams.AddNested("Steps", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateTestConfigurationInput(v *CreateTestConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateTestConfigurationInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.Resources == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Resources"))
	} else if v.Resources != nil {
		if err := validateResourceList(v.Resources); err != nil {
			invalidParams.AddNested("Resources", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateTestSuiteInput(v *CreateTestSuiteInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateTestSuiteInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.BeforeSteps != nil {
		if err := validateStepList(v.BeforeSteps); err != nil {
			invalidParams.AddNested("BeforeSteps", err.(smithy.InvalidParamsError))
		}
	}
	if v.AfterSteps != nil {
		if err := validateStepList(v.AfterSteps); err != nil {
			invalidParams.AddNested("AfterSteps", err.(smithy.InvalidParamsError))
		}
	}
	if v.TestCases == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TestCases"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteTestCaseInput(v *DeleteTestCaseInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteTestCaseInput"}
	if v.TestCaseId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TestCaseId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteTestConfigurationInput(v *DeleteTestConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteTestConfigurationInput"}
	if v.TestConfigurationId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TestConfigurationId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteTestRunInput(v *DeleteTestRunInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteTestRunInput"}
	if v.TestRunId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TestRunId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteTestSuiteInput(v *DeleteTestSuiteInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteTestSuiteInput"}
	if v.TestSuiteId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TestSuiteId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetTestCaseInput(v *GetTestCaseInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetTestCaseInput"}
	if v.TestCaseId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TestCaseId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetTestConfigurationInput(v *GetTestConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetTestConfigurationInput"}
	if v.TestConfigurationId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TestConfigurationId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetTestRunStepInput(v *GetTestRunStepInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetTestRunStepInput"}
	if v.TestRunId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TestRunId"))
	}
	if v.StepName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("StepName"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetTestSuiteInput(v *GetTestSuiteInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetTestSuiteInput"}
	if v.TestSuiteId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TestSuiteId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListTagsForResourceInput(v *ListTagsForResourceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListTagsForResourceInput"}
	if v.ResourceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ResourceArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListTestRunStepsInput(v *ListTestRunStepsInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListTestRunStepsInput"}
	if v.TestRunId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TestRunId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListTestRunTestCasesInput(v *ListTestRunTestCasesInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListTestRunTestCasesInput"}
	if v.TestRunId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TestRunId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpStartTestRunInput(v *StartTestRunInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "StartTestRunInput"}
	if v.TestSuiteId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TestSuiteId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpTagResourceInput(v *TagResourceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "TagResourceInput"}
	if v.ResourceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ResourceArn"))
	}
	if v.Tags == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Tags"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUntagResourceInput(v *UntagResourceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UntagResourceInput"}
	if v.ResourceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ResourceArn"))
	}
	if v.TagKeys == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TagKeys"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateTestCaseInput(v *UpdateTestCaseInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateTestCaseInput"}
	if v.TestCaseId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TestCaseId"))
	}
	if v.Steps != nil {
		if err := validateStepList(v.Steps); err != nil {
			invalidParams.AddNested("Steps", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateTestConfigurationInput(v *UpdateTestConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateTestConfigurationInput"}
	if v.TestConfigurationId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TestConfigurationId"))
	}
	if v.Resources != nil {
		if err := validateResourceList(v.Resources); err != nil {
			invalidParams.AddNested("Resources", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateTestSuiteInput(v *UpdateTestSuiteInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateTestSuiteInput"}
	if v.TestSuiteId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TestSuiteId"))
	}
	if v.BeforeSteps != nil {
		if err := validateStepList(v.BeforeSteps); err != nil {
			invalidParams.AddNested("BeforeSteps", err.(smithy.InvalidParamsError))
		}
	}
	if v.AfterSteps != nil {
		if err := validateStepList(v.AfterSteps); err != nil {
			invalidParams.AddNested("AfterSteps", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}
