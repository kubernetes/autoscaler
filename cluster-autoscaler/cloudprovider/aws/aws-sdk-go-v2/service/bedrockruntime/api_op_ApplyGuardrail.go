// Code generated by smithy-go-codegen DO NOT EDIT.

package bedrockruntime

import (
	"context"
	"fmt"
	awsmiddleware "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/aws/middleware"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/service/bedrockruntime/types"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/middleware"
	smithyhttp "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/transport/http"
)

// The action to apply a guardrail.
//
// For troubleshooting some of the common errors you might encounter when using
// the ApplyGuardrail API, see [Troubleshooting Amazon Bedrock API Error Codes] in the Amazon Bedrock User Guide
//
// [Troubleshooting Amazon Bedrock API Error Codes]: https://docs.aws.amazon.com/bedrock/latest/userguide/troubleshooting-api-error-codes.html
func (c *Client) ApplyGuardrail(ctx context.Context, params *ApplyGuardrailInput, optFns ...func(*Options)) (*ApplyGuardrailOutput, error) {
	if params == nil {
		params = &ApplyGuardrailInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "ApplyGuardrail", params, optFns, c.addOperationApplyGuardrailMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*ApplyGuardrailOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ApplyGuardrailInput struct {

	// The content details used in the request to apply the guardrail.
	//
	// This member is required.
	Content []types.GuardrailContentBlock

	// The guardrail identifier used in the request to apply the guardrail.
	//
	// This member is required.
	GuardrailIdentifier *string

	// The guardrail version used in the request to apply the guardrail.
	//
	// This member is required.
	GuardrailVersion *string

	// The source of data used in the request to apply the guardrail.
	//
	// This member is required.
	Source types.GuardrailContentSource

	// Specifies the scope of the output that you get in the response. Set to FULL to
	// return the entire output, including any detected and non-detected entries in the
	// response for enhanced debugging.
	//
	// Note that the full output scope doesn't apply to word filters or regex in
	// sensitive information filters. It does apply to all other filtering policies,
	// including sensitive information with filters that can detect personally
	// identifiable information (PII).
	OutputScope types.GuardrailOutputScope

	noSmithyDocumentSerde
}

type ApplyGuardrailOutput struct {

	// The action taken in the response from the guardrail.
	//
	// This member is required.
	Action types.GuardrailAction

	// The assessment details in the response from the guardrail.
	//
	// This member is required.
	Assessments []types.GuardrailAssessment

	// The output details in the response from the guardrail.
	//
	// This member is required.
	Outputs []types.GuardrailOutputContent

	// The usage details in the response from the guardrail.
	//
	// This member is required.
	Usage *types.GuardrailUsage

	// The reason for the action taken when harmful content is detected.
	ActionReason *string

	// The guardrail coverage details in the apply guardrail response.
	GuardrailCoverage *types.GuardrailCoverage

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationApplyGuardrailMiddlewares(stack *middleware.Stack, options Options) (err error) {
	if err := stack.Serialize.Add(&setOperationInputMiddleware{}, middleware.After); err != nil {
		return err
	}
	err = stack.Serialize.Add(&awsRestjson1_serializeOpApplyGuardrail{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpApplyGuardrail{}, middleware.After)
	if err != nil {
		return err
	}
	if err := addProtocolFinalizerMiddlewares(stack, options, "ApplyGuardrail"); err != nil {
		return fmt.Errorf("add protocol finalizers: %v", err)
	}

	if err = addlegacyEndpointContextSetter(stack, options); err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = addClientRequestID(stack); err != nil {
		return err
	}
	if err = addComputeContentLength(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = addComputePayloadSHA256(stack); err != nil {
		return err
	}
	if err = addRetry(stack, options); err != nil {
		return err
	}
	if err = addRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = addRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addSpanRetryLoop(stack, options); err != nil {
		return err
	}
	if err = addClientUserAgent(stack, options); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addSetLegacyContextSigningOptionsMiddleware(stack); err != nil {
		return err
	}
	if err = addTimeOffsetBuild(stack, c); err != nil {
		return err
	}
	if err = addUserAgentRetryMode(stack, options); err != nil {
		return err
	}
	if err = addCredentialSource(stack, options); err != nil {
		return err
	}
	if err = addOpApplyGuardrailValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opApplyGuardrail(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRecursionDetection(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	if err = addDisableHTTPSMiddleware(stack, options); err != nil {
		return err
	}
	if err = addSpanInitializeStart(stack); err != nil {
		return err
	}
	if err = addSpanInitializeEnd(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestStart(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestEnd(stack); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opApplyGuardrail(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		OperationName: "ApplyGuardrail",
	}
}
