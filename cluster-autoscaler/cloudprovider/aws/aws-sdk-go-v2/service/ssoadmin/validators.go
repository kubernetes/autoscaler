// Code generated by smithy-go-codegen DO NOT EDIT.

package ssoadmin

import (
	"context"
	"fmt"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/service/ssoadmin/types"
	smithy "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/middleware"
)

type validateOpAttachCustomerManagedPolicyReferenceToPermissionSet struct {
}

func (*validateOpAttachCustomerManagedPolicyReferenceToPermissionSet) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpAttachCustomerManagedPolicyReferenceToPermissionSet) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*AttachCustomerManagedPolicyReferenceToPermissionSetInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpAttachCustomerManagedPolicyReferenceToPermissionSetInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpAttachManagedPolicyToPermissionSet struct {
}

func (*validateOpAttachManagedPolicyToPermissionSet) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpAttachManagedPolicyToPermissionSet) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*AttachManagedPolicyToPermissionSetInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpAttachManagedPolicyToPermissionSetInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateAccountAssignment struct {
}

func (*validateOpCreateAccountAssignment) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateAccountAssignment) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateAccountAssignmentInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateAccountAssignmentInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateApplicationAssignment struct {
}

func (*validateOpCreateApplicationAssignment) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateApplicationAssignment) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateApplicationAssignmentInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateApplicationAssignmentInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateApplication struct {
}

func (*validateOpCreateApplication) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateApplication) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateApplicationInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateApplicationInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateInstanceAccessControlAttributeConfiguration struct {
}

func (*validateOpCreateInstanceAccessControlAttributeConfiguration) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateInstanceAccessControlAttributeConfiguration) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateInstanceAccessControlAttributeConfigurationInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateInstanceAccessControlAttributeConfigurationInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateInstance struct {
}

func (*validateOpCreateInstance) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateInstance) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateInstanceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateInstanceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreatePermissionSet struct {
}

func (*validateOpCreatePermissionSet) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreatePermissionSet) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreatePermissionSetInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreatePermissionSetInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateTrustedTokenIssuer struct {
}

func (*validateOpCreateTrustedTokenIssuer) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateTrustedTokenIssuer) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateTrustedTokenIssuerInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateTrustedTokenIssuerInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteAccountAssignment struct {
}

func (*validateOpDeleteAccountAssignment) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteAccountAssignment) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteAccountAssignmentInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteAccountAssignmentInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteApplicationAccessScope struct {
}

func (*validateOpDeleteApplicationAccessScope) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteApplicationAccessScope) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteApplicationAccessScopeInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteApplicationAccessScopeInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteApplicationAssignment struct {
}

func (*validateOpDeleteApplicationAssignment) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteApplicationAssignment) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteApplicationAssignmentInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteApplicationAssignmentInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteApplicationAuthenticationMethod struct {
}

func (*validateOpDeleteApplicationAuthenticationMethod) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteApplicationAuthenticationMethod) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteApplicationAuthenticationMethodInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteApplicationAuthenticationMethodInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteApplicationGrant struct {
}

func (*validateOpDeleteApplicationGrant) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteApplicationGrant) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteApplicationGrantInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteApplicationGrantInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteApplication struct {
}

func (*validateOpDeleteApplication) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteApplication) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteApplicationInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteApplicationInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteInlinePolicyFromPermissionSet struct {
}

func (*validateOpDeleteInlinePolicyFromPermissionSet) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteInlinePolicyFromPermissionSet) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteInlinePolicyFromPermissionSetInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteInlinePolicyFromPermissionSetInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteInstanceAccessControlAttributeConfiguration struct {
}

func (*validateOpDeleteInstanceAccessControlAttributeConfiguration) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteInstanceAccessControlAttributeConfiguration) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteInstanceAccessControlAttributeConfigurationInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteInstanceAccessControlAttributeConfigurationInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteInstance struct {
}

func (*validateOpDeleteInstance) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteInstance) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteInstanceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteInstanceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeletePermissionsBoundaryFromPermissionSet struct {
}

func (*validateOpDeletePermissionsBoundaryFromPermissionSet) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeletePermissionsBoundaryFromPermissionSet) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeletePermissionsBoundaryFromPermissionSetInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeletePermissionsBoundaryFromPermissionSetInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeletePermissionSet struct {
}

func (*validateOpDeletePermissionSet) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeletePermissionSet) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeletePermissionSetInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeletePermissionSetInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteTrustedTokenIssuer struct {
}

func (*validateOpDeleteTrustedTokenIssuer) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteTrustedTokenIssuer) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteTrustedTokenIssuerInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteTrustedTokenIssuerInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDescribeAccountAssignmentCreationStatus struct {
}

func (*validateOpDescribeAccountAssignmentCreationStatus) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDescribeAccountAssignmentCreationStatus) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DescribeAccountAssignmentCreationStatusInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDescribeAccountAssignmentCreationStatusInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDescribeAccountAssignmentDeletionStatus struct {
}

func (*validateOpDescribeAccountAssignmentDeletionStatus) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDescribeAccountAssignmentDeletionStatus) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DescribeAccountAssignmentDeletionStatusInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDescribeAccountAssignmentDeletionStatusInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDescribeApplicationAssignment struct {
}

func (*validateOpDescribeApplicationAssignment) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDescribeApplicationAssignment) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DescribeApplicationAssignmentInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDescribeApplicationAssignmentInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDescribeApplication struct {
}

func (*validateOpDescribeApplication) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDescribeApplication) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DescribeApplicationInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDescribeApplicationInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDescribeApplicationProvider struct {
}

func (*validateOpDescribeApplicationProvider) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDescribeApplicationProvider) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DescribeApplicationProviderInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDescribeApplicationProviderInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDescribeInstanceAccessControlAttributeConfiguration struct {
}

func (*validateOpDescribeInstanceAccessControlAttributeConfiguration) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDescribeInstanceAccessControlAttributeConfiguration) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DescribeInstanceAccessControlAttributeConfigurationInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDescribeInstanceAccessControlAttributeConfigurationInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDescribeInstance struct {
}

func (*validateOpDescribeInstance) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDescribeInstance) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DescribeInstanceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDescribeInstanceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDescribePermissionSet struct {
}

func (*validateOpDescribePermissionSet) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDescribePermissionSet) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DescribePermissionSetInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDescribePermissionSetInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDescribePermissionSetProvisioningStatus struct {
}

func (*validateOpDescribePermissionSetProvisioningStatus) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDescribePermissionSetProvisioningStatus) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DescribePermissionSetProvisioningStatusInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDescribePermissionSetProvisioningStatusInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDescribeTrustedTokenIssuer struct {
}

func (*validateOpDescribeTrustedTokenIssuer) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDescribeTrustedTokenIssuer) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DescribeTrustedTokenIssuerInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDescribeTrustedTokenIssuerInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDetachCustomerManagedPolicyReferenceFromPermissionSet struct {
}

func (*validateOpDetachCustomerManagedPolicyReferenceFromPermissionSet) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDetachCustomerManagedPolicyReferenceFromPermissionSet) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DetachCustomerManagedPolicyReferenceFromPermissionSetInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDetachCustomerManagedPolicyReferenceFromPermissionSetInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDetachManagedPolicyFromPermissionSet struct {
}

func (*validateOpDetachManagedPolicyFromPermissionSet) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDetachManagedPolicyFromPermissionSet) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DetachManagedPolicyFromPermissionSetInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDetachManagedPolicyFromPermissionSetInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetApplicationAccessScope struct {
}

func (*validateOpGetApplicationAccessScope) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetApplicationAccessScope) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetApplicationAccessScopeInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetApplicationAccessScopeInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetApplicationAssignmentConfiguration struct {
}

func (*validateOpGetApplicationAssignmentConfiguration) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetApplicationAssignmentConfiguration) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetApplicationAssignmentConfigurationInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetApplicationAssignmentConfigurationInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetApplicationAuthenticationMethod struct {
}

func (*validateOpGetApplicationAuthenticationMethod) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetApplicationAuthenticationMethod) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetApplicationAuthenticationMethodInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetApplicationAuthenticationMethodInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetApplicationGrant struct {
}

func (*validateOpGetApplicationGrant) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetApplicationGrant) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetApplicationGrantInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetApplicationGrantInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetInlinePolicyForPermissionSet struct {
}

func (*validateOpGetInlinePolicyForPermissionSet) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetInlinePolicyForPermissionSet) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetInlinePolicyForPermissionSetInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetInlinePolicyForPermissionSetInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetPermissionsBoundaryForPermissionSet struct {
}

func (*validateOpGetPermissionsBoundaryForPermissionSet) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetPermissionsBoundaryForPermissionSet) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetPermissionsBoundaryForPermissionSetInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetPermissionsBoundaryForPermissionSetInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListAccountAssignmentCreationStatus struct {
}

func (*validateOpListAccountAssignmentCreationStatus) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListAccountAssignmentCreationStatus) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListAccountAssignmentCreationStatusInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListAccountAssignmentCreationStatusInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListAccountAssignmentDeletionStatus struct {
}

func (*validateOpListAccountAssignmentDeletionStatus) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListAccountAssignmentDeletionStatus) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListAccountAssignmentDeletionStatusInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListAccountAssignmentDeletionStatusInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListAccountAssignmentsForPrincipal struct {
}

func (*validateOpListAccountAssignmentsForPrincipal) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListAccountAssignmentsForPrincipal) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListAccountAssignmentsForPrincipalInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListAccountAssignmentsForPrincipalInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListAccountAssignments struct {
}

func (*validateOpListAccountAssignments) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListAccountAssignments) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListAccountAssignmentsInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListAccountAssignmentsInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListAccountsForProvisionedPermissionSet struct {
}

func (*validateOpListAccountsForProvisionedPermissionSet) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListAccountsForProvisionedPermissionSet) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListAccountsForProvisionedPermissionSetInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListAccountsForProvisionedPermissionSetInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListApplicationAccessScopes struct {
}

func (*validateOpListApplicationAccessScopes) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListApplicationAccessScopes) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListApplicationAccessScopesInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListApplicationAccessScopesInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListApplicationAssignmentsForPrincipal struct {
}

func (*validateOpListApplicationAssignmentsForPrincipal) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListApplicationAssignmentsForPrincipal) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListApplicationAssignmentsForPrincipalInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListApplicationAssignmentsForPrincipalInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListApplicationAssignments struct {
}

func (*validateOpListApplicationAssignments) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListApplicationAssignments) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListApplicationAssignmentsInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListApplicationAssignmentsInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListApplicationAuthenticationMethods struct {
}

func (*validateOpListApplicationAuthenticationMethods) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListApplicationAuthenticationMethods) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListApplicationAuthenticationMethodsInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListApplicationAuthenticationMethodsInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListApplicationGrants struct {
}

func (*validateOpListApplicationGrants) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListApplicationGrants) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListApplicationGrantsInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListApplicationGrantsInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListApplications struct {
}

func (*validateOpListApplications) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListApplications) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListApplicationsInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListApplicationsInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListCustomerManagedPolicyReferencesInPermissionSet struct {
}

func (*validateOpListCustomerManagedPolicyReferencesInPermissionSet) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListCustomerManagedPolicyReferencesInPermissionSet) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListCustomerManagedPolicyReferencesInPermissionSetInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListCustomerManagedPolicyReferencesInPermissionSetInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListManagedPoliciesInPermissionSet struct {
}

func (*validateOpListManagedPoliciesInPermissionSet) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListManagedPoliciesInPermissionSet) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListManagedPoliciesInPermissionSetInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListManagedPoliciesInPermissionSetInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListPermissionSetProvisioningStatus struct {
}

func (*validateOpListPermissionSetProvisioningStatus) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListPermissionSetProvisioningStatus) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListPermissionSetProvisioningStatusInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListPermissionSetProvisioningStatusInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListPermissionSets struct {
}

func (*validateOpListPermissionSets) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListPermissionSets) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListPermissionSetsInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListPermissionSetsInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListPermissionSetsProvisionedToAccount struct {
}

func (*validateOpListPermissionSetsProvisionedToAccount) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListPermissionSetsProvisionedToAccount) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListPermissionSetsProvisionedToAccountInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListPermissionSetsProvisionedToAccountInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListTagsForResource struct {
}

func (*validateOpListTagsForResource) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListTagsForResource) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListTagsForResourceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListTagsForResourceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListTrustedTokenIssuers struct {
}

func (*validateOpListTrustedTokenIssuers) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListTrustedTokenIssuers) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListTrustedTokenIssuersInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListTrustedTokenIssuersInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpProvisionPermissionSet struct {
}

func (*validateOpProvisionPermissionSet) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpProvisionPermissionSet) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ProvisionPermissionSetInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpProvisionPermissionSetInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpPutApplicationAccessScope struct {
}

func (*validateOpPutApplicationAccessScope) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpPutApplicationAccessScope) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*PutApplicationAccessScopeInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpPutApplicationAccessScopeInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpPutApplicationAssignmentConfiguration struct {
}

func (*validateOpPutApplicationAssignmentConfiguration) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpPutApplicationAssignmentConfiguration) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*PutApplicationAssignmentConfigurationInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpPutApplicationAssignmentConfigurationInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpPutApplicationAuthenticationMethod struct {
}

func (*validateOpPutApplicationAuthenticationMethod) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpPutApplicationAuthenticationMethod) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*PutApplicationAuthenticationMethodInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpPutApplicationAuthenticationMethodInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpPutApplicationGrant struct {
}

func (*validateOpPutApplicationGrant) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpPutApplicationGrant) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*PutApplicationGrantInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpPutApplicationGrantInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpPutInlinePolicyToPermissionSet struct {
}

func (*validateOpPutInlinePolicyToPermissionSet) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpPutInlinePolicyToPermissionSet) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*PutInlinePolicyToPermissionSetInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpPutInlinePolicyToPermissionSetInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpPutPermissionsBoundaryToPermissionSet struct {
}

func (*validateOpPutPermissionsBoundaryToPermissionSet) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpPutPermissionsBoundaryToPermissionSet) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*PutPermissionsBoundaryToPermissionSetInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpPutPermissionsBoundaryToPermissionSetInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpTagResource struct {
}

func (*validateOpTagResource) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpTagResource) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*TagResourceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpTagResourceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUntagResource struct {
}

func (*validateOpUntagResource) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUntagResource) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UntagResourceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUntagResourceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateApplication struct {
}

func (*validateOpUpdateApplication) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateApplication) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateApplicationInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateApplicationInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateInstanceAccessControlAttributeConfiguration struct {
}

func (*validateOpUpdateInstanceAccessControlAttributeConfiguration) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateInstanceAccessControlAttributeConfiguration) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateInstanceAccessControlAttributeConfigurationInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateInstanceAccessControlAttributeConfigurationInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateInstance struct {
}

func (*validateOpUpdateInstance) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateInstance) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateInstanceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateInstanceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdatePermissionSet struct {
}

func (*validateOpUpdatePermissionSet) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdatePermissionSet) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdatePermissionSetInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdatePermissionSetInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateTrustedTokenIssuer struct {
}

func (*validateOpUpdateTrustedTokenIssuer) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateTrustedTokenIssuer) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateTrustedTokenIssuerInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateTrustedTokenIssuerInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

func addOpAttachCustomerManagedPolicyReferenceToPermissionSetValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpAttachCustomerManagedPolicyReferenceToPermissionSet{}, middleware.After)
}

func addOpAttachManagedPolicyToPermissionSetValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpAttachManagedPolicyToPermissionSet{}, middleware.After)
}

func addOpCreateAccountAssignmentValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateAccountAssignment{}, middleware.After)
}

func addOpCreateApplicationAssignmentValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateApplicationAssignment{}, middleware.After)
}

func addOpCreateApplicationValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateApplication{}, middleware.After)
}

func addOpCreateInstanceAccessControlAttributeConfigurationValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateInstanceAccessControlAttributeConfiguration{}, middleware.After)
}

func addOpCreateInstanceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateInstance{}, middleware.After)
}

func addOpCreatePermissionSetValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreatePermissionSet{}, middleware.After)
}

func addOpCreateTrustedTokenIssuerValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateTrustedTokenIssuer{}, middleware.After)
}

func addOpDeleteAccountAssignmentValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteAccountAssignment{}, middleware.After)
}

func addOpDeleteApplicationAccessScopeValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteApplicationAccessScope{}, middleware.After)
}

func addOpDeleteApplicationAssignmentValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteApplicationAssignment{}, middleware.After)
}

func addOpDeleteApplicationAuthenticationMethodValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteApplicationAuthenticationMethod{}, middleware.After)
}

func addOpDeleteApplicationGrantValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteApplicationGrant{}, middleware.After)
}

func addOpDeleteApplicationValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteApplication{}, middleware.After)
}

func addOpDeleteInlinePolicyFromPermissionSetValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteInlinePolicyFromPermissionSet{}, middleware.After)
}

func addOpDeleteInstanceAccessControlAttributeConfigurationValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteInstanceAccessControlAttributeConfiguration{}, middleware.After)
}

func addOpDeleteInstanceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteInstance{}, middleware.After)
}

func addOpDeletePermissionsBoundaryFromPermissionSetValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeletePermissionsBoundaryFromPermissionSet{}, middleware.After)
}

func addOpDeletePermissionSetValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeletePermissionSet{}, middleware.After)
}

func addOpDeleteTrustedTokenIssuerValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteTrustedTokenIssuer{}, middleware.After)
}

func addOpDescribeAccountAssignmentCreationStatusValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDescribeAccountAssignmentCreationStatus{}, middleware.After)
}

func addOpDescribeAccountAssignmentDeletionStatusValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDescribeAccountAssignmentDeletionStatus{}, middleware.After)
}

func addOpDescribeApplicationAssignmentValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDescribeApplicationAssignment{}, middleware.After)
}

func addOpDescribeApplicationValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDescribeApplication{}, middleware.After)
}

func addOpDescribeApplicationProviderValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDescribeApplicationProvider{}, middleware.After)
}

func addOpDescribeInstanceAccessControlAttributeConfigurationValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDescribeInstanceAccessControlAttributeConfiguration{}, middleware.After)
}

func addOpDescribeInstanceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDescribeInstance{}, middleware.After)
}

func addOpDescribePermissionSetValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDescribePermissionSet{}, middleware.After)
}

func addOpDescribePermissionSetProvisioningStatusValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDescribePermissionSetProvisioningStatus{}, middleware.After)
}

func addOpDescribeTrustedTokenIssuerValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDescribeTrustedTokenIssuer{}, middleware.After)
}

func addOpDetachCustomerManagedPolicyReferenceFromPermissionSetValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDetachCustomerManagedPolicyReferenceFromPermissionSet{}, middleware.After)
}

func addOpDetachManagedPolicyFromPermissionSetValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDetachManagedPolicyFromPermissionSet{}, middleware.After)
}

func addOpGetApplicationAccessScopeValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetApplicationAccessScope{}, middleware.After)
}

func addOpGetApplicationAssignmentConfigurationValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetApplicationAssignmentConfiguration{}, middleware.After)
}

func addOpGetApplicationAuthenticationMethodValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetApplicationAuthenticationMethod{}, middleware.After)
}

func addOpGetApplicationGrantValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetApplicationGrant{}, middleware.After)
}

func addOpGetInlinePolicyForPermissionSetValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetInlinePolicyForPermissionSet{}, middleware.After)
}

func addOpGetPermissionsBoundaryForPermissionSetValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetPermissionsBoundaryForPermissionSet{}, middleware.After)
}

func addOpListAccountAssignmentCreationStatusValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListAccountAssignmentCreationStatus{}, middleware.After)
}

func addOpListAccountAssignmentDeletionStatusValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListAccountAssignmentDeletionStatus{}, middleware.After)
}

func addOpListAccountAssignmentsForPrincipalValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListAccountAssignmentsForPrincipal{}, middleware.After)
}

func addOpListAccountAssignmentsValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListAccountAssignments{}, middleware.After)
}

func addOpListAccountsForProvisionedPermissionSetValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListAccountsForProvisionedPermissionSet{}, middleware.After)
}

func addOpListApplicationAccessScopesValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListApplicationAccessScopes{}, middleware.After)
}

func addOpListApplicationAssignmentsForPrincipalValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListApplicationAssignmentsForPrincipal{}, middleware.After)
}

func addOpListApplicationAssignmentsValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListApplicationAssignments{}, middleware.After)
}

func addOpListApplicationAuthenticationMethodsValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListApplicationAuthenticationMethods{}, middleware.After)
}

func addOpListApplicationGrantsValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListApplicationGrants{}, middleware.After)
}

func addOpListApplicationsValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListApplications{}, middleware.After)
}

func addOpListCustomerManagedPolicyReferencesInPermissionSetValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListCustomerManagedPolicyReferencesInPermissionSet{}, middleware.After)
}

func addOpListManagedPoliciesInPermissionSetValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListManagedPoliciesInPermissionSet{}, middleware.After)
}

func addOpListPermissionSetProvisioningStatusValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListPermissionSetProvisioningStatus{}, middleware.After)
}

func addOpListPermissionSetsValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListPermissionSets{}, middleware.After)
}

func addOpListPermissionSetsProvisionedToAccountValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListPermissionSetsProvisionedToAccount{}, middleware.After)
}

func addOpListTagsForResourceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListTagsForResource{}, middleware.After)
}

func addOpListTrustedTokenIssuersValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListTrustedTokenIssuers{}, middleware.After)
}

func addOpProvisionPermissionSetValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpProvisionPermissionSet{}, middleware.After)
}

func addOpPutApplicationAccessScopeValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpPutApplicationAccessScope{}, middleware.After)
}

func addOpPutApplicationAssignmentConfigurationValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpPutApplicationAssignmentConfiguration{}, middleware.After)
}

func addOpPutApplicationAuthenticationMethodValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpPutApplicationAuthenticationMethod{}, middleware.After)
}

func addOpPutApplicationGrantValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpPutApplicationGrant{}, middleware.After)
}

func addOpPutInlinePolicyToPermissionSetValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpPutInlinePolicyToPermissionSet{}, middleware.After)
}

func addOpPutPermissionsBoundaryToPermissionSetValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpPutPermissionsBoundaryToPermissionSet{}, middleware.After)
}

func addOpTagResourceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpTagResource{}, middleware.After)
}

func addOpUntagResourceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUntagResource{}, middleware.After)
}

func addOpUpdateApplicationValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateApplication{}, middleware.After)
}

func addOpUpdateInstanceAccessControlAttributeConfigurationValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateInstanceAccessControlAttributeConfiguration{}, middleware.After)
}

func addOpUpdateInstanceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateInstance{}, middleware.After)
}

func addOpUpdatePermissionSetValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdatePermissionSet{}, middleware.After)
}

func addOpUpdateTrustedTokenIssuerValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateTrustedTokenIssuer{}, middleware.After)
}

func validateAccessControlAttribute(v *types.AccessControlAttribute) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AccessControlAttribute"}
	if v.Key == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Key"))
	}
	if v.Value == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Value"))
	} else if v.Value != nil {
		if err := validateAccessControlAttributeValue(v.Value); err != nil {
			invalidParams.AddNested("Value", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAccessControlAttributeList(v []types.AccessControlAttribute) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AccessControlAttributeList"}
	for i := range v {
		if err := validateAccessControlAttribute(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAccessControlAttributeValue(v *types.AccessControlAttributeValue) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AccessControlAttributeValue"}
	if v.Source == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Source"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAuthenticationMethod(v types.AuthenticationMethod) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AuthenticationMethod"}
	switch uv := v.(type) {
	case *types.AuthenticationMethodMemberIam:
		if err := validateIamAuthenticationMethod(&uv.Value); err != nil {
			invalidParams.AddNested("[Iam]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateCustomerManagedPolicyReference(v *types.CustomerManagedPolicyReference) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CustomerManagedPolicyReference"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateIamAuthenticationMethod(v *types.IamAuthenticationMethod) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "IamAuthenticationMethod"}
	if v.ActorPolicy == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ActorPolicy"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateInstanceAccessControlAttributeConfiguration(v *types.InstanceAccessControlAttributeConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "InstanceAccessControlAttributeConfiguration"}
	if v.AccessControlAttributes == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AccessControlAttributes"))
	} else if v.AccessControlAttributes != nil {
		if err := validateAccessControlAttributeList(v.AccessControlAttributes); err != nil {
			invalidParams.AddNested("AccessControlAttributes", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOidcJwtConfiguration(v *types.OidcJwtConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "OidcJwtConfiguration"}
	if v.IssuerUrl == nil {
		invalidParams.Add(smithy.NewErrParamRequired("IssuerUrl"))
	}
	if v.ClaimAttributePath == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ClaimAttributePath"))
	}
	if v.IdentityStoreAttributePath == nil {
		invalidParams.Add(smithy.NewErrParamRequired("IdentityStoreAttributePath"))
	}
	if len(v.JwksRetrievalOption) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("JwksRetrievalOption"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validatePermissionsBoundary(v *types.PermissionsBoundary) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "PermissionsBoundary"}
	if v.CustomerManagedPolicyReference != nil {
		if err := validateCustomerManagedPolicyReference(v.CustomerManagedPolicyReference); err != nil {
			invalidParams.AddNested("CustomerManagedPolicyReference", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validatePortalOptions(v *types.PortalOptions) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "PortalOptions"}
	if v.SignInOptions != nil {
		if err := validateSignInOptions(v.SignInOptions); err != nil {
			invalidParams.AddNested("SignInOptions", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateSignInOptions(v *types.SignInOptions) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "SignInOptions"}
	if len(v.Origin) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Origin"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateTag(v *types.Tag) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "Tag"}
	if v.Key == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Key"))
	}
	if v.Value == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Value"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateTagList(v []types.Tag) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "TagList"}
	for i := range v {
		if err := validateTag(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateTrustedTokenIssuerConfiguration(v types.TrustedTokenIssuerConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "TrustedTokenIssuerConfiguration"}
	switch uv := v.(type) {
	case *types.TrustedTokenIssuerConfigurationMemberOidcJwtConfiguration:
		if err := validateOidcJwtConfiguration(&uv.Value); err != nil {
			invalidParams.AddNested("[OidcJwtConfiguration]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateUpdateApplicationPortalOptions(v *types.UpdateApplicationPortalOptions) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateApplicationPortalOptions"}
	if v.SignInOptions != nil {
		if err := validateSignInOptions(v.SignInOptions); err != nil {
			invalidParams.AddNested("SignInOptions", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpAttachCustomerManagedPolicyReferenceToPermissionSetInput(v *AttachCustomerManagedPolicyReferenceToPermissionSetInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AttachCustomerManagedPolicyReferenceToPermissionSetInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.PermissionSetArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PermissionSetArn"))
	}
	if v.CustomerManagedPolicyReference == nil {
		invalidParams.Add(smithy.NewErrParamRequired("CustomerManagedPolicyReference"))
	} else if v.CustomerManagedPolicyReference != nil {
		if err := validateCustomerManagedPolicyReference(v.CustomerManagedPolicyReference); err != nil {
			invalidParams.AddNested("CustomerManagedPolicyReference", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpAttachManagedPolicyToPermissionSetInput(v *AttachManagedPolicyToPermissionSetInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AttachManagedPolicyToPermissionSetInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.PermissionSetArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PermissionSetArn"))
	}
	if v.ManagedPolicyArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ManagedPolicyArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateAccountAssignmentInput(v *CreateAccountAssignmentInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateAccountAssignmentInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.TargetId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TargetId"))
	}
	if len(v.TargetType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("TargetType"))
	}
	if v.PermissionSetArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PermissionSetArn"))
	}
	if len(v.PrincipalType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("PrincipalType"))
	}
	if v.PrincipalId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PrincipalId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateApplicationAssignmentInput(v *CreateApplicationAssignmentInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateApplicationAssignmentInput"}
	if v.ApplicationArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApplicationArn"))
	}
	if v.PrincipalId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PrincipalId"))
	}
	if len(v.PrincipalType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("PrincipalType"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateApplicationInput(v *CreateApplicationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateApplicationInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.ApplicationProviderArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApplicationProviderArn"))
	}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.PortalOptions != nil {
		if err := validatePortalOptions(v.PortalOptions); err != nil {
			invalidParams.AddNested("PortalOptions", err.(smithy.InvalidParamsError))
		}
	}
	if v.Tags != nil {
		if err := validateTagList(v.Tags); err != nil {
			invalidParams.AddNested("Tags", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateInstanceAccessControlAttributeConfigurationInput(v *CreateInstanceAccessControlAttributeConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateInstanceAccessControlAttributeConfigurationInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.InstanceAccessControlAttributeConfiguration == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceAccessControlAttributeConfiguration"))
	} else if v.InstanceAccessControlAttributeConfiguration != nil {
		if err := validateInstanceAccessControlAttributeConfiguration(v.InstanceAccessControlAttributeConfiguration); err != nil {
			invalidParams.AddNested("InstanceAccessControlAttributeConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateInstanceInput(v *CreateInstanceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateInstanceInput"}
	if v.Tags != nil {
		if err := validateTagList(v.Tags); err != nil {
			invalidParams.AddNested("Tags", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreatePermissionSetInput(v *CreatePermissionSetInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreatePermissionSetInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.Tags != nil {
		if err := validateTagList(v.Tags); err != nil {
			invalidParams.AddNested("Tags", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateTrustedTokenIssuerInput(v *CreateTrustedTokenIssuerInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateTrustedTokenIssuerInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if len(v.TrustedTokenIssuerType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("TrustedTokenIssuerType"))
	}
	if v.TrustedTokenIssuerConfiguration == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TrustedTokenIssuerConfiguration"))
	} else if v.TrustedTokenIssuerConfiguration != nil {
		if err := validateTrustedTokenIssuerConfiguration(v.TrustedTokenIssuerConfiguration); err != nil {
			invalidParams.AddNested("TrustedTokenIssuerConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if v.Tags != nil {
		if err := validateTagList(v.Tags); err != nil {
			invalidParams.AddNested("Tags", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteAccountAssignmentInput(v *DeleteAccountAssignmentInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteAccountAssignmentInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.TargetId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TargetId"))
	}
	if len(v.TargetType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("TargetType"))
	}
	if v.PermissionSetArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PermissionSetArn"))
	}
	if len(v.PrincipalType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("PrincipalType"))
	}
	if v.PrincipalId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PrincipalId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteApplicationAccessScopeInput(v *DeleteApplicationAccessScopeInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteApplicationAccessScopeInput"}
	if v.ApplicationArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApplicationArn"))
	}
	if v.Scope == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Scope"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteApplicationAssignmentInput(v *DeleteApplicationAssignmentInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteApplicationAssignmentInput"}
	if v.ApplicationArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApplicationArn"))
	}
	if v.PrincipalId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PrincipalId"))
	}
	if len(v.PrincipalType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("PrincipalType"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteApplicationAuthenticationMethodInput(v *DeleteApplicationAuthenticationMethodInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteApplicationAuthenticationMethodInput"}
	if v.ApplicationArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApplicationArn"))
	}
	if len(v.AuthenticationMethodType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("AuthenticationMethodType"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteApplicationGrantInput(v *DeleteApplicationGrantInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteApplicationGrantInput"}
	if v.ApplicationArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApplicationArn"))
	}
	if len(v.GrantType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("GrantType"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteApplicationInput(v *DeleteApplicationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteApplicationInput"}
	if v.ApplicationArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApplicationArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteInlinePolicyFromPermissionSetInput(v *DeleteInlinePolicyFromPermissionSetInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteInlinePolicyFromPermissionSetInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.PermissionSetArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PermissionSetArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteInstanceAccessControlAttributeConfigurationInput(v *DeleteInstanceAccessControlAttributeConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteInstanceAccessControlAttributeConfigurationInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteInstanceInput(v *DeleteInstanceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteInstanceInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeletePermissionsBoundaryFromPermissionSetInput(v *DeletePermissionsBoundaryFromPermissionSetInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeletePermissionsBoundaryFromPermissionSetInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.PermissionSetArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PermissionSetArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeletePermissionSetInput(v *DeletePermissionSetInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeletePermissionSetInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.PermissionSetArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PermissionSetArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteTrustedTokenIssuerInput(v *DeleteTrustedTokenIssuerInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteTrustedTokenIssuerInput"}
	if v.TrustedTokenIssuerArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TrustedTokenIssuerArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDescribeAccountAssignmentCreationStatusInput(v *DescribeAccountAssignmentCreationStatusInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DescribeAccountAssignmentCreationStatusInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.AccountAssignmentCreationRequestId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AccountAssignmentCreationRequestId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDescribeAccountAssignmentDeletionStatusInput(v *DescribeAccountAssignmentDeletionStatusInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DescribeAccountAssignmentDeletionStatusInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.AccountAssignmentDeletionRequestId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AccountAssignmentDeletionRequestId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDescribeApplicationAssignmentInput(v *DescribeApplicationAssignmentInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DescribeApplicationAssignmentInput"}
	if v.ApplicationArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApplicationArn"))
	}
	if v.PrincipalId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PrincipalId"))
	}
	if len(v.PrincipalType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("PrincipalType"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDescribeApplicationInput(v *DescribeApplicationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DescribeApplicationInput"}
	if v.ApplicationArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApplicationArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDescribeApplicationProviderInput(v *DescribeApplicationProviderInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DescribeApplicationProviderInput"}
	if v.ApplicationProviderArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApplicationProviderArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDescribeInstanceAccessControlAttributeConfigurationInput(v *DescribeInstanceAccessControlAttributeConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DescribeInstanceAccessControlAttributeConfigurationInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDescribeInstanceInput(v *DescribeInstanceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DescribeInstanceInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDescribePermissionSetInput(v *DescribePermissionSetInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DescribePermissionSetInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.PermissionSetArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PermissionSetArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDescribePermissionSetProvisioningStatusInput(v *DescribePermissionSetProvisioningStatusInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DescribePermissionSetProvisioningStatusInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.ProvisionPermissionSetRequestId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ProvisionPermissionSetRequestId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDescribeTrustedTokenIssuerInput(v *DescribeTrustedTokenIssuerInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DescribeTrustedTokenIssuerInput"}
	if v.TrustedTokenIssuerArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TrustedTokenIssuerArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDetachCustomerManagedPolicyReferenceFromPermissionSetInput(v *DetachCustomerManagedPolicyReferenceFromPermissionSetInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DetachCustomerManagedPolicyReferenceFromPermissionSetInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.PermissionSetArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PermissionSetArn"))
	}
	if v.CustomerManagedPolicyReference == nil {
		invalidParams.Add(smithy.NewErrParamRequired("CustomerManagedPolicyReference"))
	} else if v.CustomerManagedPolicyReference != nil {
		if err := validateCustomerManagedPolicyReference(v.CustomerManagedPolicyReference); err != nil {
			invalidParams.AddNested("CustomerManagedPolicyReference", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDetachManagedPolicyFromPermissionSetInput(v *DetachManagedPolicyFromPermissionSetInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DetachManagedPolicyFromPermissionSetInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.PermissionSetArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PermissionSetArn"))
	}
	if v.ManagedPolicyArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ManagedPolicyArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetApplicationAccessScopeInput(v *GetApplicationAccessScopeInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetApplicationAccessScopeInput"}
	if v.ApplicationArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApplicationArn"))
	}
	if v.Scope == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Scope"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetApplicationAssignmentConfigurationInput(v *GetApplicationAssignmentConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetApplicationAssignmentConfigurationInput"}
	if v.ApplicationArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApplicationArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetApplicationAuthenticationMethodInput(v *GetApplicationAuthenticationMethodInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetApplicationAuthenticationMethodInput"}
	if v.ApplicationArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApplicationArn"))
	}
	if len(v.AuthenticationMethodType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("AuthenticationMethodType"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetApplicationGrantInput(v *GetApplicationGrantInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetApplicationGrantInput"}
	if v.ApplicationArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApplicationArn"))
	}
	if len(v.GrantType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("GrantType"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetInlinePolicyForPermissionSetInput(v *GetInlinePolicyForPermissionSetInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetInlinePolicyForPermissionSetInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.PermissionSetArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PermissionSetArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetPermissionsBoundaryForPermissionSetInput(v *GetPermissionsBoundaryForPermissionSetInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetPermissionsBoundaryForPermissionSetInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.PermissionSetArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PermissionSetArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListAccountAssignmentCreationStatusInput(v *ListAccountAssignmentCreationStatusInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListAccountAssignmentCreationStatusInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListAccountAssignmentDeletionStatusInput(v *ListAccountAssignmentDeletionStatusInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListAccountAssignmentDeletionStatusInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListAccountAssignmentsForPrincipalInput(v *ListAccountAssignmentsForPrincipalInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListAccountAssignmentsForPrincipalInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.PrincipalId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PrincipalId"))
	}
	if len(v.PrincipalType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("PrincipalType"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListAccountAssignmentsInput(v *ListAccountAssignmentsInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListAccountAssignmentsInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.AccountId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AccountId"))
	}
	if v.PermissionSetArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PermissionSetArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListAccountsForProvisionedPermissionSetInput(v *ListAccountsForProvisionedPermissionSetInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListAccountsForProvisionedPermissionSetInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.PermissionSetArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PermissionSetArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListApplicationAccessScopesInput(v *ListApplicationAccessScopesInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListApplicationAccessScopesInput"}
	if v.ApplicationArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApplicationArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListApplicationAssignmentsForPrincipalInput(v *ListApplicationAssignmentsForPrincipalInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListApplicationAssignmentsForPrincipalInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.PrincipalId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PrincipalId"))
	}
	if len(v.PrincipalType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("PrincipalType"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListApplicationAssignmentsInput(v *ListApplicationAssignmentsInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListApplicationAssignmentsInput"}
	if v.ApplicationArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApplicationArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListApplicationAuthenticationMethodsInput(v *ListApplicationAuthenticationMethodsInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListApplicationAuthenticationMethodsInput"}
	if v.ApplicationArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApplicationArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListApplicationGrantsInput(v *ListApplicationGrantsInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListApplicationGrantsInput"}
	if v.ApplicationArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApplicationArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListApplicationsInput(v *ListApplicationsInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListApplicationsInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListCustomerManagedPolicyReferencesInPermissionSetInput(v *ListCustomerManagedPolicyReferencesInPermissionSetInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListCustomerManagedPolicyReferencesInPermissionSetInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.PermissionSetArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PermissionSetArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListManagedPoliciesInPermissionSetInput(v *ListManagedPoliciesInPermissionSetInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListManagedPoliciesInPermissionSetInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.PermissionSetArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PermissionSetArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListPermissionSetProvisioningStatusInput(v *ListPermissionSetProvisioningStatusInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListPermissionSetProvisioningStatusInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListPermissionSetsInput(v *ListPermissionSetsInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListPermissionSetsInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListPermissionSetsProvisionedToAccountInput(v *ListPermissionSetsProvisionedToAccountInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListPermissionSetsProvisionedToAccountInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.AccountId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AccountId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListTagsForResourceInput(v *ListTagsForResourceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListTagsForResourceInput"}
	if v.ResourceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ResourceArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListTrustedTokenIssuersInput(v *ListTrustedTokenIssuersInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListTrustedTokenIssuersInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpProvisionPermissionSetInput(v *ProvisionPermissionSetInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ProvisionPermissionSetInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.PermissionSetArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PermissionSetArn"))
	}
	if len(v.TargetType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("TargetType"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpPutApplicationAccessScopeInput(v *PutApplicationAccessScopeInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "PutApplicationAccessScopeInput"}
	if v.Scope == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Scope"))
	}
	if v.ApplicationArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApplicationArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpPutApplicationAssignmentConfigurationInput(v *PutApplicationAssignmentConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "PutApplicationAssignmentConfigurationInput"}
	if v.ApplicationArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApplicationArn"))
	}
	if v.AssignmentRequired == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AssignmentRequired"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpPutApplicationAuthenticationMethodInput(v *PutApplicationAuthenticationMethodInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "PutApplicationAuthenticationMethodInput"}
	if v.ApplicationArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApplicationArn"))
	}
	if len(v.AuthenticationMethodType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("AuthenticationMethodType"))
	}
	if v.AuthenticationMethod == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AuthenticationMethod"))
	} else if v.AuthenticationMethod != nil {
		if err := validateAuthenticationMethod(v.AuthenticationMethod); err != nil {
			invalidParams.AddNested("AuthenticationMethod", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpPutApplicationGrantInput(v *PutApplicationGrantInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "PutApplicationGrantInput"}
	if v.ApplicationArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApplicationArn"))
	}
	if len(v.GrantType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("GrantType"))
	}
	if v.Grant == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Grant"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpPutInlinePolicyToPermissionSetInput(v *PutInlinePolicyToPermissionSetInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "PutInlinePolicyToPermissionSetInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.PermissionSetArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PermissionSetArn"))
	}
	if v.InlinePolicy == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InlinePolicy"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpPutPermissionsBoundaryToPermissionSetInput(v *PutPermissionsBoundaryToPermissionSetInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "PutPermissionsBoundaryToPermissionSetInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.PermissionSetArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PermissionSetArn"))
	}
	if v.PermissionsBoundary == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PermissionsBoundary"))
	} else if v.PermissionsBoundary != nil {
		if err := validatePermissionsBoundary(v.PermissionsBoundary); err != nil {
			invalidParams.AddNested("PermissionsBoundary", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpTagResourceInput(v *TagResourceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "TagResourceInput"}
	if v.ResourceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ResourceArn"))
	}
	if v.Tags == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Tags"))
	} else if v.Tags != nil {
		if err := validateTagList(v.Tags); err != nil {
			invalidParams.AddNested("Tags", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUntagResourceInput(v *UntagResourceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UntagResourceInput"}
	if v.ResourceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ResourceArn"))
	}
	if v.TagKeys == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TagKeys"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateApplicationInput(v *UpdateApplicationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateApplicationInput"}
	if v.ApplicationArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApplicationArn"))
	}
	if v.PortalOptions != nil {
		if err := validateUpdateApplicationPortalOptions(v.PortalOptions); err != nil {
			invalidParams.AddNested("PortalOptions", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateInstanceAccessControlAttributeConfigurationInput(v *UpdateInstanceAccessControlAttributeConfigurationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateInstanceAccessControlAttributeConfigurationInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.InstanceAccessControlAttributeConfiguration == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceAccessControlAttributeConfiguration"))
	} else if v.InstanceAccessControlAttributeConfiguration != nil {
		if err := validateInstanceAccessControlAttributeConfiguration(v.InstanceAccessControlAttributeConfiguration); err != nil {
			invalidParams.AddNested("InstanceAccessControlAttributeConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateInstanceInput(v *UpdateInstanceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateInstanceInput"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdatePermissionSetInput(v *UpdatePermissionSetInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdatePermissionSetInput"}
	if v.InstanceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InstanceArn"))
	}
	if v.PermissionSetArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PermissionSetArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateTrustedTokenIssuerInput(v *UpdateTrustedTokenIssuerInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateTrustedTokenIssuerInput"}
	if v.TrustedTokenIssuerArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TrustedTokenIssuerArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}
