// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AccountSortBy string

// Enum values for AccountSortBy
const (
	AccountSortByCritical AccountSortBy = "CRITICAL"
	AccountSortByHigh     AccountSortBy = "HIGH"
	AccountSortByAll      AccountSortBy = "ALL"
)

// Values returns all known values for AccountSortBy. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AccountSortBy) Values() []AccountSortBy {
	return []AccountSortBy{
		"CRITICAL",
		"HIGH",
		"ALL",
	}
}

type AggregationFindingType string

// Enum values for AggregationFindingType
const (
	AggregationFindingTypeNetworkReachability  AggregationFindingType = "NETWORK_REACHABILITY"
	AggregationFindingTypePackageVulnerability AggregationFindingType = "PACKAGE_VULNERABILITY"
	AggregationFindingTypeCodeVulnerability    AggregationFindingType = "CODE_VULNERABILITY"
)

// Values returns all known values for AggregationFindingType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AggregationFindingType) Values() []AggregationFindingType {
	return []AggregationFindingType{
		"NETWORK_REACHABILITY",
		"PACKAGE_VULNERABILITY",
		"CODE_VULNERABILITY",
	}
}

type AggregationResourceType string

// Enum values for AggregationResourceType
const (
	AggregationResourceTypeAwsEc2Instance       AggregationResourceType = "AWS_EC2_INSTANCE"
	AggregationResourceTypeAwsEcrContainerImage AggregationResourceType = "AWS_ECR_CONTAINER_IMAGE"
	AggregationResourceTypeAwsLambdaFunction    AggregationResourceType = "AWS_LAMBDA_FUNCTION"
)

// Values returns all known values for AggregationResourceType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AggregationResourceType) Values() []AggregationResourceType {
	return []AggregationResourceType{
		"AWS_EC2_INSTANCE",
		"AWS_ECR_CONTAINER_IMAGE",
		"AWS_LAMBDA_FUNCTION",
	}
}

type AggregationType string

// Enum values for AggregationType
const (
	AggregationTypeFindingType       AggregationType = "FINDING_TYPE"
	AggregationTypePackage           AggregationType = "PACKAGE"
	AggregationTypeTitle             AggregationType = "TITLE"
	AggregationTypeRepository        AggregationType = "REPOSITORY"
	AggregationTypeAmi               AggregationType = "AMI"
	AggregationTypeAwsEc2Instance    AggregationType = "AWS_EC2_INSTANCE"
	AggregationTypeAwsEcrContainer   AggregationType = "AWS_ECR_CONTAINER"
	AggregationTypeImageLayer        AggregationType = "IMAGE_LAYER"
	AggregationTypeAccount           AggregationType = "ACCOUNT"
	AggregationTypeAwsLambdaFunction AggregationType = "AWS_LAMBDA_FUNCTION"
	AggregationTypeLambdaLayer       AggregationType = "LAMBDA_LAYER"
	AggregationTypeCodeRepository    AggregationType = "CODE_REPOSITORY"
)

// Values returns all known values for AggregationType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AggregationType) Values() []AggregationType {
	return []AggregationType{
		"FINDING_TYPE",
		"PACKAGE",
		"TITLE",
		"REPOSITORY",
		"AMI",
		"AWS_EC2_INSTANCE",
		"AWS_ECR_CONTAINER",
		"IMAGE_LAYER",
		"ACCOUNT",
		"AWS_LAMBDA_FUNCTION",
		"LAMBDA_LAYER",
		"CODE_REPOSITORY",
	}
}

type AmiSortBy string

// Enum values for AmiSortBy
const (
	AmiSortByCritical          AmiSortBy = "CRITICAL"
	AmiSortByHigh              AmiSortBy = "HIGH"
	AmiSortByAll               AmiSortBy = "ALL"
	AmiSortByAffectedInstances AmiSortBy = "AFFECTED_INSTANCES"
)

// Values returns all known values for AmiSortBy. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AmiSortBy) Values() []AmiSortBy {
	return []AmiSortBy{
		"CRITICAL",
		"HIGH",
		"ALL",
		"AFFECTED_INSTANCES",
	}
}

type Architecture string

// Enum values for Architecture
const (
	ArchitectureX8664 Architecture = "X86_64"
	ArchitectureArm64 Architecture = "ARM64"
)

// Values returns all known values for Architecture. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Architecture) Values() []Architecture {
	return []Architecture{
		"X86_64",
		"ARM64",
	}
}

type AssociationResultStatusCode string

// Enum values for AssociationResultStatusCode
const (
	AssociationResultStatusCodeInternalError             AssociationResultStatusCode = "INTERNAL_ERROR"
	AssociationResultStatusCodeAccessDenied              AssociationResultStatusCode = "ACCESS_DENIED"
	AssociationResultStatusCodeScanConfigurationNotFound AssociationResultStatusCode = "SCAN_CONFIGURATION_NOT_FOUND"
	AssociationResultStatusCodeInvalidInput              AssociationResultStatusCode = "INVALID_INPUT"
	AssociationResultStatusCodeResourceNotFound          AssociationResultStatusCode = "RESOURCE_NOT_FOUND"
	AssociationResultStatusCodeQuotaExceeded             AssociationResultStatusCode = "QUOTA_EXCEEDED"
)

// Values returns all known values for AssociationResultStatusCode. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AssociationResultStatusCode) Values() []AssociationResultStatusCode {
	return []AssociationResultStatusCode{
		"INTERNAL_ERROR",
		"ACCESS_DENIED",
		"SCAN_CONFIGURATION_NOT_FOUND",
		"INVALID_INPUT",
		"RESOURCE_NOT_FOUND",
		"QUOTA_EXCEEDED",
	}
}

type AwsEcrContainerSortBy string

// Enum values for AwsEcrContainerSortBy
const (
	AwsEcrContainerSortByCritical AwsEcrContainerSortBy = "CRITICAL"
	AwsEcrContainerSortByHigh     AwsEcrContainerSortBy = "HIGH"
	AwsEcrContainerSortByAll      AwsEcrContainerSortBy = "ALL"
)

// Values returns all known values for AwsEcrContainerSortBy. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AwsEcrContainerSortBy) Values() []AwsEcrContainerSortBy {
	return []AwsEcrContainerSortBy{
		"CRITICAL",
		"HIGH",
		"ALL",
	}
}

type CisFindingStatus string

// Enum values for CisFindingStatus
const (
	CisFindingStatusPassed  CisFindingStatus = "PASSED"
	CisFindingStatusFailed  CisFindingStatus = "FAILED"
	CisFindingStatusSkipped CisFindingStatus = "SKIPPED"
)

// Values returns all known values for CisFindingStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CisFindingStatus) Values() []CisFindingStatus {
	return []CisFindingStatus{
		"PASSED",
		"FAILED",
		"SKIPPED",
	}
}

type CisFindingStatusComparison string

// Enum values for CisFindingStatusComparison
const (
	CisFindingStatusComparisonEquals CisFindingStatusComparison = "EQUALS"
)

// Values returns all known values for CisFindingStatusComparison. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CisFindingStatusComparison) Values() []CisFindingStatusComparison {
	return []CisFindingStatusComparison{
		"EQUALS",
	}
}

type CisReportFormat string

// Enum values for CisReportFormat
const (
	CisReportFormatPdf CisReportFormat = "PDF"
	CisReportFormatCsv CisReportFormat = "CSV"
)

// Values returns all known values for CisReportFormat. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CisReportFormat) Values() []CisReportFormat {
	return []CisReportFormat{
		"PDF",
		"CSV",
	}
}

type CisReportStatus string

// Enum values for CisReportStatus
const (
	CisReportStatusSucceeded  CisReportStatus = "SUCCEEDED"
	CisReportStatusFailed     CisReportStatus = "FAILED"
	CisReportStatusInProgress CisReportStatus = "IN_PROGRESS"
)

// Values returns all known values for CisReportStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CisReportStatus) Values() []CisReportStatus {
	return []CisReportStatus{
		"SUCCEEDED",
		"FAILED",
		"IN_PROGRESS",
	}
}

type CisResultStatus string

// Enum values for CisResultStatus
const (
	CisResultStatusPassed  CisResultStatus = "PASSED"
	CisResultStatusFailed  CisResultStatus = "FAILED"
	CisResultStatusSkipped CisResultStatus = "SKIPPED"
)

// Values returns all known values for CisResultStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CisResultStatus) Values() []CisResultStatus {
	return []CisResultStatus{
		"PASSED",
		"FAILED",
		"SKIPPED",
	}
}

type CisResultStatusComparison string

// Enum values for CisResultStatusComparison
const (
	CisResultStatusComparisonEquals CisResultStatusComparison = "EQUALS"
)

// Values returns all known values for CisResultStatusComparison. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CisResultStatusComparison) Values() []CisResultStatusComparison {
	return []CisResultStatusComparison{
		"EQUALS",
	}
}

type CisRuleStatus string

// Enum values for CisRuleStatus
const (
	CisRuleStatusFailed        CisRuleStatus = "FAILED"
	CisRuleStatusPassed        CisRuleStatus = "PASSED"
	CisRuleStatusNotEvaluated  CisRuleStatus = "NOT_EVALUATED"
	CisRuleStatusInformational CisRuleStatus = "INFORMATIONAL"
	CisRuleStatusUnknown       CisRuleStatus = "UNKNOWN"
	CisRuleStatusNotApplicable CisRuleStatus = "NOT_APPLICABLE"
	CisRuleStatusError         CisRuleStatus = "ERROR"
)

// Values returns all known values for CisRuleStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CisRuleStatus) Values() []CisRuleStatus {
	return []CisRuleStatus{
		"FAILED",
		"PASSED",
		"NOT_EVALUATED",
		"INFORMATIONAL",
		"UNKNOWN",
		"NOT_APPLICABLE",
		"ERROR",
	}
}

type CisScanConfigurationsSortBy string

// Enum values for CisScanConfigurationsSortBy
const (
	CisScanConfigurationsSortByScanName             CisScanConfigurationsSortBy = "SCAN_NAME"
	CisScanConfigurationsSortByScanConfigurationArn CisScanConfigurationsSortBy = "SCAN_CONFIGURATION_ARN"
)

// Values returns all known values for CisScanConfigurationsSortBy. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CisScanConfigurationsSortBy) Values() []CisScanConfigurationsSortBy {
	return []CisScanConfigurationsSortBy{
		"SCAN_NAME",
		"SCAN_CONFIGURATION_ARN",
	}
}

type CisScanResultDetailsSortBy string

// Enum values for CisScanResultDetailsSortBy
const (
	CisScanResultDetailsSortByCheckId CisScanResultDetailsSortBy = "CHECK_ID"
	CisScanResultDetailsSortByStatus  CisScanResultDetailsSortBy = "STATUS"
)

// Values returns all known values for CisScanResultDetailsSortBy. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CisScanResultDetailsSortBy) Values() []CisScanResultDetailsSortBy {
	return []CisScanResultDetailsSortBy{
		"CHECK_ID",
		"STATUS",
	}
}

type CisScanResultsAggregatedByChecksSortBy string

// Enum values for CisScanResultsAggregatedByChecksSortBy
const (
	CisScanResultsAggregatedByChecksSortByCheckId       CisScanResultsAggregatedByChecksSortBy = "CHECK_ID"
	CisScanResultsAggregatedByChecksSortByTitle         CisScanResultsAggregatedByChecksSortBy = "TITLE"
	CisScanResultsAggregatedByChecksSortByPlatform      CisScanResultsAggregatedByChecksSortBy = "PLATFORM"
	CisScanResultsAggregatedByChecksSortByFailedCounts  CisScanResultsAggregatedByChecksSortBy = "FAILED_COUNTS"
	CisScanResultsAggregatedByChecksSortBySecurityLevel CisScanResultsAggregatedByChecksSortBy = "SECURITY_LEVEL"
)

// Values returns all known values for CisScanResultsAggregatedByChecksSortBy.
// Note that this can be expanded in the future, and so it is only as up to date as
// the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CisScanResultsAggregatedByChecksSortBy) Values() []CisScanResultsAggregatedByChecksSortBy {
	return []CisScanResultsAggregatedByChecksSortBy{
		"CHECK_ID",
		"TITLE",
		"PLATFORM",
		"FAILED_COUNTS",
		"SECURITY_LEVEL",
	}
}

type CisScanResultsAggregatedByTargetResourceSortBy string

// Enum values for CisScanResultsAggregatedByTargetResourceSortBy
const (
	CisScanResultsAggregatedByTargetResourceSortByResourceId         CisScanResultsAggregatedByTargetResourceSortBy = "RESOURCE_ID"
	CisScanResultsAggregatedByTargetResourceSortByFailedCounts       CisScanResultsAggregatedByTargetResourceSortBy = "FAILED_COUNTS"
	CisScanResultsAggregatedByTargetResourceSortByAccountId          CisScanResultsAggregatedByTargetResourceSortBy = "ACCOUNT_ID"
	CisScanResultsAggregatedByTargetResourceSortByPlatform           CisScanResultsAggregatedByTargetResourceSortBy = "PLATFORM"
	CisScanResultsAggregatedByTargetResourceSortByTargetStatus       CisScanResultsAggregatedByTargetResourceSortBy = "TARGET_STATUS"
	CisScanResultsAggregatedByTargetResourceSortByTargetStatusReason CisScanResultsAggregatedByTargetResourceSortBy = "TARGET_STATUS_REASON"
)

// Values returns all known values for
// CisScanResultsAggregatedByTargetResourceSortBy. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CisScanResultsAggregatedByTargetResourceSortBy) Values() []CisScanResultsAggregatedByTargetResourceSortBy {
	return []CisScanResultsAggregatedByTargetResourceSortBy{
		"RESOURCE_ID",
		"FAILED_COUNTS",
		"ACCOUNT_ID",
		"PLATFORM",
		"TARGET_STATUS",
		"TARGET_STATUS_REASON",
	}
}

type CisScanStatus string

// Enum values for CisScanStatus
const (
	CisScanStatusFailed     CisScanStatus = "FAILED"
	CisScanStatusCompleted  CisScanStatus = "COMPLETED"
	CisScanStatusCancelled  CisScanStatus = "CANCELLED"
	CisScanStatusInProgress CisScanStatus = "IN_PROGRESS"
)

// Values returns all known values for CisScanStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CisScanStatus) Values() []CisScanStatus {
	return []CisScanStatus{
		"FAILED",
		"COMPLETED",
		"CANCELLED",
		"IN_PROGRESS",
	}
}

type CisScanStatusComparison string

// Enum values for CisScanStatusComparison
const (
	CisScanStatusComparisonEquals CisScanStatusComparison = "EQUALS"
)

// Values returns all known values for CisScanStatusComparison. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CisScanStatusComparison) Values() []CisScanStatusComparison {
	return []CisScanStatusComparison{
		"EQUALS",
	}
}

type CisSecurityLevel string

// Enum values for CisSecurityLevel
const (
	CisSecurityLevelLevel1 CisSecurityLevel = "LEVEL_1"
	CisSecurityLevelLevel2 CisSecurityLevel = "LEVEL_2"
)

// Values returns all known values for CisSecurityLevel. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CisSecurityLevel) Values() []CisSecurityLevel {
	return []CisSecurityLevel{
		"LEVEL_1",
		"LEVEL_2",
	}
}

type CisSecurityLevelComparison string

// Enum values for CisSecurityLevelComparison
const (
	CisSecurityLevelComparisonEquals CisSecurityLevelComparison = "EQUALS"
)

// Values returns all known values for CisSecurityLevelComparison. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CisSecurityLevelComparison) Values() []CisSecurityLevelComparison {
	return []CisSecurityLevelComparison{
		"EQUALS",
	}
}

type CisSortOrder string

// Enum values for CisSortOrder
const (
	CisSortOrderAsc  CisSortOrder = "ASC"
	CisSortOrderDesc CisSortOrder = "DESC"
)

// Values returns all known values for CisSortOrder. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CisSortOrder) Values() []CisSortOrder {
	return []CisSortOrder{
		"ASC",
		"DESC",
	}
}

type CisStringComparison string

// Enum values for CisStringComparison
const (
	CisStringComparisonEquals    CisStringComparison = "EQUALS"
	CisStringComparisonPrefix    CisStringComparison = "PREFIX"
	CisStringComparisonNotEquals CisStringComparison = "NOT_EQUALS"
)

// Values returns all known values for CisStringComparison. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CisStringComparison) Values() []CisStringComparison {
	return []CisStringComparison{
		"EQUALS",
		"PREFIX",
		"NOT_EQUALS",
	}
}

type CisTargetStatus string

// Enum values for CisTargetStatus
const (
	CisTargetStatusTimedOut  CisTargetStatus = "TIMED_OUT"
	CisTargetStatusCancelled CisTargetStatus = "CANCELLED"
	CisTargetStatusCompleted CisTargetStatus = "COMPLETED"
)

// Values returns all known values for CisTargetStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CisTargetStatus) Values() []CisTargetStatus {
	return []CisTargetStatus{
		"TIMED_OUT",
		"CANCELLED",
		"COMPLETED",
	}
}

type CisTargetStatusComparison string

// Enum values for CisTargetStatusComparison
const (
	CisTargetStatusComparisonEquals CisTargetStatusComparison = "EQUALS"
)

// Values returns all known values for CisTargetStatusComparison. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CisTargetStatusComparison) Values() []CisTargetStatusComparison {
	return []CisTargetStatusComparison{
		"EQUALS",
	}
}

type CisTargetStatusReason string

// Enum values for CisTargetStatusReason
const (
	CisTargetStatusReasonScanInProgress CisTargetStatusReason = "SCAN_IN_PROGRESS"
	CisTargetStatusReasonUnsupportedOs  CisTargetStatusReason = "UNSUPPORTED_OS"
	CisTargetStatusReasonSsmUnmanaged   CisTargetStatusReason = "SSM_UNMANAGED"
)

// Values returns all known values for CisTargetStatusReason. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CisTargetStatusReason) Values() []CisTargetStatusReason {
	return []CisTargetStatusReason{
		"SCAN_IN_PROGRESS",
		"UNSUPPORTED_OS",
		"SSM_UNMANAGED",
	}
}

type CodeRepositoryProviderType string

// Enum values for CodeRepositoryProviderType
const (
	CodeRepositoryProviderTypeGithub            CodeRepositoryProviderType = "GITHUB"
	CodeRepositoryProviderTypeGitlabSelfManaged CodeRepositoryProviderType = "GITLAB_SELF_MANAGED"
)

// Values returns all known values for CodeRepositoryProviderType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CodeRepositoryProviderType) Values() []CodeRepositoryProviderType {
	return []CodeRepositoryProviderType{
		"GITHUB",
		"GITLAB_SELF_MANAGED",
	}
}

type CodeRepositorySortBy string

// Enum values for CodeRepositorySortBy
const (
	CodeRepositorySortByCritical CodeRepositorySortBy = "CRITICAL"
	CodeRepositorySortByHigh     CodeRepositorySortBy = "HIGH"
	CodeRepositorySortByAll      CodeRepositorySortBy = "ALL"
)

// Values returns all known values for CodeRepositorySortBy. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CodeRepositorySortBy) Values() []CodeRepositorySortBy {
	return []CodeRepositorySortBy{
		"CRITICAL",
		"HIGH",
		"ALL",
	}
}

type CodeScanStatus string

// Enum values for CodeScanStatus
const (
	CodeScanStatusInProgress CodeScanStatus = "IN_PROGRESS"
	CodeScanStatusSuccessful CodeScanStatus = "SUCCESSFUL"
	CodeScanStatusFailed     CodeScanStatus = "FAILED"
	CodeScanStatusSkipped    CodeScanStatus = "SKIPPED"
)

// Values returns all known values for CodeScanStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CodeScanStatus) Values() []CodeScanStatus {
	return []CodeScanStatus{
		"IN_PROGRESS",
		"SUCCESSFUL",
		"FAILED",
		"SKIPPED",
	}
}

type CodeSnippetErrorCode string

// Enum values for CodeSnippetErrorCode
const (
	CodeSnippetErrorCodeInternalError       CodeSnippetErrorCode = "INTERNAL_ERROR"
	CodeSnippetErrorCodeAccessDenied        CodeSnippetErrorCode = "ACCESS_DENIED"
	CodeSnippetErrorCodeCodeSnippetNotFound CodeSnippetErrorCode = "CODE_SNIPPET_NOT_FOUND"
	CodeSnippetErrorCodeInvalidInput        CodeSnippetErrorCode = "INVALID_INPUT"
)

// Values returns all known values for CodeSnippetErrorCode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CodeSnippetErrorCode) Values() []CodeSnippetErrorCode {
	return []CodeSnippetErrorCode{
		"INTERNAL_ERROR",
		"ACCESS_DENIED",
		"CODE_SNIPPET_NOT_FOUND",
		"INVALID_INPUT",
	}
}

type ConfigurationLevel string

// Enum values for ConfigurationLevel
const (
	ConfigurationLevelOrganization ConfigurationLevel = "ORGANIZATION"
	ConfigurationLevelAccount      ConfigurationLevel = "ACCOUNT"
)

// Values returns all known values for ConfigurationLevel. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ConfigurationLevel) Values() []ConfigurationLevel {
	return []ConfigurationLevel{
		"ORGANIZATION",
		"ACCOUNT",
	}
}

type ContinuousIntegrationScanEvent string

// Enum values for ContinuousIntegrationScanEvent
const (
	ContinuousIntegrationScanEventPullRequest ContinuousIntegrationScanEvent = "PULL_REQUEST"
	ContinuousIntegrationScanEventPush        ContinuousIntegrationScanEvent = "PUSH"
)

// Values returns all known values for ContinuousIntegrationScanEvent. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ContinuousIntegrationScanEvent) Values() []ContinuousIntegrationScanEvent {
	return []ContinuousIntegrationScanEvent{
		"PULL_REQUEST",
		"PUSH",
	}
}

type CoverageMapComparison string

// Enum values for CoverageMapComparison
const (
	CoverageMapComparisonEquals CoverageMapComparison = "EQUALS"
)

// Values returns all known values for CoverageMapComparison. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CoverageMapComparison) Values() []CoverageMapComparison {
	return []CoverageMapComparison{
		"EQUALS",
	}
}

type CoverageResourceType string

// Enum values for CoverageResourceType
const (
	CoverageResourceTypeAwsEc2Instance       CoverageResourceType = "AWS_EC2_INSTANCE"
	CoverageResourceTypeAwsEcrContainerImage CoverageResourceType = "AWS_ECR_CONTAINER_IMAGE"
	CoverageResourceTypeAwsEcrRepository     CoverageResourceType = "AWS_ECR_REPOSITORY"
	CoverageResourceTypeAwsLambdaFunction    CoverageResourceType = "AWS_LAMBDA_FUNCTION"
	CoverageResourceTypeCodeRepository       CoverageResourceType = "CODE_REPOSITORY"
)

// Values returns all known values for CoverageResourceType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CoverageResourceType) Values() []CoverageResourceType {
	return []CoverageResourceType{
		"AWS_EC2_INSTANCE",
		"AWS_ECR_CONTAINER_IMAGE",
		"AWS_ECR_REPOSITORY",
		"AWS_LAMBDA_FUNCTION",
		"CODE_REPOSITORY",
	}
}

type CoverageStringComparison string

// Enum values for CoverageStringComparison
const (
	CoverageStringComparisonEquals    CoverageStringComparison = "EQUALS"
	CoverageStringComparisonNotEquals CoverageStringComparison = "NOT_EQUALS"
)

// Values returns all known values for CoverageStringComparison. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CoverageStringComparison) Values() []CoverageStringComparison {
	return []CoverageStringComparison{
		"EQUALS",
		"NOT_EQUALS",
	}
}

type Currency string

// Enum values for Currency
const (
	CurrencyUsd Currency = "USD"
)

// Values returns all known values for Currency. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Currency) Values() []Currency {
	return []Currency{
		"USD",
	}
}

type Day string

// Enum values for Day
const (
	DaySun Day = "SUN"
	DayMon Day = "MON"
	DayTue Day = "TUE"
	DayWed Day = "WED"
	DayThu Day = "THU"
	DayFri Day = "FRI"
	DaySat Day = "SAT"
)

// Values returns all known values for Day. Note that this can be expanded in the
// future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Day) Values() []Day {
	return []Day{
		"SUN",
		"MON",
		"TUE",
		"WED",
		"THU",
		"FRI",
		"SAT",
	}
}

type DelegatedAdminStatus string

// Enum values for DelegatedAdminStatus
const (
	DelegatedAdminStatusEnabled           DelegatedAdminStatus = "ENABLED"
	DelegatedAdminStatusDisableInProgress DelegatedAdminStatus = "DISABLE_IN_PROGRESS"
)

// Values returns all known values for DelegatedAdminStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DelegatedAdminStatus) Values() []DelegatedAdminStatus {
	return []DelegatedAdminStatus{
		"ENABLED",
		"DISABLE_IN_PROGRESS",
	}
}

type Ec2DeepInspectionStatus string

// Enum values for Ec2DeepInspectionStatus
const (
	Ec2DeepInspectionStatusActivated   Ec2DeepInspectionStatus = "ACTIVATED"
	Ec2DeepInspectionStatusDeactivated Ec2DeepInspectionStatus = "DEACTIVATED"
	Ec2DeepInspectionStatusPending     Ec2DeepInspectionStatus = "PENDING"
	Ec2DeepInspectionStatusFailed      Ec2DeepInspectionStatus = "FAILED"
)

// Values returns all known values for Ec2DeepInspectionStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Ec2DeepInspectionStatus) Values() []Ec2DeepInspectionStatus {
	return []Ec2DeepInspectionStatus{
		"ACTIVATED",
		"DEACTIVATED",
		"PENDING",
		"FAILED",
	}
}

type Ec2InstanceSortBy string

// Enum values for Ec2InstanceSortBy
const (
	Ec2InstanceSortByNetworkFindings Ec2InstanceSortBy = "NETWORK_FINDINGS"
	Ec2InstanceSortByCritical        Ec2InstanceSortBy = "CRITICAL"
	Ec2InstanceSortByHigh            Ec2InstanceSortBy = "HIGH"
	Ec2InstanceSortByAll             Ec2InstanceSortBy = "ALL"
)

// Values returns all known values for Ec2InstanceSortBy. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Ec2InstanceSortBy) Values() []Ec2InstanceSortBy {
	return []Ec2InstanceSortBy{
		"NETWORK_FINDINGS",
		"CRITICAL",
		"HIGH",
		"ALL",
	}
}

type Ec2Platform string

// Enum values for Ec2Platform
const (
	Ec2PlatformWindows Ec2Platform = "WINDOWS"
	Ec2PlatformLinux   Ec2Platform = "LINUX"
	Ec2PlatformUnknown Ec2Platform = "UNKNOWN"
	Ec2PlatformMacos   Ec2Platform = "MACOS"
)

// Values returns all known values for Ec2Platform. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Ec2Platform) Values() []Ec2Platform {
	return []Ec2Platform{
		"WINDOWS",
		"LINUX",
		"UNKNOWN",
		"MACOS",
	}
}

type Ec2ScanMode string

// Enum values for Ec2ScanMode
const (
	Ec2ScanModeEc2SsmAgentBased Ec2ScanMode = "EC2_SSM_AGENT_BASED"
	Ec2ScanModeEc2Hybrid        Ec2ScanMode = "EC2_HYBRID"
)

// Values returns all known values for Ec2ScanMode. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Ec2ScanMode) Values() []Ec2ScanMode {
	return []Ec2ScanMode{
		"EC2_SSM_AGENT_BASED",
		"EC2_HYBRID",
	}
}

type Ec2ScanModeStatus string

// Enum values for Ec2ScanModeStatus
const (
	Ec2ScanModeStatusSuccess Ec2ScanModeStatus = "SUCCESS"
	Ec2ScanModeStatusPending Ec2ScanModeStatus = "PENDING"
)

// Values returns all known values for Ec2ScanModeStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Ec2ScanModeStatus) Values() []Ec2ScanModeStatus {
	return []Ec2ScanModeStatus{
		"SUCCESS",
		"PENDING",
	}
}

type EcrPullDateRescanDuration string

// Enum values for EcrPullDateRescanDuration
const (
	EcrPullDateRescanDurationDays14  EcrPullDateRescanDuration = "DAYS_14"
	EcrPullDateRescanDurationDays30  EcrPullDateRescanDuration = "DAYS_30"
	EcrPullDateRescanDurationDays60  EcrPullDateRescanDuration = "DAYS_60"
	EcrPullDateRescanDurationDays90  EcrPullDateRescanDuration = "DAYS_90"
	EcrPullDateRescanDurationDays180 EcrPullDateRescanDuration = "DAYS_180"
)

// Values returns all known values for EcrPullDateRescanDuration. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EcrPullDateRescanDuration) Values() []EcrPullDateRescanDuration {
	return []EcrPullDateRescanDuration{
		"DAYS_14",
		"DAYS_30",
		"DAYS_60",
		"DAYS_90",
		"DAYS_180",
	}
}

type EcrPullDateRescanMode string

// Enum values for EcrPullDateRescanMode
const (
	EcrPullDateRescanModeLastPullDate EcrPullDateRescanMode = "LAST_PULL_DATE"
	EcrPullDateRescanModeLastInUseAt  EcrPullDateRescanMode = "LAST_IN_USE_AT"
)

// Values returns all known values for EcrPullDateRescanMode. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EcrPullDateRescanMode) Values() []EcrPullDateRescanMode {
	return []EcrPullDateRescanMode{
		"LAST_PULL_DATE",
		"LAST_IN_USE_AT",
	}
}

type EcrRescanDuration string

// Enum values for EcrRescanDuration
const (
	EcrRescanDurationLifetime EcrRescanDuration = "LIFETIME"
	EcrRescanDurationDays30   EcrRescanDuration = "DAYS_30"
	EcrRescanDurationDays180  EcrRescanDuration = "DAYS_180"
	EcrRescanDurationDays14   EcrRescanDuration = "DAYS_14"
	EcrRescanDurationDays60   EcrRescanDuration = "DAYS_60"
	EcrRescanDurationDays90   EcrRescanDuration = "DAYS_90"
)

// Values returns all known values for EcrRescanDuration. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EcrRescanDuration) Values() []EcrRescanDuration {
	return []EcrRescanDuration{
		"LIFETIME",
		"DAYS_30",
		"DAYS_180",
		"DAYS_14",
		"DAYS_60",
		"DAYS_90",
	}
}

type EcrRescanDurationStatus string

// Enum values for EcrRescanDurationStatus
const (
	EcrRescanDurationStatusSuccess EcrRescanDurationStatus = "SUCCESS"
	EcrRescanDurationStatusPending EcrRescanDurationStatus = "PENDING"
	EcrRescanDurationStatusFailed  EcrRescanDurationStatus = "FAILED"
)

// Values returns all known values for EcrRescanDurationStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EcrRescanDurationStatus) Values() []EcrRescanDurationStatus {
	return []EcrRescanDurationStatus{
		"SUCCESS",
		"PENDING",
		"FAILED",
	}
}

type EcrScanFrequency string

// Enum values for EcrScanFrequency
const (
	EcrScanFrequencyManual         EcrScanFrequency = "MANUAL"
	EcrScanFrequencyScanOnPush     EcrScanFrequency = "SCAN_ON_PUSH"
	EcrScanFrequencyContinuousScan EcrScanFrequency = "CONTINUOUS_SCAN"
)

// Values returns all known values for EcrScanFrequency. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EcrScanFrequency) Values() []EcrScanFrequency {
	return []EcrScanFrequency{
		"MANUAL",
		"SCAN_ON_PUSH",
		"CONTINUOUS_SCAN",
	}
}

type ErrorCode string

// Enum values for ErrorCode
const (
	ErrorCodeAlreadyEnabled                        ErrorCode = "ALREADY_ENABLED"
	ErrorCodeEnableInProgress                      ErrorCode = "ENABLE_IN_PROGRESS"
	ErrorCodeDisableInProgress                     ErrorCode = "DISABLE_IN_PROGRESS"
	ErrorCodeSuspendInProgress                     ErrorCode = "SUSPEND_IN_PROGRESS"
	ErrorCodeResourceNotFound                      ErrorCode = "RESOURCE_NOT_FOUND"
	ErrorCodeAccessDenied                          ErrorCode = "ACCESS_DENIED"
	ErrorCodeInternalError                         ErrorCode = "INTERNAL_ERROR"
	ErrorCodeSsmUnavailable                        ErrorCode = "SSM_UNAVAILABLE"
	ErrorCodeSsmThrottled                          ErrorCode = "SSM_THROTTLED"
	ErrorCodeEventbridgeUnavailable                ErrorCode = "EVENTBRIDGE_UNAVAILABLE"
	ErrorCodeEventbridgeThrottled                  ErrorCode = "EVENTBRIDGE_THROTTLED"
	ErrorCodeResourceScanNotDisabled               ErrorCode = "RESOURCE_SCAN_NOT_DISABLED"
	ErrorCodeDisassociateAllMembers                ErrorCode = "DISASSOCIATE_ALL_MEMBERS"
	ErrorCodeAccountIsIsolated                     ErrorCode = "ACCOUNT_IS_ISOLATED"
	ErrorCodeEc2SsmResourceDataSyncLimitExceeded   ErrorCode = "EC2_SSM_RESOURCE_DATA_SYNC_LIMIT_EXCEEDED"
	ErrorCodeEc2SsmAssociationVersionLimitExceeded ErrorCode = "EC2_SSM_ASSOCIATION_VERSION_LIMIT_EXCEEDED"
)

// Values returns all known values for ErrorCode. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ErrorCode) Values() []ErrorCode {
	return []ErrorCode{
		"ALREADY_ENABLED",
		"ENABLE_IN_PROGRESS",
		"DISABLE_IN_PROGRESS",
		"SUSPEND_IN_PROGRESS",
		"RESOURCE_NOT_FOUND",
		"ACCESS_DENIED",
		"INTERNAL_ERROR",
		"SSM_UNAVAILABLE",
		"SSM_THROTTLED",
		"EVENTBRIDGE_UNAVAILABLE",
		"EVENTBRIDGE_THROTTLED",
		"RESOURCE_SCAN_NOT_DISABLED",
		"DISASSOCIATE_ALL_MEMBERS",
		"ACCOUNT_IS_ISOLATED",
		"EC2_SSM_RESOURCE_DATA_SYNC_LIMIT_EXCEEDED",
		"EC2_SSM_ASSOCIATION_VERSION_LIMIT_EXCEEDED",
	}
}

type ExploitAvailable string

// Enum values for ExploitAvailable
const (
	ExploitAvailableYes ExploitAvailable = "YES"
	ExploitAvailableNo  ExploitAvailable = "NO"
)

// Values returns all known values for ExploitAvailable. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ExploitAvailable) Values() []ExploitAvailable {
	return []ExploitAvailable{
		"YES",
		"NO",
	}
}

type ExternalReportStatus string

// Enum values for ExternalReportStatus
const (
	ExternalReportStatusSucceeded  ExternalReportStatus = "SUCCEEDED"
	ExternalReportStatusInProgress ExternalReportStatus = "IN_PROGRESS"
	ExternalReportStatusCancelled  ExternalReportStatus = "CANCELLED"
	ExternalReportStatusFailed     ExternalReportStatus = "FAILED"
)

// Values returns all known values for ExternalReportStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ExternalReportStatus) Values() []ExternalReportStatus {
	return []ExternalReportStatus{
		"SUCCEEDED",
		"IN_PROGRESS",
		"CANCELLED",
		"FAILED",
	}
}

type FilterAction string

// Enum values for FilterAction
const (
	FilterActionNone     FilterAction = "NONE"
	FilterActionSuppress FilterAction = "SUPPRESS"
)

// Values returns all known values for FilterAction. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FilterAction) Values() []FilterAction {
	return []FilterAction{
		"NONE",
		"SUPPRESS",
	}
}

type FindingDetailsErrorCode string

// Enum values for FindingDetailsErrorCode
const (
	FindingDetailsErrorCodeInternalError          FindingDetailsErrorCode = "INTERNAL_ERROR"
	FindingDetailsErrorCodeAccessDenied           FindingDetailsErrorCode = "ACCESS_DENIED"
	FindingDetailsErrorCodeFindingDetailsNotFound FindingDetailsErrorCode = "FINDING_DETAILS_NOT_FOUND"
	FindingDetailsErrorCodeInvalidInput           FindingDetailsErrorCode = "INVALID_INPUT"
)

// Values returns all known values for FindingDetailsErrorCode. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FindingDetailsErrorCode) Values() []FindingDetailsErrorCode {
	return []FindingDetailsErrorCode{
		"INTERNAL_ERROR",
		"ACCESS_DENIED",
		"FINDING_DETAILS_NOT_FOUND",
		"INVALID_INPUT",
	}
}

type FindingStatus string

// Enum values for FindingStatus
const (
	FindingStatusActive     FindingStatus = "ACTIVE"
	FindingStatusSuppressed FindingStatus = "SUPPRESSED"
	FindingStatusClosed     FindingStatus = "CLOSED"
)

// Values returns all known values for FindingStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FindingStatus) Values() []FindingStatus {
	return []FindingStatus{
		"ACTIVE",
		"SUPPRESSED",
		"CLOSED",
	}
}

type FindingType string

// Enum values for FindingType
const (
	FindingTypeNetworkReachability  FindingType = "NETWORK_REACHABILITY"
	FindingTypePackageVulnerability FindingType = "PACKAGE_VULNERABILITY"
	FindingTypeCodeVulnerability    FindingType = "CODE_VULNERABILITY"
)

// Values returns all known values for FindingType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FindingType) Values() []FindingType {
	return []FindingType{
		"NETWORK_REACHABILITY",
		"PACKAGE_VULNERABILITY",
		"CODE_VULNERABILITY",
	}
}

type FindingTypeSortBy string

// Enum values for FindingTypeSortBy
const (
	FindingTypeSortByCritical FindingTypeSortBy = "CRITICAL"
	FindingTypeSortByHigh     FindingTypeSortBy = "HIGH"
	FindingTypeSortByAll      FindingTypeSortBy = "ALL"
)

// Values returns all known values for FindingTypeSortBy. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FindingTypeSortBy) Values() []FindingTypeSortBy {
	return []FindingTypeSortBy{
		"CRITICAL",
		"HIGH",
		"ALL",
	}
}

type FixAvailable string

// Enum values for FixAvailable
const (
	FixAvailableYes     FixAvailable = "YES"
	FixAvailableNo      FixAvailable = "NO"
	FixAvailablePartial FixAvailable = "PARTIAL"
)

// Values returns all known values for FixAvailable. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FixAvailable) Values() []FixAvailable {
	return []FixAvailable{
		"YES",
		"NO",
		"PARTIAL",
	}
}

type FreeTrialInfoErrorCode string

// Enum values for FreeTrialInfoErrorCode
const (
	FreeTrialInfoErrorCodeAccessDenied  FreeTrialInfoErrorCode = "ACCESS_DENIED"
	FreeTrialInfoErrorCodeInternalError FreeTrialInfoErrorCode = "INTERNAL_ERROR"
)

// Values returns all known values for FreeTrialInfoErrorCode. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FreeTrialInfoErrorCode) Values() []FreeTrialInfoErrorCode {
	return []FreeTrialInfoErrorCode{
		"ACCESS_DENIED",
		"INTERNAL_ERROR",
	}
}

type FreeTrialStatus string

// Enum values for FreeTrialStatus
const (
	FreeTrialStatusActive   FreeTrialStatus = "ACTIVE"
	FreeTrialStatusInactive FreeTrialStatus = "INACTIVE"
)

// Values returns all known values for FreeTrialStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FreeTrialStatus) Values() []FreeTrialStatus {
	return []FreeTrialStatus{
		"ACTIVE",
		"INACTIVE",
	}
}

type FreeTrialType string

// Enum values for FreeTrialType
const (
	FreeTrialTypeEc2            FreeTrialType = "EC2"
	FreeTrialTypeEcr            FreeTrialType = "ECR"
	FreeTrialTypeLambda         FreeTrialType = "LAMBDA"
	FreeTrialTypeLambdaCode     FreeTrialType = "LAMBDA_CODE"
	FreeTrialTypeCodeRepository FreeTrialType = "CODE_REPOSITORY"
)

// Values returns all known values for FreeTrialType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FreeTrialType) Values() []FreeTrialType {
	return []FreeTrialType{
		"EC2",
		"ECR",
		"LAMBDA",
		"LAMBDA_CODE",
		"CODE_REPOSITORY",
	}
}

type GroupKey string

// Enum values for GroupKey
const (
	GroupKeyScanStatusCode    GroupKey = "SCAN_STATUS_CODE"
	GroupKeyScanStatusReason  GroupKey = "SCAN_STATUS_REASON"
	GroupKeyAccountId         GroupKey = "ACCOUNT_ID"
	GroupKeyResourceType      GroupKey = "RESOURCE_TYPE"
	GroupKeyEcrRepositoryName GroupKey = "ECR_REPOSITORY_NAME"
)

// Values returns all known values for GroupKey. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GroupKey) Values() []GroupKey {
	return []GroupKey{
		"SCAN_STATUS_CODE",
		"SCAN_STATUS_REASON",
		"ACCOUNT_ID",
		"RESOURCE_TYPE",
		"ECR_REPOSITORY_NAME",
	}
}

type ImageLayerSortBy string

// Enum values for ImageLayerSortBy
const (
	ImageLayerSortByCritical ImageLayerSortBy = "CRITICAL"
	ImageLayerSortByHigh     ImageLayerSortBy = "HIGH"
	ImageLayerSortByAll      ImageLayerSortBy = "ALL"
)

// Values returns all known values for ImageLayerSortBy. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ImageLayerSortBy) Values() []ImageLayerSortBy {
	return []ImageLayerSortBy{
		"CRITICAL",
		"HIGH",
		"ALL",
	}
}

type IntegrationStatus string

// Enum values for IntegrationStatus
const (
	IntegrationStatusPending    IntegrationStatus = "PENDING"
	IntegrationStatusInProgress IntegrationStatus = "IN_PROGRESS"
	IntegrationStatusActive     IntegrationStatus = "ACTIVE"
	IntegrationStatusInactive   IntegrationStatus = "INACTIVE"
	IntegrationStatusDisabling  IntegrationStatus = "DISABLING"
)

// Values returns all known values for IntegrationStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IntegrationStatus) Values() []IntegrationStatus {
	return []IntegrationStatus{
		"PENDING",
		"IN_PROGRESS",
		"ACTIVE",
		"INACTIVE",
		"DISABLING",
	}
}

type IntegrationType string

// Enum values for IntegrationType
const (
	IntegrationTypeGitlabSelfManaged IntegrationType = "GITLAB_SELF_MANAGED"
	IntegrationTypeGithub            IntegrationType = "GITHUB"
)

// Values returns all known values for IntegrationType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IntegrationType) Values() []IntegrationType {
	return []IntegrationType{
		"GITLAB_SELF_MANAGED",
		"GITHUB",
	}
}

type LambdaFunctionSortBy string

// Enum values for LambdaFunctionSortBy
const (
	LambdaFunctionSortByCritical LambdaFunctionSortBy = "CRITICAL"
	LambdaFunctionSortByHigh     LambdaFunctionSortBy = "HIGH"
	LambdaFunctionSortByAll      LambdaFunctionSortBy = "ALL"
)

// Values returns all known values for LambdaFunctionSortBy. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LambdaFunctionSortBy) Values() []LambdaFunctionSortBy {
	return []LambdaFunctionSortBy{
		"CRITICAL",
		"HIGH",
		"ALL",
	}
}

type LambdaLayerSortBy string

// Enum values for LambdaLayerSortBy
const (
	LambdaLayerSortByCritical LambdaLayerSortBy = "CRITICAL"
	LambdaLayerSortByHigh     LambdaLayerSortBy = "HIGH"
	LambdaLayerSortByAll      LambdaLayerSortBy = "ALL"
)

// Values returns all known values for LambdaLayerSortBy. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LambdaLayerSortBy) Values() []LambdaLayerSortBy {
	return []LambdaLayerSortBy{
		"CRITICAL",
		"HIGH",
		"ALL",
	}
}

type ListCisScansDetailLevel string

// Enum values for ListCisScansDetailLevel
const (
	ListCisScansDetailLevelOrganization ListCisScansDetailLevel = "ORGANIZATION"
	ListCisScansDetailLevelMember       ListCisScansDetailLevel = "MEMBER"
)

// Values returns all known values for ListCisScansDetailLevel. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ListCisScansDetailLevel) Values() []ListCisScansDetailLevel {
	return []ListCisScansDetailLevel{
		"ORGANIZATION",
		"MEMBER",
	}
}

type ListCisScansSortBy string

// Enum values for ListCisScansSortBy
const (
	ListCisScansSortByStatus        ListCisScansSortBy = "STATUS"
	ListCisScansSortByScheduledBy   ListCisScansSortBy = "SCHEDULED_BY"
	ListCisScansSortByScanStartDate ListCisScansSortBy = "SCAN_START_DATE"
	ListCisScansSortByFailedChecks  ListCisScansSortBy = "FAILED_CHECKS"
)

// Values returns all known values for ListCisScansSortBy. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ListCisScansSortBy) Values() []ListCisScansSortBy {
	return []ListCisScansSortBy{
		"STATUS",
		"SCHEDULED_BY",
		"SCAN_START_DATE",
		"FAILED_CHECKS",
	}
}

type MapComparison string

// Enum values for MapComparison
const (
	MapComparisonEquals MapComparison = "EQUALS"
)

// Values returns all known values for MapComparison. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MapComparison) Values() []MapComparison {
	return []MapComparison{
		"EQUALS",
	}
}

type NetworkProtocol string

// Enum values for NetworkProtocol
const (
	NetworkProtocolTcp NetworkProtocol = "TCP"
	NetworkProtocolUdp NetworkProtocol = "UDP"
)

// Values returns all known values for NetworkProtocol. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NetworkProtocol) Values() []NetworkProtocol {
	return []NetworkProtocol{
		"TCP",
		"UDP",
	}
}

type Operation string

// Enum values for Operation
const (
	OperationEnableScanning    Operation = "ENABLE_SCANNING"
	OperationDisableScanning   Operation = "DISABLE_SCANNING"
	OperationEnableRepository  Operation = "ENABLE_REPOSITORY"
	OperationDisableRepository Operation = "DISABLE_REPOSITORY"
)

// Values returns all known values for Operation. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Operation) Values() []Operation {
	return []Operation{
		"ENABLE_SCANNING",
		"DISABLE_SCANNING",
		"ENABLE_REPOSITORY",
		"DISABLE_REPOSITORY",
	}
}

type PackageManager string

// Enum values for PackageManager
const (
	PackageManagerBundler    PackageManager = "BUNDLER"
	PackageManagerCargo      PackageManager = "CARGO"
	PackageManagerComposer   PackageManager = "COMPOSER"
	PackageManagerNpm        PackageManager = "NPM"
	PackageManagerNuget      PackageManager = "NUGET"
	PackageManagerPipenv     PackageManager = "PIPENV"
	PackageManagerPoetry     PackageManager = "POETRY"
	PackageManagerYarn       PackageManager = "YARN"
	PackageManagerGobinary   PackageManager = "GOBINARY"
	PackageManagerGomod      PackageManager = "GOMOD"
	PackageManagerJar        PackageManager = "JAR"
	PackageManagerOs         PackageManager = "OS"
	PackageManagerPip        PackageManager = "PIP"
	PackageManagerPythonpkg  PackageManager = "PYTHONPKG"
	PackageManagerNodepkg    PackageManager = "NODEPKG"
	PackageManagerPom        PackageManager = "POM"
	PackageManagerGemspec    PackageManager = "GEMSPEC"
	PackageManagerDotnetCore PackageManager = "DOTNET_CORE"
)

// Values returns all known values for PackageManager. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PackageManager) Values() []PackageManager {
	return []PackageManager{
		"BUNDLER",
		"CARGO",
		"COMPOSER",
		"NPM",
		"NUGET",
		"PIPENV",
		"POETRY",
		"YARN",
		"GOBINARY",
		"GOMOD",
		"JAR",
		"OS",
		"PIP",
		"PYTHONPKG",
		"NODEPKG",
		"POM",
		"GEMSPEC",
		"DOTNET_CORE",
	}
}

type PackageSortBy string

// Enum values for PackageSortBy
const (
	PackageSortByCritical PackageSortBy = "CRITICAL"
	PackageSortByHigh     PackageSortBy = "HIGH"
	PackageSortByAll      PackageSortBy = "ALL"
)

// Values returns all known values for PackageSortBy. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PackageSortBy) Values() []PackageSortBy {
	return []PackageSortBy{
		"CRITICAL",
		"HIGH",
		"ALL",
	}
}

type PackageType string

// Enum values for PackageType
const (
	PackageTypeImage PackageType = "IMAGE"
	PackageTypeZip   PackageType = "ZIP"
)

// Values returns all known values for PackageType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PackageType) Values() []PackageType {
	return []PackageType{
		"IMAGE",
		"ZIP",
	}
}

type PeriodicScanFrequency string

// Enum values for PeriodicScanFrequency
const (
	PeriodicScanFrequencyWeekly  PeriodicScanFrequency = "WEEKLY"
	PeriodicScanFrequencyMonthly PeriodicScanFrequency = "MONTHLY"
	PeriodicScanFrequencyNever   PeriodicScanFrequency = "NEVER"
)

// Values returns all known values for PeriodicScanFrequency. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PeriodicScanFrequency) Values() []PeriodicScanFrequency {
	return []PeriodicScanFrequency{
		"WEEKLY",
		"MONTHLY",
		"NEVER",
	}
}

type ProjectSelectionScope string

// Enum values for ProjectSelectionScope
const (
	ProjectSelectionScopeAll ProjectSelectionScope = "ALL"
)

// Values returns all known values for ProjectSelectionScope. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ProjectSelectionScope) Values() []ProjectSelectionScope {
	return []ProjectSelectionScope{
		"ALL",
	}
}

type RelationshipStatus string

// Enum values for RelationshipStatus
const (
	RelationshipStatusCreated                         RelationshipStatus = "CREATED"
	RelationshipStatusInvited                         RelationshipStatus = "INVITED"
	RelationshipStatusDisabled                        RelationshipStatus = "DISABLED"
	RelationshipStatusEnabled                         RelationshipStatus = "ENABLED"
	RelationshipStatusRemoved                         RelationshipStatus = "REMOVED"
	RelationshipStatusResigned                        RelationshipStatus = "RESIGNED"
	RelationshipStatusDeleted                         RelationshipStatus = "DELETED"
	RelationshipStatusEmailVerificationInProgress     RelationshipStatus = "EMAIL_VERIFICATION_IN_PROGRESS"
	RelationshipStatusEmailVerificationFailed         RelationshipStatus = "EMAIL_VERIFICATION_FAILED"
	RelationshipStatusRegionDisabled                  RelationshipStatus = "REGION_DISABLED"
	RelationshipStatusAccountSuspended                RelationshipStatus = "ACCOUNT_SUSPENDED"
	RelationshipStatusCannotCreateDetectorInOrgMaster RelationshipStatus = "CANNOT_CREATE_DETECTOR_IN_ORG_MASTER"
)

// Values returns all known values for RelationshipStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RelationshipStatus) Values() []RelationshipStatus {
	return []RelationshipStatus{
		"CREATED",
		"INVITED",
		"DISABLED",
		"ENABLED",
		"REMOVED",
		"RESIGNED",
		"DELETED",
		"EMAIL_VERIFICATION_IN_PROGRESS",
		"EMAIL_VERIFICATION_FAILED",
		"REGION_DISABLED",
		"ACCOUNT_SUSPENDED",
		"CANNOT_CREATE_DETECTOR_IN_ORG_MASTER",
	}
}

type ReportFormat string

// Enum values for ReportFormat
const (
	ReportFormatCsv  ReportFormat = "CSV"
	ReportFormatJson ReportFormat = "JSON"
)

// Values returns all known values for ReportFormat. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ReportFormat) Values() []ReportFormat {
	return []ReportFormat{
		"CSV",
		"JSON",
	}
}

type ReportingErrorCode string

// Enum values for ReportingErrorCode
const (
	ReportingErrorCodeInternalError            ReportingErrorCode = "INTERNAL_ERROR"
	ReportingErrorCodeInvalidPermissions       ReportingErrorCode = "INVALID_PERMISSIONS"
	ReportingErrorCodeNoFindingsFound          ReportingErrorCode = "NO_FINDINGS_FOUND"
	ReportingErrorCodeBucketNotFound           ReportingErrorCode = "BUCKET_NOT_FOUND"
	ReportingErrorCodeIncompatibleBucketRegion ReportingErrorCode = "INCOMPATIBLE_BUCKET_REGION"
	ReportingErrorCodeMalformedKmsKey          ReportingErrorCode = "MALFORMED_KMS_KEY"
)

// Values returns all known values for ReportingErrorCode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ReportingErrorCode) Values() []ReportingErrorCode {
	return []ReportingErrorCode{
		"INTERNAL_ERROR",
		"INVALID_PERMISSIONS",
		"NO_FINDINGS_FOUND",
		"BUCKET_NOT_FOUND",
		"INCOMPATIBLE_BUCKET_REGION",
		"MALFORMED_KMS_KEY",
	}
}

type RepositorySortBy string

// Enum values for RepositorySortBy
const (
	RepositorySortByCritical       RepositorySortBy = "CRITICAL"
	RepositorySortByHigh           RepositorySortBy = "HIGH"
	RepositorySortByAll            RepositorySortBy = "ALL"
	RepositorySortByAffectedImages RepositorySortBy = "AFFECTED_IMAGES"
)

// Values returns all known values for RepositorySortBy. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RepositorySortBy) Values() []RepositorySortBy {
	return []RepositorySortBy{
		"CRITICAL",
		"HIGH",
		"ALL",
		"AFFECTED_IMAGES",
	}
}

type ResourceMapComparison string

// Enum values for ResourceMapComparison
const (
	ResourceMapComparisonEquals ResourceMapComparison = "EQUALS"
)

// Values returns all known values for ResourceMapComparison. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ResourceMapComparison) Values() []ResourceMapComparison {
	return []ResourceMapComparison{
		"EQUALS",
	}
}

type ResourceScanType string

// Enum values for ResourceScanType
const (
	ResourceScanTypeEc2            ResourceScanType = "EC2"
	ResourceScanTypeEcr            ResourceScanType = "ECR"
	ResourceScanTypeLambda         ResourceScanType = "LAMBDA"
	ResourceScanTypeLambdaCode     ResourceScanType = "LAMBDA_CODE"
	ResourceScanTypeCodeRepository ResourceScanType = "CODE_REPOSITORY"
)

// Values returns all known values for ResourceScanType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ResourceScanType) Values() []ResourceScanType {
	return []ResourceScanType{
		"EC2",
		"ECR",
		"LAMBDA",
		"LAMBDA_CODE",
		"CODE_REPOSITORY",
	}
}

type ResourceStringComparison string

// Enum values for ResourceStringComparison
const (
	ResourceStringComparisonEquals    ResourceStringComparison = "EQUALS"
	ResourceStringComparisonNotEquals ResourceStringComparison = "NOT_EQUALS"
)

// Values returns all known values for ResourceStringComparison. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ResourceStringComparison) Values() []ResourceStringComparison {
	return []ResourceStringComparison{
		"EQUALS",
		"NOT_EQUALS",
	}
}

type ResourceType string

// Enum values for ResourceType
const (
	ResourceTypeAwsEc2Instance       ResourceType = "AWS_EC2_INSTANCE"
	ResourceTypeAwsEcrContainerImage ResourceType = "AWS_ECR_CONTAINER_IMAGE"
	ResourceTypeAwsEcrRepository     ResourceType = "AWS_ECR_REPOSITORY"
	ResourceTypeAwsLambdaFunction    ResourceType = "AWS_LAMBDA_FUNCTION"
	ResourceTypeCodeRepository       ResourceType = "CODE_REPOSITORY"
)

// Values returns all known values for ResourceType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ResourceType) Values() []ResourceType {
	return []ResourceType{
		"AWS_EC2_INSTANCE",
		"AWS_ECR_CONTAINER_IMAGE",
		"AWS_ECR_REPOSITORY",
		"AWS_LAMBDA_FUNCTION",
		"CODE_REPOSITORY",
	}
}

type RuleSetCategory string

// Enum values for RuleSetCategory
const (
	RuleSetCategorySast RuleSetCategory = "SAST"
	RuleSetCategoryIac  RuleSetCategory = "IAC"
	RuleSetCategorySca  RuleSetCategory = "SCA"
)

// Values returns all known values for RuleSetCategory. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RuleSetCategory) Values() []RuleSetCategory {
	return []RuleSetCategory{
		"SAST",
		"IAC",
		"SCA",
	}
}

type Runtime string

// Enum values for Runtime
const (
	RuntimeNodejs       Runtime = "NODEJS"
	RuntimeNodejs12X    Runtime = "NODEJS_12_X"
	RuntimeNodejs14X    Runtime = "NODEJS_14_X"
	RuntimeNodejs16X    Runtime = "NODEJS_16_X"
	RuntimeJava8        Runtime = "JAVA_8"
	RuntimeJava8Al2     Runtime = "JAVA_8_AL2"
	RuntimeJava11       Runtime = "JAVA_11"
	RuntimePython37     Runtime = "PYTHON_3_7"
	RuntimePython38     Runtime = "PYTHON_3_8"
	RuntimePython39     Runtime = "PYTHON_3_9"
	RuntimeUnsupported  Runtime = "UNSUPPORTED"
	RuntimeNodejs18X    Runtime = "NODEJS_18_X"
	RuntimeGo1X         Runtime = "GO_1_X"
	RuntimeJava17       Runtime = "JAVA_17"
	RuntimePython310    Runtime = "PYTHON_3_10"
	RuntimePython311    Runtime = "PYTHON_3_11"
	RuntimeDotnetcore31 Runtime = "DOTNETCORE_3_1"
	RuntimeDotnet6      Runtime = "DOTNET_6"
	RuntimeDotnet7      Runtime = "DOTNET_7"
	RuntimeRuby27       Runtime = "RUBY_2_7"
	RuntimeRuby32       Runtime = "RUBY_3_2"
)

// Values returns all known values for Runtime. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Runtime) Values() []Runtime {
	return []Runtime{
		"NODEJS",
		"NODEJS_12_X",
		"NODEJS_14_X",
		"NODEJS_16_X",
		"JAVA_8",
		"JAVA_8_AL2",
		"JAVA_11",
		"PYTHON_3_7",
		"PYTHON_3_8",
		"PYTHON_3_9",
		"UNSUPPORTED",
		"NODEJS_18_X",
		"GO_1_X",
		"JAVA_17",
		"PYTHON_3_10",
		"PYTHON_3_11",
		"DOTNETCORE_3_1",
		"DOTNET_6",
		"DOTNET_7",
		"RUBY_2_7",
		"RUBY_3_2",
	}
}

type SbomReportFormat string

// Enum values for SbomReportFormat
const (
	SbomReportFormatCyclonedx14 SbomReportFormat = "CYCLONEDX_1_4"
	SbomReportFormatSpdx23      SbomReportFormat = "SPDX_2_3"
)

// Values returns all known values for SbomReportFormat. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SbomReportFormat) Values() []SbomReportFormat {
	return []SbomReportFormat{
		"CYCLONEDX_1_4",
		"SPDX_2_3",
	}
}

type ScanMode string

// Enum values for ScanMode
const (
	ScanModeEc2SsmAgentBased ScanMode = "EC2_SSM_AGENT_BASED"
	ScanModeEc2Agentless     ScanMode = "EC2_AGENTLESS"
)

// Values returns all known values for ScanMode. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ScanMode) Values() []ScanMode {
	return []ScanMode{
		"EC2_SSM_AGENT_BASED",
		"EC2_AGENTLESS",
	}
}

type ScanStatusCode string

// Enum values for ScanStatusCode
const (
	ScanStatusCodeActive   ScanStatusCode = "ACTIVE"
	ScanStatusCodeInactive ScanStatusCode = "INACTIVE"
)

// Values returns all known values for ScanStatusCode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ScanStatusCode) Values() []ScanStatusCode {
	return []ScanStatusCode{
		"ACTIVE",
		"INACTIVE",
	}
}

type ScanStatusReason string

// Enum values for ScanStatusReason
const (
	ScanStatusReasonPendingInitialScan                           ScanStatusReason = "PENDING_INITIAL_SCAN"
	ScanStatusReasonAccessDenied                                 ScanStatusReason = "ACCESS_DENIED"
	ScanStatusReasonInternalError                                ScanStatusReason = "INTERNAL_ERROR"
	ScanStatusReasonUnmanagedEc2Instance                         ScanStatusReason = "UNMANAGED_EC2_INSTANCE"
	ScanStatusReasonUnsupportedOs                                ScanStatusReason = "UNSUPPORTED_OS"
	ScanStatusReasonScanEligibilityExpired                       ScanStatusReason = "SCAN_ELIGIBILITY_EXPIRED"
	ScanStatusReasonResourceTerminated                           ScanStatusReason = "RESOURCE_TERMINATED"
	ScanStatusReasonSuccessful                                   ScanStatusReason = "SUCCESSFUL"
	ScanStatusReasonNoResourcesFound                             ScanStatusReason = "NO_RESOURCES_FOUND"
	ScanStatusReasonImageSizeExceeded                            ScanStatusReason = "IMAGE_SIZE_EXCEEDED"
	ScanStatusReasonScanFrequencyManual                          ScanStatusReason = "SCAN_FREQUENCY_MANUAL"
	ScanStatusReasonScanFrequencyScanOnPush                      ScanStatusReason = "SCAN_FREQUENCY_SCAN_ON_PUSH"
	ScanStatusReasonEc2InstanceStopped                           ScanStatusReason = "EC2_INSTANCE_STOPPED"
	ScanStatusReasonPendingDisable                               ScanStatusReason = "PENDING_DISABLE"
	ScanStatusReasonNoInventory                                  ScanStatusReason = "NO_INVENTORY"
	ScanStatusReasonStaleInventory                               ScanStatusReason = "STALE_INVENTORY"
	ScanStatusReasonExcludedByTag                                ScanStatusReason = "EXCLUDED_BY_TAG"
	ScanStatusReasonUnsupportedRuntime                           ScanStatusReason = "UNSUPPORTED_RUNTIME"
	ScanStatusReasonUnsupportedMediaType                         ScanStatusReason = "UNSUPPORTED_MEDIA_TYPE"
	ScanStatusReasonUnsupportedConfigFile                        ScanStatusReason = "UNSUPPORTED_CONFIG_FILE"
	ScanStatusReasonDeepInspectionPackageCollectionLimitExceeded ScanStatusReason = "DEEP_INSPECTION_PACKAGE_COLLECTION_LIMIT_EXCEEDED"
	ScanStatusReasonDeepInspectionDailySsmInventoryLimitExceeded ScanStatusReason = "DEEP_INSPECTION_DAILY_SSM_INVENTORY_LIMIT_EXCEEDED"
	ScanStatusReasonDeepInspectionCollectionTimeLimitExceeded    ScanStatusReason = "DEEP_INSPECTION_COLLECTION_TIME_LIMIT_EXCEEDED"
	ScanStatusReasonDeepInspectionNoInventory                    ScanStatusReason = "DEEP_INSPECTION_NO_INVENTORY"
	ScanStatusReasonAgentlessInstanceStorageLimitExceeded        ScanStatusReason = "AGENTLESS_INSTANCE_STORAGE_LIMIT_EXCEEDED"
	ScanStatusReasonAgentlessInstanceCollectionTimeLimitExceeded ScanStatusReason = "AGENTLESS_INSTANCE_COLLECTION_TIME_LIMIT_EXCEEDED"
	ScanStatusReasonPendingRevivalScan                           ScanStatusReason = "PENDING_REVIVAL_SCAN"
	ScanStatusReasonIntegrationConnectionLost                    ScanStatusReason = "INTEGRATION_CONNECTION_LOST"
	ScanStatusReasonAccessDeniedToEncryptionKey                  ScanStatusReason = "ACCESS_DENIED_TO_ENCRYPTION_KEY"
	ScanStatusReasonUnsupportedLanguage                          ScanStatusReason = "UNSUPPORTED_LANGUAGE"
	ScanStatusReasonNoScanConfigurationAssociated                ScanStatusReason = "NO_SCAN_CONFIGURATION_ASSOCIATED"
	ScanStatusReasonScanInProgress                               ScanStatusReason = "SCAN_IN_PROGRESS"
)

// Values returns all known values for ScanStatusReason. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ScanStatusReason) Values() []ScanStatusReason {
	return []ScanStatusReason{
		"PENDING_INITIAL_SCAN",
		"ACCESS_DENIED",
		"INTERNAL_ERROR",
		"UNMANAGED_EC2_INSTANCE",
		"UNSUPPORTED_OS",
		"SCAN_ELIGIBILITY_EXPIRED",
		"RESOURCE_TERMINATED",
		"SUCCESSFUL",
		"NO_RESOURCES_FOUND",
		"IMAGE_SIZE_EXCEEDED",
		"SCAN_FREQUENCY_MANUAL",
		"SCAN_FREQUENCY_SCAN_ON_PUSH",
		"EC2_INSTANCE_STOPPED",
		"PENDING_DISABLE",
		"NO_INVENTORY",
		"STALE_INVENTORY",
		"EXCLUDED_BY_TAG",
		"UNSUPPORTED_RUNTIME",
		"UNSUPPORTED_MEDIA_TYPE",
		"UNSUPPORTED_CONFIG_FILE",
		"DEEP_INSPECTION_PACKAGE_COLLECTION_LIMIT_EXCEEDED",
		"DEEP_INSPECTION_DAILY_SSM_INVENTORY_LIMIT_EXCEEDED",
		"DEEP_INSPECTION_COLLECTION_TIME_LIMIT_EXCEEDED",
		"DEEP_INSPECTION_NO_INVENTORY",
		"AGENTLESS_INSTANCE_STORAGE_LIMIT_EXCEEDED",
		"AGENTLESS_INSTANCE_COLLECTION_TIME_LIMIT_EXCEEDED",
		"PENDING_REVIVAL_SCAN",
		"INTEGRATION_CONNECTION_LOST",
		"ACCESS_DENIED_TO_ENCRYPTION_KEY",
		"UNSUPPORTED_LANGUAGE",
		"NO_SCAN_CONFIGURATION_ASSOCIATED",
		"SCAN_IN_PROGRESS",
	}
}

type ScanType string

// Enum values for ScanType
const (
	ScanTypeNetwork ScanType = "NETWORK"
	ScanTypePackage ScanType = "PACKAGE"
	ScanTypeCode    ScanType = "CODE"
)

// Values returns all known values for ScanType. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ScanType) Values() []ScanType {
	return []ScanType{
		"NETWORK",
		"PACKAGE",
		"CODE",
	}
}

type Service string

// Enum values for Service
const (
	ServiceEc2    Service = "EC2"
	ServiceEcr    Service = "ECR"
	ServiceLambda Service = "LAMBDA"
)

// Values returns all known values for Service. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Service) Values() []Service {
	return []Service{
		"EC2",
		"ECR",
		"LAMBDA",
	}
}

type Severity string

// Enum values for Severity
const (
	SeverityInformational Severity = "INFORMATIONAL"
	SeverityLow           Severity = "LOW"
	SeverityMedium        Severity = "MEDIUM"
	SeverityHigh          Severity = "HIGH"
	SeverityCritical      Severity = "CRITICAL"
	SeverityUntriaged     Severity = "UNTRIAGED"
)

// Values returns all known values for Severity. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Severity) Values() []Severity {
	return []Severity{
		"INFORMATIONAL",
		"LOW",
		"MEDIUM",
		"HIGH",
		"CRITICAL",
		"UNTRIAGED",
	}
}

type SortField string

// Enum values for SortField
const (
	SortFieldAwsAccountId           SortField = "AWS_ACCOUNT_ID"
	SortFieldFindingType            SortField = "FINDING_TYPE"
	SortFieldSeverity               SortField = "SEVERITY"
	SortFieldFirstObservedAt        SortField = "FIRST_OBSERVED_AT"
	SortFieldLastObservedAt         SortField = "LAST_OBSERVED_AT"
	SortFieldFindingStatus          SortField = "FINDING_STATUS"
	SortFieldResourceType           SortField = "RESOURCE_TYPE"
	SortFieldEcrImagePushedAt       SortField = "ECR_IMAGE_PUSHED_AT"
	SortFieldEcrImageRepositoryName SortField = "ECR_IMAGE_REPOSITORY_NAME"
	SortFieldEcrImageRegistry       SortField = "ECR_IMAGE_REGISTRY"
	SortFieldNetworkProtocol        SortField = "NETWORK_PROTOCOL"
	SortFieldComponentType          SortField = "COMPONENT_TYPE"
	SortFieldVulnerabilityId        SortField = "VULNERABILITY_ID"
	SortFieldVulnerabilitySource    SortField = "VULNERABILITY_SOURCE"
	SortFieldInspectorScore         SortField = "INSPECTOR_SCORE"
	SortFieldVendorSeverity         SortField = "VENDOR_SEVERITY"
	SortFieldEpssScore              SortField = "EPSS_SCORE"
)

// Values returns all known values for SortField. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SortField) Values() []SortField {
	return []SortField{
		"AWS_ACCOUNT_ID",
		"FINDING_TYPE",
		"SEVERITY",
		"FIRST_OBSERVED_AT",
		"LAST_OBSERVED_AT",
		"FINDING_STATUS",
		"RESOURCE_TYPE",
		"ECR_IMAGE_PUSHED_AT",
		"ECR_IMAGE_REPOSITORY_NAME",
		"ECR_IMAGE_REGISTRY",
		"NETWORK_PROTOCOL",
		"COMPONENT_TYPE",
		"VULNERABILITY_ID",
		"VULNERABILITY_SOURCE",
		"INSPECTOR_SCORE",
		"VENDOR_SEVERITY",
		"EPSS_SCORE",
	}
}

type SortOrder string

// Enum values for SortOrder
const (
	SortOrderAsc  SortOrder = "ASC"
	SortOrderDesc SortOrder = "DESC"
)

// Values returns all known values for SortOrder. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SortOrder) Values() []SortOrder {
	return []SortOrder{
		"ASC",
		"DESC",
	}
}

type Status string

// Enum values for Status
const (
	StatusEnabling   Status = "ENABLING"
	StatusEnabled    Status = "ENABLED"
	StatusDisabling  Status = "DISABLING"
	StatusDisabled   Status = "DISABLED"
	StatusSuspending Status = "SUSPENDING"
	StatusSuspended  Status = "SUSPENDED"
)

// Values returns all known values for Status. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Status) Values() []Status {
	return []Status{
		"ENABLING",
		"ENABLED",
		"DISABLING",
		"DISABLED",
		"SUSPENDING",
		"SUSPENDED",
	}
}

type StopCisSessionStatus string

// Enum values for StopCisSessionStatus
const (
	StopCisSessionStatusSuccess       StopCisSessionStatus = "SUCCESS"
	StopCisSessionStatusFailed        StopCisSessionStatus = "FAILED"
	StopCisSessionStatusInterrupted   StopCisSessionStatus = "INTERRUPTED"
	StopCisSessionStatusUnsupportedOs StopCisSessionStatus = "UNSUPPORTED_OS"
)

// Values returns all known values for StopCisSessionStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (StopCisSessionStatus) Values() []StopCisSessionStatus {
	return []StopCisSessionStatus{
		"SUCCESS",
		"FAILED",
		"INTERRUPTED",
		"UNSUPPORTED_OS",
	}
}

type StringComparison string

// Enum values for StringComparison
const (
	StringComparisonEquals    StringComparison = "EQUALS"
	StringComparisonPrefix    StringComparison = "PREFIX"
	StringComparisonNotEquals StringComparison = "NOT_EQUALS"
)

// Values returns all known values for StringComparison. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (StringComparison) Values() []StringComparison {
	return []StringComparison{
		"EQUALS",
		"PREFIX",
		"NOT_EQUALS",
	}
}

type TagComparison string

// Enum values for TagComparison
const (
	TagComparisonEquals TagComparison = "EQUALS"
)

// Values returns all known values for TagComparison. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TagComparison) Values() []TagComparison {
	return []TagComparison{
		"EQUALS",
	}
}

type TitleSortBy string

// Enum values for TitleSortBy
const (
	TitleSortByCritical TitleSortBy = "CRITICAL"
	TitleSortByHigh     TitleSortBy = "HIGH"
	TitleSortByAll      TitleSortBy = "ALL"
)

// Values returns all known values for TitleSortBy. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TitleSortBy) Values() []TitleSortBy {
	return []TitleSortBy{
		"CRITICAL",
		"HIGH",
		"ALL",
	}
}

type UsageType string

// Enum values for UsageType
const (
	UsageTypeEc2InstanceHours        UsageType = "EC2_INSTANCE_HOURS"
	UsageTypeEcrInitialScan          UsageType = "ECR_INITIAL_SCAN"
	UsageTypeEcrRescan               UsageType = "ECR_RESCAN"
	UsageTypeLambdaFunctionHours     UsageType = "LAMBDA_FUNCTION_HOURS"
	UsageTypeLambdaFunctionCodeHours UsageType = "LAMBDA_FUNCTION_CODE_HOURS"
	UsageTypeCodeRepositorySast      UsageType = "CODE_REPOSITORY_SAST"
	UsageTypeCodeRepositoryIac       UsageType = "CODE_REPOSITORY_IAC"
	UsageTypeCodeRepositorySca       UsageType = "CODE_REPOSITORY_SCA"
)

// Values returns all known values for UsageType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (UsageType) Values() []UsageType {
	return []UsageType{
		"EC2_INSTANCE_HOURS",
		"ECR_INITIAL_SCAN",
		"ECR_RESCAN",
		"LAMBDA_FUNCTION_HOURS",
		"LAMBDA_FUNCTION_CODE_HOURS",
		"CODE_REPOSITORY_SAST",
		"CODE_REPOSITORY_IAC",
		"CODE_REPOSITORY_SCA",
	}
}

type ValidationExceptionReason string

// Enum values for ValidationExceptionReason
const (
	ValidationExceptionReasonCannotParse           ValidationExceptionReason = "CANNOT_PARSE"
	ValidationExceptionReasonFieldValidationFailed ValidationExceptionReason = "FIELD_VALIDATION_FAILED"
	ValidationExceptionReasonOther                 ValidationExceptionReason = "OTHER"
)

// Values returns all known values for ValidationExceptionReason. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ValidationExceptionReason) Values() []ValidationExceptionReason {
	return []ValidationExceptionReason{
		"CANNOT_PARSE",
		"FIELD_VALIDATION_FAILED",
		"OTHER",
	}
}

type VulnerabilitySource string

// Enum values for VulnerabilitySource
const (
	VulnerabilitySourceNvd VulnerabilitySource = "NVD"
)

// Values returns all known values for VulnerabilitySource. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (VulnerabilitySource) Values() []VulnerabilitySource {
	return []VulnerabilitySource{
		"NVD",
	}
}
