// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AsyncJobStatus string

// Enum values for AsyncJobStatus
const (
	AsyncJobStatusInProgressInitializing AsyncJobStatus = "IN_PROGRESS_INITIALIZING"
	AsyncJobStatusInProgress             AsyncJobStatus = "IN_PROGRESS"
	AsyncJobStatusCancelInProgress       AsyncJobStatus = "CANCEL_IN_PROGRESS"
	AsyncJobStatusCanceled               AsyncJobStatus = "CANCELED"
	AsyncJobStatusComplete               AsyncJobStatus = "COMPLETE"
	AsyncJobStatusFailed                 AsyncJobStatus = "FAILED"
)

// Values returns all known values for AsyncJobStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AsyncJobStatus) Values() []AsyncJobStatus {
	return []AsyncJobStatus{
		"IN_PROGRESS_INITIALIZING",
		"IN_PROGRESS",
		"CANCEL_IN_PROGRESS",
		"CANCELED",
		"COMPLETE",
		"FAILED",
	}
}

type DataSource string

// Enum values for DataSource
const (
	DataSourceEvent              DataSource = "EVENT"
	DataSourceModelScore         DataSource = "MODEL_SCORE"
	DataSourceExternalModelScore DataSource = "EXTERNAL_MODEL_SCORE"
)

// Values returns all known values for DataSource. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DataSource) Values() []DataSource {
	return []DataSource{
		"EVENT",
		"MODEL_SCORE",
		"EXTERNAL_MODEL_SCORE",
	}
}

type DataType string

// Enum values for DataType
const (
	DataTypeString   DataType = "STRING"
	DataTypeInteger  DataType = "INTEGER"
	DataTypeFloat    DataType = "FLOAT"
	DataTypeBoolean  DataType = "BOOLEAN"
	DataTypeDatetime DataType = "DATETIME"
)

// Values returns all known values for DataType. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DataType) Values() []DataType {
	return []DataType{
		"STRING",
		"INTEGER",
		"FLOAT",
		"BOOLEAN",
		"DATETIME",
	}
}

type DetectorVersionStatus string

// Enum values for DetectorVersionStatus
const (
	DetectorVersionStatusDraft    DetectorVersionStatus = "DRAFT"
	DetectorVersionStatusActive   DetectorVersionStatus = "ACTIVE"
	DetectorVersionStatusInactive DetectorVersionStatus = "INACTIVE"
)

// Values returns all known values for DetectorVersionStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DetectorVersionStatus) Values() []DetectorVersionStatus {
	return []DetectorVersionStatus{
		"DRAFT",
		"ACTIVE",
		"INACTIVE",
	}
}

type EventIngestion string

// Enum values for EventIngestion
const (
	EventIngestionEnabled  EventIngestion = "ENABLED"
	EventIngestionDisabled EventIngestion = "DISABLED"
)

// Values returns all known values for EventIngestion. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EventIngestion) Values() []EventIngestion {
	return []EventIngestion{
		"ENABLED",
		"DISABLED",
	}
}

type Language string

// Enum values for Language
const (
	LanguageDetectorpl Language = "DETECTORPL"
)

// Values returns all known values for Language. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Language) Values() []Language {
	return []Language{
		"DETECTORPL",
	}
}

type ListUpdateMode string

// Enum values for ListUpdateMode
const (
	ListUpdateModeReplace ListUpdateMode = "REPLACE"
	ListUpdateModeAppend  ListUpdateMode = "APPEND"
	ListUpdateModeRemove  ListUpdateMode = "REMOVE"
)

// Values returns all known values for ListUpdateMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ListUpdateMode) Values() []ListUpdateMode {
	return []ListUpdateMode{
		"REPLACE",
		"APPEND",
		"REMOVE",
	}
}

type ModelEndpointStatus string

// Enum values for ModelEndpointStatus
const (
	ModelEndpointStatusAssociated  ModelEndpointStatus = "ASSOCIATED"
	ModelEndpointStatusDissociated ModelEndpointStatus = "DISSOCIATED"
)

// Values returns all known values for ModelEndpointStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ModelEndpointStatus) Values() []ModelEndpointStatus {
	return []ModelEndpointStatus{
		"ASSOCIATED",
		"DISSOCIATED",
	}
}

type ModelInputDataFormat string

// Enum values for ModelInputDataFormat
const (
	ModelInputDataFormatCsv  ModelInputDataFormat = "TEXT_CSV"
	ModelInputDataFormatJson ModelInputDataFormat = "APPLICATION_JSON"
)

// Values returns all known values for ModelInputDataFormat. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ModelInputDataFormat) Values() []ModelInputDataFormat {
	return []ModelInputDataFormat{
		"TEXT_CSV",
		"APPLICATION_JSON",
	}
}

type ModelOutputDataFormat string

// Enum values for ModelOutputDataFormat
const (
	ModelOutputDataFormatCsv       ModelOutputDataFormat = "TEXT_CSV"
	ModelOutputDataFormatJsonlines ModelOutputDataFormat = "APPLICATION_JSONLINES"
)

// Values returns all known values for ModelOutputDataFormat. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ModelOutputDataFormat) Values() []ModelOutputDataFormat {
	return []ModelOutputDataFormat{
		"TEXT_CSV",
		"APPLICATION_JSONLINES",
	}
}

type ModelSource string

// Enum values for ModelSource
const (
	ModelSourceSagemaker ModelSource = "SAGEMAKER"
)

// Values returns all known values for ModelSource. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ModelSource) Values() []ModelSource {
	return []ModelSource{
		"SAGEMAKER",
	}
}

type ModelTypeEnum string

// Enum values for ModelTypeEnum
const (
	ModelTypeEnumOnlineFraudInsights      ModelTypeEnum = "ONLINE_FRAUD_INSIGHTS"
	ModelTypeEnumTransactionFraudInsights ModelTypeEnum = "TRANSACTION_FRAUD_INSIGHTS"
	ModelTypeEnumAccountTakeoverInsights  ModelTypeEnum = "ACCOUNT_TAKEOVER_INSIGHTS"
)

// Values returns all known values for ModelTypeEnum. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ModelTypeEnum) Values() []ModelTypeEnum {
	return []ModelTypeEnum{
		"ONLINE_FRAUD_INSIGHTS",
		"TRANSACTION_FRAUD_INSIGHTS",
		"ACCOUNT_TAKEOVER_INSIGHTS",
	}
}

type ModelVersionStatus string

// Enum values for ModelVersionStatus
const (
	ModelVersionStatusActive            ModelVersionStatus = "ACTIVE"
	ModelVersionStatusInactive          ModelVersionStatus = "INACTIVE"
	ModelVersionStatusTrainingCancelled ModelVersionStatus = "TRAINING_CANCELLED"
)

// Values returns all known values for ModelVersionStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ModelVersionStatus) Values() []ModelVersionStatus {
	return []ModelVersionStatus{
		"ACTIVE",
		"INACTIVE",
		"TRAINING_CANCELLED",
	}
}

type RuleExecutionMode string

// Enum values for RuleExecutionMode
const (
	RuleExecutionModeAllMatched   RuleExecutionMode = "ALL_MATCHED"
	RuleExecutionModeFirstMatched RuleExecutionMode = "FIRST_MATCHED"
)

// Values returns all known values for RuleExecutionMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RuleExecutionMode) Values() []RuleExecutionMode {
	return []RuleExecutionMode{
		"ALL_MATCHED",
		"FIRST_MATCHED",
	}
}

type TrainingDataSourceEnum string

// Enum values for TrainingDataSourceEnum
const (
	TrainingDataSourceEnumExternalEvents TrainingDataSourceEnum = "EXTERNAL_EVENTS"
	TrainingDataSourceEnumIngestedEvents TrainingDataSourceEnum = "INGESTED_EVENTS"
)

// Values returns all known values for TrainingDataSourceEnum. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TrainingDataSourceEnum) Values() []TrainingDataSourceEnum {
	return []TrainingDataSourceEnum{
		"EXTERNAL_EVENTS",
		"INGESTED_EVENTS",
	}
}

type UnlabeledEventsTreatment string

// Enum values for UnlabeledEventsTreatment
const (
	UnlabeledEventsTreatmentIgnore UnlabeledEventsTreatment = "IGNORE"
	UnlabeledEventsTreatmentFraud  UnlabeledEventsTreatment = "FRAUD"
	UnlabeledEventsTreatmentLegit  UnlabeledEventsTreatment = "LEGIT"
	UnlabeledEventsTreatmentAuto   UnlabeledEventsTreatment = "AUTO"
)

// Values returns all known values for UnlabeledEventsTreatment. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (UnlabeledEventsTreatment) Values() []UnlabeledEventsTreatment {
	return []UnlabeledEventsTreatment{
		"IGNORE",
		"FRAUD",
		"LEGIT",
		"AUTO",
	}
}
