// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type ApplyTimeOf string

// Enum values for ApplyTimeOf
const (
	ApplyTimeOfUtc    ApplyTimeOf = "UTC"
	ApplyTimeOfDevice ApplyTimeOf = "DEVICE"
)

// Values returns all known values for ApplyTimeOf. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ApplyTimeOf) Values() []ApplyTimeOf {
	return []ApplyTimeOf{
		"UTC",
		"DEVICE",
	}
}

type DayOfWeek string

// Enum values for DayOfWeek
const (
	DayOfWeekMonday    DayOfWeek = "MONDAY"
	DayOfWeekTuesday   DayOfWeek = "TUESDAY"
	DayOfWeekWednesday DayOfWeek = "WEDNESDAY"
	DayOfWeekThursday  DayOfWeek = "THURSDAY"
	DayOfWeekFriday    DayOfWeek = "FRIDAY"
	DayOfWeekSaturday  DayOfWeek = "SATURDAY"
	DayOfWeekSunday    DayOfWeek = "SUNDAY"
)

// Values returns all known values for DayOfWeek. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DayOfWeek) Values() []DayOfWeek {
	return []DayOfWeek{
		"MONDAY",
		"TUESDAY",
		"WEDNESDAY",
		"THURSDAY",
		"FRIDAY",
		"SATURDAY",
		"SUNDAY",
	}
}

type DesktopType string

// Enum values for DesktopType
const (
	DesktopTypeWorkspaces    DesktopType = "workspaces"
	DesktopTypeAppstream     DesktopType = "appstream"
	DesktopTypeWorkspacesWeb DesktopType = "workspaces-web"
)

// Values returns all known values for DesktopType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DesktopType) Values() []DesktopType {
	return []DesktopType{
		"workspaces",
		"appstream",
		"workspaces-web",
	}
}

type DeviceSoftwareSetComplianceStatus string

// Enum values for DeviceSoftwareSetComplianceStatus
const (
	DeviceSoftwareSetComplianceStatusNone         DeviceSoftwareSetComplianceStatus = "NONE"
	DeviceSoftwareSetComplianceStatusCompliant    DeviceSoftwareSetComplianceStatus = "COMPLIANT"
	DeviceSoftwareSetComplianceStatusNotCompliant DeviceSoftwareSetComplianceStatus = "NOT_COMPLIANT"
)

// Values returns all known values for DeviceSoftwareSetComplianceStatus. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DeviceSoftwareSetComplianceStatus) Values() []DeviceSoftwareSetComplianceStatus {
	return []DeviceSoftwareSetComplianceStatus{
		"NONE",
		"COMPLIANT",
		"NOT_COMPLIANT",
	}
}

type DeviceStatus string

// Enum values for DeviceStatus
const (
	DeviceStatusRegistered    DeviceStatus = "REGISTERED"
	DeviceStatusDeregistering DeviceStatus = "DEREGISTERING"
	DeviceStatusDeregistered  DeviceStatus = "DEREGISTERED"
	DeviceStatusArchived      DeviceStatus = "ARCHIVED"
)

// Values returns all known values for DeviceStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DeviceStatus) Values() []DeviceStatus {
	return []DeviceStatus{
		"REGISTERED",
		"DEREGISTERING",
		"DEREGISTERED",
		"ARCHIVED",
	}
}

type EnvironmentSoftwareSetComplianceStatus string

// Enum values for EnvironmentSoftwareSetComplianceStatus
const (
	EnvironmentSoftwareSetComplianceStatusNoRegisteredDevices EnvironmentSoftwareSetComplianceStatus = "NO_REGISTERED_DEVICES"
	EnvironmentSoftwareSetComplianceStatusCompliant           EnvironmentSoftwareSetComplianceStatus = "COMPLIANT"
	EnvironmentSoftwareSetComplianceStatusNotCompliant        EnvironmentSoftwareSetComplianceStatus = "NOT_COMPLIANT"
)

// Values returns all known values for EnvironmentSoftwareSetComplianceStatus.
// Note that this can be expanded in the future, and so it is only as up to date as
// the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EnvironmentSoftwareSetComplianceStatus) Values() []EnvironmentSoftwareSetComplianceStatus {
	return []EnvironmentSoftwareSetComplianceStatus{
		"NO_REGISTERED_DEVICES",
		"COMPLIANT",
		"NOT_COMPLIANT",
	}
}

type MaintenanceWindowType string

// Enum values for MaintenanceWindowType
const (
	MaintenanceWindowTypeSystem MaintenanceWindowType = "SYSTEM"
	MaintenanceWindowTypeCustom MaintenanceWindowType = "CUSTOM"
)

// Values returns all known values for MaintenanceWindowType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MaintenanceWindowType) Values() []MaintenanceWindowType {
	return []MaintenanceWindowType{
		"SYSTEM",
		"CUSTOM",
	}
}

type SoftwareSetUpdateMode string

// Enum values for SoftwareSetUpdateMode
const (
	SoftwareSetUpdateModeUseLatest  SoftwareSetUpdateMode = "USE_LATEST"
	SoftwareSetUpdateModeUseDesired SoftwareSetUpdateMode = "USE_DESIRED"
)

// Values returns all known values for SoftwareSetUpdateMode. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SoftwareSetUpdateMode) Values() []SoftwareSetUpdateMode {
	return []SoftwareSetUpdateMode{
		"USE_LATEST",
		"USE_DESIRED",
	}
}

type SoftwareSetUpdateSchedule string

// Enum values for SoftwareSetUpdateSchedule
const (
	SoftwareSetUpdateScheduleUseMaintenanceWindow SoftwareSetUpdateSchedule = "USE_MAINTENANCE_WINDOW"
	SoftwareSetUpdateScheduleApplyImmediately     SoftwareSetUpdateSchedule = "APPLY_IMMEDIATELY"
)

// Values returns all known values for SoftwareSetUpdateSchedule. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SoftwareSetUpdateSchedule) Values() []SoftwareSetUpdateSchedule {
	return []SoftwareSetUpdateSchedule{
		"USE_MAINTENANCE_WINDOW",
		"APPLY_IMMEDIATELY",
	}
}

type SoftwareSetUpdateStatus string

// Enum values for SoftwareSetUpdateStatus
const (
	SoftwareSetUpdateStatusAvailable  SoftwareSetUpdateStatus = "AVAILABLE"
	SoftwareSetUpdateStatusInProgress SoftwareSetUpdateStatus = "IN_PROGRESS"
	SoftwareSetUpdateStatusUpToDate   SoftwareSetUpdateStatus = "UP_TO_DATE"
)

// Values returns all known values for SoftwareSetUpdateStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SoftwareSetUpdateStatus) Values() []SoftwareSetUpdateStatus {
	return []SoftwareSetUpdateStatus{
		"AVAILABLE",
		"IN_PROGRESS",
		"UP_TO_DATE",
	}
}

type SoftwareSetValidationStatus string

// Enum values for SoftwareSetValidationStatus
const (
	SoftwareSetValidationStatusValidated    SoftwareSetValidationStatus = "VALIDATED"
	SoftwareSetValidationStatusNotValidated SoftwareSetValidationStatus = "NOT_VALIDATED"
)

// Values returns all known values for SoftwareSetValidationStatus. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SoftwareSetValidationStatus) Values() []SoftwareSetValidationStatus {
	return []SoftwareSetValidationStatus{
		"VALIDATED",
		"NOT_VALIDATED",
	}
}

type TargetDeviceStatus string

// Enum values for TargetDeviceStatus
const (
	TargetDeviceStatusDeregistered TargetDeviceStatus = "DEREGISTERED"
	TargetDeviceStatusArchived     TargetDeviceStatus = "ARCHIVED"
)

// Values returns all known values for TargetDeviceStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TargetDeviceStatus) Values() []TargetDeviceStatus {
	return []TargetDeviceStatus{
		"DEREGISTERED",
		"ARCHIVED",
	}
}

type ValidationExceptionReason string

// Enum values for ValidationExceptionReason
const (
	ValidationExceptionReasonUnknownOperation      ValidationExceptionReason = "unknownOperation"
	ValidationExceptionReasonCannotParse           ValidationExceptionReason = "cannotParse"
	ValidationExceptionReasonFieldValidationFailed ValidationExceptionReason = "fieldValidationFailed"
	ValidationExceptionReasonOther                 ValidationExceptionReason = "other"
)

// Values returns all known values for ValidationExceptionReason. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ValidationExceptionReason) Values() []ValidationExceptionReason {
	return []ValidationExceptionReason{
		"unknownOperation",
		"cannotParse",
		"fieldValidationFailed",
		"other",
	}
}
