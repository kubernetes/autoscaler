// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type CustomHealthStatus string

// Enum values for CustomHealthStatus
const (
	CustomHealthStatusHealthy   CustomHealthStatus = "HEALTHY"
	CustomHealthStatusUnhealthy CustomHealthStatus = "UNHEALTHY"
)

// Values returns all known values for CustomHealthStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CustomHealthStatus) Values() []CustomHealthStatus {
	return []CustomHealthStatus{
		"HEALTHY",
		"UNHEALTHY",
	}
}

type FilterCondition string

// Enum values for FilterCondition
const (
	FilterConditionEq         FilterCondition = "EQ"
	FilterConditionIn         FilterCondition = "IN"
	FilterConditionBetween    FilterCondition = "BETWEEN"
	FilterConditionBeginsWith FilterCondition = "BEGINS_WITH"
)

// Values returns all known values for FilterCondition. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FilterCondition) Values() []FilterCondition {
	return []FilterCondition{
		"EQ",
		"IN",
		"BETWEEN",
		"BEGINS_WITH",
	}
}

type HealthCheckType string

// Enum values for HealthCheckType
const (
	HealthCheckTypeHttp  HealthCheckType = "HTTP"
	HealthCheckTypeHttps HealthCheckType = "HTTPS"
	HealthCheckTypeTcp   HealthCheckType = "TCP"
)

// Values returns all known values for HealthCheckType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HealthCheckType) Values() []HealthCheckType {
	return []HealthCheckType{
		"HTTP",
		"HTTPS",
		"TCP",
	}
}

type HealthStatus string

// Enum values for HealthStatus
const (
	HealthStatusHealthy   HealthStatus = "HEALTHY"
	HealthStatusUnhealthy HealthStatus = "UNHEALTHY"
	HealthStatusUnknown   HealthStatus = "UNKNOWN"
)

// Values returns all known values for HealthStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HealthStatus) Values() []HealthStatus {
	return []HealthStatus{
		"HEALTHY",
		"UNHEALTHY",
		"UNKNOWN",
	}
}

type HealthStatusFilter string

// Enum values for HealthStatusFilter
const (
	HealthStatusFilterHealthy          HealthStatusFilter = "HEALTHY"
	HealthStatusFilterUnhealthy        HealthStatusFilter = "UNHEALTHY"
	HealthStatusFilterAll              HealthStatusFilter = "ALL"
	HealthStatusFilterHealthyOrElseAll HealthStatusFilter = "HEALTHY_OR_ELSE_ALL"
)

// Values returns all known values for HealthStatusFilter. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HealthStatusFilter) Values() []HealthStatusFilter {
	return []HealthStatusFilter{
		"HEALTHY",
		"UNHEALTHY",
		"ALL",
		"HEALTHY_OR_ELSE_ALL",
	}
}

type NamespaceFilterName string

// Enum values for NamespaceFilterName
const (
	NamespaceFilterNameType     NamespaceFilterName = "TYPE"
	NamespaceFilterNameName     NamespaceFilterName = "NAME"
	NamespaceFilterNameHttpName NamespaceFilterName = "HTTP_NAME"
)

// Values returns all known values for NamespaceFilterName. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NamespaceFilterName) Values() []NamespaceFilterName {
	return []NamespaceFilterName{
		"TYPE",
		"NAME",
		"HTTP_NAME",
	}
}

type NamespaceType string

// Enum values for NamespaceType
const (
	NamespaceTypeDnsPublic  NamespaceType = "DNS_PUBLIC"
	NamespaceTypeDnsPrivate NamespaceType = "DNS_PRIVATE"
	NamespaceTypeHttp       NamespaceType = "HTTP"
)

// Values returns all known values for NamespaceType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NamespaceType) Values() []NamespaceType {
	return []NamespaceType{
		"DNS_PUBLIC",
		"DNS_PRIVATE",
		"HTTP",
	}
}

type OperationFilterName string

// Enum values for OperationFilterName
const (
	OperationFilterNameNamespaceId OperationFilterName = "NAMESPACE_ID"
	OperationFilterNameServiceId   OperationFilterName = "SERVICE_ID"
	OperationFilterNameStatus      OperationFilterName = "STATUS"
	OperationFilterNameType        OperationFilterName = "TYPE"
	OperationFilterNameUpdateDate  OperationFilterName = "UPDATE_DATE"
)

// Values returns all known values for OperationFilterName. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (OperationFilterName) Values() []OperationFilterName {
	return []OperationFilterName{
		"NAMESPACE_ID",
		"SERVICE_ID",
		"STATUS",
		"TYPE",
		"UPDATE_DATE",
	}
}

type OperationStatus string

// Enum values for OperationStatus
const (
	OperationStatusSubmitted OperationStatus = "SUBMITTED"
	OperationStatusPending   OperationStatus = "PENDING"
	OperationStatusSuccess   OperationStatus = "SUCCESS"
	OperationStatusFail      OperationStatus = "FAIL"
)

// Values returns all known values for OperationStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (OperationStatus) Values() []OperationStatus {
	return []OperationStatus{
		"SUBMITTED",
		"PENDING",
		"SUCCESS",
		"FAIL",
	}
}

type OperationTargetType string

// Enum values for OperationTargetType
const (
	OperationTargetTypeNamespace OperationTargetType = "NAMESPACE"
	OperationTargetTypeService   OperationTargetType = "SERVICE"
	OperationTargetTypeInstance  OperationTargetType = "INSTANCE"
)

// Values returns all known values for OperationTargetType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (OperationTargetType) Values() []OperationTargetType {
	return []OperationTargetType{
		"NAMESPACE",
		"SERVICE",
		"INSTANCE",
	}
}

type OperationType string

// Enum values for OperationType
const (
	OperationTypeCreateNamespace    OperationType = "CREATE_NAMESPACE"
	OperationTypeDeleteNamespace    OperationType = "DELETE_NAMESPACE"
	OperationTypeUpdateNamespace    OperationType = "UPDATE_NAMESPACE"
	OperationTypeUpdateService      OperationType = "UPDATE_SERVICE"
	OperationTypeRegisterInstance   OperationType = "REGISTER_INSTANCE"
	OperationTypeDeregisterInstance OperationType = "DEREGISTER_INSTANCE"
)

// Values returns all known values for OperationType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (OperationType) Values() []OperationType {
	return []OperationType{
		"CREATE_NAMESPACE",
		"DELETE_NAMESPACE",
		"UPDATE_NAMESPACE",
		"UPDATE_SERVICE",
		"REGISTER_INSTANCE",
		"DEREGISTER_INSTANCE",
	}
}

type RecordType string

// Enum values for RecordType
const (
	RecordTypeSrv   RecordType = "SRV"
	RecordTypeA     RecordType = "A"
	RecordTypeAaaa  RecordType = "AAAA"
	RecordTypeCname RecordType = "CNAME"
)

// Values returns all known values for RecordType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RecordType) Values() []RecordType {
	return []RecordType{
		"SRV",
		"A",
		"AAAA",
		"CNAME",
	}
}

type RoutingPolicy string

// Enum values for RoutingPolicy
const (
	RoutingPolicyMultivalue RoutingPolicy = "MULTIVALUE"
	RoutingPolicyWeighted   RoutingPolicy = "WEIGHTED"
)

// Values returns all known values for RoutingPolicy. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RoutingPolicy) Values() []RoutingPolicy {
	return []RoutingPolicy{
		"MULTIVALUE",
		"WEIGHTED",
	}
}

type ServiceFilterName string

// Enum values for ServiceFilterName
const (
	ServiceFilterNameNamespaceId ServiceFilterName = "NAMESPACE_ID"
)

// Values returns all known values for ServiceFilterName. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ServiceFilterName) Values() []ServiceFilterName {
	return []ServiceFilterName{
		"NAMESPACE_ID",
	}
}

type ServiceType string

// Enum values for ServiceType
const (
	ServiceTypeHttp    ServiceType = "HTTP"
	ServiceTypeDnsHttp ServiceType = "DNS_HTTP"
	ServiceTypeDns     ServiceType = "DNS"
)

// Values returns all known values for ServiceType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ServiceType) Values() []ServiceType {
	return []ServiceType{
		"HTTP",
		"DNS_HTTP",
		"DNS",
	}
}

type ServiceTypeOption string

// Enum values for ServiceTypeOption
const (
	ServiceTypeOptionHttp ServiceTypeOption = "HTTP"
)

// Values returns all known values for ServiceTypeOption. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ServiceTypeOption) Values() []ServiceTypeOption {
	return []ServiceTypeOption{
		"HTTP",
	}
}
