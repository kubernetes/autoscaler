// Code generated by smithy-go-codegen DO NOT EDIT.

package pinpointsmsvoicev2

import (
	"context"
	"fmt"
	awsmiddleware "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/aws/middleware"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/service/pinpointsmsvoicev2/types"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/middleware"
	smithyhttp "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/transport/http"
)

// Describes the specified SenderIds or all SenderIds associated with your Amazon
// Web Services account.
//
// If you specify SenderIds, the output includes information for only the
// specified SenderIds. If you specify filters, the output includes information for
// only those SenderIds that meet the filter criteria. If you don't specify
// SenderIds or filters, the output includes information for all SenderIds.
//
// f you specify a sender ID that isn't valid, an error is returned.
func (c *Client) DescribeSenderIds(ctx context.Context, params *DescribeSenderIdsInput, optFns ...func(*Options)) (*DescribeSenderIdsOutput, error) {
	if params == nil {
		params = &DescribeSenderIdsInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "DescribeSenderIds", params, optFns, c.addOperationDescribeSenderIdsMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*DescribeSenderIdsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeSenderIdsInput struct {

	// An array of SenderIdFilter objects to filter the results.
	Filters []types.SenderIdFilter

	// The maximum number of results to return per each request.
	MaxResults *int32

	// The token to be used for the next set of paginated results. You don't need to
	// supply a value for this field in the initial request.
	NextToken *string

	// Use SELF to filter the list of Sender Ids to ones your account owns or use
	// SHARED to filter on Sender Ids shared with your account. The Owner and SenderIds
	// parameters can't be used at the same time.
	Owner types.Owner

	// An array of SenderIdAndCountry objects to search for.
	//
	// If you are using a shared AWS End User Messaging SMS and Voice resource then
	// you must use the full Amazon Resource Name(ARN).
	SenderIds []types.SenderIdAndCountry

	noSmithyDocumentSerde
}

type DescribeSenderIdsOutput struct {

	// The token to be used for the next set of paginated results. If this field is
	// empty then there are no more results.
	NextToken *string

	// An array of SernderIdInformation objects that contain the details for the
	// requested SenderIds.
	SenderIds []types.SenderIdInformation

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationDescribeSenderIdsMiddlewares(stack *middleware.Stack, options Options) (err error) {
	if err := stack.Serialize.Add(&setOperationInputMiddleware{}, middleware.After); err != nil {
		return err
	}
	err = stack.Serialize.Add(&awsAwsjson10_serializeOpDescribeSenderIds{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson10_deserializeOpDescribeSenderIds{}, middleware.After)
	if err != nil {
		return err
	}
	if err := addProtocolFinalizerMiddlewares(stack, options, "DescribeSenderIds"); err != nil {
		return fmt.Errorf("add protocol finalizers: %v", err)
	}

	if err = addlegacyEndpointContextSetter(stack, options); err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = addClientRequestID(stack); err != nil {
		return err
	}
	if err = addComputeContentLength(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = addComputePayloadSHA256(stack); err != nil {
		return err
	}
	if err = addRetry(stack, options); err != nil {
		return err
	}
	if err = addRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = addRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addSpanRetryLoop(stack, options); err != nil {
		return err
	}
	if err = addClientUserAgent(stack, options); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addSetLegacyContextSigningOptionsMiddleware(stack); err != nil {
		return err
	}
	if err = addTimeOffsetBuild(stack, c); err != nil {
		return err
	}
	if err = addUserAgentRetryMode(stack, options); err != nil {
		return err
	}
	if err = addCredentialSource(stack, options); err != nil {
		return err
	}
	if err = addOpDescribeSenderIdsValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeSenderIds(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRecursionDetection(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	if err = addDisableHTTPSMiddleware(stack, options); err != nil {
		return err
	}
	if err = addSpanInitializeStart(stack); err != nil {
		return err
	}
	if err = addSpanInitializeEnd(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestStart(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestEnd(stack); err != nil {
		return err
	}
	return nil
}

// DescribeSenderIdsPaginatorOptions is the paginator options for DescribeSenderIds
type DescribeSenderIdsPaginatorOptions struct {
	// The maximum number of results to return per each request.
	Limit int32

	// Set to true if pagination should stop if the service returns a pagination token
	// that matches the most recent token provided to the service.
	StopOnDuplicateToken bool
}

// DescribeSenderIdsPaginator is a paginator for DescribeSenderIds
type DescribeSenderIdsPaginator struct {
	options   DescribeSenderIdsPaginatorOptions
	client    DescribeSenderIdsAPIClient
	params    *DescribeSenderIdsInput
	nextToken *string
	firstPage bool
}

// NewDescribeSenderIdsPaginator returns a new DescribeSenderIdsPaginator
func NewDescribeSenderIdsPaginator(client DescribeSenderIdsAPIClient, params *DescribeSenderIdsInput, optFns ...func(*DescribeSenderIdsPaginatorOptions)) *DescribeSenderIdsPaginator {
	if params == nil {
		params = &DescribeSenderIdsInput{}
	}

	options := DescribeSenderIdsPaginatorOptions{}
	if params.MaxResults != nil {
		options.Limit = *params.MaxResults
	}

	for _, fn := range optFns {
		fn(&options)
	}

	return &DescribeSenderIdsPaginator{
		options:   options,
		client:    client,
		params:    params,
		firstPage: true,
		nextToken: params.NextToken,
	}
}

// HasMorePages returns a boolean indicating whether more pages are available
func (p *DescribeSenderIdsPaginator) HasMorePages() bool {
	return p.firstPage || (p.nextToken != nil && len(*p.nextToken) != 0)
}

// NextPage retrieves the next DescribeSenderIds page.
func (p *DescribeSenderIdsPaginator) NextPage(ctx context.Context, optFns ...func(*Options)) (*DescribeSenderIdsOutput, error) {
	if !p.HasMorePages() {
		return nil, fmt.Errorf("no more pages available")
	}

	params := *p.params
	params.NextToken = p.nextToken

	var limit *int32
	if p.options.Limit > 0 {
		limit = &p.options.Limit
	}
	params.MaxResults = limit

	optFns = append([]func(*Options){
		addIsPaginatorUserAgent,
	}, optFns...)
	result, err := p.client.DescribeSenderIds(ctx, &params, optFns...)
	if err != nil {
		return nil, err
	}
	p.firstPage = false

	prevToken := p.nextToken
	p.nextToken = result.NextToken

	if p.options.StopOnDuplicateToken &&
		prevToken != nil &&
		p.nextToken != nil &&
		*prevToken == *p.nextToken {
		p.nextToken = nil
	}

	return result, nil
}

// DescribeSenderIdsAPIClient is a client that implements the DescribeSenderIds
// operation.
type DescribeSenderIdsAPIClient interface {
	DescribeSenderIds(context.Context, *DescribeSenderIdsInput, ...func(*Options)) (*DescribeSenderIdsOutput, error)
}

var _ DescribeSenderIdsAPIClient = (*Client)(nil)

func newServiceMetadataMiddleware_opDescribeSenderIds(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		OperationName: "DescribeSenderIds",
	}
}
