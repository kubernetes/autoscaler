// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type DestinationCategory string

// Enum values for DestinationCategory
const (
	DestinationCategoryIntraAz        DestinationCategory = "INTRA_AZ"
	DestinationCategoryInterAz        DestinationCategory = "INTER_AZ"
	DestinationCategoryInterVpc       DestinationCategory = "INTER_VPC"
	DestinationCategoryUnclassified   DestinationCategory = "UNCLASSIFIED"
	DestinationCategoryAmazonS3       DestinationCategory = "AMAZON_S3"
	DestinationCategoryAmazonDynamodb DestinationCategory = "AMAZON_DYNAMODB"
)

// Values returns all known values for DestinationCategory. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DestinationCategory) Values() []DestinationCategory {
	return []DestinationCategory{
		"INTRA_AZ",
		"INTER_AZ",
		"INTER_VPC",
		"UNCLASSIFIED",
		"AMAZON_S3",
		"AMAZON_DYNAMODB",
	}
}

type MetricUnit string

// Enum values for MetricUnit
const (
	MetricUnitSeconds            MetricUnit = "Seconds"
	MetricUnitMicroseconds       MetricUnit = "Microseconds"
	MetricUnitMilliseconds       MetricUnit = "Milliseconds"
	MetricUnitBytes              MetricUnit = "Bytes"
	MetricUnitKilobytes          MetricUnit = "Kilobytes"
	MetricUnitMegabytes          MetricUnit = "Megabytes"
	MetricUnitGigabytes          MetricUnit = "Gigabytes"
	MetricUnitTerabytes          MetricUnit = "Terabytes"
	MetricUnitBits               MetricUnit = "Bits"
	MetricUnitKilobits           MetricUnit = "Kilobits"
	MetricUnitMegabits           MetricUnit = "Megabits"
	MetricUnitGigabits           MetricUnit = "Gigabits"
	MetricUnitTerabits           MetricUnit = "Terabits"
	MetricUnitPercent            MetricUnit = "Percent"
	MetricUnitCount              MetricUnit = "Count"
	MetricUnitBytesPerSecond     MetricUnit = "Bytes/Second"
	MetricUnitKilobytesPerSecond MetricUnit = "Kilobytes/Second"
	MetricUnitMegabytesPerSecond MetricUnit = "Megabytes/Second"
	MetricUnitGigabytesPerSecond MetricUnit = "Gigabytes/Second"
	MetricUnitTerabytesPerSecond MetricUnit = "Terabytes/Second"
	MetricUnitBitsPerSecond      MetricUnit = "Bits/Second"
	MetricUnitKilobitsPerSecond  MetricUnit = "Kilobits/Second"
	MetricUnitMegabitsPerSecond  MetricUnit = "Megabits/Second"
	MetricUnitGigabitsPerSecond  MetricUnit = "Gigabits/Second"
	MetricUnitTerabitsPerSecond  MetricUnit = "Terabits/Second"
	MetricUnitCountPerSecond     MetricUnit = "Count/Second"
	MetricUnitNone               MetricUnit = "None"
)

// Values returns all known values for MetricUnit. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MetricUnit) Values() []MetricUnit {
	return []MetricUnit{
		"Seconds",
		"Microseconds",
		"Milliseconds",
		"Bytes",
		"Kilobytes",
		"Megabytes",
		"Gigabytes",
		"Terabytes",
		"Bits",
		"Kilobits",
		"Megabits",
		"Gigabits",
		"Terabits",
		"Percent",
		"Count",
		"Bytes/Second",
		"Kilobytes/Second",
		"Megabytes/Second",
		"Gigabytes/Second",
		"Terabytes/Second",
		"Bits/Second",
		"Kilobits/Second",
		"Megabits/Second",
		"Gigabits/Second",
		"Terabits/Second",
		"Count/Second",
		"None",
	}
}

type MonitorLocalResourceType string

// Enum values for MonitorLocalResourceType
const (
	MonitorLocalResourceTypeAwsVpc    MonitorLocalResourceType = "AWS::EC2::VPC"
	MonitorLocalResourceTypeAwsAz     MonitorLocalResourceType = "AWS::AvailabilityZone"
	MonitorLocalResourceTypeAwsSubnet MonitorLocalResourceType = "AWS::EC2::Subnet"
)

// Values returns all known values for MonitorLocalResourceType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MonitorLocalResourceType) Values() []MonitorLocalResourceType {
	return []MonitorLocalResourceType{
		"AWS::EC2::VPC",
		"AWS::AvailabilityZone",
		"AWS::EC2::Subnet",
	}
}

type MonitorMetric string

// Enum values for MonitorMetric
const (
	MonitorMetricRoundTripTime   MonitorMetric = "ROUND_TRIP_TIME"
	MonitorMetricTimeouts        MonitorMetric = "TIMEOUTS"
	MonitorMetricRetransmissions MonitorMetric = "RETRANSMISSIONS"
	MonitorMetricDataTransferred MonitorMetric = "DATA_TRANSFERRED"
)

// Values returns all known values for MonitorMetric. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MonitorMetric) Values() []MonitorMetric {
	return []MonitorMetric{
		"ROUND_TRIP_TIME",
		"TIMEOUTS",
		"RETRANSMISSIONS",
		"DATA_TRANSFERRED",
	}
}

type MonitorRemoteResourceType string

// Enum values for MonitorRemoteResourceType
const (
	MonitorRemoteResourceTypeAwsVpc     MonitorRemoteResourceType = "AWS::EC2::VPC"
	MonitorRemoteResourceTypeAwsAz      MonitorRemoteResourceType = "AWS::AvailabilityZone"
	MonitorRemoteResourceTypeAwsSubnet  MonitorRemoteResourceType = "AWS::EC2::Subnet"
	MonitorRemoteResourceTypeAwsService MonitorRemoteResourceType = "AWS::AWSService"
)

// Values returns all known values for MonitorRemoteResourceType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MonitorRemoteResourceType) Values() []MonitorRemoteResourceType {
	return []MonitorRemoteResourceType{
		"AWS::EC2::VPC",
		"AWS::AvailabilityZone",
		"AWS::EC2::Subnet",
		"AWS::AWSService",
	}
}

type MonitorStatus string

// Enum values for MonitorStatus
const (
	MonitorStatusPending  MonitorStatus = "PENDING"
	MonitorStatusActive   MonitorStatus = "ACTIVE"
	MonitorStatusInactive MonitorStatus = "INACTIVE"
	MonitorStatusError    MonitorStatus = "ERROR"
	MonitorStatusDeleting MonitorStatus = "DELETING"
)

// Values returns all known values for MonitorStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MonitorStatus) Values() []MonitorStatus {
	return []MonitorStatus{
		"PENDING",
		"ACTIVE",
		"INACTIVE",
		"ERROR",
		"DELETING",
	}
}

type QueryStatus string

// Enum values for QueryStatus
const (
	QueryStatusQueued    QueryStatus = "QUEUED"
	QueryStatusRunning   QueryStatus = "RUNNING"
	QueryStatusSucceeded QueryStatus = "SUCCEEDED"
	QueryStatusFailed    QueryStatus = "FAILED"
	QueryStatusCanceled  QueryStatus = "CANCELED"
)

// Values returns all known values for QueryStatus. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (QueryStatus) Values() []QueryStatus {
	return []QueryStatus{
		"QUEUED",
		"RUNNING",
		"SUCCEEDED",
		"FAILED",
		"CANCELED",
	}
}

type ScopeStatus string

// Enum values for ScopeStatus
const (
	ScopeStatusSucceeded  ScopeStatus = "SUCCEEDED"
	ScopeStatusInProgress ScopeStatus = "IN_PROGRESS"
	ScopeStatusFailed     ScopeStatus = "FAILED"
)

// Values returns all known values for ScopeStatus. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ScopeStatus) Values() []ScopeStatus {
	return []ScopeStatus{
		"SUCCEEDED",
		"IN_PROGRESS",
		"FAILED",
	}
}

type TargetType string

// Enum values for TargetType
const (
	TargetTypeAccount TargetType = "ACCOUNT"
)

// Values returns all known values for TargetType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TargetType) Values() []TargetType {
	return []TargetType{
		"ACCOUNT",
	}
}

type WorkloadInsightsMetric string

// Enum values for WorkloadInsightsMetric
const (
	WorkloadInsightsMetricTimeouts        WorkloadInsightsMetric = "TIMEOUTS"
	WorkloadInsightsMetricRetransmissions WorkloadInsightsMetric = "RETRANSMISSIONS"
	WorkloadInsightsMetricDataTransferred WorkloadInsightsMetric = "DATA_TRANSFERRED"
)

// Values returns all known values for WorkloadInsightsMetric. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (WorkloadInsightsMetric) Values() []WorkloadInsightsMetric {
	return []WorkloadInsightsMetric{
		"TIMEOUTS",
		"RETRANSMISSIONS",
		"DATA_TRANSFERRED",
	}
}
