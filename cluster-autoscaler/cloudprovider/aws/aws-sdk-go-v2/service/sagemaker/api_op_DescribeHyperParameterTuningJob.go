// Code generated by smithy-go-codegen DO NOT EDIT.

package sagemaker

import (
	"context"
	"fmt"
	awsmiddleware "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/aws/middleware"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/service/sagemaker/types"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/middleware"
	smithyhttp "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/transport/http"
	"time"
)

// Returns a description of a hyperparameter tuning job, depending on the fields
// selected. These fields can include the name, Amazon Resource Name (ARN), job
// status of your tuning job and more.
func (c *Client) DescribeHyperParameterTuningJob(ctx context.Context, params *DescribeHyperParameterTuningJobInput, optFns ...func(*Options)) (*DescribeHyperParameterTuningJobOutput, error) {
	if params == nil {
		params = &DescribeHyperParameterTuningJobInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "DescribeHyperParameterTuningJob", params, optFns, c.addOperationDescribeHyperParameterTuningJobMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*DescribeHyperParameterTuningJobOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeHyperParameterTuningJobInput struct {

	// The name of the tuning job.
	//
	// This member is required.
	HyperParameterTuningJobName *string

	noSmithyDocumentSerde
}

type DescribeHyperParameterTuningJobOutput struct {

	// The date and time that the tuning job started.
	//
	// This member is required.
	CreationTime *time.Time

	// The Amazon Resource Name (ARN) of the tuning job.
	//
	// This member is required.
	HyperParameterTuningJobArn *string

	// The [HyperParameterTuningJobConfig] object that specifies the configuration of the tuning job.
	//
	// [HyperParameterTuningJobConfig]: https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html
	//
	// This member is required.
	HyperParameterTuningJobConfig *types.HyperParameterTuningJobConfig

	// The name of the hyperparameter tuning job.
	//
	// This member is required.
	HyperParameterTuningJobName *string

	// The status of the tuning job.
	//
	// This member is required.
	HyperParameterTuningJobStatus types.HyperParameterTuningJobStatus

	// The [ObjectiveStatusCounters] object that specifies the number of training jobs, categorized by the
	// status of their final objective metric, that this tuning job launched.
	//
	// [ObjectiveStatusCounters]: https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ObjectiveStatusCounters.html
	//
	// This member is required.
	ObjectiveStatusCounters *types.ObjectiveStatusCounters

	// The [TrainingJobStatusCounters] object that specifies the number of training jobs, categorized by status,
	// that this tuning job launched.
	//
	// [TrainingJobStatusCounters]: https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TrainingJobStatusCounters.html
	//
	// This member is required.
	TrainingJobStatusCounters *types.TrainingJobStatusCounters

	// A flag to indicate if autotune is enabled for the hyperparameter tuning job.
	Autotune *types.Autotune

	// A [TrainingJobSummary] object that describes the training job that completed with the best current [HyperParameterTuningJobObjective].
	//
	// [TrainingJobSummary]: https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TrainingJobSummary.html
	// [HyperParameterTuningJobObjective]: https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobObjective.html
	BestTrainingJob *types.HyperParameterTrainingJobSummary

	// The total resources consumed by your hyperparameter tuning job.
	ConsumedResources *types.HyperParameterTuningJobConsumedResources

	// If the tuning job failed, the reason it failed.
	FailureReason *string

	// The date and time that the tuning job ended.
	HyperParameterTuningEndTime *time.Time

	// The date and time that the status of the tuning job was modified.
	LastModifiedTime *time.Time

	// If the hyperparameter tuning job is an warm start tuning job with a
	// WarmStartType of IDENTICAL_DATA_AND_ALGORITHM , this is the [TrainingJobSummary] for the training
	// job with the best objective metric value of all training jobs launched by this
	// tuning job and all parent jobs specified for the warm start tuning job.
	//
	// [TrainingJobSummary]: https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TrainingJobSummary.html
	OverallBestTrainingJob *types.HyperParameterTrainingJobSummary

	// The [HyperParameterTrainingJobDefinition] object that specifies the definition of the training jobs that this tuning
	// job launches.
	//
	// [HyperParameterTrainingJobDefinition]: https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html
	TrainingJobDefinition *types.HyperParameterTrainingJobDefinition

	// A list of the [HyperParameterTrainingJobDefinition] objects launched for this tuning job.
	//
	// [HyperParameterTrainingJobDefinition]: https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html
	TrainingJobDefinitions []types.HyperParameterTrainingJobDefinition

	// Tuning job completion information returned as the response from a
	// hyperparameter tuning job. This information tells if your tuning job has or has
	// not converged. It also includes the number of training jobs that have not
	// improved model performance as evaluated against the objective function.
	TuningJobCompletionDetails *types.HyperParameterTuningJobCompletionDetails

	// The configuration for starting the hyperparameter parameter tuning job using
	// one or more previous tuning jobs as a starting point. The results of previous
	// tuning jobs are used to inform which combinations of hyperparameters to search
	// over in the new tuning job.
	WarmStartConfig *types.HyperParameterTuningJobWarmStartConfig

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationDescribeHyperParameterTuningJobMiddlewares(stack *middleware.Stack, options Options) (err error) {
	if err := stack.Serialize.Add(&setOperationInputMiddleware{}, middleware.After); err != nil {
		return err
	}
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpDescribeHyperParameterTuningJob{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpDescribeHyperParameterTuningJob{}, middleware.After)
	if err != nil {
		return err
	}
	if err := addProtocolFinalizerMiddlewares(stack, options, "DescribeHyperParameterTuningJob"); err != nil {
		return fmt.Errorf("add protocol finalizers: %v", err)
	}

	if err = addlegacyEndpointContextSetter(stack, options); err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = addClientRequestID(stack); err != nil {
		return err
	}
	if err = addComputeContentLength(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = addComputePayloadSHA256(stack); err != nil {
		return err
	}
	if err = addRetry(stack, options); err != nil {
		return err
	}
	if err = addRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = addRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addSpanRetryLoop(stack, options); err != nil {
		return err
	}
	if err = addClientUserAgent(stack, options); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addSetLegacyContextSigningOptionsMiddleware(stack); err != nil {
		return err
	}
	if err = addTimeOffsetBuild(stack, c); err != nil {
		return err
	}
	if err = addUserAgentRetryMode(stack, options); err != nil {
		return err
	}
	if err = addCredentialSource(stack, options); err != nil {
		return err
	}
	if err = addOpDescribeHyperParameterTuningJobValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeHyperParameterTuningJob(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRecursionDetection(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	if err = addDisableHTTPSMiddleware(stack, options); err != nil {
		return err
	}
	if err = addSpanInitializeStart(stack); err != nil {
		return err
	}
	if err = addSpanInitializeEnd(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestStart(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestEnd(stack); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opDescribeHyperParameterTuningJob(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		OperationName: "DescribeHyperParameterTuningJob",
	}
}
