// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type CompositionState string

// Enum values for CompositionState
const (
	CompositionStateStarting CompositionState = "STARTING"
	CompositionStateActive   CompositionState = "ACTIVE"
	CompositionStateStopping CompositionState = "STOPPING"
	CompositionStateFailed   CompositionState = "FAILED"
	CompositionStateStopped  CompositionState = "STOPPED"
)

// Values returns all known values for CompositionState. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CompositionState) Values() []CompositionState {
	return []CompositionState{
		"STARTING",
		"ACTIVE",
		"STOPPING",
		"FAILED",
		"STOPPED",
	}
}

type DestinationState string

// Enum values for DestinationState
const (
	DestinationStateStarting     DestinationState = "STARTING"
	DestinationStateActive       DestinationState = "ACTIVE"
	DestinationStateStopping     DestinationState = "STOPPING"
	DestinationStateReconnecting DestinationState = "RECONNECTING"
	DestinationStateFailed       DestinationState = "FAILED"
	DestinationStateStopped      DestinationState = "STOPPED"
)

// Values returns all known values for DestinationState. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DestinationState) Values() []DestinationState {
	return []DestinationState{
		"STARTING",
		"ACTIVE",
		"STOPPING",
		"RECONNECTING",
		"FAILED",
		"STOPPED",
	}
}

type EventErrorCode string

// Enum values for EventErrorCode
const (
	EventErrorCodeInsufficientCapabilities EventErrorCode = "INSUFFICIENT_CAPABILITIES"
	EventErrorCodeQuotaExceeded            EventErrorCode = "QUOTA_EXCEEDED"
	EventErrorCodePublisherNotFound        EventErrorCode = "PUBLISHER_NOT_FOUND"
	EventErrorCodeBitrateExceeded          EventErrorCode = "BITRATE_EXCEEDED"
	EventErrorCodeResolutionExceeded       EventErrorCode = "RESOLUTION_EXCEEDED"
	EventErrorCodeStreamDurationExceeded   EventErrorCode = "STREAM_DURATION_EXCEEDED"
	EventErrorCodeInvalidAudioCodec        EventErrorCode = "INVALID_AUDIO_CODEC"
	EventErrorCodeInvalidVideoCodec        EventErrorCode = "INVALID_VIDEO_CODEC"
	EventErrorCodeInvalidProtocol          EventErrorCode = "INVALID_PROTOCOL"
	EventErrorCodeInvalidStreamKey         EventErrorCode = "INVALID_STREAM_KEY"
	EventErrorCodeReuseOfStreamKey         EventErrorCode = "REUSE_OF_STREAM_KEY"
	EventErrorCodeBFramePresent            EventErrorCode = "B_FRAME_PRESENT"
	EventErrorCodeInvalidInput             EventErrorCode = "INVALID_INPUT"
	EventErrorCodeInternalServerException  EventErrorCode = "INTERNAL_SERVER_EXCEPTION"
)

// Values returns all known values for EventErrorCode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EventErrorCode) Values() []EventErrorCode {
	return []EventErrorCode{
		"INSUFFICIENT_CAPABILITIES",
		"QUOTA_EXCEEDED",
		"PUBLISHER_NOT_FOUND",
		"BITRATE_EXCEEDED",
		"RESOLUTION_EXCEEDED",
		"STREAM_DURATION_EXCEEDED",
		"INVALID_AUDIO_CODEC",
		"INVALID_VIDEO_CODEC",
		"INVALID_PROTOCOL",
		"INVALID_STREAM_KEY",
		"REUSE_OF_STREAM_KEY",
		"B_FRAME_PRESENT",
		"INVALID_INPUT",
		"INTERNAL_SERVER_EXCEPTION",
	}
}

type EventName string

// Enum values for EventName
const (
	EventNameJoined             EventName = "JOINED"
	EventNameLeft               EventName = "LEFT"
	EventNamePublishStarted     EventName = "PUBLISH_STARTED"
	EventNamePublishStopped     EventName = "PUBLISH_STOPPED"
	EventNameSubscribeStarted   EventName = "SUBSCRIBE_STARTED"
	EventNameSubscribeStopped   EventName = "SUBSCRIBE_STOPPED"
	EventNamePublishError       EventName = "PUBLISH_ERROR"
	EventNameSubscribeError     EventName = "SUBSCRIBE_ERROR"
	EventNameJoinError          EventName = "JOIN_ERROR"
	EventNameReplicationStarted EventName = "REPLICATION_STARTED"
	EventNameReplicationStopped EventName = "REPLICATION_STOPPED"
)

// Values returns all known values for EventName. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EventName) Values() []EventName {
	return []EventName{
		"JOINED",
		"LEFT",
		"PUBLISH_STARTED",
		"PUBLISH_STOPPED",
		"SUBSCRIBE_STARTED",
		"SUBSCRIBE_STOPPED",
		"PUBLISH_ERROR",
		"SUBSCRIBE_ERROR",
		"JOIN_ERROR",
		"REPLICATION_STARTED",
		"REPLICATION_STOPPED",
	}
}

type IngestConfigurationState string

// Enum values for IngestConfigurationState
const (
	IngestConfigurationStateActive   IngestConfigurationState = "ACTIVE"
	IngestConfigurationStateInactive IngestConfigurationState = "INACTIVE"
)

// Values returns all known values for IngestConfigurationState. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IngestConfigurationState) Values() []IngestConfigurationState {
	return []IngestConfigurationState{
		"ACTIVE",
		"INACTIVE",
	}
}

type IngestProtocol string

// Enum values for IngestProtocol
const (
	IngestProtocolRtmp  IngestProtocol = "RTMP"
	IngestProtocolRtmps IngestProtocol = "RTMPS"
)

// Values returns all known values for IngestProtocol. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IngestProtocol) Values() []IngestProtocol {
	return []IngestProtocol{
		"RTMP",
		"RTMPS",
	}
}

type ParticipantProtocol string

// Enum values for ParticipantProtocol
const (
	ParticipantProtocolUnknown ParticipantProtocol = "UNKNOWN"
	ParticipantProtocolWhip    ParticipantProtocol = "WHIP"
	ParticipantProtocolRtmp    ParticipantProtocol = "RTMP"
	ParticipantProtocolRtmps   ParticipantProtocol = "RTMPS"
)

// Values returns all known values for ParticipantProtocol. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ParticipantProtocol) Values() []ParticipantProtocol {
	return []ParticipantProtocol{
		"UNKNOWN",
		"WHIP",
		"RTMP",
		"RTMPS",
	}
}

type ParticipantRecordingFilterByRecordingState string

// Enum values for ParticipantRecordingFilterByRecordingState
const (
	ParticipantRecordingFilterByRecordingStateStarting ParticipantRecordingFilterByRecordingState = "STARTING"
	ParticipantRecordingFilterByRecordingStateActive   ParticipantRecordingFilterByRecordingState = "ACTIVE"
	ParticipantRecordingFilterByRecordingStateStopping ParticipantRecordingFilterByRecordingState = "STOPPING"
	ParticipantRecordingFilterByRecordingStateStopped  ParticipantRecordingFilterByRecordingState = "STOPPED"
	ParticipantRecordingFilterByRecordingStateFailed   ParticipantRecordingFilterByRecordingState = "FAILED"
)

// Values returns all known values for ParticipantRecordingFilterByRecordingState.
// Note that this can be expanded in the future, and so it is only as up to date as
// the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ParticipantRecordingFilterByRecordingState) Values() []ParticipantRecordingFilterByRecordingState {
	return []ParticipantRecordingFilterByRecordingState{
		"STARTING",
		"ACTIVE",
		"STOPPING",
		"STOPPED",
		"FAILED",
	}
}

type ParticipantRecordingMediaType string

// Enum values for ParticipantRecordingMediaType
const (
	ParticipantRecordingMediaTypeAudioVideo ParticipantRecordingMediaType = "AUDIO_VIDEO"
	ParticipantRecordingMediaTypeAudioOnly  ParticipantRecordingMediaType = "AUDIO_ONLY"
	ParticipantRecordingMediaTypeNone       ParticipantRecordingMediaType = "NONE"
)

// Values returns all known values for ParticipantRecordingMediaType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ParticipantRecordingMediaType) Values() []ParticipantRecordingMediaType {
	return []ParticipantRecordingMediaType{
		"AUDIO_VIDEO",
		"AUDIO_ONLY",
		"NONE",
	}
}

type ParticipantRecordingState string

// Enum values for ParticipantRecordingState
const (
	ParticipantRecordingStateStarting ParticipantRecordingState = "STARTING"
	ParticipantRecordingStateActive   ParticipantRecordingState = "ACTIVE"
	ParticipantRecordingStateStopping ParticipantRecordingState = "STOPPING"
	ParticipantRecordingStateStopped  ParticipantRecordingState = "STOPPED"
	ParticipantRecordingStateFailed   ParticipantRecordingState = "FAILED"
	ParticipantRecordingStateDisabled ParticipantRecordingState = "DISABLED"
)

// Values returns all known values for ParticipantRecordingState. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ParticipantRecordingState) Values() []ParticipantRecordingState {
	return []ParticipantRecordingState{
		"STARTING",
		"ACTIVE",
		"STOPPING",
		"STOPPED",
		"FAILED",
		"DISABLED",
	}
}

type ParticipantState string

// Enum values for ParticipantState
const (
	ParticipantStateConnected    ParticipantState = "CONNECTED"
	ParticipantStateDisconnected ParticipantState = "DISCONNECTED"
)

// Values returns all known values for ParticipantState. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ParticipantState) Values() []ParticipantState {
	return []ParticipantState{
		"CONNECTED",
		"DISCONNECTED",
	}
}

type ParticipantTokenCapability string

// Enum values for ParticipantTokenCapability
const (
	ParticipantTokenCapabilityPublish   ParticipantTokenCapability = "PUBLISH"
	ParticipantTokenCapabilitySubscribe ParticipantTokenCapability = "SUBSCRIBE"
)

// Values returns all known values for ParticipantTokenCapability. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ParticipantTokenCapability) Values() []ParticipantTokenCapability {
	return []ParticipantTokenCapability{
		"PUBLISH",
		"SUBSCRIBE",
	}
}

type PipBehavior string

// Enum values for PipBehavior
const (
	PipBehaviorStatic  PipBehavior = "STATIC"
	PipBehaviorDynamic PipBehavior = "DYNAMIC"
)

// Values returns all known values for PipBehavior. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PipBehavior) Values() []PipBehavior {
	return []PipBehavior{
		"STATIC",
		"DYNAMIC",
	}
}

type PipPosition string

// Enum values for PipPosition
const (
	PipPositionTopLeft     PipPosition = "TOP_LEFT"
	PipPositionTopRight    PipPosition = "TOP_RIGHT"
	PipPositionBottomLeft  PipPosition = "BOTTOM_LEFT"
	PipPositionBottomRight PipPosition = "BOTTOM_RIGHT"
)

// Values returns all known values for PipPosition. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PipPosition) Values() []PipPosition {
	return []PipPosition{
		"TOP_LEFT",
		"TOP_RIGHT",
		"BOTTOM_LEFT",
		"BOTTOM_RIGHT",
	}
}

type RecordingConfigurationFormat string

// Enum values for RecordingConfigurationFormat
const (
	RecordingConfigurationFormatHls RecordingConfigurationFormat = "HLS"
)

// Values returns all known values for RecordingConfigurationFormat. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RecordingConfigurationFormat) Values() []RecordingConfigurationFormat {
	return []RecordingConfigurationFormat{
		"HLS",
	}
}

type ReplicationState string

// Enum values for ReplicationState
const (
	ReplicationStateActive  ReplicationState = "ACTIVE"
	ReplicationStateStopped ReplicationState = "STOPPED"
)

// Values returns all known values for ReplicationState. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ReplicationState) Values() []ReplicationState {
	return []ReplicationState{
		"ACTIVE",
		"STOPPED",
	}
}

type ReplicationType string

// Enum values for ReplicationType
const (
	ReplicationTypeSource  ReplicationType = "SOURCE"
	ReplicationTypeReplica ReplicationType = "REPLICA"
	ReplicationTypeNone    ReplicationType = "NONE"
)

// Values returns all known values for ReplicationType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ReplicationType) Values() []ReplicationType {
	return []ReplicationType{
		"SOURCE",
		"REPLICA",
		"NONE",
	}
}

type ThumbnailRecordingMode string

// Enum values for ThumbnailRecordingMode
const (
	ThumbnailRecordingModeInterval ThumbnailRecordingMode = "INTERVAL"
	ThumbnailRecordingModeDisabled ThumbnailRecordingMode = "DISABLED"
)

// Values returns all known values for ThumbnailRecordingMode. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ThumbnailRecordingMode) Values() []ThumbnailRecordingMode {
	return []ThumbnailRecordingMode{
		"INTERVAL",
		"DISABLED",
	}
}

type ThumbnailStorageType string

// Enum values for ThumbnailStorageType
const (
	ThumbnailStorageTypeSequential ThumbnailStorageType = "SEQUENTIAL"
	ThumbnailStorageTypeLatest     ThumbnailStorageType = "LATEST"
)

// Values returns all known values for ThumbnailStorageType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ThumbnailStorageType) Values() []ThumbnailStorageType {
	return []ThumbnailStorageType{
		"SEQUENTIAL",
		"LATEST",
	}
}

type VideoAspectRatio string

// Enum values for VideoAspectRatio
const (
	VideoAspectRatioAuto     VideoAspectRatio = "AUTO"
	VideoAspectRatioVideo    VideoAspectRatio = "VIDEO"
	VideoAspectRatioSquare   VideoAspectRatio = "SQUARE"
	VideoAspectRatioPortrait VideoAspectRatio = "PORTRAIT"
)

// Values returns all known values for VideoAspectRatio. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (VideoAspectRatio) Values() []VideoAspectRatio {
	return []VideoAspectRatio{
		"AUTO",
		"VIDEO",
		"SQUARE",
		"PORTRAIT",
	}
}

type VideoFillMode string

// Enum values for VideoFillMode
const (
	VideoFillModeFill    VideoFillMode = "FILL"
	VideoFillModeCover   VideoFillMode = "COVER"
	VideoFillModeContain VideoFillMode = "CONTAIN"
)

// Values returns all known values for VideoFillMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (VideoFillMode) Values() []VideoFillMode {
	return []VideoFillMode{
		"FILL",
		"COVER",
		"CONTAIN",
	}
}
