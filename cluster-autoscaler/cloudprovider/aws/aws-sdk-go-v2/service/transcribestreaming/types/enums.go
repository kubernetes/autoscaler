// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type CallAnalyticsLanguageCode string

// Enum values for CallAnalyticsLanguageCode
const (
	CallAnalyticsLanguageCodeEnUs CallAnalyticsLanguageCode = "en-US"
	CallAnalyticsLanguageCodeEnGb CallAnalyticsLanguageCode = "en-GB"
	CallAnalyticsLanguageCodeEsUs CallAnalyticsLanguageCode = "es-US"
	CallAnalyticsLanguageCodeFrCa CallAnalyticsLanguageCode = "fr-CA"
	CallAnalyticsLanguageCodeFrFr CallAnalyticsLanguageCode = "fr-FR"
	CallAnalyticsLanguageCodeEnAu CallAnalyticsLanguageCode = "en-AU"
	CallAnalyticsLanguageCodeItIt CallAnalyticsLanguageCode = "it-IT"
	CallAnalyticsLanguageCodeDeDe CallAnalyticsLanguageCode = "de-DE"
	CallAnalyticsLanguageCodePtBr CallAnalyticsLanguageCode = "pt-BR"
)

// Values returns all known values for CallAnalyticsLanguageCode. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CallAnalyticsLanguageCode) Values() []CallAnalyticsLanguageCode {
	return []CallAnalyticsLanguageCode{
		"en-US",
		"en-GB",
		"es-US",
		"fr-CA",
		"fr-FR",
		"en-AU",
		"it-IT",
		"de-DE",
		"pt-BR",
	}
}

type ClinicalNoteGenerationStatus string

// Enum values for ClinicalNoteGenerationStatus
const (
	ClinicalNoteGenerationStatusInProgress ClinicalNoteGenerationStatus = "IN_PROGRESS"
	ClinicalNoteGenerationStatusFailed     ClinicalNoteGenerationStatus = "FAILED"
	ClinicalNoteGenerationStatusCompleted  ClinicalNoteGenerationStatus = "COMPLETED"
)

// Values returns all known values for ClinicalNoteGenerationStatus. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ClinicalNoteGenerationStatus) Values() []ClinicalNoteGenerationStatus {
	return []ClinicalNoteGenerationStatus{
		"IN_PROGRESS",
		"FAILED",
		"COMPLETED",
	}
}

type ContentIdentificationType string

// Enum values for ContentIdentificationType
const (
	ContentIdentificationTypePii ContentIdentificationType = "PII"
)

// Values returns all known values for ContentIdentificationType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ContentIdentificationType) Values() []ContentIdentificationType {
	return []ContentIdentificationType{
		"PII",
	}
}

type ContentRedactionOutput string

// Enum values for ContentRedactionOutput
const (
	ContentRedactionOutputRedacted              ContentRedactionOutput = "redacted"
	ContentRedactionOutputRedactedAndUnredacted ContentRedactionOutput = "redacted_and_unredacted"
)

// Values returns all known values for ContentRedactionOutput. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ContentRedactionOutput) Values() []ContentRedactionOutput {
	return []ContentRedactionOutput{
		"redacted",
		"redacted_and_unredacted",
	}
}

type ContentRedactionType string

// Enum values for ContentRedactionType
const (
	ContentRedactionTypePii ContentRedactionType = "PII"
)

// Values returns all known values for ContentRedactionType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ContentRedactionType) Values() []ContentRedactionType {
	return []ContentRedactionType{
		"PII",
	}
}

type ItemType string

// Enum values for ItemType
const (
	ItemTypePronunciation ItemType = "pronunciation"
	ItemTypePunctuation   ItemType = "punctuation"
)

// Values returns all known values for ItemType. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ItemType) Values() []ItemType {
	return []ItemType{
		"pronunciation",
		"punctuation",
	}
}

type LanguageCode string

// Enum values for LanguageCode
const (
	LanguageCodeEnUs LanguageCode = "en-US"
	LanguageCodeEnGb LanguageCode = "en-GB"
	LanguageCodeEsUs LanguageCode = "es-US"
	LanguageCodeFrCa LanguageCode = "fr-CA"
	LanguageCodeFrFr LanguageCode = "fr-FR"
	LanguageCodeEnAu LanguageCode = "en-AU"
	LanguageCodeItIt LanguageCode = "it-IT"
	LanguageCodeDeDe LanguageCode = "de-DE"
	LanguageCodePtBr LanguageCode = "pt-BR"
	LanguageCodeJaJp LanguageCode = "ja-JP"
	LanguageCodeKoKr LanguageCode = "ko-KR"
	LanguageCodeZhCn LanguageCode = "zh-CN"
	LanguageCodeThTh LanguageCode = "th-TH"
	LanguageCodeEsEs LanguageCode = "es-ES"
	LanguageCodeArSa LanguageCode = "ar-SA"
	LanguageCodePtPt LanguageCode = "pt-PT"
	LanguageCodeCaEs LanguageCode = "ca-ES"
	LanguageCodeArAe LanguageCode = "ar-AE"
	LanguageCodeHiIn LanguageCode = "hi-IN"
	LanguageCodeZhHk LanguageCode = "zh-HK"
	LanguageCodeNlNl LanguageCode = "nl-NL"
	LanguageCodeNoNo LanguageCode = "no-NO"
	LanguageCodeSvSe LanguageCode = "sv-SE"
	LanguageCodePlPl LanguageCode = "pl-PL"
	LanguageCodeFiFi LanguageCode = "fi-FI"
	LanguageCodeZhTw LanguageCode = "zh-TW"
	LanguageCodeEnIn LanguageCode = "en-IN"
	LanguageCodeEnIe LanguageCode = "en-IE"
	LanguageCodeEnNz LanguageCode = "en-NZ"
	LanguageCodeEnAb LanguageCode = "en-AB"
	LanguageCodeEnZa LanguageCode = "en-ZA"
	LanguageCodeEnWl LanguageCode = "en-WL"
	LanguageCodeDeCh LanguageCode = "de-CH"
	LanguageCodeAfZa LanguageCode = "af-ZA"
	LanguageCodeEuEs LanguageCode = "eu-ES"
	LanguageCodeHrHr LanguageCode = "hr-HR"
	LanguageCodeCsCz LanguageCode = "cs-CZ"
	LanguageCodeDaDk LanguageCode = "da-DK"
	LanguageCodeFaIr LanguageCode = "fa-IR"
	LanguageCodeGlEs LanguageCode = "gl-ES"
	LanguageCodeElGr LanguageCode = "el-GR"
	LanguageCodeHeIl LanguageCode = "he-IL"
	LanguageCodeIdId LanguageCode = "id-ID"
	LanguageCodeLvLv LanguageCode = "lv-LV"
	LanguageCodeMsMy LanguageCode = "ms-MY"
	LanguageCodeRoRo LanguageCode = "ro-RO"
	LanguageCodeRuRu LanguageCode = "ru-RU"
	LanguageCodeSrRs LanguageCode = "sr-RS"
	LanguageCodeSkSk LanguageCode = "sk-SK"
	LanguageCodeSoSo LanguageCode = "so-SO"
	LanguageCodeTlPh LanguageCode = "tl-PH"
	LanguageCodeUkUa LanguageCode = "uk-UA"
	LanguageCodeViVn LanguageCode = "vi-VN"
	LanguageCodeZuZa LanguageCode = "zu-ZA"
)

// Values returns all known values for LanguageCode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LanguageCode) Values() []LanguageCode {
	return []LanguageCode{
		"en-US",
		"en-GB",
		"es-US",
		"fr-CA",
		"fr-FR",
		"en-AU",
		"it-IT",
		"de-DE",
		"pt-BR",
		"ja-JP",
		"ko-KR",
		"zh-CN",
		"th-TH",
		"es-ES",
		"ar-SA",
		"pt-PT",
		"ca-ES",
		"ar-AE",
		"hi-IN",
		"zh-HK",
		"nl-NL",
		"no-NO",
		"sv-SE",
		"pl-PL",
		"fi-FI",
		"zh-TW",
		"en-IN",
		"en-IE",
		"en-NZ",
		"en-AB",
		"en-ZA",
		"en-WL",
		"de-CH",
		"af-ZA",
		"eu-ES",
		"hr-HR",
		"cs-CZ",
		"da-DK",
		"fa-IR",
		"gl-ES",
		"el-GR",
		"he-IL",
		"id-ID",
		"lv-LV",
		"ms-MY",
		"ro-RO",
		"ru-RU",
		"sr-RS",
		"sk-SK",
		"so-SO",
		"tl-PH",
		"uk-UA",
		"vi-VN",
		"zu-ZA",
	}
}

type MediaEncoding string

// Enum values for MediaEncoding
const (
	MediaEncodingPcm     MediaEncoding = "pcm"
	MediaEncodingOggOpus MediaEncoding = "ogg-opus"
	MediaEncodingFlac    MediaEncoding = "flac"
)

// Values returns all known values for MediaEncoding. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MediaEncoding) Values() []MediaEncoding {
	return []MediaEncoding{
		"pcm",
		"ogg-opus",
		"flac",
	}
}

type MedicalContentIdentificationType string

// Enum values for MedicalContentIdentificationType
const (
	MedicalContentIdentificationTypePhi MedicalContentIdentificationType = "PHI"
)

// Values returns all known values for MedicalContentIdentificationType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MedicalContentIdentificationType) Values() []MedicalContentIdentificationType {
	return []MedicalContentIdentificationType{
		"PHI",
	}
}

type MedicalScribeLanguageCode string

// Enum values for MedicalScribeLanguageCode
const (
	MedicalScribeLanguageCodeEnUs MedicalScribeLanguageCode = "en-US"
)

// Values returns all known values for MedicalScribeLanguageCode. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MedicalScribeLanguageCode) Values() []MedicalScribeLanguageCode {
	return []MedicalScribeLanguageCode{
		"en-US",
	}
}

type MedicalScribeMediaEncoding string

// Enum values for MedicalScribeMediaEncoding
const (
	MedicalScribeMediaEncodingPcm     MedicalScribeMediaEncoding = "pcm"
	MedicalScribeMediaEncodingOggOpus MedicalScribeMediaEncoding = "ogg-opus"
	MedicalScribeMediaEncodingFlac    MedicalScribeMediaEncoding = "flac"
)

// Values returns all known values for MedicalScribeMediaEncoding. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MedicalScribeMediaEncoding) Values() []MedicalScribeMediaEncoding {
	return []MedicalScribeMediaEncoding{
		"pcm",
		"ogg-opus",
		"flac",
	}
}

type MedicalScribeNoteTemplate string

// Enum values for MedicalScribeNoteTemplate
const (
	MedicalScribeNoteTemplateHistoryAndPhysical MedicalScribeNoteTemplate = "HISTORY_AND_PHYSICAL"
	MedicalScribeNoteTemplateGirpp              MedicalScribeNoteTemplate = "GIRPP"
	MedicalScribeNoteTemplateDap                MedicalScribeNoteTemplate = "DAP"
	MedicalScribeNoteTemplateSirp               MedicalScribeNoteTemplate = "SIRP"
	MedicalScribeNoteTemplateBirp               MedicalScribeNoteTemplate = "BIRP"
	MedicalScribeNoteTemplateBehavioralSoap     MedicalScribeNoteTemplate = "BEHAVIORAL_SOAP"
	MedicalScribeNoteTemplatePhysicalSoap       MedicalScribeNoteTemplate = "PHYSICAL_SOAP"
)

// Values returns all known values for MedicalScribeNoteTemplate. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MedicalScribeNoteTemplate) Values() []MedicalScribeNoteTemplate {
	return []MedicalScribeNoteTemplate{
		"HISTORY_AND_PHYSICAL",
		"GIRPP",
		"DAP",
		"SIRP",
		"BIRP",
		"BEHAVIORAL_SOAP",
		"PHYSICAL_SOAP",
	}
}

type MedicalScribeParticipantRole string

// Enum values for MedicalScribeParticipantRole
const (
	MedicalScribeParticipantRolePatient   MedicalScribeParticipantRole = "PATIENT"
	MedicalScribeParticipantRoleClinician MedicalScribeParticipantRole = "CLINICIAN"
)

// Values returns all known values for MedicalScribeParticipantRole. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MedicalScribeParticipantRole) Values() []MedicalScribeParticipantRole {
	return []MedicalScribeParticipantRole{
		"PATIENT",
		"CLINICIAN",
	}
}

type MedicalScribeSessionControlEventType string

// Enum values for MedicalScribeSessionControlEventType
const (
	MedicalScribeSessionControlEventTypeEndOfSession MedicalScribeSessionControlEventType = "END_OF_SESSION"
)

// Values returns all known values for MedicalScribeSessionControlEventType. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MedicalScribeSessionControlEventType) Values() []MedicalScribeSessionControlEventType {
	return []MedicalScribeSessionControlEventType{
		"END_OF_SESSION",
	}
}

type MedicalScribeStreamStatus string

// Enum values for MedicalScribeStreamStatus
const (
	MedicalScribeStreamStatusInProgress MedicalScribeStreamStatus = "IN_PROGRESS"
	MedicalScribeStreamStatusPaused     MedicalScribeStreamStatus = "PAUSED"
	MedicalScribeStreamStatusFailed     MedicalScribeStreamStatus = "FAILED"
	MedicalScribeStreamStatusCompleted  MedicalScribeStreamStatus = "COMPLETED"
)

// Values returns all known values for MedicalScribeStreamStatus. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MedicalScribeStreamStatus) Values() []MedicalScribeStreamStatus {
	return []MedicalScribeStreamStatus{
		"IN_PROGRESS",
		"PAUSED",
		"FAILED",
		"COMPLETED",
	}
}

type MedicalScribeTranscriptItemType string

// Enum values for MedicalScribeTranscriptItemType
const (
	MedicalScribeTranscriptItemTypePronunciation MedicalScribeTranscriptItemType = "pronunciation"
	MedicalScribeTranscriptItemTypePunctuation   MedicalScribeTranscriptItemType = "punctuation"
)

// Values returns all known values for MedicalScribeTranscriptItemType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MedicalScribeTranscriptItemType) Values() []MedicalScribeTranscriptItemType {
	return []MedicalScribeTranscriptItemType{
		"pronunciation",
		"punctuation",
	}
}

type MedicalScribeVocabularyFilterMethod string

// Enum values for MedicalScribeVocabularyFilterMethod
const (
	MedicalScribeVocabularyFilterMethodRemove MedicalScribeVocabularyFilterMethod = "remove"
	MedicalScribeVocabularyFilterMethodMask   MedicalScribeVocabularyFilterMethod = "mask"
	MedicalScribeVocabularyFilterMethodTag    MedicalScribeVocabularyFilterMethod = "tag"
)

// Values returns all known values for MedicalScribeVocabularyFilterMethod. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MedicalScribeVocabularyFilterMethod) Values() []MedicalScribeVocabularyFilterMethod {
	return []MedicalScribeVocabularyFilterMethod{
		"remove",
		"mask",
		"tag",
	}
}

type PartialResultsStability string

// Enum values for PartialResultsStability
const (
	PartialResultsStabilityHigh   PartialResultsStability = "high"
	PartialResultsStabilityMedium PartialResultsStability = "medium"
	PartialResultsStabilityLow    PartialResultsStability = "low"
)

// Values returns all known values for PartialResultsStability. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PartialResultsStability) Values() []PartialResultsStability {
	return []PartialResultsStability{
		"high",
		"medium",
		"low",
	}
}

type ParticipantRole string

// Enum values for ParticipantRole
const (
	ParticipantRoleAgent    ParticipantRole = "AGENT"
	ParticipantRoleCustomer ParticipantRole = "CUSTOMER"
)

// Values returns all known values for ParticipantRole. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ParticipantRole) Values() []ParticipantRole {
	return []ParticipantRole{
		"AGENT",
		"CUSTOMER",
	}
}

type Sentiment string

// Enum values for Sentiment
const (
	SentimentPositive Sentiment = "POSITIVE"
	SentimentNegative Sentiment = "NEGATIVE"
	SentimentMixed    Sentiment = "MIXED"
	SentimentNeutral  Sentiment = "NEUTRAL"
)

// Values returns all known values for Sentiment. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Sentiment) Values() []Sentiment {
	return []Sentiment{
		"POSITIVE",
		"NEGATIVE",
		"MIXED",
		"NEUTRAL",
	}
}

type Specialty string

// Enum values for Specialty
const (
	SpecialtyPrimarycare Specialty = "PRIMARYCARE"
	SpecialtyCardiology  Specialty = "CARDIOLOGY"
	SpecialtyNeurology   Specialty = "NEUROLOGY"
	SpecialtyOncology    Specialty = "ONCOLOGY"
	SpecialtyRadiology   Specialty = "RADIOLOGY"
	SpecialtyUrology     Specialty = "UROLOGY"
)

// Values returns all known values for Specialty. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Specialty) Values() []Specialty {
	return []Specialty{
		"PRIMARYCARE",
		"CARDIOLOGY",
		"NEUROLOGY",
		"ONCOLOGY",
		"RADIOLOGY",
		"UROLOGY",
	}
}

type Type string

// Enum values for Type
const (
	TypeConversation Type = "CONVERSATION"
	TypeDictation    Type = "DICTATION"
)

// Values returns all known values for Type. Note that this can be expanded in the
// future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Type) Values() []Type {
	return []Type{
		"CONVERSATION",
		"DICTATION",
	}
}

type VocabularyFilterMethod string

// Enum values for VocabularyFilterMethod
const (
	VocabularyFilterMethodRemove VocabularyFilterMethod = "remove"
	VocabularyFilterMethodMask   VocabularyFilterMethod = "mask"
	VocabularyFilterMethodTag    VocabularyFilterMethod = "tag"
)

// Values returns all known values for VocabularyFilterMethod. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (VocabularyFilterMethod) Values() []VocabularyFilterMethod {
	return []VocabularyFilterMethod{
		"remove",
		"mask",
		"tag",
	}
}
