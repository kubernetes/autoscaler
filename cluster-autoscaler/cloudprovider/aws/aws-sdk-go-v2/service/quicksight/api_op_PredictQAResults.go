// Code generated by smithy-go-codegen DO NOT EDIT.

package quicksight

import (
	"context"
	"fmt"
	awsmiddleware "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/aws/middleware"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/service/quicksight/types"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/middleware"
	smithyhttp "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/transport/http"
)

// Predicts existing visuals or generates new visuals to answer a given query.
//
// This API uses [trusted identity propagation] to ensure that an end user is authenticated and receives the
// embed URL that is specific to that user. The IAM Identity Center application
// that the user has logged into needs to have [trusted Identity Propagation enabled for Amazon QuickSight]with the scope value set to
// quicksight:read . Before you use this action, make sure that you have configured
// the relevant Amazon QuickSight resource and permissions.
//
// We recommend enabling the QSearchStatus API to unlock the full potential of
// PredictQnA . When QSearchStatus is enabled, it first checks the specified
// dashboard for any existing visuals that match the question. If no matching
// visuals are found, PredictQnA uses generative Q&A to provide an answer. To
// update the QSearchStatus , see [UpdateQuickSightQSearchConfiguration].
//
// [trusted Identity Propagation enabled for Amazon QuickSight]: https://docs.aws.amazon.com/singlesignon/latest/userguide/trustedidentitypropagation-using-customermanagedapps-specify-trusted-apps.html
// [trusted identity propagation]: https://docs.aws.amazon.com/singlesignon/latest/userguide/trustedidentitypropagation.html
// [UpdateQuickSightQSearchConfiguration]: https://docs.aws.amazon.com/quicksight/latest/APIReference/API_UpdateQuickSightQSearchConfiguration.html
func (c *Client) PredictQAResults(ctx context.Context, params *PredictQAResultsInput, optFns ...func(*Options)) (*PredictQAResultsOutput, error) {
	if params == nil {
		params = &PredictQAResultsInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "PredictQAResults", params, optFns, c.addOperationPredictQAResultsMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*PredictQAResultsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type PredictQAResultsInput struct {

	// The ID of the Amazon Web Services account that the user wants to execute
	// Predict QA results in.
	//
	// This member is required.
	AwsAccountId *string

	// The query text to be used to predict QA results.
	//
	// This member is required.
	QueryText *string

	// Indicates whether generated answers are included or excluded.
	IncludeGeneratedAnswer types.IncludeGeneratedAnswer

	// Indicates whether Q indicies are included or excluded.
	IncludeQuickSightQIndex types.IncludeQuickSightQIndex

	// The number of maximum topics to be considered to predict QA results.
	MaxTopicsToConsider *int32

	noSmithyDocumentSerde
}

type PredictQAResultsOutput struct {

	// Additional visual responses.
	AdditionalResults []types.QAResult

	// The primary visual response.
	PrimaryResult *types.QAResult

	// The Amazon Web Services request ID for this operation.
	RequestId *string

	// The HTTP status of the request.
	Status int32

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationPredictQAResultsMiddlewares(stack *middleware.Stack, options Options) (err error) {
	if err := stack.Serialize.Add(&setOperationInputMiddleware{}, middleware.After); err != nil {
		return err
	}
	err = stack.Serialize.Add(&awsRestjson1_serializeOpPredictQAResults{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpPredictQAResults{}, middleware.After)
	if err != nil {
		return err
	}
	if err := addProtocolFinalizerMiddlewares(stack, options, "PredictQAResults"); err != nil {
		return fmt.Errorf("add protocol finalizers: %v", err)
	}

	if err = addlegacyEndpointContextSetter(stack, options); err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = addClientRequestID(stack); err != nil {
		return err
	}
	if err = addComputeContentLength(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = addComputePayloadSHA256(stack); err != nil {
		return err
	}
	if err = addRetry(stack, options); err != nil {
		return err
	}
	if err = addRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = addRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addSpanRetryLoop(stack, options); err != nil {
		return err
	}
	if err = addClientUserAgent(stack, options); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addSetLegacyContextSigningOptionsMiddleware(stack); err != nil {
		return err
	}
	if err = addTimeOffsetBuild(stack, c); err != nil {
		return err
	}
	if err = addUserAgentRetryMode(stack, options); err != nil {
		return err
	}
	if err = addCredentialSource(stack, options); err != nil {
		return err
	}
	if err = addOpPredictQAResultsValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opPredictQAResults(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRecursionDetection(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	if err = addDisableHTTPSMiddleware(stack, options); err != nil {
		return err
	}
	if err = addSpanInitializeStart(stack); err != nil {
		return err
	}
	if err = addSpanInitializeEnd(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestStart(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestEnd(stack); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opPredictQAResults(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		OperationName: "PredictQAResults",
	}
}
