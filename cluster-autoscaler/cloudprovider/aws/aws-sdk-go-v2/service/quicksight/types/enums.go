// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AggType string

// Enum values for AggType
const (
	AggTypeSum              AggType = "SUM"
	AggTypeMin              AggType = "MIN"
	AggTypeMax              AggType = "MAX"
	AggTypeCount            AggType = "COUNT"
	AggTypeAverage          AggType = "AVERAGE"
	AggTypeDistinctCount    AggType = "DISTINCT_COUNT"
	AggTypeStdev            AggType = "STDEV"
	AggTypeStdevp           AggType = "STDEVP"
	AggTypeVar              AggType = "VAR"
	AggTypeVarp             AggType = "VARP"
	AggTypePercentile       AggType = "PERCENTILE"
	AggTypeMedian           AggType = "MEDIAN"
	AggTypePtdSum           AggType = "PTD_SUM"
	AggTypePtdMin           AggType = "PTD_MIN"
	AggTypePtdMax           AggType = "PTD_MAX"
	AggTypePtdCount         AggType = "PTD_COUNT"
	AggTypePtdDistinctCount AggType = "PTD_DISTINCT_COUNT"
	AggTypePtdAverage       AggType = "PTD_AVERAGE"
	AggTypeColumn           AggType = "COLUMN"
	AggTypeCustom           AggType = "CUSTOM"
)

// Values returns all known values for AggType. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AggType) Values() []AggType {
	return []AggType{
		"SUM",
		"MIN",
		"MAX",
		"COUNT",
		"AVERAGE",
		"DISTINCT_COUNT",
		"STDEV",
		"STDEVP",
		"VAR",
		"VARP",
		"PERCENTILE",
		"MEDIAN",
		"PTD_SUM",
		"PTD_MIN",
		"PTD_MAX",
		"PTD_COUNT",
		"PTD_DISTINCT_COUNT",
		"PTD_AVERAGE",
		"COLUMN",
		"CUSTOM",
	}
}

type AnalysisErrorType string

// Enum values for AnalysisErrorType
const (
	AnalysisErrorTypeAccessDenied                 AnalysisErrorType = "ACCESS_DENIED"
	AnalysisErrorTypeSourceNotFound               AnalysisErrorType = "SOURCE_NOT_FOUND"
	AnalysisErrorTypeDataSetNotFound              AnalysisErrorType = "DATA_SET_NOT_FOUND"
	AnalysisErrorTypeInternalFailure              AnalysisErrorType = "INTERNAL_FAILURE"
	AnalysisErrorTypeParameterValueIncompatible   AnalysisErrorType = "PARAMETER_VALUE_INCOMPATIBLE"
	AnalysisErrorTypeParameterTypeInvalid         AnalysisErrorType = "PARAMETER_TYPE_INVALID"
	AnalysisErrorTypeParameterNotFound            AnalysisErrorType = "PARAMETER_NOT_FOUND"
	AnalysisErrorTypeColumnTypeMismatch           AnalysisErrorType = "COLUMN_TYPE_MISMATCH"
	AnalysisErrorTypeColumnGeographicRoleMismatch AnalysisErrorType = "COLUMN_GEOGRAPHIC_ROLE_MISMATCH"
	AnalysisErrorTypeColumnReplacementMissing     AnalysisErrorType = "COLUMN_REPLACEMENT_MISSING"
)

// Values returns all known values for AnalysisErrorType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AnalysisErrorType) Values() []AnalysisErrorType {
	return []AnalysisErrorType{
		"ACCESS_DENIED",
		"SOURCE_NOT_FOUND",
		"DATA_SET_NOT_FOUND",
		"INTERNAL_FAILURE",
		"PARAMETER_VALUE_INCOMPATIBLE",
		"PARAMETER_TYPE_INVALID",
		"PARAMETER_NOT_FOUND",
		"COLUMN_TYPE_MISMATCH",
		"COLUMN_GEOGRAPHIC_ROLE_MISMATCH",
		"COLUMN_REPLACEMENT_MISSING",
	}
}

type AnalysisFilterAttribute string

// Enum values for AnalysisFilterAttribute
const (
	AnalysisFilterAttributeQuicksightUser                AnalysisFilterAttribute = "QUICKSIGHT_USER"
	AnalysisFilterAttributeQuicksightViewerOrOwner       AnalysisFilterAttribute = "QUICKSIGHT_VIEWER_OR_OWNER"
	AnalysisFilterAttributeDirectQuicksightViewerOrOwner AnalysisFilterAttribute = "DIRECT_QUICKSIGHT_VIEWER_OR_OWNER"
	AnalysisFilterAttributeQuicksightOwner               AnalysisFilterAttribute = "QUICKSIGHT_OWNER"
	AnalysisFilterAttributeDirectQuicksightOwner         AnalysisFilterAttribute = "DIRECT_QUICKSIGHT_OWNER"
	AnalysisFilterAttributeDirectQuicksightSoleOwner     AnalysisFilterAttribute = "DIRECT_QUICKSIGHT_SOLE_OWNER"
	AnalysisFilterAttributeAnalysisName                  AnalysisFilterAttribute = "ANALYSIS_NAME"
)

// Values returns all known values for AnalysisFilterAttribute. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AnalysisFilterAttribute) Values() []AnalysisFilterAttribute {
	return []AnalysisFilterAttribute{
		"QUICKSIGHT_USER",
		"QUICKSIGHT_VIEWER_OR_OWNER",
		"DIRECT_QUICKSIGHT_VIEWER_OR_OWNER",
		"QUICKSIGHT_OWNER",
		"DIRECT_QUICKSIGHT_OWNER",
		"DIRECT_QUICKSIGHT_SOLE_OWNER",
		"ANALYSIS_NAME",
	}
}

type AnchorOption string

// Enum values for AnchorOption
const (
	AnchorOptionNow AnchorOption = "NOW"
)

// Values returns all known values for AnchorOption. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AnchorOption) Values() []AnchorOption {
	return []AnchorOption{
		"NOW",
	}
}

type AnchorType string

// Enum values for AnchorType
const (
	AnchorTypeToday AnchorType = "TODAY"
)

// Values returns all known values for AnchorType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AnchorType) Values() []AnchorType {
	return []AnchorType{
		"TODAY",
	}
}

type AnonymousUserDashboardEmbeddingConfigurationDisabledFeature string

// Enum values for AnonymousUserDashboardEmbeddingConfigurationDisabledFeature
const (
	AnonymousUserDashboardEmbeddingConfigurationDisabledFeatureSharedView AnonymousUserDashboardEmbeddingConfigurationDisabledFeature = "SHARED_VIEW"
)

// Values returns all known values for
// AnonymousUserDashboardEmbeddingConfigurationDisabledFeature. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AnonymousUserDashboardEmbeddingConfigurationDisabledFeature) Values() []AnonymousUserDashboardEmbeddingConfigurationDisabledFeature {
	return []AnonymousUserDashboardEmbeddingConfigurationDisabledFeature{
		"SHARED_VIEW",
	}
}

type AnonymousUserDashboardEmbeddingConfigurationEnabledFeature string

// Enum values for AnonymousUserDashboardEmbeddingConfigurationEnabledFeature
const (
	AnonymousUserDashboardEmbeddingConfigurationEnabledFeatureSharedView AnonymousUserDashboardEmbeddingConfigurationEnabledFeature = "SHARED_VIEW"
)

// Values returns all known values for
// AnonymousUserDashboardEmbeddingConfigurationEnabledFeature. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AnonymousUserDashboardEmbeddingConfigurationEnabledFeature) Values() []AnonymousUserDashboardEmbeddingConfigurationEnabledFeature {
	return []AnonymousUserDashboardEmbeddingConfigurationEnabledFeature{
		"SHARED_VIEW",
	}
}

type ArcThickness string

// Enum values for ArcThickness
const (
	ArcThicknessSmall  ArcThickness = "SMALL"
	ArcThicknessMedium ArcThickness = "MEDIUM"
	ArcThicknessLarge  ArcThickness = "LARGE"
	ArcThicknessWhole  ArcThickness = "WHOLE"
)

// Values returns all known values for ArcThickness. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ArcThickness) Values() []ArcThickness {
	return []ArcThickness{
		"SMALL",
		"MEDIUM",
		"LARGE",
		"WHOLE",
	}
}

type ArcThicknessOptions string

// Enum values for ArcThicknessOptions
const (
	ArcThicknessOptionsSmall  ArcThicknessOptions = "SMALL"
	ArcThicknessOptionsMedium ArcThicknessOptions = "MEDIUM"
	ArcThicknessOptionsLarge  ArcThicknessOptions = "LARGE"
)

// Values returns all known values for ArcThicknessOptions. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ArcThicknessOptions) Values() []ArcThicknessOptions {
	return []ArcThicknessOptions{
		"SMALL",
		"MEDIUM",
		"LARGE",
	}
}

type AssetBundleExportFormat string

// Enum values for AssetBundleExportFormat
const (
	AssetBundleExportFormatCloudformationJson AssetBundleExportFormat = "CLOUDFORMATION_JSON"
	AssetBundleExportFormatQuicksightJson     AssetBundleExportFormat = "QUICKSIGHT_JSON"
)

// Values returns all known values for AssetBundleExportFormat. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AssetBundleExportFormat) Values() []AssetBundleExportFormat {
	return []AssetBundleExportFormat{
		"CLOUDFORMATION_JSON",
		"QUICKSIGHT_JSON",
	}
}

type AssetBundleExportJobAnalysisPropertyToOverride string

// Enum values for AssetBundleExportJobAnalysisPropertyToOverride
const (
	AssetBundleExportJobAnalysisPropertyToOverrideName AssetBundleExportJobAnalysisPropertyToOverride = "Name"
)

// Values returns all known values for
// AssetBundleExportJobAnalysisPropertyToOverride. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AssetBundleExportJobAnalysisPropertyToOverride) Values() []AssetBundleExportJobAnalysisPropertyToOverride {
	return []AssetBundleExportJobAnalysisPropertyToOverride{
		"Name",
	}
}

type AssetBundleExportJobDashboardPropertyToOverride string

// Enum values for AssetBundleExportJobDashboardPropertyToOverride
const (
	AssetBundleExportJobDashboardPropertyToOverrideName AssetBundleExportJobDashboardPropertyToOverride = "Name"
)

// Values returns all known values for
// AssetBundleExportJobDashboardPropertyToOverride. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AssetBundleExportJobDashboardPropertyToOverride) Values() []AssetBundleExportJobDashboardPropertyToOverride {
	return []AssetBundleExportJobDashboardPropertyToOverride{
		"Name",
	}
}

type AssetBundleExportJobDataSetPropertyToOverride string

// Enum values for AssetBundleExportJobDataSetPropertyToOverride
const (
	AssetBundleExportJobDataSetPropertyToOverrideName                           AssetBundleExportJobDataSetPropertyToOverride = "Name"
	AssetBundleExportJobDataSetPropertyToOverrideRefreshFailureEmailAlertStatus AssetBundleExportJobDataSetPropertyToOverride = "RefreshFailureEmailAlertStatus"
)

// Values returns all known values for
// AssetBundleExportJobDataSetPropertyToOverride. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AssetBundleExportJobDataSetPropertyToOverride) Values() []AssetBundleExportJobDataSetPropertyToOverride {
	return []AssetBundleExportJobDataSetPropertyToOverride{
		"Name",
		"RefreshFailureEmailAlertStatus",
	}
}

type AssetBundleExportJobDataSourcePropertyToOverride string

// Enum values for AssetBundleExportJobDataSourcePropertyToOverride
const (
	AssetBundleExportJobDataSourcePropertyToOverrideName                 AssetBundleExportJobDataSourcePropertyToOverride = "Name"
	AssetBundleExportJobDataSourcePropertyToOverrideDisableSsl           AssetBundleExportJobDataSourcePropertyToOverride = "DisableSsl"
	AssetBundleExportJobDataSourcePropertyToOverrideSecretArn            AssetBundleExportJobDataSourcePropertyToOverride = "SecretArn"
	AssetBundleExportJobDataSourcePropertyToOverrideUsername             AssetBundleExportJobDataSourcePropertyToOverride = "Username"
	AssetBundleExportJobDataSourcePropertyToOverridePassword             AssetBundleExportJobDataSourcePropertyToOverride = "Password"
	AssetBundleExportJobDataSourcePropertyToOverrideDomain               AssetBundleExportJobDataSourcePropertyToOverride = "Domain"
	AssetBundleExportJobDataSourcePropertyToOverrideWorkGroup            AssetBundleExportJobDataSourcePropertyToOverride = "WorkGroup"
	AssetBundleExportJobDataSourcePropertyToOverrideHost                 AssetBundleExportJobDataSourcePropertyToOverride = "Host"
	AssetBundleExportJobDataSourcePropertyToOverridePort                 AssetBundleExportJobDataSourcePropertyToOverride = "Port"
	AssetBundleExportJobDataSourcePropertyToOverrideDatabase             AssetBundleExportJobDataSourcePropertyToOverride = "Database"
	AssetBundleExportJobDataSourcePropertyToOverrideDataSetName          AssetBundleExportJobDataSourcePropertyToOverride = "DataSetName"
	AssetBundleExportJobDataSourcePropertyToOverrideCatalog              AssetBundleExportJobDataSourcePropertyToOverride = "Catalog"
	AssetBundleExportJobDataSourcePropertyToOverrideInstanceId           AssetBundleExportJobDataSourcePropertyToOverride = "InstanceId"
	AssetBundleExportJobDataSourcePropertyToOverrideClusterId            AssetBundleExportJobDataSourcePropertyToOverride = "ClusterId"
	AssetBundleExportJobDataSourcePropertyToOverrideManifestFileLocation AssetBundleExportJobDataSourcePropertyToOverride = "ManifestFileLocation"
	AssetBundleExportJobDataSourcePropertyToOverrideWarehouse            AssetBundleExportJobDataSourcePropertyToOverride = "Warehouse"
	AssetBundleExportJobDataSourcePropertyToOverrideRoleArn              AssetBundleExportJobDataSourcePropertyToOverride = "RoleArn"
	AssetBundleExportJobDataSourcePropertyToOverrideProductType          AssetBundleExportJobDataSourcePropertyToOverride = "ProductType"
)

// Values returns all known values for
// AssetBundleExportJobDataSourcePropertyToOverride. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AssetBundleExportJobDataSourcePropertyToOverride) Values() []AssetBundleExportJobDataSourcePropertyToOverride {
	return []AssetBundleExportJobDataSourcePropertyToOverride{
		"Name",
		"DisableSsl",
		"SecretArn",
		"Username",
		"Password",
		"Domain",
		"WorkGroup",
		"Host",
		"Port",
		"Database",
		"DataSetName",
		"Catalog",
		"InstanceId",
		"ClusterId",
		"ManifestFileLocation",
		"Warehouse",
		"RoleArn",
		"ProductType",
	}
}

type AssetBundleExportJobFolderPropertyToOverride string

// Enum values for AssetBundleExportJobFolderPropertyToOverride
const (
	AssetBundleExportJobFolderPropertyToOverrideName            AssetBundleExportJobFolderPropertyToOverride = "Name"
	AssetBundleExportJobFolderPropertyToOverrideParentFolderArn AssetBundleExportJobFolderPropertyToOverride = "ParentFolderArn"
)

// Values returns all known values for
// AssetBundleExportJobFolderPropertyToOverride. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AssetBundleExportJobFolderPropertyToOverride) Values() []AssetBundleExportJobFolderPropertyToOverride {
	return []AssetBundleExportJobFolderPropertyToOverride{
		"Name",
		"ParentFolderArn",
	}
}

type AssetBundleExportJobRefreshSchedulePropertyToOverride string

// Enum values for AssetBundleExportJobRefreshSchedulePropertyToOverride
const (
	AssetBundleExportJobRefreshSchedulePropertyToOverrideStartAfterDateTime AssetBundleExportJobRefreshSchedulePropertyToOverride = "StartAfterDateTime"
)

// Values returns all known values for
// AssetBundleExportJobRefreshSchedulePropertyToOverride. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AssetBundleExportJobRefreshSchedulePropertyToOverride) Values() []AssetBundleExportJobRefreshSchedulePropertyToOverride {
	return []AssetBundleExportJobRefreshSchedulePropertyToOverride{
		"StartAfterDateTime",
	}
}

type AssetBundleExportJobStatus string

// Enum values for AssetBundleExportJobStatus
const (
	AssetBundleExportJobStatusQueuedForImmediateExecution AssetBundleExportJobStatus = "QUEUED_FOR_IMMEDIATE_EXECUTION"
	AssetBundleExportJobStatusInProgress                  AssetBundleExportJobStatus = "IN_PROGRESS"
	AssetBundleExportJobStatusSuccessful                  AssetBundleExportJobStatus = "SUCCESSFUL"
	AssetBundleExportJobStatusFailed                      AssetBundleExportJobStatus = "FAILED"
)

// Values returns all known values for AssetBundleExportJobStatus. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AssetBundleExportJobStatus) Values() []AssetBundleExportJobStatus {
	return []AssetBundleExportJobStatus{
		"QUEUED_FOR_IMMEDIATE_EXECUTION",
		"IN_PROGRESS",
		"SUCCESSFUL",
		"FAILED",
	}
}

type AssetBundleExportJobThemePropertyToOverride string

// Enum values for AssetBundleExportJobThemePropertyToOverride
const (
	AssetBundleExportJobThemePropertyToOverrideName AssetBundleExportJobThemePropertyToOverride = "Name"
)

// Values returns all known values for
// AssetBundleExportJobThemePropertyToOverride. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AssetBundleExportJobThemePropertyToOverride) Values() []AssetBundleExportJobThemePropertyToOverride {
	return []AssetBundleExportJobThemePropertyToOverride{
		"Name",
	}
}

type AssetBundleExportJobVPCConnectionPropertyToOverride string

// Enum values for AssetBundleExportJobVPCConnectionPropertyToOverride
const (
	AssetBundleExportJobVPCConnectionPropertyToOverrideName         AssetBundleExportJobVPCConnectionPropertyToOverride = "Name"
	AssetBundleExportJobVPCConnectionPropertyToOverrideDnsResolvers AssetBundleExportJobVPCConnectionPropertyToOverride = "DnsResolvers"
	AssetBundleExportJobVPCConnectionPropertyToOverrideRoleArn      AssetBundleExportJobVPCConnectionPropertyToOverride = "RoleArn"
)

// Values returns all known values for
// AssetBundleExportJobVPCConnectionPropertyToOverride. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AssetBundleExportJobVPCConnectionPropertyToOverride) Values() []AssetBundleExportJobVPCConnectionPropertyToOverride {
	return []AssetBundleExportJobVPCConnectionPropertyToOverride{
		"Name",
		"DnsResolvers",
		"RoleArn",
	}
}

type AssetBundleImportFailureAction string

// Enum values for AssetBundleImportFailureAction
const (
	AssetBundleImportFailureActionDoNothing AssetBundleImportFailureAction = "DO_NOTHING"
	AssetBundleImportFailureActionRollback  AssetBundleImportFailureAction = "ROLLBACK"
)

// Values returns all known values for AssetBundleImportFailureAction. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AssetBundleImportFailureAction) Values() []AssetBundleImportFailureAction {
	return []AssetBundleImportFailureAction{
		"DO_NOTHING",
		"ROLLBACK",
	}
}

type AssetBundleImportJobStatus string

// Enum values for AssetBundleImportJobStatus
const (
	AssetBundleImportJobStatusQueuedForImmediateExecution AssetBundleImportJobStatus = "QUEUED_FOR_IMMEDIATE_EXECUTION"
	AssetBundleImportJobStatusInProgress                  AssetBundleImportJobStatus = "IN_PROGRESS"
	AssetBundleImportJobStatusSuccessful                  AssetBundleImportJobStatus = "SUCCESSFUL"
	AssetBundleImportJobStatusFailed                      AssetBundleImportJobStatus = "FAILED"
	AssetBundleImportJobStatusFailedRollbackInProgress    AssetBundleImportJobStatus = "FAILED_ROLLBACK_IN_PROGRESS"
	AssetBundleImportJobStatusFailedRollbackCompleted     AssetBundleImportJobStatus = "FAILED_ROLLBACK_COMPLETED"
	AssetBundleImportJobStatusFailedRollbackError         AssetBundleImportJobStatus = "FAILED_ROLLBACK_ERROR"
)

// Values returns all known values for AssetBundleImportJobStatus. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AssetBundleImportJobStatus) Values() []AssetBundleImportJobStatus {
	return []AssetBundleImportJobStatus{
		"QUEUED_FOR_IMMEDIATE_EXECUTION",
		"IN_PROGRESS",
		"SUCCESSFUL",
		"FAILED",
		"FAILED_ROLLBACK_IN_PROGRESS",
		"FAILED_ROLLBACK_COMPLETED",
		"FAILED_ROLLBACK_ERROR",
	}
}

type AssignmentStatus string

// Enum values for AssignmentStatus
const (
	AssignmentStatusEnabled  AssignmentStatus = "ENABLED"
	AssignmentStatusDraft    AssignmentStatus = "DRAFT"
	AssignmentStatusDisabled AssignmentStatus = "DISABLED"
)

// Values returns all known values for AssignmentStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AssignmentStatus) Values() []AssignmentStatus {
	return []AssignmentStatus{
		"ENABLED",
		"DRAFT",
		"DISABLED",
	}
}

type AuthenticationMethodOption string

// Enum values for AuthenticationMethodOption
const (
	AuthenticationMethodOptionIamAndQuicksight  AuthenticationMethodOption = "IAM_AND_QUICKSIGHT"
	AuthenticationMethodOptionIamOnly           AuthenticationMethodOption = "IAM_ONLY"
	AuthenticationMethodOptionActiveDirectory   AuthenticationMethodOption = "ACTIVE_DIRECTORY"
	AuthenticationMethodOptionIamIdentityCenter AuthenticationMethodOption = "IAM_IDENTITY_CENTER"
)

// Values returns all known values for AuthenticationMethodOption. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AuthenticationMethodOption) Values() []AuthenticationMethodOption {
	return []AuthenticationMethodOption{
		"IAM_AND_QUICKSIGHT",
		"IAM_ONLY",
		"ACTIVE_DIRECTORY",
		"IAM_IDENTITY_CENTER",
	}
}

type AuthenticationType string

// Enum values for AuthenticationType
const (
	AuthenticationTypePassword AuthenticationType = "PASSWORD"
	AuthenticationTypeToken    AuthenticationType = "TOKEN"
	AuthenticationTypeX509     AuthenticationType = "X509"
)

// Values returns all known values for AuthenticationType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AuthenticationType) Values() []AuthenticationType {
	return []AuthenticationType{
		"PASSWORD",
		"TOKEN",
		"X509",
	}
}

type AuthorSpecifiedAggregation string

// Enum values for AuthorSpecifiedAggregation
const (
	AuthorSpecifiedAggregationCount         AuthorSpecifiedAggregation = "COUNT"
	AuthorSpecifiedAggregationDistinctCount AuthorSpecifiedAggregation = "DISTINCT_COUNT"
	AuthorSpecifiedAggregationMin           AuthorSpecifiedAggregation = "MIN"
	AuthorSpecifiedAggregationMax           AuthorSpecifiedAggregation = "MAX"
	AuthorSpecifiedAggregationMedian        AuthorSpecifiedAggregation = "MEDIAN"
	AuthorSpecifiedAggregationSum           AuthorSpecifiedAggregation = "SUM"
	AuthorSpecifiedAggregationAverage       AuthorSpecifiedAggregation = "AVERAGE"
	AuthorSpecifiedAggregationStdev         AuthorSpecifiedAggregation = "STDEV"
	AuthorSpecifiedAggregationStdevp        AuthorSpecifiedAggregation = "STDEVP"
	AuthorSpecifiedAggregationVar           AuthorSpecifiedAggregation = "VAR"
	AuthorSpecifiedAggregationVarp          AuthorSpecifiedAggregation = "VARP"
	AuthorSpecifiedAggregationPercentile    AuthorSpecifiedAggregation = "PERCENTILE"
)

// Values returns all known values for AuthorSpecifiedAggregation. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AuthorSpecifiedAggregation) Values() []AuthorSpecifiedAggregation {
	return []AuthorSpecifiedAggregation{
		"COUNT",
		"DISTINCT_COUNT",
		"MIN",
		"MAX",
		"MEDIAN",
		"SUM",
		"AVERAGE",
		"STDEV",
		"STDEVP",
		"VAR",
		"VARP",
		"PERCENTILE",
	}
}

type AxisBinding string

// Enum values for AxisBinding
const (
	AxisBindingPrimaryYaxis   AxisBinding = "PRIMARY_YAXIS"
	AxisBindingSecondaryYaxis AxisBinding = "SECONDARY_YAXIS"
)

// Values returns all known values for AxisBinding. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AxisBinding) Values() []AxisBinding {
	return []AxisBinding{
		"PRIMARY_YAXIS",
		"SECONDARY_YAXIS",
	}
}

type BarChartOrientation string

// Enum values for BarChartOrientation
const (
	BarChartOrientationHorizontal BarChartOrientation = "HORIZONTAL"
	BarChartOrientationVertical   BarChartOrientation = "VERTICAL"
)

// Values returns all known values for BarChartOrientation. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (BarChartOrientation) Values() []BarChartOrientation {
	return []BarChartOrientation{
		"HORIZONTAL",
		"VERTICAL",
	}
}

type BarsArrangement string

// Enum values for BarsArrangement
const (
	BarsArrangementClustered      BarsArrangement = "CLUSTERED"
	BarsArrangementStacked        BarsArrangement = "STACKED"
	BarsArrangementStackedPercent BarsArrangement = "STACKED_PERCENT"
)

// Values returns all known values for BarsArrangement. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (BarsArrangement) Values() []BarsArrangement {
	return []BarsArrangement{
		"CLUSTERED",
		"STACKED",
		"STACKED_PERCENT",
	}
}

type BaseMapStyleType string

// Enum values for BaseMapStyleType
const (
	BaseMapStyleTypeLightGray BaseMapStyleType = "LIGHT_GRAY"
	BaseMapStyleTypeDarkGray  BaseMapStyleType = "DARK_GRAY"
	BaseMapStyleTypeStreet    BaseMapStyleType = "STREET"
	BaseMapStyleTypeImagery   BaseMapStyleType = "IMAGERY"
)

// Values returns all known values for BaseMapStyleType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (BaseMapStyleType) Values() []BaseMapStyleType {
	return []BaseMapStyleType{
		"LIGHT_GRAY",
		"DARK_GRAY",
		"STREET",
		"IMAGERY",
	}
}

type BoxPlotFillStyle string

// Enum values for BoxPlotFillStyle
const (
	BoxPlotFillStyleSolid       BoxPlotFillStyle = "SOLID"
	BoxPlotFillStyleTransparent BoxPlotFillStyle = "TRANSPARENT"
)

// Values returns all known values for BoxPlotFillStyle. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (BoxPlotFillStyle) Values() []BoxPlotFillStyle {
	return []BoxPlotFillStyle{
		"SOLID",
		"TRANSPARENT",
	}
}

type BrandStatus string

// Enum values for BrandStatus
const (
	BrandStatusCreateInProgress BrandStatus = "CREATE_IN_PROGRESS"
	BrandStatusCreateSucceeded  BrandStatus = "CREATE_SUCCEEDED"
	BrandStatusCreateFailed     BrandStatus = "CREATE_FAILED"
	BrandStatusDeleteInProgress BrandStatus = "DELETE_IN_PROGRESS"
	BrandStatusDeleteFailed     BrandStatus = "DELETE_FAILED"
)

// Values returns all known values for BrandStatus. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (BrandStatus) Values() []BrandStatus {
	return []BrandStatus{
		"CREATE_IN_PROGRESS",
		"CREATE_SUCCEEDED",
		"CREATE_FAILED",
		"DELETE_IN_PROGRESS",
		"DELETE_FAILED",
	}
}

type BrandVersionStatus string

// Enum values for BrandVersionStatus
const (
	BrandVersionStatusCreateInProgress BrandVersionStatus = "CREATE_IN_PROGRESS"
	BrandVersionStatusCreateSucceeded  BrandVersionStatus = "CREATE_SUCCEEDED"
	BrandVersionStatusCreateFailed     BrandVersionStatus = "CREATE_FAILED"
)

// Values returns all known values for BrandVersionStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (BrandVersionStatus) Values() []BrandVersionStatus {
	return []BrandVersionStatus{
		"CREATE_IN_PROGRESS",
		"CREATE_SUCCEEDED",
		"CREATE_FAILED",
	}
}

type CapabilityState string

// Enum values for CapabilityState
const (
	CapabilityStateDeny CapabilityState = "DENY"
)

// Values returns all known values for CapabilityState. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CapabilityState) Values() []CapabilityState {
	return []CapabilityState{
		"DENY",
	}
}

type CategoricalAggregationFunction string

// Enum values for CategoricalAggregationFunction
const (
	CategoricalAggregationFunctionCount         CategoricalAggregationFunction = "COUNT"
	CategoricalAggregationFunctionDistinctCount CategoricalAggregationFunction = "DISTINCT_COUNT"
)

// Values returns all known values for CategoricalAggregationFunction. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CategoricalAggregationFunction) Values() []CategoricalAggregationFunction {
	return []CategoricalAggregationFunction{
		"COUNT",
		"DISTINCT_COUNT",
	}
}

type CategoryFilterFunction string

// Enum values for CategoryFilterFunction
const (
	CategoryFilterFunctionExact    CategoryFilterFunction = "EXACT"
	CategoryFilterFunctionContains CategoryFilterFunction = "CONTAINS"
)

// Values returns all known values for CategoryFilterFunction. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CategoryFilterFunction) Values() []CategoryFilterFunction {
	return []CategoryFilterFunction{
		"EXACT",
		"CONTAINS",
	}
}

type CategoryFilterMatchOperator string

// Enum values for CategoryFilterMatchOperator
const (
	CategoryFilterMatchOperatorEquals         CategoryFilterMatchOperator = "EQUALS"
	CategoryFilterMatchOperatorDoesNotEqual   CategoryFilterMatchOperator = "DOES_NOT_EQUAL"
	CategoryFilterMatchOperatorContains       CategoryFilterMatchOperator = "CONTAINS"
	CategoryFilterMatchOperatorDoesNotContain CategoryFilterMatchOperator = "DOES_NOT_CONTAIN"
	CategoryFilterMatchOperatorStartsWith     CategoryFilterMatchOperator = "STARTS_WITH"
	CategoryFilterMatchOperatorEndsWith       CategoryFilterMatchOperator = "ENDS_WITH"
)

// Values returns all known values for CategoryFilterMatchOperator. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CategoryFilterMatchOperator) Values() []CategoryFilterMatchOperator {
	return []CategoryFilterMatchOperator{
		"EQUALS",
		"DOES_NOT_EQUAL",
		"CONTAINS",
		"DOES_NOT_CONTAIN",
		"STARTS_WITH",
		"ENDS_WITH",
	}
}

type CategoryFilterSelectAllOptions string

// Enum values for CategoryFilterSelectAllOptions
const (
	CategoryFilterSelectAllOptionsFilterAllValues CategoryFilterSelectAllOptions = "FILTER_ALL_VALUES"
)

// Values returns all known values for CategoryFilterSelectAllOptions. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CategoryFilterSelectAllOptions) Values() []CategoryFilterSelectAllOptions {
	return []CategoryFilterSelectAllOptions{
		"FILTER_ALL_VALUES",
	}
}

type CategoryFilterType string

// Enum values for CategoryFilterType
const (
	CategoryFilterTypeCustomFilter     CategoryFilterType = "CUSTOM_FILTER"
	CategoryFilterTypeCustomFilterList CategoryFilterType = "CUSTOM_FILTER_LIST"
	CategoryFilterTypeFilterList       CategoryFilterType = "FILTER_LIST"
)

// Values returns all known values for CategoryFilterType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CategoryFilterType) Values() []CategoryFilterType {
	return []CategoryFilterType{
		"CUSTOM_FILTER",
		"CUSTOM_FILTER_LIST",
		"FILTER_LIST",
	}
}

type ColorFillType string

// Enum values for ColorFillType
const (
	ColorFillTypeDiscrete ColorFillType = "DISCRETE"
	ColorFillTypeGradient ColorFillType = "GRADIENT"
)

// Values returns all known values for ColorFillType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ColorFillType) Values() []ColorFillType {
	return []ColorFillType{
		"DISCRETE",
		"GRADIENT",
	}
}

type ColumnDataRole string

// Enum values for ColumnDataRole
const (
	ColumnDataRoleDimension ColumnDataRole = "DIMENSION"
	ColumnDataRoleMeasure   ColumnDataRole = "MEASURE"
)

// Values returns all known values for ColumnDataRole. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ColumnDataRole) Values() []ColumnDataRole {
	return []ColumnDataRole{
		"DIMENSION",
		"MEASURE",
	}
}

type ColumnDataSubType string

// Enum values for ColumnDataSubType
const (
	ColumnDataSubTypeFloat ColumnDataSubType = "FLOAT"
	ColumnDataSubTypeFixed ColumnDataSubType = "FIXED"
)

// Values returns all known values for ColumnDataSubType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ColumnDataSubType) Values() []ColumnDataSubType {
	return []ColumnDataSubType{
		"FLOAT",
		"FIXED",
	}
}

type ColumnDataType string

// Enum values for ColumnDataType
const (
	ColumnDataTypeString   ColumnDataType = "STRING"
	ColumnDataTypeInteger  ColumnDataType = "INTEGER"
	ColumnDataTypeDecimal  ColumnDataType = "DECIMAL"
	ColumnDataTypeDatetime ColumnDataType = "DATETIME"
)

// Values returns all known values for ColumnDataType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ColumnDataType) Values() []ColumnDataType {
	return []ColumnDataType{
		"STRING",
		"INTEGER",
		"DECIMAL",
		"DATETIME",
	}
}

type ColumnOrderingType string

// Enum values for ColumnOrderingType
const (
	ColumnOrderingTypeGreaterIsBetter ColumnOrderingType = "GREATER_IS_BETTER"
	ColumnOrderingTypeLesserIsBetter  ColumnOrderingType = "LESSER_IS_BETTER"
	ColumnOrderingTypeSpecified       ColumnOrderingType = "SPECIFIED"
)

// Values returns all known values for ColumnOrderingType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ColumnOrderingType) Values() []ColumnOrderingType {
	return []ColumnOrderingType{
		"GREATER_IS_BETTER",
		"LESSER_IS_BETTER",
		"SPECIFIED",
	}
}

type ColumnRole string

// Enum values for ColumnRole
const (
	ColumnRoleDimension ColumnRole = "DIMENSION"
	ColumnRoleMeasure   ColumnRole = "MEASURE"
)

// Values returns all known values for ColumnRole. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ColumnRole) Values() []ColumnRole {
	return []ColumnRole{
		"DIMENSION",
		"MEASURE",
	}
}

type ColumnTagName string

// Enum values for ColumnTagName
const (
	ColumnTagNameColumnGeographicRole ColumnTagName = "COLUMN_GEOGRAPHIC_ROLE"
	ColumnTagNameColumnDescription    ColumnTagName = "COLUMN_DESCRIPTION"
)

// Values returns all known values for ColumnTagName. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ColumnTagName) Values() []ColumnTagName {
	return []ColumnTagName{
		"COLUMN_GEOGRAPHIC_ROLE",
		"COLUMN_DESCRIPTION",
	}
}

type CommitMode string

// Enum values for CommitMode
const (
	CommitModeAuto   CommitMode = "AUTO"
	CommitModeManual CommitMode = "MANUAL"
)

// Values returns all known values for CommitMode. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CommitMode) Values() []CommitMode {
	return []CommitMode{
		"AUTO",
		"MANUAL",
	}
}

type ComparisonMethod string

// Enum values for ComparisonMethod
const (
	ComparisonMethodDifference        ComparisonMethod = "DIFFERENCE"
	ComparisonMethodPercentDifference ComparisonMethod = "PERCENT_DIFFERENCE"
	ComparisonMethodPercent           ComparisonMethod = "PERCENT"
)

// Values returns all known values for ComparisonMethod. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ComparisonMethod) Values() []ComparisonMethod {
	return []ComparisonMethod{
		"DIFFERENCE",
		"PERCENT_DIFFERENCE",
		"PERCENT",
	}
}

type ComparisonMethodType string

// Enum values for ComparisonMethodType
const (
	ComparisonMethodTypeDiff                  ComparisonMethodType = "DIFF"
	ComparisonMethodTypePercDiff              ComparisonMethodType = "PERC_DIFF"
	ComparisonMethodTypeDiffAsPerc            ComparisonMethodType = "DIFF_AS_PERC"
	ComparisonMethodTypePopCurrentDiffAsPerc  ComparisonMethodType = "POP_CURRENT_DIFF_AS_PERC"
	ComparisonMethodTypePopCurrentDiff        ComparisonMethodType = "POP_CURRENT_DIFF"
	ComparisonMethodTypePopOvertimeDiffAsPerc ComparisonMethodType = "POP_OVERTIME_DIFF_AS_PERC"
	ComparisonMethodTypePopOvertimeDiff       ComparisonMethodType = "POP_OVERTIME_DIFF"
	ComparisonMethodTypePercentOfTotal        ComparisonMethodType = "PERCENT_OF_TOTAL"
	ComparisonMethodTypeRunningSum            ComparisonMethodType = "RUNNING_SUM"
	ComparisonMethodTypeMovingAverage         ComparisonMethodType = "MOVING_AVERAGE"
)

// Values returns all known values for ComparisonMethodType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ComparisonMethodType) Values() []ComparisonMethodType {
	return []ComparisonMethodType{
		"DIFF",
		"PERC_DIFF",
		"DIFF_AS_PERC",
		"POP_CURRENT_DIFF_AS_PERC",
		"POP_CURRENT_DIFF",
		"POP_OVERTIME_DIFF_AS_PERC",
		"POP_OVERTIME_DIFF",
		"PERCENT_OF_TOTAL",
		"RUNNING_SUM",
		"MOVING_AVERAGE",
	}
}

type ConditionalFormattingIconDisplayOption string

// Enum values for ConditionalFormattingIconDisplayOption
const (
	ConditionalFormattingIconDisplayOptionIconOnly ConditionalFormattingIconDisplayOption = "ICON_ONLY"
)

// Values returns all known values for ConditionalFormattingIconDisplayOption.
// Note that this can be expanded in the future, and so it is only as up to date as
// the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ConditionalFormattingIconDisplayOption) Values() []ConditionalFormattingIconDisplayOption {
	return []ConditionalFormattingIconDisplayOption{
		"ICON_ONLY",
	}
}

type ConditionalFormattingIconSetType string

// Enum values for ConditionalFormattingIconSetType
const (
	ConditionalFormattingIconSetTypePlusMinus        ConditionalFormattingIconSetType = "PLUS_MINUS"
	ConditionalFormattingIconSetTypeCheckX           ConditionalFormattingIconSetType = "CHECK_X"
	ConditionalFormattingIconSetTypeThreeColorArrow  ConditionalFormattingIconSetType = "THREE_COLOR_ARROW"
	ConditionalFormattingIconSetTypeThreeGrayArrow   ConditionalFormattingIconSetType = "THREE_GRAY_ARROW"
	ConditionalFormattingIconSetTypeCaretUpMinusDown ConditionalFormattingIconSetType = "CARET_UP_MINUS_DOWN"
	ConditionalFormattingIconSetTypeThreeShape       ConditionalFormattingIconSetType = "THREE_SHAPE"
	ConditionalFormattingIconSetTypeThreeCircle      ConditionalFormattingIconSetType = "THREE_CIRCLE"
	ConditionalFormattingIconSetTypeFlags            ConditionalFormattingIconSetType = "FLAGS"
	ConditionalFormattingIconSetTypeBars             ConditionalFormattingIconSetType = "BARS"
	ConditionalFormattingIconSetTypeFourColorArrow   ConditionalFormattingIconSetType = "FOUR_COLOR_ARROW"
	ConditionalFormattingIconSetTypeFourGrayArrow    ConditionalFormattingIconSetType = "FOUR_GRAY_ARROW"
)

// Values returns all known values for ConditionalFormattingIconSetType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ConditionalFormattingIconSetType) Values() []ConditionalFormattingIconSetType {
	return []ConditionalFormattingIconSetType{
		"PLUS_MINUS",
		"CHECK_X",
		"THREE_COLOR_ARROW",
		"THREE_GRAY_ARROW",
		"CARET_UP_MINUS_DOWN",
		"THREE_SHAPE",
		"THREE_CIRCLE",
		"FLAGS",
		"BARS",
		"FOUR_COLOR_ARROW",
		"FOUR_GRAY_ARROW",
	}
}

type ConstantType string

// Enum values for ConstantType
const (
	ConstantTypeSingular   ConstantType = "SINGULAR"
	ConstantTypeRange      ConstantType = "RANGE"
	ConstantTypeCollective ConstantType = "COLLECTIVE"
)

// Values returns all known values for ConstantType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ConstantType) Values() []ConstantType {
	return []ConstantType{
		"SINGULAR",
		"RANGE",
		"COLLECTIVE",
	}
}

type ContributionAnalysisDirection string

// Enum values for ContributionAnalysisDirection
const (
	ContributionAnalysisDirectionIncrease ContributionAnalysisDirection = "INCREASE"
	ContributionAnalysisDirectionDecrease ContributionAnalysisDirection = "DECREASE"
	ContributionAnalysisDirectionNeutral  ContributionAnalysisDirection = "NEUTRAL"
)

// Values returns all known values for ContributionAnalysisDirection. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ContributionAnalysisDirection) Values() []ContributionAnalysisDirection {
	return []ContributionAnalysisDirection{
		"INCREASE",
		"DECREASE",
		"NEUTRAL",
	}
}

type ContributionAnalysisSortType string

// Enum values for ContributionAnalysisSortType
const (
	ContributionAnalysisSortTypeAbsoluteDifference     ContributionAnalysisSortType = "ABSOLUTE_DIFFERENCE"
	ContributionAnalysisSortTypeContributionPercentage ContributionAnalysisSortType = "CONTRIBUTION_PERCENTAGE"
	ContributionAnalysisSortTypeDeviationFromExpected  ContributionAnalysisSortType = "DEVIATION_FROM_EXPECTED"
	ContributionAnalysisSortTypePercentageDifference   ContributionAnalysisSortType = "PERCENTAGE_DIFFERENCE"
)

// Values returns all known values for ContributionAnalysisSortType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ContributionAnalysisSortType) Values() []ContributionAnalysisSortType {
	return []ContributionAnalysisSortType{
		"ABSOLUTE_DIFFERENCE",
		"CONTRIBUTION_PERCENTAGE",
		"DEVIATION_FROM_EXPECTED",
		"PERCENTAGE_DIFFERENCE",
	}
}

type CrossDatasetTypes string

// Enum values for CrossDatasetTypes
const (
	CrossDatasetTypesAllDatasets   CrossDatasetTypes = "ALL_DATASETS"
	CrossDatasetTypesSingleDataset CrossDatasetTypes = "SINGLE_DATASET"
)

// Values returns all known values for CrossDatasetTypes. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CrossDatasetTypes) Values() []CrossDatasetTypes {
	return []CrossDatasetTypes{
		"ALL_DATASETS",
		"SINGLE_DATASET",
	}
}

type CustomContentImageScalingConfiguration string

// Enum values for CustomContentImageScalingConfiguration
const (
	CustomContentImageScalingConfigurationFitToHeight   CustomContentImageScalingConfiguration = "FIT_TO_HEIGHT"
	CustomContentImageScalingConfigurationFitToWidth    CustomContentImageScalingConfiguration = "FIT_TO_WIDTH"
	CustomContentImageScalingConfigurationDoNotScale    CustomContentImageScalingConfiguration = "DO_NOT_SCALE"
	CustomContentImageScalingConfigurationScaleToVisual CustomContentImageScalingConfiguration = "SCALE_TO_VISUAL"
)

// Values returns all known values for CustomContentImageScalingConfiguration.
// Note that this can be expanded in the future, and so it is only as up to date as
// the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CustomContentImageScalingConfiguration) Values() []CustomContentImageScalingConfiguration {
	return []CustomContentImageScalingConfiguration{
		"FIT_TO_HEIGHT",
		"FIT_TO_WIDTH",
		"DO_NOT_SCALE",
		"SCALE_TO_VISUAL",
	}
}

type CustomContentType string

// Enum values for CustomContentType
const (
	CustomContentTypeImage                CustomContentType = "IMAGE"
	CustomContentTypeOtherEmbeddedContent CustomContentType = "OTHER_EMBEDDED_CONTENT"
)

// Values returns all known values for CustomContentType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CustomContentType) Values() []CustomContentType {
	return []CustomContentType{
		"IMAGE",
		"OTHER_EMBEDDED_CONTENT",
	}
}

type DashboardBehavior string

// Enum values for DashboardBehavior
const (
	DashboardBehaviorEnabled  DashboardBehavior = "ENABLED"
	DashboardBehaviorDisabled DashboardBehavior = "DISABLED"
)

// Values returns all known values for DashboardBehavior. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DashboardBehavior) Values() []DashboardBehavior {
	return []DashboardBehavior{
		"ENABLED",
		"DISABLED",
	}
}

type DashboardErrorType string

// Enum values for DashboardErrorType
const (
	DashboardErrorTypeAccessDenied                 DashboardErrorType = "ACCESS_DENIED"
	DashboardErrorTypeSourceNotFound               DashboardErrorType = "SOURCE_NOT_FOUND"
	DashboardErrorTypeDataSetNotFound              DashboardErrorType = "DATA_SET_NOT_FOUND"
	DashboardErrorTypeInternalFailure              DashboardErrorType = "INTERNAL_FAILURE"
	DashboardErrorTypeParameterValueIncompatible   DashboardErrorType = "PARAMETER_VALUE_INCOMPATIBLE"
	DashboardErrorTypeParameterTypeInvalid         DashboardErrorType = "PARAMETER_TYPE_INVALID"
	DashboardErrorTypeParameterNotFound            DashboardErrorType = "PARAMETER_NOT_FOUND"
	DashboardErrorTypeColumnTypeMismatch           DashboardErrorType = "COLUMN_TYPE_MISMATCH"
	DashboardErrorTypeColumnGeographicRoleMismatch DashboardErrorType = "COLUMN_GEOGRAPHIC_ROLE_MISMATCH"
	DashboardErrorTypeColumnReplacementMissing     DashboardErrorType = "COLUMN_REPLACEMENT_MISSING"
)

// Values returns all known values for DashboardErrorType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DashboardErrorType) Values() []DashboardErrorType {
	return []DashboardErrorType{
		"ACCESS_DENIED",
		"SOURCE_NOT_FOUND",
		"DATA_SET_NOT_FOUND",
		"INTERNAL_FAILURE",
		"PARAMETER_VALUE_INCOMPATIBLE",
		"PARAMETER_TYPE_INVALID",
		"PARAMETER_NOT_FOUND",
		"COLUMN_TYPE_MISMATCH",
		"COLUMN_GEOGRAPHIC_ROLE_MISMATCH",
		"COLUMN_REPLACEMENT_MISSING",
	}
}

type DashboardFilterAttribute string

// Enum values for DashboardFilterAttribute
const (
	DashboardFilterAttributeQuicksightUser                DashboardFilterAttribute = "QUICKSIGHT_USER"
	DashboardFilterAttributeQuicksightViewerOrOwner       DashboardFilterAttribute = "QUICKSIGHT_VIEWER_OR_OWNER"
	DashboardFilterAttributeDirectQuicksightViewerOrOwner DashboardFilterAttribute = "DIRECT_QUICKSIGHT_VIEWER_OR_OWNER"
	DashboardFilterAttributeQuicksightOwner               DashboardFilterAttribute = "QUICKSIGHT_OWNER"
	DashboardFilterAttributeDirectQuicksightOwner         DashboardFilterAttribute = "DIRECT_QUICKSIGHT_OWNER"
	DashboardFilterAttributeDirectQuicksightSoleOwner     DashboardFilterAttribute = "DIRECT_QUICKSIGHT_SOLE_OWNER"
	DashboardFilterAttributeDashboardName                 DashboardFilterAttribute = "DASHBOARD_NAME"
)

// Values returns all known values for DashboardFilterAttribute. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DashboardFilterAttribute) Values() []DashboardFilterAttribute {
	return []DashboardFilterAttribute{
		"QUICKSIGHT_USER",
		"QUICKSIGHT_VIEWER_OR_OWNER",
		"DIRECT_QUICKSIGHT_VIEWER_OR_OWNER",
		"QUICKSIGHT_OWNER",
		"DIRECT_QUICKSIGHT_OWNER",
		"DIRECT_QUICKSIGHT_SOLE_OWNER",
		"DASHBOARD_NAME",
	}
}

type DashboardsQAStatus string

// Enum values for DashboardsQAStatus
const (
	DashboardsQAStatusEnabled  DashboardsQAStatus = "ENABLED"
	DashboardsQAStatusDisabled DashboardsQAStatus = "DISABLED"
)

// Values returns all known values for DashboardsQAStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DashboardsQAStatus) Values() []DashboardsQAStatus {
	return []DashboardsQAStatus{
		"ENABLED",
		"DISABLED",
	}
}

type DashboardUIState string

// Enum values for DashboardUIState
const (
	DashboardUIStateExpanded  DashboardUIState = "EXPANDED"
	DashboardUIStateCollapsed DashboardUIState = "COLLAPSED"
)

// Values returns all known values for DashboardUIState. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DashboardUIState) Values() []DashboardUIState {
	return []DashboardUIState{
		"EXPANDED",
		"COLLAPSED",
	}
}

type DataLabelContent string

// Enum values for DataLabelContent
const (
	DataLabelContentValue           DataLabelContent = "VALUE"
	DataLabelContentPercent         DataLabelContent = "PERCENT"
	DataLabelContentValueAndPercent DataLabelContent = "VALUE_AND_PERCENT"
)

// Values returns all known values for DataLabelContent. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DataLabelContent) Values() []DataLabelContent {
	return []DataLabelContent{
		"VALUE",
		"PERCENT",
		"VALUE_AND_PERCENT",
	}
}

type DataLabelOverlap string

// Enum values for DataLabelOverlap
const (
	DataLabelOverlapDisableOverlap DataLabelOverlap = "DISABLE_OVERLAP"
	DataLabelOverlapEnableOverlap  DataLabelOverlap = "ENABLE_OVERLAP"
)

// Values returns all known values for DataLabelOverlap. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DataLabelOverlap) Values() []DataLabelOverlap {
	return []DataLabelOverlap{
		"DISABLE_OVERLAP",
		"ENABLE_OVERLAP",
	}
}

type DataLabelPosition string

// Enum values for DataLabelPosition
const (
	DataLabelPositionInside  DataLabelPosition = "INSIDE"
	DataLabelPositionOutside DataLabelPosition = "OUTSIDE"
	DataLabelPositionLeft    DataLabelPosition = "LEFT"
	DataLabelPositionTop     DataLabelPosition = "TOP"
	DataLabelPositionBottom  DataLabelPosition = "BOTTOM"
	DataLabelPositionRight   DataLabelPosition = "RIGHT"
)

// Values returns all known values for DataLabelPosition. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DataLabelPosition) Values() []DataLabelPosition {
	return []DataLabelPosition{
		"INSIDE",
		"OUTSIDE",
		"LEFT",
		"TOP",
		"BOTTOM",
		"RIGHT",
	}
}

type DataSetFilterAttribute string

// Enum values for DataSetFilterAttribute
const (
	DataSetFilterAttributeQuicksightViewerOrOwner       DataSetFilterAttribute = "QUICKSIGHT_VIEWER_OR_OWNER"
	DataSetFilterAttributeQuicksightOwner               DataSetFilterAttribute = "QUICKSIGHT_OWNER"
	DataSetFilterAttributeDirectQuicksightViewerOrOwner DataSetFilterAttribute = "DIRECT_QUICKSIGHT_VIEWER_OR_OWNER"
	DataSetFilterAttributeDirectQuicksightOwner         DataSetFilterAttribute = "DIRECT_QUICKSIGHT_OWNER"
	DataSetFilterAttributeDirectQuicksightSoleOwner     DataSetFilterAttribute = "DIRECT_QUICKSIGHT_SOLE_OWNER"
	DataSetFilterAttributeDatasetName                   DataSetFilterAttribute = "DATASET_NAME"
)

// Values returns all known values for DataSetFilterAttribute. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DataSetFilterAttribute) Values() []DataSetFilterAttribute {
	return []DataSetFilterAttribute{
		"QUICKSIGHT_VIEWER_OR_OWNER",
		"QUICKSIGHT_OWNER",
		"DIRECT_QUICKSIGHT_VIEWER_OR_OWNER",
		"DIRECT_QUICKSIGHT_OWNER",
		"DIRECT_QUICKSIGHT_SOLE_OWNER",
		"DATASET_NAME",
	}
}

type DataSetImportMode string

// Enum values for DataSetImportMode
const (
	DataSetImportModeSpice       DataSetImportMode = "SPICE"
	DataSetImportModeDirectQuery DataSetImportMode = "DIRECT_QUERY"
)

// Values returns all known values for DataSetImportMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DataSetImportMode) Values() []DataSetImportMode {
	return []DataSetImportMode{
		"SPICE",
		"DIRECT_QUERY",
	}
}

type DatasetParameterValueType string

// Enum values for DatasetParameterValueType
const (
	DatasetParameterValueTypeMultiValued  DatasetParameterValueType = "MULTI_VALUED"
	DatasetParameterValueTypeSingleValued DatasetParameterValueType = "SINGLE_VALUED"
)

// Values returns all known values for DatasetParameterValueType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DatasetParameterValueType) Values() []DatasetParameterValueType {
	return []DatasetParameterValueType{
		"MULTI_VALUED",
		"SINGLE_VALUED",
	}
}

type DataSetUseAs string

// Enum values for DataSetUseAs
const (
	DataSetUseAsRlsRules DataSetUseAs = "RLS_RULES"
)

// Values returns all known values for DataSetUseAs. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DataSetUseAs) Values() []DataSetUseAs {
	return []DataSetUseAs{
		"RLS_RULES",
	}
}

type DataSourceErrorInfoType string

// Enum values for DataSourceErrorInfoType
const (
	DataSourceErrorInfoTypeAccessDenied              DataSourceErrorInfoType = "ACCESS_DENIED"
	DataSourceErrorInfoTypeCopySourceNotFound        DataSourceErrorInfoType = "COPY_SOURCE_NOT_FOUND"
	DataSourceErrorInfoTypeTimeout                   DataSourceErrorInfoType = "TIMEOUT"
	DataSourceErrorInfoTypeEngineVersionNotSupported DataSourceErrorInfoType = "ENGINE_VERSION_NOT_SUPPORTED"
	DataSourceErrorInfoTypeUnknownHost               DataSourceErrorInfoType = "UNKNOWN_HOST"
	DataSourceErrorInfoTypeGenericSqlFailure         DataSourceErrorInfoType = "GENERIC_SQL_FAILURE"
	DataSourceErrorInfoTypeConflict                  DataSourceErrorInfoType = "CONFLICT"
	DataSourceErrorInfoTypeUnknown                   DataSourceErrorInfoType = "UNKNOWN"
)

// Values returns all known values for DataSourceErrorInfoType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DataSourceErrorInfoType) Values() []DataSourceErrorInfoType {
	return []DataSourceErrorInfoType{
		"ACCESS_DENIED",
		"COPY_SOURCE_NOT_FOUND",
		"TIMEOUT",
		"ENGINE_VERSION_NOT_SUPPORTED",
		"UNKNOWN_HOST",
		"GENERIC_SQL_FAILURE",
		"CONFLICT",
		"UNKNOWN",
	}
}

type DataSourceFilterAttribute string

// Enum values for DataSourceFilterAttribute
const (
	DataSourceFilterAttributeDirectQuicksightViewerOrOwner DataSourceFilterAttribute = "DIRECT_QUICKSIGHT_VIEWER_OR_OWNER"
	DataSourceFilterAttributeDirectQuicksightOwner         DataSourceFilterAttribute = "DIRECT_QUICKSIGHT_OWNER"
	DataSourceFilterAttributeDirectQuicksightSoleOwner     DataSourceFilterAttribute = "DIRECT_QUICKSIGHT_SOLE_OWNER"
	DataSourceFilterAttributeDatasourceName                DataSourceFilterAttribute = "DATASOURCE_NAME"
)

// Values returns all known values for DataSourceFilterAttribute. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DataSourceFilterAttribute) Values() []DataSourceFilterAttribute {
	return []DataSourceFilterAttribute{
		"DIRECT_QUICKSIGHT_VIEWER_OR_OWNER",
		"DIRECT_QUICKSIGHT_OWNER",
		"DIRECT_QUICKSIGHT_SOLE_OWNER",
		"DATASOURCE_NAME",
	}
}

type DataSourceType string

// Enum values for DataSourceType
const (
	DataSourceTypeAdobeAnalytics      DataSourceType = "ADOBE_ANALYTICS"
	DataSourceTypeAmazonElasticsearch DataSourceType = "AMAZON_ELASTICSEARCH"
	DataSourceTypeAthena              DataSourceType = "ATHENA"
	DataSourceTypeAurora              DataSourceType = "AURORA"
	DataSourceTypeAuroraPostgresql    DataSourceType = "AURORA_POSTGRESQL"
	DataSourceTypeAwsIotAnalytics     DataSourceType = "AWS_IOT_ANALYTICS"
	DataSourceTypeGithub              DataSourceType = "GITHUB"
	DataSourceTypeJira                DataSourceType = "JIRA"
	DataSourceTypeMariadb             DataSourceType = "MARIADB"
	DataSourceTypeMysql               DataSourceType = "MYSQL"
	DataSourceTypeOracle              DataSourceType = "ORACLE"
	DataSourceTypePostgresql          DataSourceType = "POSTGRESQL"
	DataSourceTypePresto              DataSourceType = "PRESTO"
	DataSourceTypeRedshift            DataSourceType = "REDSHIFT"
	DataSourceTypeS3                  DataSourceType = "S3"
	DataSourceTypeSalesforce          DataSourceType = "SALESFORCE"
	DataSourceTypeServicenow          DataSourceType = "SERVICENOW"
	DataSourceTypeSnowflake           DataSourceType = "SNOWFLAKE"
	DataSourceTypeSpark               DataSourceType = "SPARK"
	DataSourceTypeSqlserver           DataSourceType = "SQLSERVER"
	DataSourceTypeTeradata            DataSourceType = "TERADATA"
	DataSourceTypeTwitter             DataSourceType = "TWITTER"
	DataSourceTypeTimestream          DataSourceType = "TIMESTREAM"
	DataSourceTypeAmazonOpensearch    DataSourceType = "AMAZON_OPENSEARCH"
	DataSourceTypeExasol              DataSourceType = "EXASOL"
	DataSourceTypeDatabricks          DataSourceType = "DATABRICKS"
	DataSourceTypeStarburst           DataSourceType = "STARBURST"
	DataSourceTypeTrino               DataSourceType = "TRINO"
	DataSourceTypeBigquery            DataSourceType = "BIGQUERY"
)

// Values returns all known values for DataSourceType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DataSourceType) Values() []DataSourceType {
	return []DataSourceType{
		"ADOBE_ANALYTICS",
		"AMAZON_ELASTICSEARCH",
		"ATHENA",
		"AURORA",
		"AURORA_POSTGRESQL",
		"AWS_IOT_ANALYTICS",
		"GITHUB",
		"JIRA",
		"MARIADB",
		"MYSQL",
		"ORACLE",
		"POSTGRESQL",
		"PRESTO",
		"REDSHIFT",
		"S3",
		"SALESFORCE",
		"SERVICENOW",
		"SNOWFLAKE",
		"SPARK",
		"SQLSERVER",
		"TERADATA",
		"TWITTER",
		"TIMESTREAM",
		"AMAZON_OPENSEARCH",
		"EXASOL",
		"DATABRICKS",
		"STARBURST",
		"TRINO",
		"BIGQUERY",
	}
}

type DateAggregationFunction string

// Enum values for DateAggregationFunction
const (
	DateAggregationFunctionCount         DateAggregationFunction = "COUNT"
	DateAggregationFunctionDistinctCount DateAggregationFunction = "DISTINCT_COUNT"
	DateAggregationFunctionMin           DateAggregationFunction = "MIN"
	DateAggregationFunctionMax           DateAggregationFunction = "MAX"
)

// Values returns all known values for DateAggregationFunction. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DateAggregationFunction) Values() []DateAggregationFunction {
	return []DateAggregationFunction{
		"COUNT",
		"DISTINCT_COUNT",
		"MIN",
		"MAX",
	}
}

type DayOfTheWeek string

// Enum values for DayOfTheWeek
const (
	DayOfTheWeekSunday    DayOfTheWeek = "SUNDAY"
	DayOfTheWeekMonday    DayOfTheWeek = "MONDAY"
	DayOfTheWeekTuesday   DayOfTheWeek = "TUESDAY"
	DayOfTheWeekWednesday DayOfTheWeek = "WEDNESDAY"
	DayOfTheWeekThursday  DayOfTheWeek = "THURSDAY"
	DayOfTheWeekFriday    DayOfTheWeek = "FRIDAY"
	DayOfTheWeekSaturday  DayOfTheWeek = "SATURDAY"
)

// Values returns all known values for DayOfTheWeek. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DayOfTheWeek) Values() []DayOfTheWeek {
	return []DayOfTheWeek{
		"SUNDAY",
		"MONDAY",
		"TUESDAY",
		"WEDNESDAY",
		"THURSDAY",
		"FRIDAY",
		"SATURDAY",
	}
}

type DayOfWeek string

// Enum values for DayOfWeek
const (
	DayOfWeekSunday    DayOfWeek = "SUNDAY"
	DayOfWeekMonday    DayOfWeek = "MONDAY"
	DayOfWeekTuesday   DayOfWeek = "TUESDAY"
	DayOfWeekWednesday DayOfWeek = "WEDNESDAY"
	DayOfWeekThursday  DayOfWeek = "THURSDAY"
	DayOfWeekFriday    DayOfWeek = "FRIDAY"
	DayOfWeekSaturday  DayOfWeek = "SATURDAY"
)

// Values returns all known values for DayOfWeek. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DayOfWeek) Values() []DayOfWeek {
	return []DayOfWeek{
		"SUNDAY",
		"MONDAY",
		"TUESDAY",
		"WEDNESDAY",
		"THURSDAY",
		"FRIDAY",
		"SATURDAY",
	}
}

type DefaultAggregation string

// Enum values for DefaultAggregation
const (
	DefaultAggregationSum           DefaultAggregation = "SUM"
	DefaultAggregationMax           DefaultAggregation = "MAX"
	DefaultAggregationMin           DefaultAggregation = "MIN"
	DefaultAggregationCount         DefaultAggregation = "COUNT"
	DefaultAggregationDistinctCount DefaultAggregation = "DISTINCT_COUNT"
	DefaultAggregationAverage       DefaultAggregation = "AVERAGE"
	DefaultAggregationMedian        DefaultAggregation = "MEDIAN"
	DefaultAggregationStdev         DefaultAggregation = "STDEV"
	DefaultAggregationStdevp        DefaultAggregation = "STDEVP"
	DefaultAggregationVar           DefaultAggregation = "VAR"
	DefaultAggregationVarp          DefaultAggregation = "VARP"
)

// Values returns all known values for DefaultAggregation. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DefaultAggregation) Values() []DefaultAggregation {
	return []DefaultAggregation{
		"SUM",
		"MAX",
		"MIN",
		"COUNT",
		"DISTINCT_COUNT",
		"AVERAGE",
		"MEDIAN",
		"STDEV",
		"STDEVP",
		"VAR",
		"VARP",
	}
}

type DigitGroupingStyle string

// Enum values for DigitGroupingStyle
const (
	DigitGroupingStyleDefault DigitGroupingStyle = "DEFAULT"
	DigitGroupingStyleLakhs   DigitGroupingStyle = "LAKHS"
)

// Values returns all known values for DigitGroupingStyle. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DigitGroupingStyle) Values() []DigitGroupingStyle {
	return []DigitGroupingStyle{
		"DEFAULT",
		"LAKHS",
	}
}

type DisplayFormat string

// Enum values for DisplayFormat
const (
	DisplayFormatAuto     DisplayFormat = "AUTO"
	DisplayFormatPercent  DisplayFormat = "PERCENT"
	DisplayFormatCurrency DisplayFormat = "CURRENCY"
	DisplayFormatNumber   DisplayFormat = "NUMBER"
	DisplayFormatDate     DisplayFormat = "DATE"
	DisplayFormatString   DisplayFormat = "STRING"
)

// Values returns all known values for DisplayFormat. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DisplayFormat) Values() []DisplayFormat {
	return []DisplayFormat{
		"AUTO",
		"PERCENT",
		"CURRENCY",
		"NUMBER",
		"DATE",
		"STRING",
	}
}

type Edition string

// Enum values for Edition
const (
	EditionStandard       Edition = "STANDARD"
	EditionEnterprise     Edition = "ENTERPRISE"
	EditionEnterpriseAndQ Edition = "ENTERPRISE_AND_Q"
)

// Values returns all known values for Edition. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Edition) Values() []Edition {
	return []Edition{
		"STANDARD",
		"ENTERPRISE",
		"ENTERPRISE_AND_Q",
	}
}

type EmbeddingIdentityType string

// Enum values for EmbeddingIdentityType
const (
	EmbeddingIdentityTypeIam        EmbeddingIdentityType = "IAM"
	EmbeddingIdentityTypeQuicksight EmbeddingIdentityType = "QUICKSIGHT"
	EmbeddingIdentityTypeAnonymous  EmbeddingIdentityType = "ANONYMOUS"
)

// Values returns all known values for EmbeddingIdentityType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EmbeddingIdentityType) Values() []EmbeddingIdentityType {
	return []EmbeddingIdentityType{
		"IAM",
		"QUICKSIGHT",
		"ANONYMOUS",
	}
}

type ExceptionResourceType string

// Enum values for ExceptionResourceType
const (
	ExceptionResourceTypeUser                ExceptionResourceType = "USER"
	ExceptionResourceTypeGroup               ExceptionResourceType = "GROUP"
	ExceptionResourceTypeNamespace           ExceptionResourceType = "NAMESPACE"
	ExceptionResourceTypeAccountSettings     ExceptionResourceType = "ACCOUNT_SETTINGS"
	ExceptionResourceTypeIampolicyAssignment ExceptionResourceType = "IAMPOLICY_ASSIGNMENT"
	ExceptionResourceTypeDataSource          ExceptionResourceType = "DATA_SOURCE"
	ExceptionResourceTypeDataSet             ExceptionResourceType = "DATA_SET"
	ExceptionResourceTypeVpcConnection       ExceptionResourceType = "VPC_CONNECTION"
	ExceptionResourceTypeIngestion           ExceptionResourceType = "INGESTION"
)

// Values returns all known values for ExceptionResourceType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ExceptionResourceType) Values() []ExceptionResourceType {
	return []ExceptionResourceType{
		"USER",
		"GROUP",
		"NAMESPACE",
		"ACCOUNT_SETTINGS",
		"IAMPOLICY_ASSIGNMENT",
		"DATA_SOURCE",
		"DATA_SET",
		"VPC_CONNECTION",
		"INGESTION",
	}
}

type FileFormat string

// Enum values for FileFormat
const (
	FileFormatCsv  FileFormat = "CSV"
	FileFormatTsv  FileFormat = "TSV"
	FileFormatClf  FileFormat = "CLF"
	FileFormatElf  FileFormat = "ELF"
	FileFormatXlsx FileFormat = "XLSX"
	FileFormatJson FileFormat = "JSON"
)

// Values returns all known values for FileFormat. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FileFormat) Values() []FileFormat {
	return []FileFormat{
		"CSV",
		"TSV",
		"CLF",
		"ELF",
		"XLSX",
		"JSON",
	}
}

type FilterClass string

// Enum values for FilterClass
const (
	FilterClassEnforcedValueFilter    FilterClass = "ENFORCED_VALUE_FILTER"
	FilterClassConditionalValueFilter FilterClass = "CONDITIONAL_VALUE_FILTER"
	FilterClassNamedValueFilter       FilterClass = "NAMED_VALUE_FILTER"
)

// Values returns all known values for FilterClass. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FilterClass) Values() []FilterClass {
	return []FilterClass{
		"ENFORCED_VALUE_FILTER",
		"CONDITIONAL_VALUE_FILTER",
		"NAMED_VALUE_FILTER",
	}
}

type FilterNullOption string

// Enum values for FilterNullOption
const (
	FilterNullOptionAllValues    FilterNullOption = "ALL_VALUES"
	FilterNullOptionNullsOnly    FilterNullOption = "NULLS_ONLY"
	FilterNullOptionNonNullsOnly FilterNullOption = "NON_NULLS_ONLY"
)

// Values returns all known values for FilterNullOption. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FilterNullOption) Values() []FilterNullOption {
	return []FilterNullOption{
		"ALL_VALUES",
		"NULLS_ONLY",
		"NON_NULLS_ONLY",
	}
}

type FilterOperator string

// Enum values for FilterOperator
const (
	FilterOperatorStringEquals FilterOperator = "StringEquals"
	FilterOperatorStringLike   FilterOperator = "StringLike"
)

// Values returns all known values for FilterOperator. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FilterOperator) Values() []FilterOperator {
	return []FilterOperator{
		"StringEquals",
		"StringLike",
	}
}

type FilterVisualScope string

// Enum values for FilterVisualScope
const (
	FilterVisualScopeAllVisuals      FilterVisualScope = "ALL_VISUALS"
	FilterVisualScopeSelectedVisuals FilterVisualScope = "SELECTED_VISUALS"
)

// Values returns all known values for FilterVisualScope. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FilterVisualScope) Values() []FilterVisualScope {
	return []FilterVisualScope{
		"ALL_VISUALS",
		"SELECTED_VISUALS",
	}
}

type FolderFilterAttribute string

// Enum values for FolderFilterAttribute
const (
	FolderFilterAttributeParentFolderArn               FolderFilterAttribute = "PARENT_FOLDER_ARN"
	FolderFilterAttributeDirectQuicksightOwner         FolderFilterAttribute = "DIRECT_QUICKSIGHT_OWNER"
	FolderFilterAttributeDirectQuicksightSoleOwner     FolderFilterAttribute = "DIRECT_QUICKSIGHT_SOLE_OWNER"
	FolderFilterAttributeDirectQuicksightViewerOrOwner FolderFilterAttribute = "DIRECT_QUICKSIGHT_VIEWER_OR_OWNER"
	FolderFilterAttributeQuicksightOwner               FolderFilterAttribute = "QUICKSIGHT_OWNER"
	FolderFilterAttributeQuicksightViewerOrOwner       FolderFilterAttribute = "QUICKSIGHT_VIEWER_OR_OWNER"
	FolderFilterAttributeFolderName                    FolderFilterAttribute = "FOLDER_NAME"
)

// Values returns all known values for FolderFilterAttribute. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FolderFilterAttribute) Values() []FolderFilterAttribute {
	return []FolderFilterAttribute{
		"PARENT_FOLDER_ARN",
		"DIRECT_QUICKSIGHT_OWNER",
		"DIRECT_QUICKSIGHT_SOLE_OWNER",
		"DIRECT_QUICKSIGHT_VIEWER_OR_OWNER",
		"QUICKSIGHT_OWNER",
		"QUICKSIGHT_VIEWER_OR_OWNER",
		"FOLDER_NAME",
	}
}

type FolderType string

// Enum values for FolderType
const (
	FolderTypeShared     FolderType = "SHARED"
	FolderTypeRestricted FolderType = "RESTRICTED"
)

// Values returns all known values for FolderType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FolderType) Values() []FolderType {
	return []FolderType{
		"SHARED",
		"RESTRICTED",
	}
}

type FontDecoration string

// Enum values for FontDecoration
const (
	FontDecorationUnderline FontDecoration = "UNDERLINE"
	FontDecorationNone      FontDecoration = "NONE"
)

// Values returns all known values for FontDecoration. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FontDecoration) Values() []FontDecoration {
	return []FontDecoration{
		"UNDERLINE",
		"NONE",
	}
}

type FontStyle string

// Enum values for FontStyle
const (
	FontStyleNormal FontStyle = "NORMAL"
	FontStyleItalic FontStyle = "ITALIC"
)

// Values returns all known values for FontStyle. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FontStyle) Values() []FontStyle {
	return []FontStyle{
		"NORMAL",
		"ITALIC",
	}
}

type FontWeightName string

// Enum values for FontWeightName
const (
	FontWeightNameNormal FontWeightName = "NORMAL"
	FontWeightNameBold   FontWeightName = "BOLD"
)

// Values returns all known values for FontWeightName. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FontWeightName) Values() []FontWeightName {
	return []FontWeightName{
		"NORMAL",
		"BOLD",
	}
}

type ForecastComputationSeasonality string

// Enum values for ForecastComputationSeasonality
const (
	ForecastComputationSeasonalityAutomatic ForecastComputationSeasonality = "AUTOMATIC"
	ForecastComputationSeasonalityCustom    ForecastComputationSeasonality = "CUSTOM"
)

// Values returns all known values for ForecastComputationSeasonality. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ForecastComputationSeasonality) Values() []ForecastComputationSeasonality {
	return []ForecastComputationSeasonality{
		"AUTOMATIC",
		"CUSTOM",
	}
}

type FunnelChartMeasureDataLabelStyle string

// Enum values for FunnelChartMeasureDataLabelStyle
const (
	FunnelChartMeasureDataLabelStyleValueOnly                         FunnelChartMeasureDataLabelStyle = "VALUE_ONLY"
	FunnelChartMeasureDataLabelStylePercentageByFirstStage            FunnelChartMeasureDataLabelStyle = "PERCENTAGE_BY_FIRST_STAGE"
	FunnelChartMeasureDataLabelStylePercentageByPreviousStage         FunnelChartMeasureDataLabelStyle = "PERCENTAGE_BY_PREVIOUS_STAGE"
	FunnelChartMeasureDataLabelStyleValueAndPercentageByFirstStage    FunnelChartMeasureDataLabelStyle = "VALUE_AND_PERCENTAGE_BY_FIRST_STAGE"
	FunnelChartMeasureDataLabelStyleValueAndPercentageByPreviousStage FunnelChartMeasureDataLabelStyle = "VALUE_AND_PERCENTAGE_BY_PREVIOUS_STAGE"
)

// Values returns all known values for FunnelChartMeasureDataLabelStyle. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FunnelChartMeasureDataLabelStyle) Values() []FunnelChartMeasureDataLabelStyle {
	return []FunnelChartMeasureDataLabelStyle{
		"VALUE_ONLY",
		"PERCENTAGE_BY_FIRST_STAGE",
		"PERCENTAGE_BY_PREVIOUS_STAGE",
		"VALUE_AND_PERCENTAGE_BY_FIRST_STAGE",
		"VALUE_AND_PERCENTAGE_BY_PREVIOUS_STAGE",
	}
}

type GeneratedAnswerStatus string

// Enum values for GeneratedAnswerStatus
const (
	GeneratedAnswerStatusAnswerGenerated GeneratedAnswerStatus = "ANSWER_GENERATED"
	GeneratedAnswerStatusAnswerRetrieved GeneratedAnswerStatus = "ANSWER_RETRIEVED"
	GeneratedAnswerStatusAnswerDowngrade GeneratedAnswerStatus = "ANSWER_DOWNGRADE"
)

// Values returns all known values for GeneratedAnswerStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GeneratedAnswerStatus) Values() []GeneratedAnswerStatus {
	return []GeneratedAnswerStatus{
		"ANSWER_GENERATED",
		"ANSWER_RETRIEVED",
		"ANSWER_DOWNGRADE",
	}
}

type GeospatialColorState string

// Enum values for GeospatialColorState
const (
	GeospatialColorStateEnabled  GeospatialColorState = "ENABLED"
	GeospatialColorStateDisabled GeospatialColorState = "DISABLED"
)

// Values returns all known values for GeospatialColorState. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GeospatialColorState) Values() []GeospatialColorState {
	return []GeospatialColorState{
		"ENABLED",
		"DISABLED",
	}
}

type GeoSpatialCountryCode string

// Enum values for GeoSpatialCountryCode
const (
	GeoSpatialCountryCodeUs GeoSpatialCountryCode = "US"
)

// Values returns all known values for GeoSpatialCountryCode. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GeoSpatialCountryCode) Values() []GeoSpatialCountryCode {
	return []GeoSpatialCountryCode{
		"US",
	}
}

type GeoSpatialDataRole string

// Enum values for GeoSpatialDataRole
const (
	GeoSpatialDataRoleCountry   GeoSpatialDataRole = "COUNTRY"
	GeoSpatialDataRoleState     GeoSpatialDataRole = "STATE"
	GeoSpatialDataRoleCounty    GeoSpatialDataRole = "COUNTY"
	GeoSpatialDataRoleCity      GeoSpatialDataRole = "CITY"
	GeoSpatialDataRolePostcode  GeoSpatialDataRole = "POSTCODE"
	GeoSpatialDataRoleLongitude GeoSpatialDataRole = "LONGITUDE"
	GeoSpatialDataRoleLatitude  GeoSpatialDataRole = "LATITUDE"
)

// Values returns all known values for GeoSpatialDataRole. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GeoSpatialDataRole) Values() []GeoSpatialDataRole {
	return []GeoSpatialDataRole{
		"COUNTRY",
		"STATE",
		"COUNTY",
		"CITY",
		"POSTCODE",
		"LONGITUDE",
		"LATITUDE",
	}
}

type GeospatialLayerType string

// Enum values for GeospatialLayerType
const (
	GeospatialLayerTypePoint   GeospatialLayerType = "POINT"
	GeospatialLayerTypeLine    GeospatialLayerType = "LINE"
	GeospatialLayerTypePolygon GeospatialLayerType = "POLYGON"
)

// Values returns all known values for GeospatialLayerType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GeospatialLayerType) Values() []GeospatialLayerType {
	return []GeospatialLayerType{
		"POINT",
		"LINE",
		"POLYGON",
	}
}

type GeospatialMapNavigation string

// Enum values for GeospatialMapNavigation
const (
	GeospatialMapNavigationEnabled  GeospatialMapNavigation = "ENABLED"
	GeospatialMapNavigationDisabled GeospatialMapNavigation = "DISABLED"
)

// Values returns all known values for GeospatialMapNavigation. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GeospatialMapNavigation) Values() []GeospatialMapNavigation {
	return []GeospatialMapNavigation{
		"ENABLED",
		"DISABLED",
	}
}

type GeospatialSelectedPointStyle string

// Enum values for GeospatialSelectedPointStyle
const (
	GeospatialSelectedPointStylePoint   GeospatialSelectedPointStyle = "POINT"
	GeospatialSelectedPointStyleCluster GeospatialSelectedPointStyle = "CLUSTER"
	GeospatialSelectedPointStyleHeatmap GeospatialSelectedPointStyle = "HEATMAP"
)

// Values returns all known values for GeospatialSelectedPointStyle. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GeospatialSelectedPointStyle) Values() []GeospatialSelectedPointStyle {
	return []GeospatialSelectedPointStyle{
		"POINT",
		"CLUSTER",
		"HEATMAP",
	}
}

type GroupFilterAttribute string

// Enum values for GroupFilterAttribute
const (
	GroupFilterAttributeGroupName GroupFilterAttribute = "GROUP_NAME"
)

// Values returns all known values for GroupFilterAttribute. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GroupFilterAttribute) Values() []GroupFilterAttribute {
	return []GroupFilterAttribute{
		"GROUP_NAME",
	}
}

type GroupFilterOperator string

// Enum values for GroupFilterOperator
const (
	GroupFilterOperatorStartsWith GroupFilterOperator = "StartsWith"
)

// Values returns all known values for GroupFilterOperator. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GroupFilterOperator) Values() []GroupFilterOperator {
	return []GroupFilterOperator{
		"StartsWith",
	}
}

type HistogramBinType string

// Enum values for HistogramBinType
const (
	HistogramBinTypeBinCount HistogramBinType = "BIN_COUNT"
	HistogramBinTypeBinWidth HistogramBinType = "BIN_WIDTH"
)

// Values returns all known values for HistogramBinType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HistogramBinType) Values() []HistogramBinType {
	return []HistogramBinType{
		"BIN_COUNT",
		"BIN_WIDTH",
	}
}

type HorizontalTextAlignment string

// Enum values for HorizontalTextAlignment
const (
	HorizontalTextAlignmentLeft   HorizontalTextAlignment = "LEFT"
	HorizontalTextAlignmentCenter HorizontalTextAlignment = "CENTER"
	HorizontalTextAlignmentRight  HorizontalTextAlignment = "RIGHT"
	HorizontalTextAlignmentAuto   HorizontalTextAlignment = "AUTO"
)

// Values returns all known values for HorizontalTextAlignment. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HorizontalTextAlignment) Values() []HorizontalTextAlignment {
	return []HorizontalTextAlignment{
		"LEFT",
		"CENTER",
		"RIGHT",
		"AUTO",
	}
}

type Icon string

// Enum values for Icon
const (
	IconCaretUp        Icon = "CARET_UP"
	IconCaretDown      Icon = "CARET_DOWN"
	IconPlus           Icon = "PLUS"
	IconMinus          Icon = "MINUS"
	IconArrowUp        Icon = "ARROW_UP"
	IconArrowDown      Icon = "ARROW_DOWN"
	IconArrowLeft      Icon = "ARROW_LEFT"
	IconArrowUpLeft    Icon = "ARROW_UP_LEFT"
	IconArrowDownLeft  Icon = "ARROW_DOWN_LEFT"
	IconArrowRight     Icon = "ARROW_RIGHT"
	IconArrowUpRight   Icon = "ARROW_UP_RIGHT"
	IconArrowDownRight Icon = "ARROW_DOWN_RIGHT"
	IconFaceUp         Icon = "FACE_UP"
	IconFaceDown       Icon = "FACE_DOWN"
	IconFaceFlat       Icon = "FACE_FLAT"
	IconOneBar         Icon = "ONE_BAR"
	IconTwoBar         Icon = "TWO_BAR"
	IconThreeBar       Icon = "THREE_BAR"
	IconCircle         Icon = "CIRCLE"
	IconTriangle       Icon = "TRIANGLE"
	IconSquare         Icon = "SQUARE"
	IconFlag           Icon = "FLAG"
	IconThumbsUp       Icon = "THUMBS_UP"
	IconThumbsDown     Icon = "THUMBS_DOWN"
	IconCheckmark      Icon = "CHECKMARK"
	IconX              Icon = "X"
)

// Values returns all known values for Icon. Note that this can be expanded in the
// future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Icon) Values() []Icon {
	return []Icon{
		"CARET_UP",
		"CARET_DOWN",
		"PLUS",
		"MINUS",
		"ARROW_UP",
		"ARROW_DOWN",
		"ARROW_LEFT",
		"ARROW_UP_LEFT",
		"ARROW_DOWN_LEFT",
		"ARROW_RIGHT",
		"ARROW_UP_RIGHT",
		"ARROW_DOWN_RIGHT",
		"FACE_UP",
		"FACE_DOWN",
		"FACE_FLAT",
		"ONE_BAR",
		"TWO_BAR",
		"THREE_BAR",
		"CIRCLE",
		"TRIANGLE",
		"SQUARE",
		"FLAG",
		"THUMBS_UP",
		"THUMBS_DOWN",
		"CHECKMARK",
		"X",
	}
}

type IdentityStore string

// Enum values for IdentityStore
const (
	IdentityStoreQuicksight IdentityStore = "QUICKSIGHT"
)

// Values returns all known values for IdentityStore. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IdentityStore) Values() []IdentityStore {
	return []IdentityStore{
		"QUICKSIGHT",
	}
}

type IdentityType string

// Enum values for IdentityType
const (
	IdentityTypeIam               IdentityType = "IAM"
	IdentityTypeQuicksight        IdentityType = "QUICKSIGHT"
	IdentityTypeIamIdentityCenter IdentityType = "IAM_IDENTITY_CENTER"
)

// Values returns all known values for IdentityType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IdentityType) Values() []IdentityType {
	return []IdentityType{
		"IAM",
		"QUICKSIGHT",
		"IAM_IDENTITY_CENTER",
	}
}

type ImageCustomActionTrigger string

// Enum values for ImageCustomActionTrigger
const (
	ImageCustomActionTriggerClick ImageCustomActionTrigger = "CLICK"
	ImageCustomActionTriggerMenu  ImageCustomActionTrigger = "MENU"
)

// Values returns all known values for ImageCustomActionTrigger. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ImageCustomActionTrigger) Values() []ImageCustomActionTrigger {
	return []ImageCustomActionTrigger{
		"CLICK",
		"MENU",
	}
}

type IncludeFolderMembers string

// Enum values for IncludeFolderMembers
const (
	IncludeFolderMembersRecurse  IncludeFolderMembers = "RECURSE"
	IncludeFolderMembersOneLevel IncludeFolderMembers = "ONE_LEVEL"
	IncludeFolderMembersNone     IncludeFolderMembers = "NONE"
)

// Values returns all known values for IncludeFolderMembers. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IncludeFolderMembers) Values() []IncludeFolderMembers {
	return []IncludeFolderMembers{
		"RECURSE",
		"ONE_LEVEL",
		"NONE",
	}
}

type IncludeGeneratedAnswer string

// Enum values for IncludeGeneratedAnswer
const (
	IncludeGeneratedAnswerInclude IncludeGeneratedAnswer = "INCLUDE"
	IncludeGeneratedAnswerExclude IncludeGeneratedAnswer = "EXCLUDE"
)

// Values returns all known values for IncludeGeneratedAnswer. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IncludeGeneratedAnswer) Values() []IncludeGeneratedAnswer {
	return []IncludeGeneratedAnswer{
		"INCLUDE",
		"EXCLUDE",
	}
}

type IncludeQuickSightQIndex string

// Enum values for IncludeQuickSightQIndex
const (
	IncludeQuickSightQIndexInclude IncludeQuickSightQIndex = "INCLUDE"
	IncludeQuickSightQIndexExclude IncludeQuickSightQIndex = "EXCLUDE"
)

// Values returns all known values for IncludeQuickSightQIndex. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IncludeQuickSightQIndex) Values() []IncludeQuickSightQIndex {
	return []IncludeQuickSightQIndex{
		"INCLUDE",
		"EXCLUDE",
	}
}

type IngestionErrorType string

// Enum values for IngestionErrorType
const (
	IngestionErrorTypeFailureToAssumeRole             IngestionErrorType = "FAILURE_TO_ASSUME_ROLE"
	IngestionErrorTypeIngestionSuperseded             IngestionErrorType = "INGESTION_SUPERSEDED"
	IngestionErrorTypeIngestionCanceled               IngestionErrorType = "INGESTION_CANCELED"
	IngestionErrorTypeDataSetDeleted                  IngestionErrorType = "DATA_SET_DELETED"
	IngestionErrorTypeDataSetNotSpice                 IngestionErrorType = "DATA_SET_NOT_SPICE"
	IngestionErrorTypeS3UploadedFileDeleted           IngestionErrorType = "S3_UPLOADED_FILE_DELETED"
	IngestionErrorTypeS3ManifestError                 IngestionErrorType = "S3_MANIFEST_ERROR"
	IngestionErrorTypeDataToleranceException          IngestionErrorType = "DATA_TOLERANCE_EXCEPTION"
	IngestionErrorTypeSpiceTableNotFound              IngestionErrorType = "SPICE_TABLE_NOT_FOUND"
	IngestionErrorTypeDataSetSizeLimitExceeded        IngestionErrorType = "DATA_SET_SIZE_LIMIT_EXCEEDED"
	IngestionErrorTypeRowSizeLimitExceeded            IngestionErrorType = "ROW_SIZE_LIMIT_EXCEEDED"
	IngestionErrorTypeAccountCapacityLimitExceeded    IngestionErrorType = "ACCOUNT_CAPACITY_LIMIT_EXCEEDED"
	IngestionErrorTypeCustomerError                   IngestionErrorType = "CUSTOMER_ERROR"
	IngestionErrorTypeDataSourceNotFound              IngestionErrorType = "DATA_SOURCE_NOT_FOUND"
	IngestionErrorTypeIamRoleNotAvailable             IngestionErrorType = "IAM_ROLE_NOT_AVAILABLE"
	IngestionErrorTypeConnectionFailure               IngestionErrorType = "CONNECTION_FAILURE"
	IngestionErrorTypeSqlTableNotFound                IngestionErrorType = "SQL_TABLE_NOT_FOUND"
	IngestionErrorTypePermissionDenied                IngestionErrorType = "PERMISSION_DENIED"
	IngestionErrorTypeSslCertificateValidationFailure IngestionErrorType = "SSL_CERTIFICATE_VALIDATION_FAILURE"
	IngestionErrorTypeOauthTokenFailure               IngestionErrorType = "OAUTH_TOKEN_FAILURE"
	IngestionErrorTypeSourceApiLimitExceededFailure   IngestionErrorType = "SOURCE_API_LIMIT_EXCEEDED_FAILURE"
	IngestionErrorTypePasswordAuthenticationFailure   IngestionErrorType = "PASSWORD_AUTHENTICATION_FAILURE"
	IngestionErrorTypeSqlSchemaMismatchError          IngestionErrorType = "SQL_SCHEMA_MISMATCH_ERROR"
	IngestionErrorTypeInvalidDateFormat               IngestionErrorType = "INVALID_DATE_FORMAT"
	IngestionErrorTypeInvalidDataprepSyntax           IngestionErrorType = "INVALID_DATAPREP_SYNTAX"
	IngestionErrorTypeSourceResourceLimitExceeded     IngestionErrorType = "SOURCE_RESOURCE_LIMIT_EXCEEDED"
	IngestionErrorTypeSqlInvalidParameterValue        IngestionErrorType = "SQL_INVALID_PARAMETER_VALUE"
	IngestionErrorTypeQueryTimeout                    IngestionErrorType = "QUERY_TIMEOUT"
	IngestionErrorTypeSqlNumericOverflow              IngestionErrorType = "SQL_NUMERIC_OVERFLOW"
	IngestionErrorTypeUnresolvableHost                IngestionErrorType = "UNRESOLVABLE_HOST"
	IngestionErrorTypeUnroutableHost                  IngestionErrorType = "UNROUTABLE_HOST"
	IngestionErrorTypeSqlException                    IngestionErrorType = "SQL_EXCEPTION"
	IngestionErrorTypeS3FileInaccessible              IngestionErrorType = "S3_FILE_INACCESSIBLE"
	IngestionErrorTypeIotFileNotFound                 IngestionErrorType = "IOT_FILE_NOT_FOUND"
	IngestionErrorTypeIotDataSetFileEmpty             IngestionErrorType = "IOT_DATA_SET_FILE_EMPTY"
	IngestionErrorTypeInvalidDataSourceConfig         IngestionErrorType = "INVALID_DATA_SOURCE_CONFIG"
	IngestionErrorTypeDataSourceAuthFailed            IngestionErrorType = "DATA_SOURCE_AUTH_FAILED"
	IngestionErrorTypeDataSourceConnectionFailed      IngestionErrorType = "DATA_SOURCE_CONNECTION_FAILED"
	IngestionErrorTypeFailureToProcessJsonFile        IngestionErrorType = "FAILURE_TO_PROCESS_JSON_FILE"
	IngestionErrorTypeInternalServiceError            IngestionErrorType = "INTERNAL_SERVICE_ERROR"
	IngestionErrorTypeRefreshSuppressedByEdit         IngestionErrorType = "REFRESH_SUPPRESSED_BY_EDIT"
	IngestionErrorTypePermissionNotFound              IngestionErrorType = "PERMISSION_NOT_FOUND"
	IngestionErrorTypeElasticsearchCursorNotEnabled   IngestionErrorType = "ELASTICSEARCH_CURSOR_NOT_ENABLED"
	IngestionErrorTypeCursorNotEnabled                IngestionErrorType = "CURSOR_NOT_ENABLED"
	IngestionErrorTypeDuplicateColumnNamesFound       IngestionErrorType = "DUPLICATE_COLUMN_NAMES_FOUND"
)

// Values returns all known values for IngestionErrorType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IngestionErrorType) Values() []IngestionErrorType {
	return []IngestionErrorType{
		"FAILURE_TO_ASSUME_ROLE",
		"INGESTION_SUPERSEDED",
		"INGESTION_CANCELED",
		"DATA_SET_DELETED",
		"DATA_SET_NOT_SPICE",
		"S3_UPLOADED_FILE_DELETED",
		"S3_MANIFEST_ERROR",
		"DATA_TOLERANCE_EXCEPTION",
		"SPICE_TABLE_NOT_FOUND",
		"DATA_SET_SIZE_LIMIT_EXCEEDED",
		"ROW_SIZE_LIMIT_EXCEEDED",
		"ACCOUNT_CAPACITY_LIMIT_EXCEEDED",
		"CUSTOMER_ERROR",
		"DATA_SOURCE_NOT_FOUND",
		"IAM_ROLE_NOT_AVAILABLE",
		"CONNECTION_FAILURE",
		"SQL_TABLE_NOT_FOUND",
		"PERMISSION_DENIED",
		"SSL_CERTIFICATE_VALIDATION_FAILURE",
		"OAUTH_TOKEN_FAILURE",
		"SOURCE_API_LIMIT_EXCEEDED_FAILURE",
		"PASSWORD_AUTHENTICATION_FAILURE",
		"SQL_SCHEMA_MISMATCH_ERROR",
		"INVALID_DATE_FORMAT",
		"INVALID_DATAPREP_SYNTAX",
		"SOURCE_RESOURCE_LIMIT_EXCEEDED",
		"SQL_INVALID_PARAMETER_VALUE",
		"QUERY_TIMEOUT",
		"SQL_NUMERIC_OVERFLOW",
		"UNRESOLVABLE_HOST",
		"UNROUTABLE_HOST",
		"SQL_EXCEPTION",
		"S3_FILE_INACCESSIBLE",
		"IOT_FILE_NOT_FOUND",
		"IOT_DATA_SET_FILE_EMPTY",
		"INVALID_DATA_SOURCE_CONFIG",
		"DATA_SOURCE_AUTH_FAILED",
		"DATA_SOURCE_CONNECTION_FAILED",
		"FAILURE_TO_PROCESS_JSON_FILE",
		"INTERNAL_SERVICE_ERROR",
		"REFRESH_SUPPRESSED_BY_EDIT",
		"PERMISSION_NOT_FOUND",
		"ELASTICSEARCH_CURSOR_NOT_ENABLED",
		"CURSOR_NOT_ENABLED",
		"DUPLICATE_COLUMN_NAMES_FOUND",
	}
}

type IngestionRequestSource string

// Enum values for IngestionRequestSource
const (
	IngestionRequestSourceManual    IngestionRequestSource = "MANUAL"
	IngestionRequestSourceScheduled IngestionRequestSource = "SCHEDULED"
)

// Values returns all known values for IngestionRequestSource. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IngestionRequestSource) Values() []IngestionRequestSource {
	return []IngestionRequestSource{
		"MANUAL",
		"SCHEDULED",
	}
}

type IngestionRequestType string

// Enum values for IngestionRequestType
const (
	IngestionRequestTypeInitialIngestion   IngestionRequestType = "INITIAL_INGESTION"
	IngestionRequestTypeEdit               IngestionRequestType = "EDIT"
	IngestionRequestTypeIncrementalRefresh IngestionRequestType = "INCREMENTAL_REFRESH"
	IngestionRequestTypeFullRefresh        IngestionRequestType = "FULL_REFRESH"
)

// Values returns all known values for IngestionRequestType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IngestionRequestType) Values() []IngestionRequestType {
	return []IngestionRequestType{
		"INITIAL_INGESTION",
		"EDIT",
		"INCREMENTAL_REFRESH",
		"FULL_REFRESH",
	}
}

type IngestionStatus string

// Enum values for IngestionStatus
const (
	IngestionStatusInitialized IngestionStatus = "INITIALIZED"
	IngestionStatusQueued      IngestionStatus = "QUEUED"
	IngestionStatusRunning     IngestionStatus = "RUNNING"
	IngestionStatusFailed      IngestionStatus = "FAILED"
	IngestionStatusCompleted   IngestionStatus = "COMPLETED"
	IngestionStatusCancelled   IngestionStatus = "CANCELLED"
)

// Values returns all known values for IngestionStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IngestionStatus) Values() []IngestionStatus {
	return []IngestionStatus{
		"INITIALIZED",
		"QUEUED",
		"RUNNING",
		"FAILED",
		"COMPLETED",
		"CANCELLED",
	}
}

type IngestionType string

// Enum values for IngestionType
const (
	IngestionTypeIncrementalRefresh IngestionType = "INCREMENTAL_REFRESH"
	IngestionTypeFullRefresh        IngestionType = "FULL_REFRESH"
)

// Values returns all known values for IngestionType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IngestionType) Values() []IngestionType {
	return []IngestionType{
		"INCREMENTAL_REFRESH",
		"FULL_REFRESH",
	}
}

type InputColumnDataType string

// Enum values for InputColumnDataType
const (
	InputColumnDataTypeString   InputColumnDataType = "STRING"
	InputColumnDataTypeInteger  InputColumnDataType = "INTEGER"
	InputColumnDataTypeDecimal  InputColumnDataType = "DECIMAL"
	InputColumnDataTypeDatetime InputColumnDataType = "DATETIME"
	InputColumnDataTypeBit      InputColumnDataType = "BIT"
	InputColumnDataTypeBoolean  InputColumnDataType = "BOOLEAN"
	InputColumnDataTypeJson     InputColumnDataType = "JSON"
)

// Values returns all known values for InputColumnDataType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InputColumnDataType) Values() []InputColumnDataType {
	return []InputColumnDataType{
		"STRING",
		"INTEGER",
		"DECIMAL",
		"DATETIME",
		"BIT",
		"BOOLEAN",
		"JSON",
	}
}

type JoinType string

// Enum values for JoinType
const (
	JoinTypeInner JoinType = "INNER"
	JoinTypeOuter JoinType = "OUTER"
	JoinTypeLeft  JoinType = "LEFT"
	JoinTypeRight JoinType = "RIGHT"
)

// Values returns all known values for JoinType. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (JoinType) Values() []JoinType {
	return []JoinType{
		"INNER",
		"OUTER",
		"LEFT",
		"RIGHT",
	}
}

type KPISparklineType string

// Enum values for KPISparklineType
const (
	KPISparklineTypeLine KPISparklineType = "LINE"
	KPISparklineTypeArea KPISparklineType = "AREA"
)

// Values returns all known values for KPISparklineType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (KPISparklineType) Values() []KPISparklineType {
	return []KPISparklineType{
		"LINE",
		"AREA",
	}
}

type KPIVisualStandardLayoutType string

// Enum values for KPIVisualStandardLayoutType
const (
	KPIVisualStandardLayoutTypeClassic  KPIVisualStandardLayoutType = "CLASSIC"
	KPIVisualStandardLayoutTypeVertical KPIVisualStandardLayoutType = "VERTICAL"
)

// Values returns all known values for KPIVisualStandardLayoutType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (KPIVisualStandardLayoutType) Values() []KPIVisualStandardLayoutType {
	return []KPIVisualStandardLayoutType{
		"CLASSIC",
		"VERTICAL",
	}
}

type LayerCustomActionTrigger string

// Enum values for LayerCustomActionTrigger
const (
	LayerCustomActionTriggerDataPointClick LayerCustomActionTrigger = "DATA_POINT_CLICK"
	LayerCustomActionTriggerDataPointMenu  LayerCustomActionTrigger = "DATA_POINT_MENU"
)

// Values returns all known values for LayerCustomActionTrigger. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LayerCustomActionTrigger) Values() []LayerCustomActionTrigger {
	return []LayerCustomActionTrigger{
		"DATA_POINT_CLICK",
		"DATA_POINT_MENU",
	}
}

type LayoutElementType string

// Enum values for LayoutElementType
const (
	LayoutElementTypeVisual           LayoutElementType = "VISUAL"
	LayoutElementTypeFilterControl    LayoutElementType = "FILTER_CONTROL"
	LayoutElementTypeParameterControl LayoutElementType = "PARAMETER_CONTROL"
	LayoutElementTypeTextBox          LayoutElementType = "TEXT_BOX"
	LayoutElementTypeImage            LayoutElementType = "IMAGE"
)

// Values returns all known values for LayoutElementType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LayoutElementType) Values() []LayoutElementType {
	return []LayoutElementType{
		"VISUAL",
		"FILTER_CONTROL",
		"PARAMETER_CONTROL",
		"TEXT_BOX",
		"IMAGE",
	}
}

type LegendPosition string

// Enum values for LegendPosition
const (
	LegendPositionAuto   LegendPosition = "AUTO"
	LegendPositionRight  LegendPosition = "RIGHT"
	LegendPositionBottom LegendPosition = "BOTTOM"
	LegendPositionTop    LegendPosition = "TOP"
)

// Values returns all known values for LegendPosition. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LegendPosition) Values() []LegendPosition {
	return []LegendPosition{
		"AUTO",
		"RIGHT",
		"BOTTOM",
		"TOP",
	}
}

type LineChartLineStyle string

// Enum values for LineChartLineStyle
const (
	LineChartLineStyleSolid  LineChartLineStyle = "SOLID"
	LineChartLineStyleDotted LineChartLineStyle = "DOTTED"
	LineChartLineStyleDashed LineChartLineStyle = "DASHED"
)

// Values returns all known values for LineChartLineStyle. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LineChartLineStyle) Values() []LineChartLineStyle {
	return []LineChartLineStyle{
		"SOLID",
		"DOTTED",
		"DASHED",
	}
}

type LineChartMarkerShape string

// Enum values for LineChartMarkerShape
const (
	LineChartMarkerShapeCircle        LineChartMarkerShape = "CIRCLE"
	LineChartMarkerShapeTriangle      LineChartMarkerShape = "TRIANGLE"
	LineChartMarkerShapeSquare        LineChartMarkerShape = "SQUARE"
	LineChartMarkerShapeDiamond       LineChartMarkerShape = "DIAMOND"
	LineChartMarkerShapeRoundedSquare LineChartMarkerShape = "ROUNDED_SQUARE"
)

// Values returns all known values for LineChartMarkerShape. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LineChartMarkerShape) Values() []LineChartMarkerShape {
	return []LineChartMarkerShape{
		"CIRCLE",
		"TRIANGLE",
		"SQUARE",
		"DIAMOND",
		"ROUNDED_SQUARE",
	}
}

type LineChartType string

// Enum values for LineChartType
const (
	LineChartTypeLine        LineChartType = "LINE"
	LineChartTypeArea        LineChartType = "AREA"
	LineChartTypeStackedArea LineChartType = "STACKED_AREA"
)

// Values returns all known values for LineChartType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LineChartType) Values() []LineChartType {
	return []LineChartType{
		"LINE",
		"AREA",
		"STACKED_AREA",
	}
}

type LineInterpolation string

// Enum values for LineInterpolation
const (
	LineInterpolationLinear  LineInterpolation = "LINEAR"
	LineInterpolationSmooth  LineInterpolation = "SMOOTH"
	LineInterpolationStepped LineInterpolation = "STEPPED"
)

// Values returns all known values for LineInterpolation. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LineInterpolation) Values() []LineInterpolation {
	return []LineInterpolation{
		"LINEAR",
		"SMOOTH",
		"STEPPED",
	}
}

type LookbackWindowSizeUnit string

// Enum values for LookbackWindowSizeUnit
const (
	LookbackWindowSizeUnitHour LookbackWindowSizeUnit = "HOUR"
	LookbackWindowSizeUnitDay  LookbackWindowSizeUnit = "DAY"
	LookbackWindowSizeUnitWeek LookbackWindowSizeUnit = "WEEK"
)

// Values returns all known values for LookbackWindowSizeUnit. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LookbackWindowSizeUnit) Values() []LookbackWindowSizeUnit {
	return []LookbackWindowSizeUnit{
		"HOUR",
		"DAY",
		"WEEK",
	}
}

type MapZoomMode string

// Enum values for MapZoomMode
const (
	MapZoomModeAuto   MapZoomMode = "AUTO"
	MapZoomModeManual MapZoomMode = "MANUAL"
)

// Values returns all known values for MapZoomMode. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MapZoomMode) Values() []MapZoomMode {
	return []MapZoomMode{
		"AUTO",
		"MANUAL",
	}
}

type MaximumMinimumComputationType string

// Enum values for MaximumMinimumComputationType
const (
	MaximumMinimumComputationTypeMaximum MaximumMinimumComputationType = "MAXIMUM"
	MaximumMinimumComputationTypeMinimum MaximumMinimumComputationType = "MINIMUM"
)

// Values returns all known values for MaximumMinimumComputationType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MaximumMinimumComputationType) Values() []MaximumMinimumComputationType {
	return []MaximumMinimumComputationType{
		"MAXIMUM",
		"MINIMUM",
	}
}

type MemberType string

// Enum values for MemberType
const (
	MemberTypeDashboard  MemberType = "DASHBOARD"
	MemberTypeAnalysis   MemberType = "ANALYSIS"
	MemberTypeDataset    MemberType = "DATASET"
	MemberTypeDatasource MemberType = "DATASOURCE"
	MemberTypeTopic      MemberType = "TOPIC"
)

// Values returns all known values for MemberType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MemberType) Values() []MemberType {
	return []MemberType{
		"DASHBOARD",
		"ANALYSIS",
		"DATASET",
		"DATASOURCE",
		"TOPIC",
	}
}

type MissingDataTreatmentOption string

// Enum values for MissingDataTreatmentOption
const (
	MissingDataTreatmentOptionInterpolate MissingDataTreatmentOption = "INTERPOLATE"
	MissingDataTreatmentOptionShowAsZero  MissingDataTreatmentOption = "SHOW_AS_ZERO"
	MissingDataTreatmentOptionShowAsBlank MissingDataTreatmentOption = "SHOW_AS_BLANK"
)

// Values returns all known values for MissingDataTreatmentOption. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MissingDataTreatmentOption) Values() []MissingDataTreatmentOption {
	return []MissingDataTreatmentOption{
		"INTERPOLATE",
		"SHOW_AS_ZERO",
		"SHOW_AS_BLANK",
	}
}

type NamedEntityAggType string

// Enum values for NamedEntityAggType
const (
	NamedEntityAggTypeSum           NamedEntityAggType = "SUM"
	NamedEntityAggTypeMin           NamedEntityAggType = "MIN"
	NamedEntityAggTypeMax           NamedEntityAggType = "MAX"
	NamedEntityAggTypeCount         NamedEntityAggType = "COUNT"
	NamedEntityAggTypeAverage       NamedEntityAggType = "AVERAGE"
	NamedEntityAggTypeDistinctCount NamedEntityAggType = "DISTINCT_COUNT"
	NamedEntityAggTypeStdev         NamedEntityAggType = "STDEV"
	NamedEntityAggTypeStdevp        NamedEntityAggType = "STDEVP"
	NamedEntityAggTypeVar           NamedEntityAggType = "VAR"
	NamedEntityAggTypeVarp          NamedEntityAggType = "VARP"
	NamedEntityAggTypePercentile    NamedEntityAggType = "PERCENTILE"
	NamedEntityAggTypeMedian        NamedEntityAggType = "MEDIAN"
	NamedEntityAggTypeCustom        NamedEntityAggType = "CUSTOM"
)

// Values returns all known values for NamedEntityAggType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NamedEntityAggType) Values() []NamedEntityAggType {
	return []NamedEntityAggType{
		"SUM",
		"MIN",
		"MAX",
		"COUNT",
		"AVERAGE",
		"DISTINCT_COUNT",
		"STDEV",
		"STDEVP",
		"VAR",
		"VARP",
		"PERCENTILE",
		"MEDIAN",
		"CUSTOM",
	}
}

type NamedFilterAggType string

// Enum values for NamedFilterAggType
const (
	NamedFilterAggTypeNoAggregation NamedFilterAggType = "NO_AGGREGATION"
	NamedFilterAggTypeSum           NamedFilterAggType = "SUM"
	NamedFilterAggTypeAverage       NamedFilterAggType = "AVERAGE"
	NamedFilterAggTypeCount         NamedFilterAggType = "COUNT"
	NamedFilterAggTypeDistinctCount NamedFilterAggType = "DISTINCT_COUNT"
	NamedFilterAggTypeMax           NamedFilterAggType = "MAX"
	NamedFilterAggTypeMedian        NamedFilterAggType = "MEDIAN"
	NamedFilterAggTypeMin           NamedFilterAggType = "MIN"
	NamedFilterAggTypeStdev         NamedFilterAggType = "STDEV"
	NamedFilterAggTypeStdevp        NamedFilterAggType = "STDEVP"
	NamedFilterAggTypeVar           NamedFilterAggType = "VAR"
	NamedFilterAggTypeVarp          NamedFilterAggType = "VARP"
)

// Values returns all known values for NamedFilterAggType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NamedFilterAggType) Values() []NamedFilterAggType {
	return []NamedFilterAggType{
		"NO_AGGREGATION",
		"SUM",
		"AVERAGE",
		"COUNT",
		"DISTINCT_COUNT",
		"MAX",
		"MEDIAN",
		"MIN",
		"STDEV",
		"STDEVP",
		"VAR",
		"VARP",
	}
}

type NamedFilterType string

// Enum values for NamedFilterType
const (
	NamedFilterTypeCategoryFilter        NamedFilterType = "CATEGORY_FILTER"
	NamedFilterTypeNumericEqualityFilter NamedFilterType = "NUMERIC_EQUALITY_FILTER"
	NamedFilterTypeNumericRangeFilter    NamedFilterType = "NUMERIC_RANGE_FILTER"
	NamedFilterTypeDateRangeFilter       NamedFilterType = "DATE_RANGE_FILTER"
	NamedFilterTypeRelativeDateFilter    NamedFilterType = "RELATIVE_DATE_FILTER"
)

// Values returns all known values for NamedFilterType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NamedFilterType) Values() []NamedFilterType {
	return []NamedFilterType{
		"CATEGORY_FILTER",
		"NUMERIC_EQUALITY_FILTER",
		"NUMERIC_RANGE_FILTER",
		"DATE_RANGE_FILTER",
		"RELATIVE_DATE_FILTER",
	}
}

type NamespaceErrorType string

// Enum values for NamespaceErrorType
const (
	NamespaceErrorTypePermissionDenied     NamespaceErrorType = "PERMISSION_DENIED"
	NamespaceErrorTypeInternalServiceError NamespaceErrorType = "INTERNAL_SERVICE_ERROR"
)

// Values returns all known values for NamespaceErrorType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NamespaceErrorType) Values() []NamespaceErrorType {
	return []NamespaceErrorType{
		"PERMISSION_DENIED",
		"INTERNAL_SERVICE_ERROR",
	}
}

type NamespaceStatus string

// Enum values for NamespaceStatus
const (
	NamespaceStatusCreated             NamespaceStatus = "CREATED"
	NamespaceStatusCreating            NamespaceStatus = "CREATING"
	NamespaceStatusDeleting            NamespaceStatus = "DELETING"
	NamespaceStatusRetryableFailure    NamespaceStatus = "RETRYABLE_FAILURE"
	NamespaceStatusNonRetryableFailure NamespaceStatus = "NON_RETRYABLE_FAILURE"
)

// Values returns all known values for NamespaceStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NamespaceStatus) Values() []NamespaceStatus {
	return []NamespaceStatus{
		"CREATED",
		"CREATING",
		"DELETING",
		"RETRYABLE_FAILURE",
		"NON_RETRYABLE_FAILURE",
	}
}

type NegativeValueDisplayMode string

// Enum values for NegativeValueDisplayMode
const (
	NegativeValueDisplayModePositive NegativeValueDisplayMode = "POSITIVE"
	NegativeValueDisplayModeNegative NegativeValueDisplayMode = "NEGATIVE"
)

// Values returns all known values for NegativeValueDisplayMode. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NegativeValueDisplayMode) Values() []NegativeValueDisplayMode {
	return []NegativeValueDisplayMode{
		"POSITIVE",
		"NEGATIVE",
	}
}

type NetworkInterfaceStatus string

// Enum values for NetworkInterfaceStatus
const (
	NetworkInterfaceStatusCreating                       NetworkInterfaceStatus = "CREATING"
	NetworkInterfaceStatusAvailable                      NetworkInterfaceStatus = "AVAILABLE"
	NetworkInterfaceStatusCreationFailed                 NetworkInterfaceStatus = "CREATION_FAILED"
	NetworkInterfaceStatusUpdating                       NetworkInterfaceStatus = "UPDATING"
	NetworkInterfaceStatusUpdateFailed                   NetworkInterfaceStatus = "UPDATE_FAILED"
	NetworkInterfaceStatusDeleting                       NetworkInterfaceStatus = "DELETING"
	NetworkInterfaceStatusDeleted                        NetworkInterfaceStatus = "DELETED"
	NetworkInterfaceStatusDeletionFailed                 NetworkInterfaceStatus = "DELETION_FAILED"
	NetworkInterfaceStatusDeletionScheduled              NetworkInterfaceStatus = "DELETION_SCHEDULED"
	NetworkInterfaceStatusAttachmentFailedRollbackFailed NetworkInterfaceStatus = "ATTACHMENT_FAILED_ROLLBACK_FAILED"
)

// Values returns all known values for NetworkInterfaceStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NetworkInterfaceStatus) Values() []NetworkInterfaceStatus {
	return []NetworkInterfaceStatus{
		"CREATING",
		"AVAILABLE",
		"CREATION_FAILED",
		"UPDATING",
		"UPDATE_FAILED",
		"DELETING",
		"DELETED",
		"DELETION_FAILED",
		"DELETION_SCHEDULED",
		"ATTACHMENT_FAILED_ROLLBACK_FAILED",
	}
}

type NullFilterOption string

// Enum values for NullFilterOption
const (
	NullFilterOptionAllValues    NullFilterOption = "ALL_VALUES"
	NullFilterOptionNonNullsOnly NullFilterOption = "NON_NULLS_ONLY"
	NullFilterOptionNullsOnly    NullFilterOption = "NULLS_ONLY"
)

// Values returns all known values for NullFilterOption. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NullFilterOption) Values() []NullFilterOption {
	return []NullFilterOption{
		"ALL_VALUES",
		"NON_NULLS_ONLY",
		"NULLS_ONLY",
	}
}

type NumberScale string

// Enum values for NumberScale
const (
	NumberScaleNone      NumberScale = "NONE"
	NumberScaleAuto      NumberScale = "AUTO"
	NumberScaleThousands NumberScale = "THOUSANDS"
	NumberScaleMillions  NumberScale = "MILLIONS"
	NumberScaleBillions  NumberScale = "BILLIONS"
	NumberScaleTrillions NumberScale = "TRILLIONS"
	NumberScaleLakhs     NumberScale = "LAKHS"
	NumberScaleCrores    NumberScale = "CRORES"
)

// Values returns all known values for NumberScale. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NumberScale) Values() []NumberScale {
	return []NumberScale{
		"NONE",
		"AUTO",
		"THOUSANDS",
		"MILLIONS",
		"BILLIONS",
		"TRILLIONS",
		"LAKHS",
		"CRORES",
	}
}

type NumericEqualityMatchOperator string

// Enum values for NumericEqualityMatchOperator
const (
	NumericEqualityMatchOperatorEquals       NumericEqualityMatchOperator = "EQUALS"
	NumericEqualityMatchOperatorDoesNotEqual NumericEqualityMatchOperator = "DOES_NOT_EQUAL"
)

// Values returns all known values for NumericEqualityMatchOperator. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NumericEqualityMatchOperator) Values() []NumericEqualityMatchOperator {
	return []NumericEqualityMatchOperator{
		"EQUALS",
		"DOES_NOT_EQUAL",
	}
}

type NumericFilterSelectAllOptions string

// Enum values for NumericFilterSelectAllOptions
const (
	NumericFilterSelectAllOptionsFilterAllValues NumericFilterSelectAllOptions = "FILTER_ALL_VALUES"
)

// Values returns all known values for NumericFilterSelectAllOptions. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NumericFilterSelectAllOptions) Values() []NumericFilterSelectAllOptions {
	return []NumericFilterSelectAllOptions{
		"FILTER_ALL_VALUES",
	}
}

type NumericSeparatorSymbol string

// Enum values for NumericSeparatorSymbol
const (
	NumericSeparatorSymbolComma NumericSeparatorSymbol = "COMMA"
	NumericSeparatorSymbolDot   NumericSeparatorSymbol = "DOT"
	NumericSeparatorSymbolSpace NumericSeparatorSymbol = "SPACE"
)

// Values returns all known values for NumericSeparatorSymbol. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NumericSeparatorSymbol) Values() []NumericSeparatorSymbol {
	return []NumericSeparatorSymbol{
		"COMMA",
		"DOT",
		"SPACE",
	}
}

type OtherCategories string

// Enum values for OtherCategories
const (
	OtherCategoriesInclude OtherCategories = "INCLUDE"
	OtherCategoriesExclude OtherCategories = "EXCLUDE"
)

// Values returns all known values for OtherCategories. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (OtherCategories) Values() []OtherCategories {
	return []OtherCategories{
		"INCLUDE",
		"EXCLUDE",
	}
}

type PanelBorderStyle string

// Enum values for PanelBorderStyle
const (
	PanelBorderStyleSolid  PanelBorderStyle = "SOLID"
	PanelBorderStyleDashed PanelBorderStyle = "DASHED"
	PanelBorderStyleDotted PanelBorderStyle = "DOTTED"
)

// Values returns all known values for PanelBorderStyle. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PanelBorderStyle) Values() []PanelBorderStyle {
	return []PanelBorderStyle{
		"SOLID",
		"DASHED",
		"DOTTED",
	}
}

type PaperOrientation string

// Enum values for PaperOrientation
const (
	PaperOrientationPortrait  PaperOrientation = "PORTRAIT"
	PaperOrientationLandscape PaperOrientation = "LANDSCAPE"
)

// Values returns all known values for PaperOrientation. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PaperOrientation) Values() []PaperOrientation {
	return []PaperOrientation{
		"PORTRAIT",
		"LANDSCAPE",
	}
}

type PaperSize string

// Enum values for PaperSize
const (
	PaperSizeUsLetter        PaperSize = "US_LETTER"
	PaperSizeUsLegal         PaperSize = "US_LEGAL"
	PaperSizeUsTabloidLedger PaperSize = "US_TABLOID_LEDGER"
	PaperSizeA0              PaperSize = "A0"
	PaperSizeA1              PaperSize = "A1"
	PaperSizeA2              PaperSize = "A2"
	PaperSizeA3              PaperSize = "A3"
	PaperSizeA4              PaperSize = "A4"
	PaperSizeA5              PaperSize = "A5"
	PaperSizeJisB4           PaperSize = "JIS_B4"
	PaperSizeJisB5           PaperSize = "JIS_B5"
)

// Values returns all known values for PaperSize. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PaperSize) Values() []PaperSize {
	return []PaperSize{
		"US_LETTER",
		"US_LEGAL",
		"US_TABLOID_LEDGER",
		"A0",
		"A1",
		"A2",
		"A3",
		"A4",
		"A5",
		"JIS_B4",
		"JIS_B5",
	}
}

type ParameterValueType string

// Enum values for ParameterValueType
const (
	ParameterValueTypeMultiValued  ParameterValueType = "MULTI_VALUED"
	ParameterValueTypeSingleValued ParameterValueType = "SINGLE_VALUED"
)

// Values returns all known values for ParameterValueType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ParameterValueType) Values() []ParameterValueType {
	return []ParameterValueType{
		"MULTI_VALUED",
		"SINGLE_VALUED",
	}
}

type PersonalizationMode string

// Enum values for PersonalizationMode
const (
	PersonalizationModeEnabled  PersonalizationMode = "ENABLED"
	PersonalizationModeDisabled PersonalizationMode = "DISABLED"
)

// Values returns all known values for PersonalizationMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PersonalizationMode) Values() []PersonalizationMode {
	return []PersonalizationMode{
		"ENABLED",
		"DISABLED",
	}
}

type PivotTableConditionalFormattingScopeRole string

// Enum values for PivotTableConditionalFormattingScopeRole
const (
	PivotTableConditionalFormattingScopeRoleField      PivotTableConditionalFormattingScopeRole = "FIELD"
	PivotTableConditionalFormattingScopeRoleFieldTotal PivotTableConditionalFormattingScopeRole = "FIELD_TOTAL"
	PivotTableConditionalFormattingScopeRoleGrandTotal PivotTableConditionalFormattingScopeRole = "GRAND_TOTAL"
)

// Values returns all known values for PivotTableConditionalFormattingScopeRole.
// Note that this can be expanded in the future, and so it is only as up to date as
// the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PivotTableConditionalFormattingScopeRole) Values() []PivotTableConditionalFormattingScopeRole {
	return []PivotTableConditionalFormattingScopeRole{
		"FIELD",
		"FIELD_TOTAL",
		"GRAND_TOTAL",
	}
}

type PivotTableDataPathType string

// Enum values for PivotTableDataPathType
const (
	PivotTableDataPathTypeHierarchyRowsLayoutColumn PivotTableDataPathType = "HIERARCHY_ROWS_LAYOUT_COLUMN"
	PivotTableDataPathTypeMultipleRowMetricsColumn  PivotTableDataPathType = "MULTIPLE_ROW_METRICS_COLUMN"
	PivotTableDataPathTypeEmptyColumnHeader         PivotTableDataPathType = "EMPTY_COLUMN_HEADER"
	PivotTableDataPathTypeCountMetricColumn         PivotTableDataPathType = "COUNT_METRIC_COLUMN"
)

// Values returns all known values for PivotTableDataPathType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PivotTableDataPathType) Values() []PivotTableDataPathType {
	return []PivotTableDataPathType{
		"HIERARCHY_ROWS_LAYOUT_COLUMN",
		"MULTIPLE_ROW_METRICS_COLUMN",
		"EMPTY_COLUMN_HEADER",
		"COUNT_METRIC_COLUMN",
	}
}

type PivotTableFieldCollapseState string

// Enum values for PivotTableFieldCollapseState
const (
	PivotTableFieldCollapseStateCollapsed PivotTableFieldCollapseState = "COLLAPSED"
	PivotTableFieldCollapseStateExpanded  PivotTableFieldCollapseState = "EXPANDED"
)

// Values returns all known values for PivotTableFieldCollapseState. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PivotTableFieldCollapseState) Values() []PivotTableFieldCollapseState {
	return []PivotTableFieldCollapseState{
		"COLLAPSED",
		"EXPANDED",
	}
}

type PivotTableMetricPlacement string

// Enum values for PivotTableMetricPlacement
const (
	PivotTableMetricPlacementRow    PivotTableMetricPlacement = "ROW"
	PivotTableMetricPlacementColumn PivotTableMetricPlacement = "COLUMN"
)

// Values returns all known values for PivotTableMetricPlacement. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PivotTableMetricPlacement) Values() []PivotTableMetricPlacement {
	return []PivotTableMetricPlacement{
		"ROW",
		"COLUMN",
	}
}

type PivotTableRowsLayout string

// Enum values for PivotTableRowsLayout
const (
	PivotTableRowsLayoutTabular   PivotTableRowsLayout = "TABULAR"
	PivotTableRowsLayoutHierarchy PivotTableRowsLayout = "HIERARCHY"
)

// Values returns all known values for PivotTableRowsLayout. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PivotTableRowsLayout) Values() []PivotTableRowsLayout {
	return []PivotTableRowsLayout{
		"TABULAR",
		"HIERARCHY",
	}
}

type PivotTableSubtotalLevel string

// Enum values for PivotTableSubtotalLevel
const (
	PivotTableSubtotalLevelAll    PivotTableSubtotalLevel = "ALL"
	PivotTableSubtotalLevelCustom PivotTableSubtotalLevel = "CUSTOM"
	PivotTableSubtotalLevelLast   PivotTableSubtotalLevel = "LAST"
)

// Values returns all known values for PivotTableSubtotalLevel. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PivotTableSubtotalLevel) Values() []PivotTableSubtotalLevel {
	return []PivotTableSubtotalLevel{
		"ALL",
		"CUSTOM",
		"LAST",
	}
}

type PluginVisualAxisName string

// Enum values for PluginVisualAxisName
const (
	PluginVisualAxisNameGroupBy PluginVisualAxisName = "GROUP_BY"
	PluginVisualAxisNameValue   PluginVisualAxisName = "VALUE"
)

// Values returns all known values for PluginVisualAxisName. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PluginVisualAxisName) Values() []PluginVisualAxisName {
	return []PluginVisualAxisName{
		"GROUP_BY",
		"VALUE",
	}
}

type PrimaryValueDisplayType string

// Enum values for PrimaryValueDisplayType
const (
	PrimaryValueDisplayTypeHidden     PrimaryValueDisplayType = "HIDDEN"
	PrimaryValueDisplayTypeComparison PrimaryValueDisplayType = "COMPARISON"
	PrimaryValueDisplayTypeActual     PrimaryValueDisplayType = "ACTUAL"
)

// Values returns all known values for PrimaryValueDisplayType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PrimaryValueDisplayType) Values() []PrimaryValueDisplayType {
	return []PrimaryValueDisplayType{
		"HIDDEN",
		"COMPARISON",
		"ACTUAL",
	}
}

type PropertyRole string

// Enum values for PropertyRole
const (
	PropertyRolePrimary PropertyRole = "PRIMARY"
	PropertyRoleId      PropertyRole = "ID"
)

// Values returns all known values for PropertyRole. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PropertyRole) Values() []PropertyRole {
	return []PropertyRole{
		"PRIMARY",
		"ID",
	}
}

type PropertyUsage string

// Enum values for PropertyUsage
const (
	PropertyUsageInherit   PropertyUsage = "INHERIT"
	PropertyUsageDimension PropertyUsage = "DIMENSION"
	PropertyUsageMeasure   PropertyUsage = "MEASURE"
)

// Values returns all known values for PropertyUsage. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PropertyUsage) Values() []PropertyUsage {
	return []PropertyUsage{
		"INHERIT",
		"DIMENSION",
		"MEASURE",
	}
}

type PurchaseMode string

// Enum values for PurchaseMode
const (
	PurchaseModeManual       PurchaseMode = "MANUAL"
	PurchaseModeAutoPurchase PurchaseMode = "AUTO_PURCHASE"
)

// Values returns all known values for PurchaseMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PurchaseMode) Values() []PurchaseMode {
	return []PurchaseMode{
		"MANUAL",
		"AUTO_PURCHASE",
	}
}

type QAResultType string

// Enum values for QAResultType
const (
	QAResultTypeDashboardVisual QAResultType = "DASHBOARD_VISUAL"
	QAResultTypeGeneratedAnswer QAResultType = "GENERATED_ANSWER"
	QAResultTypeNoAnswer        QAResultType = "NO_ANSWER"
)

// Values returns all known values for QAResultType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (QAResultType) Values() []QAResultType {
	return []QAResultType{
		"DASHBOARD_VISUAL",
		"GENERATED_ANSWER",
		"NO_ANSWER",
	}
}

type QBusinessInsightsStatus string

// Enum values for QBusinessInsightsStatus
const (
	QBusinessInsightsStatusEnabled  QBusinessInsightsStatus = "ENABLED"
	QBusinessInsightsStatusDisabled QBusinessInsightsStatus = "DISABLED"
)

// Values returns all known values for QBusinessInsightsStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (QBusinessInsightsStatus) Values() []QBusinessInsightsStatus {
	return []QBusinessInsightsStatus{
		"ENABLED",
		"DISABLED",
	}
}

type QSearchStatus string

// Enum values for QSearchStatus
const (
	QSearchStatusEnabled  QSearchStatus = "ENABLED"
	QSearchStatusDisabled QSearchStatus = "DISABLED"
)

// Values returns all known values for QSearchStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (QSearchStatus) Values() []QSearchStatus {
	return []QSearchStatus{
		"ENABLED",
		"DISABLED",
	}
}

type QueryExecutionMode string

// Enum values for QueryExecutionMode
const (
	QueryExecutionModeAuto   QueryExecutionMode = "AUTO"
	QueryExecutionModeManual QueryExecutionMode = "MANUAL"
)

// Values returns all known values for QueryExecutionMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (QueryExecutionMode) Values() []QueryExecutionMode {
	return []QueryExecutionMode{
		"AUTO",
		"MANUAL",
	}
}

type RadarChartAxesRangeScale string

// Enum values for RadarChartAxesRangeScale
const (
	RadarChartAxesRangeScaleAuto        RadarChartAxesRangeScale = "AUTO"
	RadarChartAxesRangeScaleIndependent RadarChartAxesRangeScale = "INDEPENDENT"
	RadarChartAxesRangeScaleShared      RadarChartAxesRangeScale = "SHARED"
)

// Values returns all known values for RadarChartAxesRangeScale. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RadarChartAxesRangeScale) Values() []RadarChartAxesRangeScale {
	return []RadarChartAxesRangeScale{
		"AUTO",
		"INDEPENDENT",
		"SHARED",
	}
}

type RadarChartShape string

// Enum values for RadarChartShape
const (
	RadarChartShapeCircle  RadarChartShape = "CIRCLE"
	RadarChartShapePolygon RadarChartShape = "POLYGON"
)

// Values returns all known values for RadarChartShape. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RadarChartShape) Values() []RadarChartShape {
	return []RadarChartShape{
		"CIRCLE",
		"POLYGON",
	}
}

type ReferenceLineLabelHorizontalPosition string

// Enum values for ReferenceLineLabelHorizontalPosition
const (
	ReferenceLineLabelHorizontalPositionLeft   ReferenceLineLabelHorizontalPosition = "LEFT"
	ReferenceLineLabelHorizontalPositionCenter ReferenceLineLabelHorizontalPosition = "CENTER"
	ReferenceLineLabelHorizontalPositionRight  ReferenceLineLabelHorizontalPosition = "RIGHT"
)

// Values returns all known values for ReferenceLineLabelHorizontalPosition. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ReferenceLineLabelHorizontalPosition) Values() []ReferenceLineLabelHorizontalPosition {
	return []ReferenceLineLabelHorizontalPosition{
		"LEFT",
		"CENTER",
		"RIGHT",
	}
}

type ReferenceLineLabelVerticalPosition string

// Enum values for ReferenceLineLabelVerticalPosition
const (
	ReferenceLineLabelVerticalPositionAbove ReferenceLineLabelVerticalPosition = "ABOVE"
	ReferenceLineLabelVerticalPositionBelow ReferenceLineLabelVerticalPosition = "BELOW"
)

// Values returns all known values for ReferenceLineLabelVerticalPosition. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ReferenceLineLabelVerticalPosition) Values() []ReferenceLineLabelVerticalPosition {
	return []ReferenceLineLabelVerticalPosition{
		"ABOVE",
		"BELOW",
	}
}

type ReferenceLinePatternType string

// Enum values for ReferenceLinePatternType
const (
	ReferenceLinePatternTypeSolid  ReferenceLinePatternType = "SOLID"
	ReferenceLinePatternTypeDashed ReferenceLinePatternType = "DASHED"
	ReferenceLinePatternTypeDotted ReferenceLinePatternType = "DOTTED"
)

// Values returns all known values for ReferenceLinePatternType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ReferenceLinePatternType) Values() []ReferenceLinePatternType {
	return []ReferenceLinePatternType{
		"SOLID",
		"DASHED",
		"DOTTED",
	}
}

type ReferenceLineSeriesType string

// Enum values for ReferenceLineSeriesType
const (
	ReferenceLineSeriesTypeBar  ReferenceLineSeriesType = "BAR"
	ReferenceLineSeriesTypeLine ReferenceLineSeriesType = "LINE"
)

// Values returns all known values for ReferenceLineSeriesType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ReferenceLineSeriesType) Values() []ReferenceLineSeriesType {
	return []ReferenceLineSeriesType{
		"BAR",
		"LINE",
	}
}

type ReferenceLineValueLabelRelativePosition string

// Enum values for ReferenceLineValueLabelRelativePosition
const (
	ReferenceLineValueLabelRelativePositionBeforeCustomLabel ReferenceLineValueLabelRelativePosition = "BEFORE_CUSTOM_LABEL"
	ReferenceLineValueLabelRelativePositionAfterCustomLabel  ReferenceLineValueLabelRelativePosition = "AFTER_CUSTOM_LABEL"
)

// Values returns all known values for ReferenceLineValueLabelRelativePosition.
// Note that this can be expanded in the future, and so it is only as up to date as
// the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ReferenceLineValueLabelRelativePosition) Values() []ReferenceLineValueLabelRelativePosition {
	return []ReferenceLineValueLabelRelativePosition{
		"BEFORE_CUSTOM_LABEL",
		"AFTER_CUSTOM_LABEL",
	}
}

type RefreshFailureAlertStatus string

// Enum values for RefreshFailureAlertStatus
const (
	RefreshFailureAlertStatusEnabled  RefreshFailureAlertStatus = "ENABLED"
	RefreshFailureAlertStatusDisabled RefreshFailureAlertStatus = "DISABLED"
)

// Values returns all known values for RefreshFailureAlertStatus. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RefreshFailureAlertStatus) Values() []RefreshFailureAlertStatus {
	return []RefreshFailureAlertStatus{
		"ENABLED",
		"DISABLED",
	}
}

type RefreshInterval string

// Enum values for RefreshInterval
const (
	RefreshIntervalMinute15 RefreshInterval = "MINUTE15"
	RefreshIntervalMinute30 RefreshInterval = "MINUTE30"
	RefreshIntervalHourly   RefreshInterval = "HOURLY"
	RefreshIntervalDaily    RefreshInterval = "DAILY"
	RefreshIntervalWeekly   RefreshInterval = "WEEKLY"
	RefreshIntervalMonthly  RefreshInterval = "MONTHLY"
)

// Values returns all known values for RefreshInterval. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RefreshInterval) Values() []RefreshInterval {
	return []RefreshInterval{
		"MINUTE15",
		"MINUTE30",
		"HOURLY",
		"DAILY",
		"WEEKLY",
		"MONTHLY",
	}
}

type RelativeDateType string

// Enum values for RelativeDateType
const (
	RelativeDateTypePrevious RelativeDateType = "PREVIOUS"
	RelativeDateTypeThis     RelativeDateType = "THIS"
	RelativeDateTypeLast     RelativeDateType = "LAST"
	RelativeDateTypeNow      RelativeDateType = "NOW"
	RelativeDateTypeNext     RelativeDateType = "NEXT"
)

// Values returns all known values for RelativeDateType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RelativeDateType) Values() []RelativeDateType {
	return []RelativeDateType{
		"PREVIOUS",
		"THIS",
		"LAST",
		"NOW",
		"NEXT",
	}
}

type RelativeFontSize string

// Enum values for RelativeFontSize
const (
	RelativeFontSizeExtraSmall RelativeFontSize = "EXTRA_SMALL"
	RelativeFontSizeSmall      RelativeFontSize = "SMALL"
	RelativeFontSizeMedium     RelativeFontSize = "MEDIUM"
	RelativeFontSizeLarge      RelativeFontSize = "LARGE"
	RelativeFontSizeExtraLarge RelativeFontSize = "EXTRA_LARGE"
)

// Values returns all known values for RelativeFontSize. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RelativeFontSize) Values() []RelativeFontSize {
	return []RelativeFontSize{
		"EXTRA_SMALL",
		"SMALL",
		"MEDIUM",
		"LARGE",
		"EXTRA_LARGE",
	}
}

type ResizeOption string

// Enum values for ResizeOption
const (
	ResizeOptionFixed      ResizeOption = "FIXED"
	ResizeOptionResponsive ResizeOption = "RESPONSIVE"
)

// Values returns all known values for ResizeOption. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ResizeOption) Values() []ResizeOption {
	return []ResizeOption{
		"FIXED",
		"RESPONSIVE",
	}
}

type ResourceStatus string

// Enum values for ResourceStatus
const (
	ResourceStatusCreationInProgress ResourceStatus = "CREATION_IN_PROGRESS"
	ResourceStatusCreationSuccessful ResourceStatus = "CREATION_SUCCESSFUL"
	ResourceStatusCreationFailed     ResourceStatus = "CREATION_FAILED"
	ResourceStatusUpdateInProgress   ResourceStatus = "UPDATE_IN_PROGRESS"
	ResourceStatusUpdateSuccessful   ResourceStatus = "UPDATE_SUCCESSFUL"
	ResourceStatusUpdateFailed       ResourceStatus = "UPDATE_FAILED"
	ResourceStatusDeleted            ResourceStatus = "DELETED"
)

// Values returns all known values for ResourceStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ResourceStatus) Values() []ResourceStatus {
	return []ResourceStatus{
		"CREATION_IN_PROGRESS",
		"CREATION_SUCCESSFUL",
		"CREATION_FAILED",
		"UPDATE_IN_PROGRESS",
		"UPDATE_SUCCESSFUL",
		"UPDATE_FAILED",
		"DELETED",
	}
}

type ReviewedAnswerErrorCode string

// Enum values for ReviewedAnswerErrorCode
const (
	ReviewedAnswerErrorCodeInternalError         ReviewedAnswerErrorCode = "INTERNAL_ERROR"
	ReviewedAnswerErrorCodeMissingAnswer         ReviewedAnswerErrorCode = "MISSING_ANSWER"
	ReviewedAnswerErrorCodeDatasetDoesNotExist   ReviewedAnswerErrorCode = "DATASET_DOES_NOT_EXIST"
	ReviewedAnswerErrorCodeInvalidDatasetArn     ReviewedAnswerErrorCode = "INVALID_DATASET_ARN"
	ReviewedAnswerErrorCodeDuplicatedAnswer      ReviewedAnswerErrorCode = "DUPLICATED_ANSWER"
	ReviewedAnswerErrorCodeInvalidData           ReviewedAnswerErrorCode = "INVALID_DATA"
	ReviewedAnswerErrorCodeMissingRequiredFields ReviewedAnswerErrorCode = "MISSING_REQUIRED_FIELDS"
)

// Values returns all known values for ReviewedAnswerErrorCode. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ReviewedAnswerErrorCode) Values() []ReviewedAnswerErrorCode {
	return []ReviewedAnswerErrorCode{
		"INTERNAL_ERROR",
		"MISSING_ANSWER",
		"DATASET_DOES_NOT_EXIST",
		"INVALID_DATASET_ARN",
		"DUPLICATED_ANSWER",
		"INVALID_DATA",
		"MISSING_REQUIRED_FIELDS",
	}
}

type Role string

// Enum values for Role
const (
	RoleAdmin     Role = "ADMIN"
	RoleAuthor    Role = "AUTHOR"
	RoleReader    Role = "READER"
	RoleAdminPro  Role = "ADMIN_PRO"
	RoleAuthorPro Role = "AUTHOR_PRO"
	RoleReaderPro Role = "READER_PRO"
)

// Values returns all known values for Role. Note that this can be expanded in the
// future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Role) Values() []Role {
	return []Role{
		"ADMIN",
		"AUTHOR",
		"READER",
		"ADMIN_PRO",
		"AUTHOR_PRO",
		"READER_PRO",
	}
}

type RowLevelPermissionFormatVersion string

// Enum values for RowLevelPermissionFormatVersion
const (
	RowLevelPermissionFormatVersionVersion1 RowLevelPermissionFormatVersion = "VERSION_1"
	RowLevelPermissionFormatVersionVersion2 RowLevelPermissionFormatVersion = "VERSION_2"
)

// Values returns all known values for RowLevelPermissionFormatVersion. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RowLevelPermissionFormatVersion) Values() []RowLevelPermissionFormatVersion {
	return []RowLevelPermissionFormatVersion{
		"VERSION_1",
		"VERSION_2",
	}
}

type RowLevelPermissionPolicy string

// Enum values for RowLevelPermissionPolicy
const (
	RowLevelPermissionPolicyGrantAccess RowLevelPermissionPolicy = "GRANT_ACCESS"
	RowLevelPermissionPolicyDenyAccess  RowLevelPermissionPolicy = "DENY_ACCESS"
)

// Values returns all known values for RowLevelPermissionPolicy. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RowLevelPermissionPolicy) Values() []RowLevelPermissionPolicy {
	return []RowLevelPermissionPolicy{
		"GRANT_ACCESS",
		"DENY_ACCESS",
	}
}

type SectionPageBreakStatus string

// Enum values for SectionPageBreakStatus
const (
	SectionPageBreakStatusEnabled  SectionPageBreakStatus = "ENABLED"
	SectionPageBreakStatusDisabled SectionPageBreakStatus = "DISABLED"
)

// Values returns all known values for SectionPageBreakStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SectionPageBreakStatus) Values() []SectionPageBreakStatus {
	return []SectionPageBreakStatus{
		"ENABLED",
		"DISABLED",
	}
}

type SelectAllValueOptions string

// Enum values for SelectAllValueOptions
const (
	SelectAllValueOptionsAllValues SelectAllValueOptions = "ALL_VALUES"
)

// Values returns all known values for SelectAllValueOptions. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SelectAllValueOptions) Values() []SelectAllValueOptions {
	return []SelectAllValueOptions{
		"ALL_VALUES",
	}
}

type SelectedFieldOptions string

// Enum values for SelectedFieldOptions
const (
	SelectedFieldOptionsAllFields SelectedFieldOptions = "ALL_FIELDS"
)

// Values returns all known values for SelectedFieldOptions. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SelectedFieldOptions) Values() []SelectedFieldOptions {
	return []SelectedFieldOptions{
		"ALL_FIELDS",
	}
}

type SelectedTooltipType string

// Enum values for SelectedTooltipType
const (
	SelectedTooltipTypeBasic    SelectedTooltipType = "BASIC"
	SelectedTooltipTypeDetailed SelectedTooltipType = "DETAILED"
)

// Values returns all known values for SelectedTooltipType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SelectedTooltipType) Values() []SelectedTooltipType {
	return []SelectedTooltipType{
		"BASIC",
		"DETAILED",
	}
}

type ServiceType string

// Enum values for ServiceType
const (
	ServiceTypeRedshift  ServiceType = "REDSHIFT"
	ServiceTypeQbusiness ServiceType = "QBUSINESS"
)

// Values returns all known values for ServiceType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ServiceType) Values() []ServiceType {
	return []ServiceType{
		"REDSHIFT",
		"QBUSINESS",
	}
}

type SharingModel string

// Enum values for SharingModel
const (
	SharingModelAccount   SharingModel = "ACCOUNT"
	SharingModelNamespace SharingModel = "NAMESPACE"
)

// Values returns all known values for SharingModel. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SharingModel) Values() []SharingModel {
	return []SharingModel{
		"ACCOUNT",
		"NAMESPACE",
	}
}

type SheetContentType string

// Enum values for SheetContentType
const (
	SheetContentTypePaginated   SheetContentType = "PAGINATED"
	SheetContentTypeInteractive SheetContentType = "INTERACTIVE"
)

// Values returns all known values for SheetContentType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SheetContentType) Values() []SheetContentType {
	return []SheetContentType{
		"PAGINATED",
		"INTERACTIVE",
	}
}

type SheetControlDateTimePickerType string

// Enum values for SheetControlDateTimePickerType
const (
	SheetControlDateTimePickerTypeSingleValued SheetControlDateTimePickerType = "SINGLE_VALUED"
	SheetControlDateTimePickerTypeDateRange    SheetControlDateTimePickerType = "DATE_RANGE"
)

// Values returns all known values for SheetControlDateTimePickerType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SheetControlDateTimePickerType) Values() []SheetControlDateTimePickerType {
	return []SheetControlDateTimePickerType{
		"SINGLE_VALUED",
		"DATE_RANGE",
	}
}

type SheetControlListType string

// Enum values for SheetControlListType
const (
	SheetControlListTypeMultiSelect  SheetControlListType = "MULTI_SELECT"
	SheetControlListTypeSingleSelect SheetControlListType = "SINGLE_SELECT"
)

// Values returns all known values for SheetControlListType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SheetControlListType) Values() []SheetControlListType {
	return []SheetControlListType{
		"MULTI_SELECT",
		"SINGLE_SELECT",
	}
}

type SheetControlSliderType string

// Enum values for SheetControlSliderType
const (
	SheetControlSliderTypeSinglePoint SheetControlSliderType = "SINGLE_POINT"
	SheetControlSliderTypeRange       SheetControlSliderType = "RANGE"
)

// Values returns all known values for SheetControlSliderType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SheetControlSliderType) Values() []SheetControlSliderType {
	return []SheetControlSliderType{
		"SINGLE_POINT",
		"RANGE",
	}
}

type SheetImageScalingType string

// Enum values for SheetImageScalingType
const (
	SheetImageScalingTypeScaleToWidth     SheetImageScalingType = "SCALE_TO_WIDTH"
	SheetImageScalingTypeScaleToHeight    SheetImageScalingType = "SCALE_TO_HEIGHT"
	SheetImageScalingTypeScaleToContainer SheetImageScalingType = "SCALE_TO_CONTAINER"
	SheetImageScalingTypeScaleNone        SheetImageScalingType = "SCALE_NONE"
)

// Values returns all known values for SheetImageScalingType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SheetImageScalingType) Values() []SheetImageScalingType {
	return []SheetImageScalingType{
		"SCALE_TO_WIDTH",
		"SCALE_TO_HEIGHT",
		"SCALE_TO_CONTAINER",
		"SCALE_NONE",
	}
}

type SimpleAttributeAggregationFunction string

// Enum values for SimpleAttributeAggregationFunction
const (
	SimpleAttributeAggregationFunctionUniqueValue SimpleAttributeAggregationFunction = "UNIQUE_VALUE"
)

// Values returns all known values for SimpleAttributeAggregationFunction. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SimpleAttributeAggregationFunction) Values() []SimpleAttributeAggregationFunction {
	return []SimpleAttributeAggregationFunction{
		"UNIQUE_VALUE",
	}
}

type SimpleNumericalAggregationFunction string

// Enum values for SimpleNumericalAggregationFunction
const (
	SimpleNumericalAggregationFunctionSum           SimpleNumericalAggregationFunction = "SUM"
	SimpleNumericalAggregationFunctionAverage       SimpleNumericalAggregationFunction = "AVERAGE"
	SimpleNumericalAggregationFunctionMin           SimpleNumericalAggregationFunction = "MIN"
	SimpleNumericalAggregationFunctionMax           SimpleNumericalAggregationFunction = "MAX"
	SimpleNumericalAggregationFunctionCount         SimpleNumericalAggregationFunction = "COUNT"
	SimpleNumericalAggregationFunctionDistinctCount SimpleNumericalAggregationFunction = "DISTINCT_COUNT"
	SimpleNumericalAggregationFunctionVar           SimpleNumericalAggregationFunction = "VAR"
	SimpleNumericalAggregationFunctionVarp          SimpleNumericalAggregationFunction = "VARP"
	SimpleNumericalAggregationFunctionStdev         SimpleNumericalAggregationFunction = "STDEV"
	SimpleNumericalAggregationFunctionStdevp        SimpleNumericalAggregationFunction = "STDEVP"
	SimpleNumericalAggregationFunctionMedian        SimpleNumericalAggregationFunction = "MEDIAN"
)

// Values returns all known values for SimpleNumericalAggregationFunction. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SimpleNumericalAggregationFunction) Values() []SimpleNumericalAggregationFunction {
	return []SimpleNumericalAggregationFunction{
		"SUM",
		"AVERAGE",
		"MIN",
		"MAX",
		"COUNT",
		"DISTINCT_COUNT",
		"VAR",
		"VARP",
		"STDEV",
		"STDEVP",
		"MEDIAN",
	}
}

type SimpleTotalAggregationFunction string

// Enum values for SimpleTotalAggregationFunction
const (
	SimpleTotalAggregationFunctionDefault SimpleTotalAggregationFunction = "DEFAULT"
	SimpleTotalAggregationFunctionSum     SimpleTotalAggregationFunction = "SUM"
	SimpleTotalAggregationFunctionAverage SimpleTotalAggregationFunction = "AVERAGE"
	SimpleTotalAggregationFunctionMin     SimpleTotalAggregationFunction = "MIN"
	SimpleTotalAggregationFunctionMax     SimpleTotalAggregationFunction = "MAX"
	SimpleTotalAggregationFunctionNone    SimpleTotalAggregationFunction = "NONE"
)

// Values returns all known values for SimpleTotalAggregationFunction. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SimpleTotalAggregationFunction) Values() []SimpleTotalAggregationFunction {
	return []SimpleTotalAggregationFunction{
		"DEFAULT",
		"SUM",
		"AVERAGE",
		"MIN",
		"MAX",
		"NONE",
	}
}

type SingleYAxisOption string

// Enum values for SingleYAxisOption
const (
	SingleYAxisOptionPrimaryYAxis SingleYAxisOption = "PRIMARY_Y_AXIS"
)

// Values returns all known values for SingleYAxisOption. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SingleYAxisOption) Values() []SingleYAxisOption {
	return []SingleYAxisOption{
		"PRIMARY_Y_AXIS",
	}
}

type SmallMultiplesAxisPlacement string

// Enum values for SmallMultiplesAxisPlacement
const (
	SmallMultiplesAxisPlacementOutside SmallMultiplesAxisPlacement = "OUTSIDE"
	SmallMultiplesAxisPlacementInside  SmallMultiplesAxisPlacement = "INSIDE"
)

// Values returns all known values for SmallMultiplesAxisPlacement. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SmallMultiplesAxisPlacement) Values() []SmallMultiplesAxisPlacement {
	return []SmallMultiplesAxisPlacement{
		"OUTSIDE",
		"INSIDE",
	}
}

type SmallMultiplesAxisScale string

// Enum values for SmallMultiplesAxisScale
const (
	SmallMultiplesAxisScaleShared      SmallMultiplesAxisScale = "SHARED"
	SmallMultiplesAxisScaleIndependent SmallMultiplesAxisScale = "INDEPENDENT"
)

// Values returns all known values for SmallMultiplesAxisScale. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SmallMultiplesAxisScale) Values() []SmallMultiplesAxisScale {
	return []SmallMultiplesAxisScale{
		"SHARED",
		"INDEPENDENT",
	}
}

type SnapshotFileFormatType string

// Enum values for SnapshotFileFormatType
const (
	SnapshotFileFormatTypeCsv   SnapshotFileFormatType = "CSV"
	SnapshotFileFormatTypePdf   SnapshotFileFormatType = "PDF"
	SnapshotFileFormatTypeExcel SnapshotFileFormatType = "EXCEL"
)

// Values returns all known values for SnapshotFileFormatType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SnapshotFileFormatType) Values() []SnapshotFileFormatType {
	return []SnapshotFileFormatType{
		"CSV",
		"PDF",
		"EXCEL",
	}
}

type SnapshotFileSheetSelectionScope string

// Enum values for SnapshotFileSheetSelectionScope
const (
	SnapshotFileSheetSelectionScopeAllVisuals      SnapshotFileSheetSelectionScope = "ALL_VISUALS"
	SnapshotFileSheetSelectionScopeSelectedVisuals SnapshotFileSheetSelectionScope = "SELECTED_VISUALS"
)

// Values returns all known values for SnapshotFileSheetSelectionScope. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SnapshotFileSheetSelectionScope) Values() []SnapshotFileSheetSelectionScope {
	return []SnapshotFileSheetSelectionScope{
		"ALL_VISUALS",
		"SELECTED_VISUALS",
	}
}

type SnapshotJobStatus string

// Enum values for SnapshotJobStatus
const (
	SnapshotJobStatusQueued    SnapshotJobStatus = "QUEUED"
	SnapshotJobStatusRunning   SnapshotJobStatus = "RUNNING"
	SnapshotJobStatusCompleted SnapshotJobStatus = "COMPLETED"
	SnapshotJobStatusFailed    SnapshotJobStatus = "FAILED"
)

// Values returns all known values for SnapshotJobStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SnapshotJobStatus) Values() []SnapshotJobStatus {
	return []SnapshotJobStatus{
		"QUEUED",
		"RUNNING",
		"COMPLETED",
		"FAILED",
	}
}

type SortDirection string

// Enum values for SortDirection
const (
	SortDirectionAsc  SortDirection = "ASC"
	SortDirectionDesc SortDirection = "DESC"
)

// Values returns all known values for SortDirection. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SortDirection) Values() []SortDirection {
	return []SortDirection{
		"ASC",
		"DESC",
	}
}

type SpecialValue string

// Enum values for SpecialValue
const (
	SpecialValueEmpty SpecialValue = "EMPTY"
	SpecialValueNull  SpecialValue = "NULL"
	SpecialValueOther SpecialValue = "OTHER"
)

// Values returns all known values for SpecialValue. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SpecialValue) Values() []SpecialValue {
	return []SpecialValue{
		"EMPTY",
		"NULL",
		"OTHER",
	}
}

type StarburstProductType string

// Enum values for StarburstProductType
const (
	StarburstProductTypeGalaxy     StarburstProductType = "GALAXY"
	StarburstProductTypeEnterprise StarburstProductType = "ENTERPRISE"
)

// Values returns all known values for StarburstProductType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (StarburstProductType) Values() []StarburstProductType {
	return []StarburstProductType{
		"GALAXY",
		"ENTERPRISE",
	}
}

type Status string

// Enum values for Status
const (
	StatusEnabled  Status = "ENABLED"
	StatusDisabled Status = "DISABLED"
)

// Values returns all known values for Status. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Status) Values() []Status {
	return []Status{
		"ENABLED",
		"DISABLED",
	}
}

type StyledCellType string

// Enum values for StyledCellType
const (
	StyledCellTypeTotal        StyledCellType = "TOTAL"
	StyledCellTypeMetricHeader StyledCellType = "METRIC_HEADER"
	StyledCellTypeValue        StyledCellType = "VALUE"
)

// Values returns all known values for StyledCellType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (StyledCellType) Values() []StyledCellType {
	return []StyledCellType{
		"TOTAL",
		"METRIC_HEADER",
		"VALUE",
	}
}

type TableBorderStyle string

// Enum values for TableBorderStyle
const (
	TableBorderStyleNone  TableBorderStyle = "NONE"
	TableBorderStyleSolid TableBorderStyle = "SOLID"
)

// Values returns all known values for TableBorderStyle. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TableBorderStyle) Values() []TableBorderStyle {
	return []TableBorderStyle{
		"NONE",
		"SOLID",
	}
}

type TableCellImageScalingConfiguration string

// Enum values for TableCellImageScalingConfiguration
const (
	TableCellImageScalingConfigurationFitToCellHeight TableCellImageScalingConfiguration = "FIT_TO_CELL_HEIGHT"
	TableCellImageScalingConfigurationFitToCellWidth  TableCellImageScalingConfiguration = "FIT_TO_CELL_WIDTH"
	TableCellImageScalingConfigurationDoNotScale      TableCellImageScalingConfiguration = "DO_NOT_SCALE"
)

// Values returns all known values for TableCellImageScalingConfiguration. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TableCellImageScalingConfiguration) Values() []TableCellImageScalingConfiguration {
	return []TableCellImageScalingConfiguration{
		"FIT_TO_CELL_HEIGHT",
		"FIT_TO_CELL_WIDTH",
		"DO_NOT_SCALE",
	}
}

type TableFieldIconSetType string

// Enum values for TableFieldIconSetType
const (
	TableFieldIconSetTypeLink TableFieldIconSetType = "LINK"
)

// Values returns all known values for TableFieldIconSetType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TableFieldIconSetType) Values() []TableFieldIconSetType {
	return []TableFieldIconSetType{
		"LINK",
	}
}

type TableOrientation string

// Enum values for TableOrientation
const (
	TableOrientationVertical   TableOrientation = "VERTICAL"
	TableOrientationHorizontal TableOrientation = "HORIZONTAL"
)

// Values returns all known values for TableOrientation. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TableOrientation) Values() []TableOrientation {
	return []TableOrientation{
		"VERTICAL",
		"HORIZONTAL",
	}
}

type TableTotalsPlacement string

// Enum values for TableTotalsPlacement
const (
	TableTotalsPlacementStart TableTotalsPlacement = "START"
	TableTotalsPlacementEnd   TableTotalsPlacement = "END"
	TableTotalsPlacementAuto  TableTotalsPlacement = "AUTO"
)

// Values returns all known values for TableTotalsPlacement. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TableTotalsPlacement) Values() []TableTotalsPlacement {
	return []TableTotalsPlacement{
		"START",
		"END",
		"AUTO",
	}
}

type TableTotalsScrollStatus string

// Enum values for TableTotalsScrollStatus
const (
	TableTotalsScrollStatusPinned   TableTotalsScrollStatus = "PINNED"
	TableTotalsScrollStatusScrolled TableTotalsScrollStatus = "SCROLLED"
)

// Values returns all known values for TableTotalsScrollStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TableTotalsScrollStatus) Values() []TableTotalsScrollStatus {
	return []TableTotalsScrollStatus{
		"PINNED",
		"SCROLLED",
	}
}

type TargetVisualOptions string

// Enum values for TargetVisualOptions
const (
	TargetVisualOptionsAllVisuals TargetVisualOptions = "ALL_VISUALS"
)

// Values returns all known values for TargetVisualOptions. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TargetVisualOptions) Values() []TargetVisualOptions {
	return []TargetVisualOptions{
		"ALL_VISUALS",
	}
}

type TemplateErrorType string

// Enum values for TemplateErrorType
const (
	TemplateErrorTypeSourceNotFound  TemplateErrorType = "SOURCE_NOT_FOUND"
	TemplateErrorTypeDataSetNotFound TemplateErrorType = "DATA_SET_NOT_FOUND"
	TemplateErrorTypeInternalFailure TemplateErrorType = "INTERNAL_FAILURE"
	TemplateErrorTypeAccessDenied    TemplateErrorType = "ACCESS_DENIED"
)

// Values returns all known values for TemplateErrorType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TemplateErrorType) Values() []TemplateErrorType {
	return []TemplateErrorType{
		"SOURCE_NOT_FOUND",
		"DATA_SET_NOT_FOUND",
		"INTERNAL_FAILURE",
		"ACCESS_DENIED",
	}
}

type TextQualifier string

// Enum values for TextQualifier
const (
	TextQualifierDoubleQuote TextQualifier = "DOUBLE_QUOTE"
	TextQualifierSingleQuote TextQualifier = "SINGLE_QUOTE"
)

// Values returns all known values for TextQualifier. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TextQualifier) Values() []TextQualifier {
	return []TextQualifier{
		"DOUBLE_QUOTE",
		"SINGLE_QUOTE",
	}
}

type TextWrap string

// Enum values for TextWrap
const (
	TextWrapNone TextWrap = "NONE"
	TextWrapWrap TextWrap = "WRAP"
)

// Values returns all known values for TextWrap. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TextWrap) Values() []TextWrap {
	return []TextWrap{
		"NONE",
		"WRAP",
	}
}

type ThemeErrorType string

// Enum values for ThemeErrorType
const (
	ThemeErrorTypeInternalFailure ThemeErrorType = "INTERNAL_FAILURE"
)

// Values returns all known values for ThemeErrorType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ThemeErrorType) Values() []ThemeErrorType {
	return []ThemeErrorType{
		"INTERNAL_FAILURE",
	}
}

type ThemeType string

// Enum values for ThemeType
const (
	ThemeTypeQuicksight ThemeType = "QUICKSIGHT"
	ThemeTypeCustom     ThemeType = "CUSTOM"
	ThemeTypeAll        ThemeType = "ALL"
)

// Values returns all known values for ThemeType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ThemeType) Values() []ThemeType {
	return []ThemeType{
		"QUICKSIGHT",
		"CUSTOM",
		"ALL",
	}
}

type TimeGranularity string

// Enum values for TimeGranularity
const (
	TimeGranularityYear        TimeGranularity = "YEAR"
	TimeGranularityQuarter     TimeGranularity = "QUARTER"
	TimeGranularityMonth       TimeGranularity = "MONTH"
	TimeGranularityWeek        TimeGranularity = "WEEK"
	TimeGranularityDay         TimeGranularity = "DAY"
	TimeGranularityHour        TimeGranularity = "HOUR"
	TimeGranularityMinute      TimeGranularity = "MINUTE"
	TimeGranularitySecond      TimeGranularity = "SECOND"
	TimeGranularityMillisecond TimeGranularity = "MILLISECOND"
)

// Values returns all known values for TimeGranularity. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TimeGranularity) Values() []TimeGranularity {
	return []TimeGranularity{
		"YEAR",
		"QUARTER",
		"MONTH",
		"WEEK",
		"DAY",
		"HOUR",
		"MINUTE",
		"SECOND",
		"MILLISECOND",
	}
}

type TooltipTarget string

// Enum values for TooltipTarget
const (
	TooltipTargetBoth TooltipTarget = "BOTH"
	TooltipTargetBar  TooltipTarget = "BAR"
	TooltipTargetLine TooltipTarget = "LINE"
)

// Values returns all known values for TooltipTarget. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TooltipTarget) Values() []TooltipTarget {
	return []TooltipTarget{
		"BOTH",
		"BAR",
		"LINE",
	}
}

type TooltipTitleType string

// Enum values for TooltipTitleType
const (
	TooltipTitleTypeNone         TooltipTitleType = "NONE"
	TooltipTitleTypePrimaryValue TooltipTitleType = "PRIMARY_VALUE"
)

// Values returns all known values for TooltipTitleType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TooltipTitleType) Values() []TooltipTitleType {
	return []TooltipTitleType{
		"NONE",
		"PRIMARY_VALUE",
	}
}

type TopBottomComputationType string

// Enum values for TopBottomComputationType
const (
	TopBottomComputationTypeTop    TopBottomComputationType = "TOP"
	TopBottomComputationTypeBottom TopBottomComputationType = "BOTTOM"
)

// Values returns all known values for TopBottomComputationType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TopBottomComputationType) Values() []TopBottomComputationType {
	return []TopBottomComputationType{
		"TOP",
		"BOTTOM",
	}
}

type TopBottomSortOrder string

// Enum values for TopBottomSortOrder
const (
	TopBottomSortOrderPercentDifference  TopBottomSortOrder = "PERCENT_DIFFERENCE"
	TopBottomSortOrderAbsoluteDifference TopBottomSortOrder = "ABSOLUTE_DIFFERENCE"
)

// Values returns all known values for TopBottomSortOrder. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TopBottomSortOrder) Values() []TopBottomSortOrder {
	return []TopBottomSortOrder{
		"PERCENT_DIFFERENCE",
		"ABSOLUTE_DIFFERENCE",
	}
}

type TopicFilterAttribute string

// Enum values for TopicFilterAttribute
const (
	TopicFilterAttributeQuicksightUser                TopicFilterAttribute = "QUICKSIGHT_USER"
	TopicFilterAttributeQuicksightViewerOrOwner       TopicFilterAttribute = "QUICKSIGHT_VIEWER_OR_OWNER"
	TopicFilterAttributeDirectQuicksightViewerOrOwner TopicFilterAttribute = "DIRECT_QUICKSIGHT_VIEWER_OR_OWNER"
	TopicFilterAttributeQuicksightOwner               TopicFilterAttribute = "QUICKSIGHT_OWNER"
	TopicFilterAttributeDirectQuicksightOwner         TopicFilterAttribute = "DIRECT_QUICKSIGHT_OWNER"
	TopicFilterAttributeDirectQuicksightSoleOwner     TopicFilterAttribute = "DIRECT_QUICKSIGHT_SOLE_OWNER"
	TopicFilterAttributeTopicName                     TopicFilterAttribute = "TOPIC_NAME"
)

// Values returns all known values for TopicFilterAttribute. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TopicFilterAttribute) Values() []TopicFilterAttribute {
	return []TopicFilterAttribute{
		"QUICKSIGHT_USER",
		"QUICKSIGHT_VIEWER_OR_OWNER",
		"DIRECT_QUICKSIGHT_VIEWER_OR_OWNER",
		"QUICKSIGHT_OWNER",
		"DIRECT_QUICKSIGHT_OWNER",
		"DIRECT_QUICKSIGHT_SOLE_OWNER",
		"TOPIC_NAME",
	}
}

type TopicFilterOperator string

// Enum values for TopicFilterOperator
const (
	TopicFilterOperatorStringEquals TopicFilterOperator = "StringEquals"
	TopicFilterOperatorStringLike   TopicFilterOperator = "StringLike"
)

// Values returns all known values for TopicFilterOperator. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TopicFilterOperator) Values() []TopicFilterOperator {
	return []TopicFilterOperator{
		"StringEquals",
		"StringLike",
	}
}

type TopicIRFilterFunction string

// Enum values for TopicIRFilterFunction
const (
	TopicIRFilterFunctionContains       TopicIRFilterFunction = "CONTAINS"
	TopicIRFilterFunctionExact          TopicIRFilterFunction = "EXACT"
	TopicIRFilterFunctionStartsWith     TopicIRFilterFunction = "STARTS_WITH"
	TopicIRFilterFunctionEndsWith       TopicIRFilterFunction = "ENDS_WITH"
	TopicIRFilterFunctionContainsString TopicIRFilterFunction = "CONTAINS_STRING"
	TopicIRFilterFunctionPrevious       TopicIRFilterFunction = "PREVIOUS"
	TopicIRFilterFunctionThis           TopicIRFilterFunction = "THIS"
	TopicIRFilterFunctionLast           TopicIRFilterFunction = "LAST"
	TopicIRFilterFunctionNext           TopicIRFilterFunction = "NEXT"
	TopicIRFilterFunctionNow            TopicIRFilterFunction = "NOW"
)

// Values returns all known values for TopicIRFilterFunction. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TopicIRFilterFunction) Values() []TopicIRFilterFunction {
	return []TopicIRFilterFunction{
		"CONTAINS",
		"EXACT",
		"STARTS_WITH",
		"ENDS_WITH",
		"CONTAINS_STRING",
		"PREVIOUS",
		"THIS",
		"LAST",
		"NEXT",
		"NOW",
	}
}

type TopicIRFilterType string

// Enum values for TopicIRFilterType
const (
	TopicIRFilterTypeCategoryFilter        TopicIRFilterType = "CATEGORY_FILTER"
	TopicIRFilterTypeNumericEqualityFilter TopicIRFilterType = "NUMERIC_EQUALITY_FILTER"
	TopicIRFilterTypeNumericRangeFilter    TopicIRFilterType = "NUMERIC_RANGE_FILTER"
	TopicIRFilterTypeDateRangeFilter       TopicIRFilterType = "DATE_RANGE_FILTER"
	TopicIRFilterTypeRelativeDateFilter    TopicIRFilterType = "RELATIVE_DATE_FILTER"
	TopicIRFilterTypeTopBottomFilter       TopicIRFilterType = "TOP_BOTTOM_FILTER"
	TopicIRFilterTypeEquals                TopicIRFilterType = "EQUALS"
	TopicIRFilterTypeRankLimitFilter       TopicIRFilterType = "RANK_LIMIT_FILTER"
	TopicIRFilterTypeAcceptAllFilter       TopicIRFilterType = "ACCEPT_ALL_FILTER"
)

// Values returns all known values for TopicIRFilterType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TopicIRFilterType) Values() []TopicIRFilterType {
	return []TopicIRFilterType{
		"CATEGORY_FILTER",
		"NUMERIC_EQUALITY_FILTER",
		"NUMERIC_RANGE_FILTER",
		"DATE_RANGE_FILTER",
		"RELATIVE_DATE_FILTER",
		"TOP_BOTTOM_FILTER",
		"EQUALS",
		"RANK_LIMIT_FILTER",
		"ACCEPT_ALL_FILTER",
	}
}

type TopicNumericSeparatorSymbol string

// Enum values for TopicNumericSeparatorSymbol
const (
	TopicNumericSeparatorSymbolComma TopicNumericSeparatorSymbol = "COMMA"
	TopicNumericSeparatorSymbolDot   TopicNumericSeparatorSymbol = "DOT"
)

// Values returns all known values for TopicNumericSeparatorSymbol. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TopicNumericSeparatorSymbol) Values() []TopicNumericSeparatorSymbol {
	return []TopicNumericSeparatorSymbol{
		"COMMA",
		"DOT",
	}
}

type TopicRefreshStatus string

// Enum values for TopicRefreshStatus
const (
	TopicRefreshStatusInitialized TopicRefreshStatus = "INITIALIZED"
	TopicRefreshStatusRunning     TopicRefreshStatus = "RUNNING"
	TopicRefreshStatusFailed      TopicRefreshStatus = "FAILED"
	TopicRefreshStatusCompleted   TopicRefreshStatus = "COMPLETED"
	TopicRefreshStatusCancelled   TopicRefreshStatus = "CANCELLED"
)

// Values returns all known values for TopicRefreshStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TopicRefreshStatus) Values() []TopicRefreshStatus {
	return []TopicRefreshStatus{
		"INITIALIZED",
		"RUNNING",
		"FAILED",
		"COMPLETED",
		"CANCELLED",
	}
}

type TopicRelativeDateFilterFunction string

// Enum values for TopicRelativeDateFilterFunction
const (
	TopicRelativeDateFilterFunctionPrevious TopicRelativeDateFilterFunction = "PREVIOUS"
	TopicRelativeDateFilterFunctionThis     TopicRelativeDateFilterFunction = "THIS"
	TopicRelativeDateFilterFunctionLast     TopicRelativeDateFilterFunction = "LAST"
	TopicRelativeDateFilterFunctionNext     TopicRelativeDateFilterFunction = "NEXT"
	TopicRelativeDateFilterFunctionNow      TopicRelativeDateFilterFunction = "NOW"
)

// Values returns all known values for TopicRelativeDateFilterFunction. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TopicRelativeDateFilterFunction) Values() []TopicRelativeDateFilterFunction {
	return []TopicRelativeDateFilterFunction{
		"PREVIOUS",
		"THIS",
		"LAST",
		"NEXT",
		"NOW",
	}
}

type TopicScheduleType string

// Enum values for TopicScheduleType
const (
	TopicScheduleTypeHourly  TopicScheduleType = "HOURLY"
	TopicScheduleTypeDaily   TopicScheduleType = "DAILY"
	TopicScheduleTypeWeekly  TopicScheduleType = "WEEKLY"
	TopicScheduleTypeMonthly TopicScheduleType = "MONTHLY"
)

// Values returns all known values for TopicScheduleType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TopicScheduleType) Values() []TopicScheduleType {
	return []TopicScheduleType{
		"HOURLY",
		"DAILY",
		"WEEKLY",
		"MONTHLY",
	}
}

type TopicSortDirection string

// Enum values for TopicSortDirection
const (
	TopicSortDirectionAscending  TopicSortDirection = "ASCENDING"
	TopicSortDirectionDescending TopicSortDirection = "DESCENDING"
)

// Values returns all known values for TopicSortDirection. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TopicSortDirection) Values() []TopicSortDirection {
	return []TopicSortDirection{
		"ASCENDING",
		"DESCENDING",
	}
}

type TopicTimeGranularity string

// Enum values for TopicTimeGranularity
const (
	TopicTimeGranularitySecond  TopicTimeGranularity = "SECOND"
	TopicTimeGranularityMinute  TopicTimeGranularity = "MINUTE"
	TopicTimeGranularityHour    TopicTimeGranularity = "HOUR"
	TopicTimeGranularityDay     TopicTimeGranularity = "DAY"
	TopicTimeGranularityWeek    TopicTimeGranularity = "WEEK"
	TopicTimeGranularityMonth   TopicTimeGranularity = "MONTH"
	TopicTimeGranularityQuarter TopicTimeGranularity = "QUARTER"
	TopicTimeGranularityYear    TopicTimeGranularity = "YEAR"
)

// Values returns all known values for TopicTimeGranularity. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TopicTimeGranularity) Values() []TopicTimeGranularity {
	return []TopicTimeGranularity{
		"SECOND",
		"MINUTE",
		"HOUR",
		"DAY",
		"WEEK",
		"MONTH",
		"QUARTER",
		"YEAR",
	}
}

type TopicUserExperienceVersion string

// Enum values for TopicUserExperienceVersion
const (
	TopicUserExperienceVersionLegacy              TopicUserExperienceVersion = "LEGACY"
	TopicUserExperienceVersionNewReaderExperience TopicUserExperienceVersion = "NEW_READER_EXPERIENCE"
)

// Values returns all known values for TopicUserExperienceVersion. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TopicUserExperienceVersion) Values() []TopicUserExperienceVersion {
	return []TopicUserExperienceVersion{
		"LEGACY",
		"NEW_READER_EXPERIENCE",
	}
}

type TransposedColumnType string

// Enum values for TransposedColumnType
const (
	TransposedColumnTypeRowHeaderColumn TransposedColumnType = "ROW_HEADER_COLUMN"
	TransposedColumnTypeValueColumn     TransposedColumnType = "VALUE_COLUMN"
)

// Values returns all known values for TransposedColumnType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TransposedColumnType) Values() []TransposedColumnType {
	return []TransposedColumnType{
		"ROW_HEADER_COLUMN",
		"VALUE_COLUMN",
	}
}

type UndefinedSpecifiedValueType string

// Enum values for UndefinedSpecifiedValueType
const (
	UndefinedSpecifiedValueTypeLeast UndefinedSpecifiedValueType = "LEAST"
	UndefinedSpecifiedValueTypeMost  UndefinedSpecifiedValueType = "MOST"
)

// Values returns all known values for UndefinedSpecifiedValueType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (UndefinedSpecifiedValueType) Values() []UndefinedSpecifiedValueType {
	return []UndefinedSpecifiedValueType{
		"LEAST",
		"MOST",
	}
}

type URLTargetConfiguration string

// Enum values for URLTargetConfiguration
const (
	URLTargetConfigurationNewTab    URLTargetConfiguration = "NEW_TAB"
	URLTargetConfigurationNewWindow URLTargetConfiguration = "NEW_WINDOW"
	URLTargetConfigurationSameTab   URLTargetConfiguration = "SAME_TAB"
)

// Values returns all known values for URLTargetConfiguration. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (URLTargetConfiguration) Values() []URLTargetConfiguration {
	return []URLTargetConfiguration{
		"NEW_TAB",
		"NEW_WINDOW",
		"SAME_TAB",
	}
}

type UserRole string

// Enum values for UserRole
const (
	UserRoleAdmin            UserRole = "ADMIN"
	UserRoleAuthor           UserRole = "AUTHOR"
	UserRoleReader           UserRole = "READER"
	UserRoleRestrictedAuthor UserRole = "RESTRICTED_AUTHOR"
	UserRoleRestrictedReader UserRole = "RESTRICTED_READER"
	UserRoleAdminPro         UserRole = "ADMIN_PRO"
	UserRoleAuthorPro        UserRole = "AUTHOR_PRO"
	UserRoleReaderPro        UserRole = "READER_PRO"
)

// Values returns all known values for UserRole. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (UserRole) Values() []UserRole {
	return []UserRole{
		"ADMIN",
		"AUTHOR",
		"READER",
		"RESTRICTED_AUTHOR",
		"RESTRICTED_READER",
		"ADMIN_PRO",
		"AUTHOR_PRO",
		"READER_PRO",
	}
}

type ValidationStrategyMode string

// Enum values for ValidationStrategyMode
const (
	ValidationStrategyModeStrict  ValidationStrategyMode = "STRICT"
	ValidationStrategyModeLenient ValidationStrategyMode = "LENIENT"
)

// Values returns all known values for ValidationStrategyMode. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ValidationStrategyMode) Values() []ValidationStrategyMode {
	return []ValidationStrategyMode{
		"STRICT",
		"LENIENT",
	}
}

type ValueWhenUnsetOption string

// Enum values for ValueWhenUnsetOption
const (
	ValueWhenUnsetOptionRecommendedValue ValueWhenUnsetOption = "RECOMMENDED_VALUE"
	ValueWhenUnsetOptionNull             ValueWhenUnsetOption = "NULL"
)

// Values returns all known values for ValueWhenUnsetOption. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ValueWhenUnsetOption) Values() []ValueWhenUnsetOption {
	return []ValueWhenUnsetOption{
		"RECOMMENDED_VALUE",
		"NULL",
	}
}

type VerticalTextAlignment string

// Enum values for VerticalTextAlignment
const (
	VerticalTextAlignmentTop    VerticalTextAlignment = "TOP"
	VerticalTextAlignmentMiddle VerticalTextAlignment = "MIDDLE"
	VerticalTextAlignmentBottom VerticalTextAlignment = "BOTTOM"
	VerticalTextAlignmentAuto   VerticalTextAlignment = "AUTO"
)

// Values returns all known values for VerticalTextAlignment. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (VerticalTextAlignment) Values() []VerticalTextAlignment {
	return []VerticalTextAlignment{
		"TOP",
		"MIDDLE",
		"BOTTOM",
		"AUTO",
	}
}

type Visibility string

// Enum values for Visibility
const (
	VisibilityHidden  Visibility = "HIDDEN"
	VisibilityVisible Visibility = "VISIBLE"
)

// Values returns all known values for Visibility. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Visibility) Values() []Visibility {
	return []Visibility{
		"HIDDEN",
		"VISIBLE",
	}
}

type VisualCustomActionTrigger string

// Enum values for VisualCustomActionTrigger
const (
	VisualCustomActionTriggerDataPointClick VisualCustomActionTrigger = "DATA_POINT_CLICK"
	VisualCustomActionTriggerDataPointMenu  VisualCustomActionTrigger = "DATA_POINT_MENU"
)

// Values returns all known values for VisualCustomActionTrigger. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (VisualCustomActionTrigger) Values() []VisualCustomActionTrigger {
	return []VisualCustomActionTrigger{
		"DATA_POINT_CLICK",
		"DATA_POINT_MENU",
	}
}

type VisualHighlightTrigger string

// Enum values for VisualHighlightTrigger
const (
	VisualHighlightTriggerDataPointClick VisualHighlightTrigger = "DATA_POINT_CLICK"
	VisualHighlightTriggerDataPointHover VisualHighlightTrigger = "DATA_POINT_HOVER"
	VisualHighlightTriggerNone           VisualHighlightTrigger = "NONE"
)

// Values returns all known values for VisualHighlightTrigger. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (VisualHighlightTrigger) Values() []VisualHighlightTrigger {
	return []VisualHighlightTrigger{
		"DATA_POINT_CLICK",
		"DATA_POINT_HOVER",
		"NONE",
	}
}

type VisualRole string

// Enum values for VisualRole
const (
	VisualRolePrimary       VisualRole = "PRIMARY"
	VisualRoleComplimentary VisualRole = "COMPLIMENTARY"
	VisualRoleMultiIntent   VisualRole = "MULTI_INTENT"
	VisualRoleFallback      VisualRole = "FALLBACK"
	VisualRoleFragment      VisualRole = "FRAGMENT"
)

// Values returns all known values for VisualRole. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (VisualRole) Values() []VisualRole {
	return []VisualRole{
		"PRIMARY",
		"COMPLIMENTARY",
		"MULTI_INTENT",
		"FALLBACK",
		"FRAGMENT",
	}
}

type VPCConnectionAvailabilityStatus string

// Enum values for VPCConnectionAvailabilityStatus
const (
	VPCConnectionAvailabilityStatusAvailable          VPCConnectionAvailabilityStatus = "AVAILABLE"
	VPCConnectionAvailabilityStatusUnavailable        VPCConnectionAvailabilityStatus = "UNAVAILABLE"
	VPCConnectionAvailabilityStatusPartiallyAvailable VPCConnectionAvailabilityStatus = "PARTIALLY_AVAILABLE"
)

// Values returns all known values for VPCConnectionAvailabilityStatus. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (VPCConnectionAvailabilityStatus) Values() []VPCConnectionAvailabilityStatus {
	return []VPCConnectionAvailabilityStatus{
		"AVAILABLE",
		"UNAVAILABLE",
		"PARTIALLY_AVAILABLE",
	}
}

type VPCConnectionResourceStatus string

// Enum values for VPCConnectionResourceStatus
const (
	VPCConnectionResourceStatusCreationInProgress VPCConnectionResourceStatus = "CREATION_IN_PROGRESS"
	VPCConnectionResourceStatusCreationSuccessful VPCConnectionResourceStatus = "CREATION_SUCCESSFUL"
	VPCConnectionResourceStatusCreationFailed     VPCConnectionResourceStatus = "CREATION_FAILED"
	VPCConnectionResourceStatusUpdateInProgress   VPCConnectionResourceStatus = "UPDATE_IN_PROGRESS"
	VPCConnectionResourceStatusUpdateSuccessful   VPCConnectionResourceStatus = "UPDATE_SUCCESSFUL"
	VPCConnectionResourceStatusUpdateFailed       VPCConnectionResourceStatus = "UPDATE_FAILED"
	VPCConnectionResourceStatusDeletionInProgress VPCConnectionResourceStatus = "DELETION_IN_PROGRESS"
	VPCConnectionResourceStatusDeletionFailed     VPCConnectionResourceStatus = "DELETION_FAILED"
	VPCConnectionResourceStatusDeleted            VPCConnectionResourceStatus = "DELETED"
)

// Values returns all known values for VPCConnectionResourceStatus. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (VPCConnectionResourceStatus) Values() []VPCConnectionResourceStatus {
	return []VPCConnectionResourceStatus{
		"CREATION_IN_PROGRESS",
		"CREATION_SUCCESSFUL",
		"CREATION_FAILED",
		"UPDATE_IN_PROGRESS",
		"UPDATE_SUCCESSFUL",
		"UPDATE_FAILED",
		"DELETION_IN_PROGRESS",
		"DELETION_FAILED",
		"DELETED",
	}
}

type WidgetStatus string

// Enum values for WidgetStatus
const (
	WidgetStatusEnabled  WidgetStatus = "ENABLED"
	WidgetStatusDisabled WidgetStatus = "DISABLED"
)

// Values returns all known values for WidgetStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (WidgetStatus) Values() []WidgetStatus {
	return []WidgetStatus{
		"ENABLED",
		"DISABLED",
	}
}

type WordCloudCloudLayout string

// Enum values for WordCloudCloudLayout
const (
	WordCloudCloudLayoutFluid  WordCloudCloudLayout = "FLUID"
	WordCloudCloudLayoutNormal WordCloudCloudLayout = "NORMAL"
)

// Values returns all known values for WordCloudCloudLayout. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (WordCloudCloudLayout) Values() []WordCloudCloudLayout {
	return []WordCloudCloudLayout{
		"FLUID",
		"NORMAL",
	}
}

type WordCloudWordCasing string

// Enum values for WordCloudWordCasing
const (
	WordCloudWordCasingLowerCase    WordCloudWordCasing = "LOWER_CASE"
	WordCloudWordCasingExistingCase WordCloudWordCasing = "EXISTING_CASE"
)

// Values returns all known values for WordCloudWordCasing. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (WordCloudWordCasing) Values() []WordCloudWordCasing {
	return []WordCloudWordCasing{
		"LOWER_CASE",
		"EXISTING_CASE",
	}
}

type WordCloudWordOrientation string

// Enum values for WordCloudWordOrientation
const (
	WordCloudWordOrientationHorizontal            WordCloudWordOrientation = "HORIZONTAL"
	WordCloudWordOrientationHorizontalAndVertical WordCloudWordOrientation = "HORIZONTAL_AND_VERTICAL"
)

// Values returns all known values for WordCloudWordOrientation. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (WordCloudWordOrientation) Values() []WordCloudWordOrientation {
	return []WordCloudWordOrientation{
		"HORIZONTAL",
		"HORIZONTAL_AND_VERTICAL",
	}
}

type WordCloudWordPadding string

// Enum values for WordCloudWordPadding
const (
	WordCloudWordPaddingNone   WordCloudWordPadding = "NONE"
	WordCloudWordPaddingSmall  WordCloudWordPadding = "SMALL"
	WordCloudWordPaddingMedium WordCloudWordPadding = "MEDIUM"
	WordCloudWordPaddingLarge  WordCloudWordPadding = "LARGE"
)

// Values returns all known values for WordCloudWordPadding. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (WordCloudWordPadding) Values() []WordCloudWordPadding {
	return []WordCloudWordPadding{
		"NONE",
		"SMALL",
		"MEDIUM",
		"LARGE",
	}
}

type WordCloudWordScaling string

// Enum values for WordCloudWordScaling
const (
	WordCloudWordScalingEmphasize WordCloudWordScaling = "EMPHASIZE"
	WordCloudWordScalingNormal    WordCloudWordScaling = "NORMAL"
)

// Values returns all known values for WordCloudWordScaling. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (WordCloudWordScaling) Values() []WordCloudWordScaling {
	return []WordCloudWordScaling{
		"EMPHASIZE",
		"NORMAL",
	}
}
