// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type HealthEventImpactType string

// Enum values for HealthEventImpactType
const (
	HealthEventImpactTypeAvailability      HealthEventImpactType = "AVAILABILITY"
	HealthEventImpactTypePerformance       HealthEventImpactType = "PERFORMANCE"
	HealthEventImpactTypeLocalAvailability HealthEventImpactType = "LOCAL_AVAILABILITY"
	HealthEventImpactTypeLocalPerformance  HealthEventImpactType = "LOCAL_PERFORMANCE"
)

// Values returns all known values for HealthEventImpactType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HealthEventImpactType) Values() []HealthEventImpactType {
	return []HealthEventImpactType{
		"AVAILABILITY",
		"PERFORMANCE",
		"LOCAL_AVAILABILITY",
		"LOCAL_PERFORMANCE",
	}
}

type HealthEventStatus string

// Enum values for HealthEventStatus
const (
	HealthEventStatusActive   HealthEventStatus = "ACTIVE"
	HealthEventStatusResolved HealthEventStatus = "RESOLVED"
)

// Values returns all known values for HealthEventStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HealthEventStatus) Values() []HealthEventStatus {
	return []HealthEventStatus{
		"ACTIVE",
		"RESOLVED",
	}
}

type InternetEventStatus string

// Enum values for InternetEventStatus
const (
	InternetEventStatusActive   InternetEventStatus = "ACTIVE"
	InternetEventStatusResolved InternetEventStatus = "RESOLVED"
)

// Values returns all known values for InternetEventStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InternetEventStatus) Values() []InternetEventStatus {
	return []InternetEventStatus{
		"ACTIVE",
		"RESOLVED",
	}
}

type InternetEventType string

// Enum values for InternetEventType
const (
	InternetEventTypeAvailability InternetEventType = "AVAILABILITY"
	InternetEventTypePerformance  InternetEventType = "PERFORMANCE"
)

// Values returns all known values for InternetEventType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InternetEventType) Values() []InternetEventType {
	return []InternetEventType{
		"AVAILABILITY",
		"PERFORMANCE",
	}
}

type LocalHealthEventsConfigStatus string

// Enum values for LocalHealthEventsConfigStatus
const (
	LocalHealthEventsConfigStatusEnabled  LocalHealthEventsConfigStatus = "ENABLED"
	LocalHealthEventsConfigStatusDisabled LocalHealthEventsConfigStatus = "DISABLED"
)

// Values returns all known values for LocalHealthEventsConfigStatus. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LocalHealthEventsConfigStatus) Values() []LocalHealthEventsConfigStatus {
	return []LocalHealthEventsConfigStatus{
		"ENABLED",
		"DISABLED",
	}
}

type LogDeliveryStatus string

// Enum values for LogDeliveryStatus
const (
	LogDeliveryStatusEnabled  LogDeliveryStatus = "ENABLED"
	LogDeliveryStatusDisabled LogDeliveryStatus = "DISABLED"
)

// Values returns all known values for LogDeliveryStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LogDeliveryStatus) Values() []LogDeliveryStatus {
	return []LogDeliveryStatus{
		"ENABLED",
		"DISABLED",
	}
}

type MonitorConfigState string

// Enum values for MonitorConfigState
const (
	MonitorConfigStatePending  MonitorConfigState = "PENDING"
	MonitorConfigStateActive   MonitorConfigState = "ACTIVE"
	MonitorConfigStateInactive MonitorConfigState = "INACTIVE"
	MonitorConfigStateError    MonitorConfigState = "ERROR"
)

// Values returns all known values for MonitorConfigState. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MonitorConfigState) Values() []MonitorConfigState {
	return []MonitorConfigState{
		"PENDING",
		"ACTIVE",
		"INACTIVE",
		"ERROR",
	}
}

type MonitorProcessingStatusCode string

// Enum values for MonitorProcessingStatusCode
const (
	MonitorProcessingStatusCodeOk                    MonitorProcessingStatusCode = "OK"
	MonitorProcessingStatusCodeInactive              MonitorProcessingStatusCode = "INACTIVE"
	MonitorProcessingStatusCodeCollectingData        MonitorProcessingStatusCode = "COLLECTING_DATA"
	MonitorProcessingStatusCodeInsufficientData      MonitorProcessingStatusCode = "INSUFFICIENT_DATA"
	MonitorProcessingStatusCodeFaultService          MonitorProcessingStatusCode = "FAULT_SERVICE"
	MonitorProcessingStatusCodeFaultAccessCloudwatch MonitorProcessingStatusCode = "FAULT_ACCESS_CLOUDWATCH"
)

// Values returns all known values for MonitorProcessingStatusCode. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MonitorProcessingStatusCode) Values() []MonitorProcessingStatusCode {
	return []MonitorProcessingStatusCode{
		"OK",
		"INACTIVE",
		"COLLECTING_DATA",
		"INSUFFICIENT_DATA",
		"FAULT_SERVICE",
		"FAULT_ACCESS_CLOUDWATCH",
	}
}

type Operator string

// Enum values for Operator
const (
	OperatorEquals    Operator = "EQUALS"
	OperatorNotEquals Operator = "NOT_EQUALS"
)

// Values returns all known values for Operator. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Operator) Values() []Operator {
	return []Operator{
		"EQUALS",
		"NOT_EQUALS",
	}
}

type QueryStatus string

// Enum values for QueryStatus
const (
	QueryStatusQueued    QueryStatus = "QUEUED"
	QueryStatusRunning   QueryStatus = "RUNNING"
	QueryStatusSucceeded QueryStatus = "SUCCEEDED"
	QueryStatusFailed    QueryStatus = "FAILED"
	QueryStatusCanceled  QueryStatus = "CANCELED"
)

// Values returns all known values for QueryStatus. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (QueryStatus) Values() []QueryStatus {
	return []QueryStatus{
		"QUEUED",
		"RUNNING",
		"SUCCEEDED",
		"FAILED",
		"CANCELED",
	}
}

type QueryType string

// Enum values for QueryType
const (
	QueryTypeMeasurements                     QueryType = "MEASUREMENTS"
	QueryTypeTopLocations                     QueryType = "TOP_LOCATIONS"
	QueryTypeTopLocationDetails               QueryType = "TOP_LOCATION_DETAILS"
	QueryTypeOverallTrafficSuggestions        QueryType = "OVERALL_TRAFFIC_SUGGESTIONS"
	QueryTypeOverallTrafficSuggestionsDetails QueryType = "OVERALL_TRAFFIC_SUGGESTIONS_DETAILS"
	QueryTypeRoutingSuggestions               QueryType = "ROUTING_SUGGESTIONS"
)

// Values returns all known values for QueryType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (QueryType) Values() []QueryType {
	return []QueryType{
		"MEASUREMENTS",
		"TOP_LOCATIONS",
		"TOP_LOCATION_DETAILS",
		"OVERALL_TRAFFIC_SUGGESTIONS",
		"OVERALL_TRAFFIC_SUGGESTIONS_DETAILS",
		"ROUTING_SUGGESTIONS",
	}
}

type TriangulationEventType string

// Enum values for TriangulationEventType
const (
	TriangulationEventTypeAws      TriangulationEventType = "AWS"
	TriangulationEventTypeInternet TriangulationEventType = "Internet"
)

// Values returns all known values for TriangulationEventType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TriangulationEventType) Values() []TriangulationEventType {
	return []TriangulationEventType{
		"AWS",
		"Internet",
	}
}
