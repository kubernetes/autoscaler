// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type ActionGroup string

// Enum values for ActionGroup
const (
	// Permission group type for Agent APIs - ConfigureAgent, PostAgentProfile
	ActionGroupAgentPermissions ActionGroup = "agentPermissions"
)

// Values returns all known values for ActionGroup. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ActionGroup) Values() []ActionGroup {
	return []ActionGroup{
		"agentPermissions",
	}
}

type AgentParameterField string

// Enum values for AgentParameterField
const (
	// Sampling interval in milliseconds used to sample profiles.
	AgentParameterFieldSamplingIntervalInMilliseconds AgentParameterField = "SamplingIntervalInMilliseconds"
	// Reporting interval in milliseconds used to report profiles.
	AgentParameterFieldReportingIntervalInMilliseconds AgentParameterField = "ReportingIntervalInMilliseconds"
	// Minimum time in milliseconds between sending reports.
	AgentParameterFieldMinimumTimeForReportingInMilliseconds AgentParameterField = "MinimumTimeForReportingInMilliseconds"
	// Percentage of memory to be used by CodeGuru profiler. Minimum of 30MB is
	// required for the agent.
	AgentParameterFieldMemoryUsageLimitPercent AgentParameterField = "MemoryUsageLimitPercent"
	// Maximum stack depth to be captured by the CodeGuru Profiler.
	AgentParameterFieldMaxStackDepth AgentParameterField = "MaxStackDepth"
)

// Values returns all known values for AgentParameterField. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AgentParameterField) Values() []AgentParameterField {
	return []AgentParameterField{
		"SamplingIntervalInMilliseconds",
		"ReportingIntervalInMilliseconds",
		"MinimumTimeForReportingInMilliseconds",
		"MemoryUsageLimitPercent",
		"MaxStackDepth",
	}
}

type AggregationPeriod string

// Enum values for AggregationPeriod
const (
	// Period of five minutes.
	AggregationPeriodPt5m AggregationPeriod = "PT5M"
	// Period of one hour.
	AggregationPeriodPt1h AggregationPeriod = "PT1H"
	// Period of one day.
	AggregationPeriodP1d AggregationPeriod = "P1D"
)

// Values returns all known values for AggregationPeriod. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AggregationPeriod) Values() []AggregationPeriod {
	return []AggregationPeriod{
		"PT5M",
		"PT1H",
		"P1D",
	}
}

type ComputePlatform string

// Enum values for ComputePlatform
const (
	// Compute platform meant to used for all usecases (like EC2, Fargate, physical
	// servers etc.) but AWS Lambda.
	ComputePlatformDefault ComputePlatform = "Default"
	// Compute platform meant to used for AWS Lambda.
	ComputePlatformAwslambda ComputePlatform = "AWSLambda"
)

// Values returns all known values for ComputePlatform. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ComputePlatform) Values() []ComputePlatform {
	return []ComputePlatform{
		"Default",
		"AWSLambda",
	}
}

type EventPublisher string

// Enum values for EventPublisher
const (
	// Notifications for Anomaly Detection
	EventPublisherAnomalyDetection EventPublisher = "AnomalyDetection"
)

// Values returns all known values for EventPublisher. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EventPublisher) Values() []EventPublisher {
	return []EventPublisher{
		"AnomalyDetection",
	}
}

type FeedbackType string

// Enum values for FeedbackType
const (
	// Profiler recommendation flagged as useful.
	FeedbackTypePositive FeedbackType = "Positive"
	// Profiler recommendation flagged as not useful.
	FeedbackTypeNegative FeedbackType = "Negative"
)

// Values returns all known values for FeedbackType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FeedbackType) Values() []FeedbackType {
	return []FeedbackType{
		"Positive",
		"Negative",
	}
}

type MetadataField string

// Enum values for MetadataField
const (
	// Compute platform on which agent is running.
	MetadataFieldComputePlatform MetadataField = "ComputePlatform"
	// Unique identifier for the agent instance.
	MetadataFieldAgentId MetadataField = "AgentId"
	// AWS requestId of the Lambda invocation.
	MetadataFieldAwsRequestId MetadataField = "AwsRequestId"
	// Execution environment on which Lambda function is running.
	MetadataFieldExecutionEnvironment MetadataField = "ExecutionEnvironment"
	// Function ARN that's used to invoke the Lambda function.
	MetadataFieldLambdaFunctionArn MetadataField = "LambdaFunctionArn"
	// Memory allocated for the Lambda function.
	MetadataFieldLambdaMemoryLimitInMb MetadataField = "LambdaMemoryLimitInMB"
	// Time in milliseconds left before the execution times out.
	MetadataFieldLambdaRemainingTimeInMilliseconds MetadataField = "LambdaRemainingTimeInMilliseconds"
	// Time in milliseconds between two invocations of the Lambda function.
	MetadataFieldLambdaTimeGapBetweenInvokesInMilliseconds MetadataField = "LambdaTimeGapBetweenInvokesInMilliseconds"
	// Time in milliseconds for the previous Lambda invocation.
	MetadataFieldLambdaPreviousExecutionTimeInMilliseconds MetadataField = "LambdaPreviousExecutionTimeInMilliseconds"
)

// Values returns all known values for MetadataField. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MetadataField) Values() []MetadataField {
	return []MetadataField{
		"ComputePlatform",
		"AgentId",
		"AwsRequestId",
		"ExecutionEnvironment",
		"LambdaFunctionArn",
		"LambdaMemoryLimitInMB",
		"LambdaRemainingTimeInMilliseconds",
		"LambdaTimeGapBetweenInvokesInMilliseconds",
		"LambdaPreviousExecutionTimeInMilliseconds",
	}
}

type MetricType string

// Enum values for MetricType
const (
	// Metric value aggregated for all instances of a frame name in a profile relative
	// to the root frame.
	MetricTypeAggregatedRelativeTotalTime MetricType = "AggregatedRelativeTotalTime"
)

// Values returns all known values for MetricType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MetricType) Values() []MetricType {
	return []MetricType{
		"AggregatedRelativeTotalTime",
	}
}

type OrderBy string

// Enum values for OrderBy
const (
	// Order by timestamp in descending order.
	OrderByTimestampDescending OrderBy = "TimestampDescending"
	// Order by timestamp in ascending order.
	OrderByTimestampAscending OrderBy = "TimestampAscending"
)

// Values returns all known values for OrderBy. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (OrderBy) Values() []OrderBy {
	return []OrderBy{
		"TimestampDescending",
		"TimestampAscending",
	}
}
