// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type ActionGroupSignature string

// Enum values for ActionGroupSignature
const (
	ActionGroupSignatureAmazonUserinput       ActionGroupSignature = "AMAZON.UserInput"
	ActionGroupSignatureAmazonCodeinterpreter ActionGroupSignature = "AMAZON.CodeInterpreter"
	ActionGroupSignatureAnthropicComputer     ActionGroupSignature = "ANTHROPIC.Computer"
	ActionGroupSignatureAnthropicBash         ActionGroupSignature = "ANTHROPIC.Bash"
	ActionGroupSignatureAnthropicTexteditor   ActionGroupSignature = "ANTHROPIC.TextEditor"
)

// Values returns all known values for ActionGroupSignature. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ActionGroupSignature) Values() []ActionGroupSignature {
	return []ActionGroupSignature{
		"AMAZON.UserInput",
		"AMAZON.CodeInterpreter",
		"ANTHROPIC.Computer",
		"ANTHROPIC.Bash",
		"ANTHROPIC.TextEditor",
	}
}

type ActionGroupState string

// Enum values for ActionGroupState
const (
	ActionGroupStateEnabled  ActionGroupState = "ENABLED"
	ActionGroupStateDisabled ActionGroupState = "DISABLED"
)

// Values returns all known values for ActionGroupState. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ActionGroupState) Values() []ActionGroupState {
	return []ActionGroupState{
		"ENABLED",
		"DISABLED",
	}
}

type AgentAliasStatus string

// Enum values for AgentAliasStatus
const (
	AgentAliasStatusCreating    AgentAliasStatus = "CREATING"
	AgentAliasStatusPrepared    AgentAliasStatus = "PREPARED"
	AgentAliasStatusFailed      AgentAliasStatus = "FAILED"
	AgentAliasStatusUpdating    AgentAliasStatus = "UPDATING"
	AgentAliasStatusDeleting    AgentAliasStatus = "DELETING"
	AgentAliasStatusDissociated AgentAliasStatus = "DISSOCIATED"
)

// Values returns all known values for AgentAliasStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AgentAliasStatus) Values() []AgentAliasStatus {
	return []AgentAliasStatus{
		"CREATING",
		"PREPARED",
		"FAILED",
		"UPDATING",
		"DELETING",
		"DISSOCIATED",
	}
}

type AgentCollaboration string

// Enum values for AgentCollaboration
const (
	AgentCollaborationSupervisor       AgentCollaboration = "SUPERVISOR"
	AgentCollaborationSupervisorRouter AgentCollaboration = "SUPERVISOR_ROUTER"
	AgentCollaborationDisabled         AgentCollaboration = "DISABLED"
)

// Values returns all known values for AgentCollaboration. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AgentCollaboration) Values() []AgentCollaboration {
	return []AgentCollaboration{
		"SUPERVISOR",
		"SUPERVISOR_ROUTER",
		"DISABLED",
	}
}

type AgentStatus string

// Enum values for AgentStatus
const (
	AgentStatusCreating    AgentStatus = "CREATING"
	AgentStatusPreparing   AgentStatus = "PREPARING"
	AgentStatusPrepared    AgentStatus = "PREPARED"
	AgentStatusNotPrepared AgentStatus = "NOT_PREPARED"
	AgentStatusDeleting    AgentStatus = "DELETING"
	AgentStatusFailed      AgentStatus = "FAILED"
	AgentStatusVersioning  AgentStatus = "VERSIONING"
	AgentStatusUpdating    AgentStatus = "UPDATING"
)

// Values returns all known values for AgentStatus. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AgentStatus) Values() []AgentStatus {
	return []AgentStatus{
		"CREATING",
		"PREPARING",
		"PREPARED",
		"NOT_PREPARED",
		"DELETING",
		"FAILED",
		"VERSIONING",
		"UPDATING",
	}
}

type AliasInvocationState string

// Enum values for AliasInvocationState
const (
	// Agent is actively processing requests
	AliasInvocationStateAcceptInvocations AliasInvocationState = "ACCEPT_INVOCATIONS"
	// Agent is paused and will not accept new requests
	AliasInvocationStateRejectInvocations AliasInvocationState = "REJECT_INVOCATIONS"
)

// Values returns all known values for AliasInvocationState. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AliasInvocationState) Values() []AliasInvocationState {
	return []AliasInvocationState{
		"ACCEPT_INVOCATIONS",
		"REJECT_INVOCATIONS",
	}
}

type CachePointType string

// Enum values for CachePointType
const (
	CachePointTypeDefault CachePointType = "default"
)

// Values returns all known values for CachePointType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CachePointType) Values() []CachePointType {
	return []CachePointType{
		"default",
	}
}

type ChunkingStrategy string

// Enum values for ChunkingStrategy
const (
	ChunkingStrategyFixedSize    ChunkingStrategy = "FIXED_SIZE"
	ChunkingStrategyNone         ChunkingStrategy = "NONE"
	ChunkingStrategyHierarchical ChunkingStrategy = "HIERARCHICAL"
	ChunkingStrategySemantic     ChunkingStrategy = "SEMANTIC"
)

// Values returns all known values for ChunkingStrategy. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ChunkingStrategy) Values() []ChunkingStrategy {
	return []ChunkingStrategy{
		"FIXED_SIZE",
		"NONE",
		"HIERARCHICAL",
		"SEMANTIC",
	}
}

type ConcurrencyType string

// Enum values for ConcurrencyType
const (
	ConcurrencyTypeAutomatic ConcurrencyType = "Automatic"
	ConcurrencyTypeManual    ConcurrencyType = "Manual"
)

// Values returns all known values for ConcurrencyType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ConcurrencyType) Values() []ConcurrencyType {
	return []ConcurrencyType{
		"Automatic",
		"Manual",
	}
}

type ConfluenceAuthType string

// Enum values for ConfluenceAuthType
const (
	ConfluenceAuthTypeBasic                   ConfluenceAuthType = "BASIC"
	ConfluenceAuthTypeOauth2ClientCredentials ConfluenceAuthType = "OAUTH2_CLIENT_CREDENTIALS"
)

// Values returns all known values for ConfluenceAuthType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ConfluenceAuthType) Values() []ConfluenceAuthType {
	return []ConfluenceAuthType{
		"BASIC",
		"OAUTH2_CLIENT_CREDENTIALS",
	}
}

type ConfluenceHostType string

// Enum values for ConfluenceHostType
const (
	ConfluenceHostTypeSaas ConfluenceHostType = "SAAS"
)

// Values returns all known values for ConfluenceHostType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ConfluenceHostType) Values() []ConfluenceHostType {
	return []ConfluenceHostType{
		"SAAS",
	}
}

type ContentDataSourceType string

// Enum values for ContentDataSourceType
const (
	ContentDataSourceTypeCustom ContentDataSourceType = "CUSTOM"
	ContentDataSourceTypeS3     ContentDataSourceType = "S3"
)

// Values returns all known values for ContentDataSourceType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ContentDataSourceType) Values() []ContentDataSourceType {
	return []ContentDataSourceType{
		"CUSTOM",
		"S3",
	}
}

type ContextEnrichmentType string

// Enum values for ContextEnrichmentType
const (
	ContextEnrichmentTypeBedrockFoundationModel ContextEnrichmentType = "BEDROCK_FOUNDATION_MODEL"
)

// Values returns all known values for ContextEnrichmentType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ContextEnrichmentType) Values() []ContextEnrichmentType {
	return []ContextEnrichmentType{
		"BEDROCK_FOUNDATION_MODEL",
	}
}

type ConversationRole string

// Enum values for ConversationRole
const (
	ConversationRoleUser      ConversationRole = "user"
	ConversationRoleAssistant ConversationRole = "assistant"
)

// Values returns all known values for ConversationRole. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ConversationRole) Values() []ConversationRole {
	return []ConversationRole{
		"user",
		"assistant",
	}
}

type CrawlFilterConfigurationType string

// Enum values for CrawlFilterConfigurationType
const (
	CrawlFilterConfigurationTypePattern CrawlFilterConfigurationType = "PATTERN"
)

// Values returns all known values for CrawlFilterConfigurationType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CrawlFilterConfigurationType) Values() []CrawlFilterConfigurationType {
	return []CrawlFilterConfigurationType{
		"PATTERN",
	}
}

type CreationMode string

// Enum values for CreationMode
const (
	CreationModeDefault    CreationMode = "DEFAULT"
	CreationModeOverridden CreationMode = "OVERRIDDEN"
)

// Values returns all known values for CreationMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CreationMode) Values() []CreationMode {
	return []CreationMode{
		"DEFAULT",
		"OVERRIDDEN",
	}
}

type CustomControlMethod string

// Enum values for CustomControlMethod
const (
	CustomControlMethodReturnControl CustomControlMethod = "RETURN_CONTROL"
)

// Values returns all known values for CustomControlMethod. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CustomControlMethod) Values() []CustomControlMethod {
	return []CustomControlMethod{
		"RETURN_CONTROL",
	}
}

type CustomSourceType string

// Enum values for CustomSourceType
const (
	CustomSourceTypeInLine     CustomSourceType = "IN_LINE"
	CustomSourceTypeS3Location CustomSourceType = "S3_LOCATION"
)

// Values returns all known values for CustomSourceType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CustomSourceType) Values() []CustomSourceType {
	return []CustomSourceType{
		"IN_LINE",
		"S3_LOCATION",
	}
}

type DataDeletionPolicy string

// Enum values for DataDeletionPolicy
const (
	DataDeletionPolicyRetain DataDeletionPolicy = "RETAIN"
	DataDeletionPolicyDelete DataDeletionPolicy = "DELETE"
)

// Values returns all known values for DataDeletionPolicy. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DataDeletionPolicy) Values() []DataDeletionPolicy {
	return []DataDeletionPolicy{
		"RETAIN",
		"DELETE",
	}
}

type DataSourceStatus string

// Enum values for DataSourceStatus
const (
	DataSourceStatusAvailable          DataSourceStatus = "AVAILABLE"
	DataSourceStatusDeleting           DataSourceStatus = "DELETING"
	DataSourceStatusDeleteUnsuccessful DataSourceStatus = "DELETE_UNSUCCESSFUL"
)

// Values returns all known values for DataSourceStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DataSourceStatus) Values() []DataSourceStatus {
	return []DataSourceStatus{
		"AVAILABLE",
		"DELETING",
		"DELETE_UNSUCCESSFUL",
	}
}

type DataSourceType string

// Enum values for DataSourceType
const (
	DataSourceTypeS3               DataSourceType = "S3"
	DataSourceTypeWeb              DataSourceType = "WEB"
	DataSourceTypeConfluence       DataSourceType = "CONFLUENCE"
	DataSourceTypeSalesforce       DataSourceType = "SALESFORCE"
	DataSourceTypeSharepoint       DataSourceType = "SHAREPOINT"
	DataSourceTypeCustom           DataSourceType = "CUSTOM"
	DataSourceTypeRedshiftMetadata DataSourceType = "REDSHIFT_METADATA"
)

// Values returns all known values for DataSourceType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DataSourceType) Values() []DataSourceType {
	return []DataSourceType{
		"S3",
		"WEB",
		"CONFLUENCE",
		"SALESFORCE",
		"SHAREPOINT",
		"CUSTOM",
		"REDSHIFT_METADATA",
	}
}

type DocumentStatus string

// Enum values for DocumentStatus
const (
	DocumentStatusIndexed                  DocumentStatus = "INDEXED"
	DocumentStatusPartiallyIndexed         DocumentStatus = "PARTIALLY_INDEXED"
	DocumentStatusPending                  DocumentStatus = "PENDING"
	DocumentStatusFailed                   DocumentStatus = "FAILED"
	DocumentStatusMetadataPartiallyIndexed DocumentStatus = "METADATA_PARTIALLY_INDEXED"
	DocumentStatusMetadataUpdateFailed     DocumentStatus = "METADATA_UPDATE_FAILED"
	DocumentStatusIgnored                  DocumentStatus = "IGNORED"
	DocumentStatusNotFound                 DocumentStatus = "NOT_FOUND"
	DocumentStatusStarting                 DocumentStatus = "STARTING"
	DocumentStatusInProgress               DocumentStatus = "IN_PROGRESS"
	DocumentStatusDeleting                 DocumentStatus = "DELETING"
	DocumentStatusDeleteInProgress         DocumentStatus = "DELETE_IN_PROGRESS"
)

// Values returns all known values for DocumentStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DocumentStatus) Values() []DocumentStatus {
	return []DocumentStatus{
		"INDEXED",
		"PARTIALLY_INDEXED",
		"PENDING",
		"FAILED",
		"METADATA_PARTIALLY_INDEXED",
		"METADATA_UPDATE_FAILED",
		"IGNORED",
		"NOT_FOUND",
		"STARTING",
		"IN_PROGRESS",
		"DELETING",
		"DELETE_IN_PROGRESS",
	}
}

type EmbeddingDataType string

// Enum values for EmbeddingDataType
const (
	EmbeddingDataTypeFloat32 EmbeddingDataType = "FLOAT32"
	EmbeddingDataTypeBinary  EmbeddingDataType = "BINARY"
)

// Values returns all known values for EmbeddingDataType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EmbeddingDataType) Values() []EmbeddingDataType {
	return []EmbeddingDataType{
		"FLOAT32",
		"BINARY",
	}
}

type EnrichmentStrategyMethod string

// Enum values for EnrichmentStrategyMethod
const (
	EnrichmentStrategyMethodChunkEntityExtraction EnrichmentStrategyMethod = "CHUNK_ENTITY_EXTRACTION"
)

// Values returns all known values for EnrichmentStrategyMethod. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EnrichmentStrategyMethod) Values() []EnrichmentStrategyMethod {
	return []EnrichmentStrategyMethod{
		"CHUNK_ENTITY_EXTRACTION",
	}
}

type FlowConnectionType string

// Enum values for FlowConnectionType
const (
	FlowConnectionTypeData        FlowConnectionType = "Data"
	FlowConnectionTypeConditional FlowConnectionType = "Conditional"
)

// Values returns all known values for FlowConnectionType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FlowConnectionType) Values() []FlowConnectionType {
	return []FlowConnectionType{
		"Data",
		"Conditional",
	}
}

type FlowNodeInputCategory string

// Enum values for FlowNodeInputCategory
const (
	FlowNodeInputCategoryLoopCondition          FlowNodeInputCategory = "LoopCondition"
	FlowNodeInputCategoryReturnValueToLoopStart FlowNodeInputCategory = "ReturnValueToLoopStart"
	FlowNodeInputCategoryExitLoop               FlowNodeInputCategory = "ExitLoop"
)

// Values returns all known values for FlowNodeInputCategory. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FlowNodeInputCategory) Values() []FlowNodeInputCategory {
	return []FlowNodeInputCategory{
		"LoopCondition",
		"ReturnValueToLoopStart",
		"ExitLoop",
	}
}

type FlowNodeIODataType string

// Enum values for FlowNodeIODataType
const (
	FlowNodeIODataTypeString  FlowNodeIODataType = "String"
	FlowNodeIODataTypeNumber  FlowNodeIODataType = "Number"
	FlowNodeIODataTypeBoolean FlowNodeIODataType = "Boolean"
	FlowNodeIODataTypeObject  FlowNodeIODataType = "Object"
	FlowNodeIODataTypeArray   FlowNodeIODataType = "Array"
)

// Values returns all known values for FlowNodeIODataType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FlowNodeIODataType) Values() []FlowNodeIODataType {
	return []FlowNodeIODataType{
		"String",
		"Number",
		"Boolean",
		"Object",
		"Array",
	}
}

type FlowNodeType string

// Enum values for FlowNodeType
const (
	FlowNodeTypeInput          FlowNodeType = "Input"
	FlowNodeTypeOutput         FlowNodeType = "Output"
	FlowNodeTypeKnowledgeBase  FlowNodeType = "KnowledgeBase"
	FlowNodeTypeCondition      FlowNodeType = "Condition"
	FlowNodeTypeLex            FlowNodeType = "Lex"
	FlowNodeTypePrompt         FlowNodeType = "Prompt"
	FlowNodeTypeLambdaFunction FlowNodeType = "LambdaFunction"
	FlowNodeTypeStorage        FlowNodeType = "Storage"
	FlowNodeTypeAgent          FlowNodeType = "Agent"
	FlowNodeTypeRetrieval      FlowNodeType = "Retrieval"
	FlowNodeTypeIterator       FlowNodeType = "Iterator"
	FlowNodeTypeCollector      FlowNodeType = "Collector"
	FlowNodeTypeInlineCode     FlowNodeType = "InlineCode"
	FlowNodeTypeLoop           FlowNodeType = "Loop"
	FlowNodeTypeLoopInput      FlowNodeType = "LoopInput"
	FlowNodeTypeLoopController FlowNodeType = "LoopController"
)

// Values returns all known values for FlowNodeType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FlowNodeType) Values() []FlowNodeType {
	return []FlowNodeType{
		"Input",
		"Output",
		"KnowledgeBase",
		"Condition",
		"Lex",
		"Prompt",
		"LambdaFunction",
		"Storage",
		"Agent",
		"Retrieval",
		"Iterator",
		"Collector",
		"InlineCode",
		"Loop",
		"LoopInput",
		"LoopController",
	}
}

type FlowStatus string

// Enum values for FlowStatus
const (
	FlowStatusFailed      FlowStatus = "Failed"
	FlowStatusPrepared    FlowStatus = "Prepared"
	FlowStatusPreparing   FlowStatus = "Preparing"
	FlowStatusNotPrepared FlowStatus = "NotPrepared"
)

// Values returns all known values for FlowStatus. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FlowStatus) Values() []FlowStatus {
	return []FlowStatus{
		"Failed",
		"Prepared",
		"Preparing",
		"NotPrepared",
	}
}

type FlowValidationSeverity string

// Enum values for FlowValidationSeverity
const (
	FlowValidationSeverityWarning FlowValidationSeverity = "Warning"
	FlowValidationSeverityError   FlowValidationSeverity = "Error"
)

// Values returns all known values for FlowValidationSeverity. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FlowValidationSeverity) Values() []FlowValidationSeverity {
	return []FlowValidationSeverity{
		"Warning",
		"Error",
	}
}

type FlowValidationType string

// Enum values for FlowValidationType
const (
	FlowValidationTypeCyclicConnection                FlowValidationType = "CyclicConnection"
	FlowValidationTypeDuplicateConnections            FlowValidationType = "DuplicateConnections"
	FlowValidationTypeDuplicateConditionExpression    FlowValidationType = "DuplicateConditionExpression"
	FlowValidationTypeUnreachableNode                 FlowValidationType = "UnreachableNode"
	FlowValidationTypeUnknownConnectionSource         FlowValidationType = "UnknownConnectionSource"
	FlowValidationTypeUnknownConnectionSourceOutput   FlowValidationType = "UnknownConnectionSourceOutput"
	FlowValidationTypeUnknownConnectionTarget         FlowValidationType = "UnknownConnectionTarget"
	FlowValidationTypeUnknownConnectionTargetInput    FlowValidationType = "UnknownConnectionTargetInput"
	FlowValidationTypeUnknownConnectionCondition      FlowValidationType = "UnknownConnectionCondition"
	FlowValidationTypeMalformedConditionExpression    FlowValidationType = "MalformedConditionExpression"
	FlowValidationTypeMalformedNodeInputExpression    FlowValidationType = "MalformedNodeInputExpression"
	FlowValidationTypeMismatchedNodeInputType         FlowValidationType = "MismatchedNodeInputType"
	FlowValidationTypeMismatchedNodeOutputType        FlowValidationType = "MismatchedNodeOutputType"
	FlowValidationTypeIncompatibleConnectionDataType  FlowValidationType = "IncompatibleConnectionDataType"
	FlowValidationTypeMissingConnectionConfiguration  FlowValidationType = "MissingConnectionConfiguration"
	FlowValidationTypeMissingDefaultCondition         FlowValidationType = "MissingDefaultCondition"
	FlowValidationTypeMissingEndingNodes              FlowValidationType = "MissingEndingNodes"
	FlowValidationTypeMissingNodeConfiguration        FlowValidationType = "MissingNodeConfiguration"
	FlowValidationTypeMissingNodeInput                FlowValidationType = "MissingNodeInput"
	FlowValidationTypeMissingNodeOutput               FlowValidationType = "MissingNodeOutput"
	FlowValidationTypeMissingStartingNodes            FlowValidationType = "MissingStartingNodes"
	FlowValidationTypeMultipleNodeInputConnections    FlowValidationType = "MultipleNodeInputConnections"
	FlowValidationTypeUnfulfilledNodeInput            FlowValidationType = "UnfulfilledNodeInput"
	FlowValidationTypeUnsatisfiedConnectionConditions FlowValidationType = "UnsatisfiedConnectionConditions"
	FlowValidationTypeUnspecified                     FlowValidationType = "Unspecified"
	FlowValidationTypeUnknownNodeInput                FlowValidationType = "UnknownNodeInput"
	FlowValidationTypeUnknownNodeOutput               FlowValidationType = "UnknownNodeOutput"
	FlowValidationTypeMissingLoopInputNode            FlowValidationType = "MissingLoopInputNode"
	FlowValidationTypeMissingLoopControllerNode       FlowValidationType = "MissingLoopControllerNode"
	FlowValidationTypeMultipleLoopInputNodes          FlowValidationType = "MultipleLoopInputNodes"
	FlowValidationTypeMultipleLoopControllerNodes     FlowValidationType = "MultipleLoopControllerNodes"
	FlowValidationTypeLoopIncompatibleNodeType        FlowValidationType = "LoopIncompatibleNodeType"
	FlowValidationTypeInvalidLoopBoundary             FlowValidationType = "InvalidLoopBoundary"
)

// Values returns all known values for FlowValidationType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FlowValidationType) Values() []FlowValidationType {
	return []FlowValidationType{
		"CyclicConnection",
		"DuplicateConnections",
		"DuplicateConditionExpression",
		"UnreachableNode",
		"UnknownConnectionSource",
		"UnknownConnectionSourceOutput",
		"UnknownConnectionTarget",
		"UnknownConnectionTargetInput",
		"UnknownConnectionCondition",
		"MalformedConditionExpression",
		"MalformedNodeInputExpression",
		"MismatchedNodeInputType",
		"MismatchedNodeOutputType",
		"IncompatibleConnectionDataType",
		"MissingConnectionConfiguration",
		"MissingDefaultCondition",
		"MissingEndingNodes",
		"MissingNodeConfiguration",
		"MissingNodeInput",
		"MissingNodeOutput",
		"MissingStartingNodes",
		"MultipleNodeInputConnections",
		"UnfulfilledNodeInput",
		"UnsatisfiedConnectionConditions",
		"Unspecified",
		"UnknownNodeInput",
		"UnknownNodeOutput",
		"MissingLoopInputNode",
		"MissingLoopControllerNode",
		"MultipleLoopInputNodes",
		"MultipleLoopControllerNodes",
		"LoopIncompatibleNodeType",
		"InvalidLoopBoundary",
	}
}

type IncludeExclude string

// Enum values for IncludeExclude
const (
	IncludeExcludeInclude IncludeExclude = "INCLUDE"
	IncludeExcludeExclude IncludeExclude = "EXCLUDE"
)

// Values returns all known values for IncludeExclude. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IncludeExclude) Values() []IncludeExclude {
	return []IncludeExclude{
		"INCLUDE",
		"EXCLUDE",
	}
}

type IncompatibleLoopNodeType string

// Enum values for IncompatibleLoopNodeType
const (
	IncompatibleLoopNodeTypeInput     IncompatibleLoopNodeType = "Input"
	IncompatibleLoopNodeTypeCondition IncompatibleLoopNodeType = "Condition"
	IncompatibleLoopNodeTypeIterator  IncompatibleLoopNodeType = "Iterator"
	IncompatibleLoopNodeTypeCollector IncompatibleLoopNodeType = "Collector"
)

// Values returns all known values for IncompatibleLoopNodeType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IncompatibleLoopNodeType) Values() []IncompatibleLoopNodeType {
	return []IncompatibleLoopNodeType{
		"Input",
		"Condition",
		"Iterator",
		"Collector",
	}
}

type IngestionJobFilterAttribute string

// Enum values for IngestionJobFilterAttribute
const (
	IngestionJobFilterAttributeStatus IngestionJobFilterAttribute = "STATUS"
)

// Values returns all known values for IngestionJobFilterAttribute. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IngestionJobFilterAttribute) Values() []IngestionJobFilterAttribute {
	return []IngestionJobFilterAttribute{
		"STATUS",
	}
}

type IngestionJobFilterOperator string

// Enum values for IngestionJobFilterOperator
const (
	IngestionJobFilterOperatorEq IngestionJobFilterOperator = "EQ"
)

// Values returns all known values for IngestionJobFilterOperator. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IngestionJobFilterOperator) Values() []IngestionJobFilterOperator {
	return []IngestionJobFilterOperator{
		"EQ",
	}
}

type IngestionJobSortByAttribute string

// Enum values for IngestionJobSortByAttribute
const (
	IngestionJobSortByAttributeStatus    IngestionJobSortByAttribute = "STATUS"
	IngestionJobSortByAttributeStartedAt IngestionJobSortByAttribute = "STARTED_AT"
)

// Values returns all known values for IngestionJobSortByAttribute. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IngestionJobSortByAttribute) Values() []IngestionJobSortByAttribute {
	return []IngestionJobSortByAttribute{
		"STATUS",
		"STARTED_AT",
	}
}

type IngestionJobStatus string

// Enum values for IngestionJobStatus
const (
	IngestionJobStatusStarting   IngestionJobStatus = "STARTING"
	IngestionJobStatusInProgress IngestionJobStatus = "IN_PROGRESS"
	IngestionJobStatusComplete   IngestionJobStatus = "COMPLETE"
	IngestionJobStatusFailed     IngestionJobStatus = "FAILED"
	IngestionJobStatusStopping   IngestionJobStatus = "STOPPING"
	IngestionJobStatusStopped    IngestionJobStatus = "STOPPED"
)

// Values returns all known values for IngestionJobStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IngestionJobStatus) Values() []IngestionJobStatus {
	return []IngestionJobStatus{
		"STARTING",
		"IN_PROGRESS",
		"COMPLETE",
		"FAILED",
		"STOPPING",
		"STOPPED",
	}
}

type InlineContentType string

// Enum values for InlineContentType
const (
	InlineContentTypeByte InlineContentType = "BYTE"
	InlineContentTypeText InlineContentType = "TEXT"
)

// Values returns all known values for InlineContentType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InlineContentType) Values() []InlineContentType {
	return []InlineContentType{
		"BYTE",
		"TEXT",
	}
}

type KnowledgeBaseState string

// Enum values for KnowledgeBaseState
const (
	KnowledgeBaseStateEnabled  KnowledgeBaseState = "ENABLED"
	KnowledgeBaseStateDisabled KnowledgeBaseState = "DISABLED"
)

// Values returns all known values for KnowledgeBaseState. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (KnowledgeBaseState) Values() []KnowledgeBaseState {
	return []KnowledgeBaseState{
		"ENABLED",
		"DISABLED",
	}
}

type KnowledgeBaseStatus string

// Enum values for KnowledgeBaseStatus
const (
	KnowledgeBaseStatusCreating           KnowledgeBaseStatus = "CREATING"
	KnowledgeBaseStatusActive             KnowledgeBaseStatus = "ACTIVE"
	KnowledgeBaseStatusDeleting           KnowledgeBaseStatus = "DELETING"
	KnowledgeBaseStatusUpdating           KnowledgeBaseStatus = "UPDATING"
	KnowledgeBaseStatusFailed             KnowledgeBaseStatus = "FAILED"
	KnowledgeBaseStatusDeleteUnsuccessful KnowledgeBaseStatus = "DELETE_UNSUCCESSFUL"
)

// Values returns all known values for KnowledgeBaseStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (KnowledgeBaseStatus) Values() []KnowledgeBaseStatus {
	return []KnowledgeBaseStatus{
		"CREATING",
		"ACTIVE",
		"DELETING",
		"UPDATING",
		"FAILED",
		"DELETE_UNSUCCESSFUL",
	}
}

type KnowledgeBaseStorageType string

// Enum values for KnowledgeBaseStorageType
const (
	KnowledgeBaseStorageTypeOpensearchServerless     KnowledgeBaseStorageType = "OPENSEARCH_SERVERLESS"
	KnowledgeBaseStorageTypePinecone                 KnowledgeBaseStorageType = "PINECONE"
	KnowledgeBaseStorageTypeRedisEnterpriseCloud     KnowledgeBaseStorageType = "REDIS_ENTERPRISE_CLOUD"
	KnowledgeBaseStorageTypeRds                      KnowledgeBaseStorageType = "RDS"
	KnowledgeBaseStorageTypeMongoDbAtlas             KnowledgeBaseStorageType = "MONGO_DB_ATLAS"
	KnowledgeBaseStorageTypeNeptuneAnalytics         KnowledgeBaseStorageType = "NEPTUNE_ANALYTICS"
	KnowledgeBaseStorageTypeOpensearchManagedCluster KnowledgeBaseStorageType = "OPENSEARCH_MANAGED_CLUSTER"
)

// Values returns all known values for KnowledgeBaseStorageType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (KnowledgeBaseStorageType) Values() []KnowledgeBaseStorageType {
	return []KnowledgeBaseStorageType{
		"OPENSEARCH_SERVERLESS",
		"PINECONE",
		"REDIS_ENTERPRISE_CLOUD",
		"RDS",
		"MONGO_DB_ATLAS",
		"NEPTUNE_ANALYTICS",
		"OPENSEARCH_MANAGED_CLUSTER",
	}
}

type KnowledgeBaseType string

// Enum values for KnowledgeBaseType
const (
	KnowledgeBaseTypeVector KnowledgeBaseType = "VECTOR"
	KnowledgeBaseTypeKendra KnowledgeBaseType = "KENDRA"
	KnowledgeBaseTypeSql    KnowledgeBaseType = "SQL"
)

// Values returns all known values for KnowledgeBaseType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (KnowledgeBaseType) Values() []KnowledgeBaseType {
	return []KnowledgeBaseType{
		"VECTOR",
		"KENDRA",
		"SQL",
	}
}

type MemoryType string

// Enum values for MemoryType
const (
	MemoryTypeSessionSummary MemoryType = "SESSION_SUMMARY"
)

// Values returns all known values for MemoryType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MemoryType) Values() []MemoryType {
	return []MemoryType{
		"SESSION_SUMMARY",
	}
}

type MetadataSourceType string

// Enum values for MetadataSourceType
const (
	MetadataSourceTypeInLineAttribute MetadataSourceType = "IN_LINE_ATTRIBUTE"
	MetadataSourceTypeS3Location      MetadataSourceType = "S3_LOCATION"
)

// Values returns all known values for MetadataSourceType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MetadataSourceType) Values() []MetadataSourceType {
	return []MetadataSourceType{
		"IN_LINE_ATTRIBUTE",
		"S3_LOCATION",
	}
}

type MetadataValueType string

// Enum values for MetadataValueType
const (
	MetadataValueTypeBoolean    MetadataValueType = "BOOLEAN"
	MetadataValueTypeNumber     MetadataValueType = "NUMBER"
	MetadataValueTypeString     MetadataValueType = "STRING"
	MetadataValueTypeStringList MetadataValueType = "STRING_LIST"
)

// Values returns all known values for MetadataValueType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MetadataValueType) Values() []MetadataValueType {
	return []MetadataValueType{
		"BOOLEAN",
		"NUMBER",
		"STRING",
		"STRING_LIST",
	}
}

type OrchestrationType string

// Enum values for OrchestrationType
const (
	OrchestrationTypeDefault             OrchestrationType = "DEFAULT"
	OrchestrationTypeCustomOrchestration OrchestrationType = "CUSTOM_ORCHESTRATION"
)

// Values returns all known values for OrchestrationType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (OrchestrationType) Values() []OrchestrationType {
	return []OrchestrationType{
		"DEFAULT",
		"CUSTOM_ORCHESTRATION",
	}
}

type ParsingModality string

// Enum values for ParsingModality
const (
	ParsingModalityMultimodal ParsingModality = "MULTIMODAL"
)

// Values returns all known values for ParsingModality. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ParsingModality) Values() []ParsingModality {
	return []ParsingModality{
		"MULTIMODAL",
	}
}

type ParsingStrategy string

// Enum values for ParsingStrategy
const (
	ParsingStrategyBedrockFoundationModel ParsingStrategy = "BEDROCK_FOUNDATION_MODEL"
	ParsingStrategyBedrockDataAutomation  ParsingStrategy = "BEDROCK_DATA_AUTOMATION"
)

// Values returns all known values for ParsingStrategy. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ParsingStrategy) Values() []ParsingStrategy {
	return []ParsingStrategy{
		"BEDROCK_FOUNDATION_MODEL",
		"BEDROCK_DATA_AUTOMATION",
	}
}

type PerformanceConfigLatency string

// Enum values for PerformanceConfigLatency
const (
	PerformanceConfigLatencyStandard  PerformanceConfigLatency = "standard"
	PerformanceConfigLatencyOptimized PerformanceConfigLatency = "optimized"
)

// Values returns all known values for PerformanceConfigLatency. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PerformanceConfigLatency) Values() []PerformanceConfigLatency {
	return []PerformanceConfigLatency{
		"standard",
		"optimized",
	}
}

type PromptState string

// Enum values for PromptState
const (
	PromptStateEnabled  PromptState = "ENABLED"
	PromptStateDisabled PromptState = "DISABLED"
)

// Values returns all known values for PromptState. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PromptState) Values() []PromptState {
	return []PromptState{
		"ENABLED",
		"DISABLED",
	}
}

type PromptTemplateType string

// Enum values for PromptTemplateType
const (
	PromptTemplateTypeText PromptTemplateType = "TEXT"
	PromptTemplateTypeChat PromptTemplateType = "CHAT"
)

// Values returns all known values for PromptTemplateType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PromptTemplateType) Values() []PromptTemplateType {
	return []PromptTemplateType{
		"TEXT",
		"CHAT",
	}
}

type PromptType string

// Enum values for PromptType
const (
	PromptTypePreProcessing                   PromptType = "PRE_PROCESSING"
	PromptTypeOrchestration                   PromptType = "ORCHESTRATION"
	PromptTypePostProcessing                  PromptType = "POST_PROCESSING"
	PromptTypeKnowledgeBaseResponseGeneration PromptType = "KNOWLEDGE_BASE_RESPONSE_GENERATION"
	PromptTypeMemorySummarization             PromptType = "MEMORY_SUMMARIZATION"
)

// Values returns all known values for PromptType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PromptType) Values() []PromptType {
	return []PromptType{
		"PRE_PROCESSING",
		"ORCHESTRATION",
		"POST_PROCESSING",
		"KNOWLEDGE_BASE_RESPONSE_GENERATION",
		"MEMORY_SUMMARIZATION",
	}
}

type QueryEngineType string

// Enum values for QueryEngineType
const (
	QueryEngineTypeRedshift QueryEngineType = "REDSHIFT"
)

// Values returns all known values for QueryEngineType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (QueryEngineType) Values() []QueryEngineType {
	return []QueryEngineType{
		"REDSHIFT",
	}
}

type RedshiftProvisionedAuthType string

// Enum values for RedshiftProvisionedAuthType
const (
	RedshiftProvisionedAuthTypeIam              RedshiftProvisionedAuthType = "IAM"
	RedshiftProvisionedAuthTypeUsernamePassword RedshiftProvisionedAuthType = "USERNAME_PASSWORD"
	RedshiftProvisionedAuthTypeUsername         RedshiftProvisionedAuthType = "USERNAME"
)

// Values returns all known values for RedshiftProvisionedAuthType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RedshiftProvisionedAuthType) Values() []RedshiftProvisionedAuthType {
	return []RedshiftProvisionedAuthType{
		"IAM",
		"USERNAME_PASSWORD",
		"USERNAME",
	}
}

type RedshiftQueryEngineStorageType string

// Enum values for RedshiftQueryEngineStorageType
const (
	RedshiftQueryEngineStorageTypeRedshift       RedshiftQueryEngineStorageType = "REDSHIFT"
	RedshiftQueryEngineStorageTypeAwsDataCatalog RedshiftQueryEngineStorageType = "AWS_DATA_CATALOG"
)

// Values returns all known values for RedshiftQueryEngineStorageType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RedshiftQueryEngineStorageType) Values() []RedshiftQueryEngineStorageType {
	return []RedshiftQueryEngineStorageType{
		"REDSHIFT",
		"AWS_DATA_CATALOG",
	}
}

type RedshiftQueryEngineType string

// Enum values for RedshiftQueryEngineType
const (
	RedshiftQueryEngineTypeServerless  RedshiftQueryEngineType = "SERVERLESS"
	RedshiftQueryEngineTypeProvisioned RedshiftQueryEngineType = "PROVISIONED"
)

// Values returns all known values for RedshiftQueryEngineType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RedshiftQueryEngineType) Values() []RedshiftQueryEngineType {
	return []RedshiftQueryEngineType{
		"SERVERLESS",
		"PROVISIONED",
	}
}

type RedshiftServerlessAuthType string

// Enum values for RedshiftServerlessAuthType
const (
	RedshiftServerlessAuthTypeIam              RedshiftServerlessAuthType = "IAM"
	RedshiftServerlessAuthTypeUsernamePassword RedshiftServerlessAuthType = "USERNAME_PASSWORD"
)

// Values returns all known values for RedshiftServerlessAuthType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RedshiftServerlessAuthType) Values() []RedshiftServerlessAuthType {
	return []RedshiftServerlessAuthType{
		"IAM",
		"USERNAME_PASSWORD",
	}
}

type RelayConversationHistory string

// Enum values for RelayConversationHistory
const (
	RelayConversationHistoryToCollaborator RelayConversationHistory = "TO_COLLABORATOR"
	RelayConversationHistoryDisabled       RelayConversationHistory = "DISABLED"
)

// Values returns all known values for RelayConversationHistory. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RelayConversationHistory) Values() []RelayConversationHistory {
	return []RelayConversationHistory{
		"TO_COLLABORATOR",
		"DISABLED",
	}
}

type RequireConfirmation string

// Enum values for RequireConfirmation
const (
	RequireConfirmationEnabled  RequireConfirmation = "ENABLED"
	RequireConfirmationDisabled RequireConfirmation = "DISABLED"
)

// Values returns all known values for RequireConfirmation. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RequireConfirmation) Values() []RequireConfirmation {
	return []RequireConfirmation{
		"ENABLED",
		"DISABLED",
	}
}

type RerankingMetadataSelectionMode string

// Enum values for RerankingMetadataSelectionMode
const (
	RerankingMetadataSelectionModeSelective RerankingMetadataSelectionMode = "SELECTIVE"
	RerankingMetadataSelectionModeAll       RerankingMetadataSelectionMode = "ALL"
)

// Values returns all known values for RerankingMetadataSelectionMode. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RerankingMetadataSelectionMode) Values() []RerankingMetadataSelectionMode {
	return []RerankingMetadataSelectionMode{
		"SELECTIVE",
		"ALL",
	}
}

type SalesforceAuthType string

// Enum values for SalesforceAuthType
const (
	SalesforceAuthTypeOauth2ClientCredentials SalesforceAuthType = "OAUTH2_CLIENT_CREDENTIALS"
)

// Values returns all known values for SalesforceAuthType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SalesforceAuthType) Values() []SalesforceAuthType {
	return []SalesforceAuthType{
		"OAUTH2_CLIENT_CREDENTIALS",
	}
}

type SharePointAuthType string

// Enum values for SharePointAuthType
const (
	SharePointAuthTypeOauth2ClientCredentials                  SharePointAuthType = "OAUTH2_CLIENT_CREDENTIALS"
	SharePointAuthTypeOauth2SharepointAppOnlyClientCredentials SharePointAuthType = "OAUTH2_SHAREPOINT_APP_ONLY_CLIENT_CREDENTIALS"
)

// Values returns all known values for SharePointAuthType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SharePointAuthType) Values() []SharePointAuthType {
	return []SharePointAuthType{
		"OAUTH2_CLIENT_CREDENTIALS",
		"OAUTH2_SHAREPOINT_APP_ONLY_CLIENT_CREDENTIALS",
	}
}

type SharePointHostType string

// Enum values for SharePointHostType
const (
	SharePointHostTypeOnline SharePointHostType = "ONLINE"
)

// Values returns all known values for SharePointHostType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SharePointHostType) Values() []SharePointHostType {
	return []SharePointHostType{
		"ONLINE",
	}
}

type SortOrder string

// Enum values for SortOrder
const (
	SortOrderAscending  SortOrder = "ASCENDING"
	SortOrderDescending SortOrder = "DESCENDING"
)

// Values returns all known values for SortOrder. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SortOrder) Values() []SortOrder {
	return []SortOrder{
		"ASCENDING",
		"DESCENDING",
	}
}

type StepType string

// Enum values for StepType
const (
	StepTypePostChunking StepType = "POST_CHUNKING"
)

// Values returns all known values for StepType. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (StepType) Values() []StepType {
	return []StepType{
		"POST_CHUNKING",
	}
}

type SupplementalDataStorageLocationType string

// Enum values for SupplementalDataStorageLocationType
const (
	SupplementalDataStorageLocationTypeS3 SupplementalDataStorageLocationType = "S3"
)

// Values returns all known values for SupplementalDataStorageLocationType. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SupplementalDataStorageLocationType) Values() []SupplementalDataStorageLocationType {
	return []SupplementalDataStorageLocationType{
		"S3",
	}
}

type SupportedLanguages string

// Enum values for SupportedLanguages
const (
	SupportedLanguagesPython3 SupportedLanguages = "Python_3"
)

// Values returns all known values for SupportedLanguages. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SupportedLanguages) Values() []SupportedLanguages {
	return []SupportedLanguages{
		"Python_3",
	}
}

type Type string

// Enum values for Type
const (
	TypeString  Type = "string"
	TypeNumber  Type = "number"
	TypeInteger Type = "integer"
	TypeBoolean Type = "boolean"
	TypeArray   Type = "array"
)

// Values returns all known values for Type. Note that this can be expanded in the
// future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Type) Values() []Type {
	return []Type{
		"string",
		"number",
		"integer",
		"boolean",
		"array",
	}
}

type VectorSearchRerankingConfigurationType string

// Enum values for VectorSearchRerankingConfigurationType
const (
	VectorSearchRerankingConfigurationTypeBedrockRerankingModel VectorSearchRerankingConfigurationType = "BEDROCK_RERANKING_MODEL"
)

// Values returns all known values for VectorSearchRerankingConfigurationType.
// Note that this can be expanded in the future, and so it is only as up to date as
// the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (VectorSearchRerankingConfigurationType) Values() []VectorSearchRerankingConfigurationType {
	return []VectorSearchRerankingConfigurationType{
		"BEDROCK_RERANKING_MODEL",
	}
}

type WebScopeType string

// Enum values for WebScopeType
const (
	WebScopeTypeHostOnly   WebScopeType = "HOST_ONLY"
	WebScopeTypeSubdomains WebScopeType = "SUBDOMAINS"
)

// Values returns all known values for WebScopeType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (WebScopeType) Values() []WebScopeType {
	return []WebScopeType{
		"HOST_ONLY",
		"SUBDOMAINS",
	}
}
