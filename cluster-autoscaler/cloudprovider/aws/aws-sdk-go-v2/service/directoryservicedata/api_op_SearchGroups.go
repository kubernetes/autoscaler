// Code generated by smithy-go-codegen DO NOT EDIT.

package directoryservicedata

import (
	"context"
	"fmt"
	awsmiddleware "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/aws/middleware"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/service/directoryservicedata/types"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/middleware"
	smithyhttp "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/transport/http"
)

//	Searches the specified directory for a group. You can find groups that match
//
// the SearchString parameter with the value of their attributes included in the
// SearchString parameter.
//
// This operation supports pagination with the use of the NextToken request and
// response parameters. If more results are available, the SearchGroups.NextToken
// member contains a token that you pass in the next call to SearchGroups . This
// retrieves the next set of items.
//
// You can also specify a maximum number of return results with the MaxResults
// parameter.
func (c *Client) SearchGroups(ctx context.Context, params *SearchGroupsInput, optFns ...func(*Options)) (*SearchGroupsOutput, error) {
	if params == nil {
		params = &SearchGroupsInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "SearchGroups", params, optFns, c.addOperationSearchGroupsMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*SearchGroupsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type SearchGroupsInput struct {

	//  The identifier (ID) of the directory that's associated with the group.
	//
	// This member is required.
	DirectoryId *string

	//  One or more data attributes that are used to search for a group. For a list of
	// supported attributes, see [Directory Service Data Attributes].
	//
	// [Directory Service Data Attributes]: https://docs.aws.amazon.com/directoryservice/latest/admin-guide/ad_data_attributes.html
	//
	// This member is required.
	SearchAttributes []string

	//  The attribute value that you want to search for.
	//
	// Wildcard (*) searches aren't supported. For a list of supported attributes, see [Directory Service Data Attributes]
	// .
	//
	// [Directory Service Data Attributes]: https://docs.aws.amazon.com/directoryservice/latest/admin-guide/ad_data_attributes.html
	//
	// This member is required.
	SearchString *string

	//  The maximum number of results to be returned per request.
	MaxResults *int32

	//  An encoded paging token for paginated calls that can be passed back to
	// retrieve the next page.
	NextToken *string

	//  The domain name that's associated with the group.
	//
	// This parameter is optional, so you can return groups outside of your Managed
	// Microsoft AD domain. When no value is defined, only your Managed Microsoft AD
	// groups are returned.
	//
	// This value is case insensitive.
	Realm *string

	noSmithyDocumentSerde
}

type SearchGroupsOutput struct {

	//  The identifier (ID) of the directory that's associated with the group.
	DirectoryId *string

	//  The group information that the request returns.
	Groups []types.Group

	//  An encoded paging token for paginated calls that can be passed back to
	// retrieve the next page.
	NextToken *string

	//  The domain that's associated with the group.
	Realm *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationSearchGroupsMiddlewares(stack *middleware.Stack, options Options) (err error) {
	if err := stack.Serialize.Add(&setOperationInputMiddleware{}, middleware.After); err != nil {
		return err
	}
	err = stack.Serialize.Add(&awsRestjson1_serializeOpSearchGroups{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpSearchGroups{}, middleware.After)
	if err != nil {
		return err
	}
	if err := addProtocolFinalizerMiddlewares(stack, options, "SearchGroups"); err != nil {
		return fmt.Errorf("add protocol finalizers: %v", err)
	}

	if err = addlegacyEndpointContextSetter(stack, options); err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = addClientRequestID(stack); err != nil {
		return err
	}
	if err = addComputeContentLength(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = addComputePayloadSHA256(stack); err != nil {
		return err
	}
	if err = addRetry(stack, options); err != nil {
		return err
	}
	if err = addRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = addRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addSpanRetryLoop(stack, options); err != nil {
		return err
	}
	if err = addClientUserAgent(stack, options); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addSetLegacyContextSigningOptionsMiddleware(stack); err != nil {
		return err
	}
	if err = addTimeOffsetBuild(stack, c); err != nil {
		return err
	}
	if err = addUserAgentRetryMode(stack, options); err != nil {
		return err
	}
	if err = addCredentialSource(stack, options); err != nil {
		return err
	}
	if err = addOpSearchGroupsValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opSearchGroups(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRecursionDetection(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	if err = addDisableHTTPSMiddleware(stack, options); err != nil {
		return err
	}
	if err = addSpanInitializeStart(stack); err != nil {
		return err
	}
	if err = addSpanInitializeEnd(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestStart(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestEnd(stack); err != nil {
		return err
	}
	return nil
}

// SearchGroupsPaginatorOptions is the paginator options for SearchGroups
type SearchGroupsPaginatorOptions struct {
	//  The maximum number of results to be returned per request.
	Limit int32

	// Set to true if pagination should stop if the service returns a pagination token
	// that matches the most recent token provided to the service.
	StopOnDuplicateToken bool
}

// SearchGroupsPaginator is a paginator for SearchGroups
type SearchGroupsPaginator struct {
	options   SearchGroupsPaginatorOptions
	client    SearchGroupsAPIClient
	params    *SearchGroupsInput
	nextToken *string
	firstPage bool
}

// NewSearchGroupsPaginator returns a new SearchGroupsPaginator
func NewSearchGroupsPaginator(client SearchGroupsAPIClient, params *SearchGroupsInput, optFns ...func(*SearchGroupsPaginatorOptions)) *SearchGroupsPaginator {
	if params == nil {
		params = &SearchGroupsInput{}
	}

	options := SearchGroupsPaginatorOptions{}
	if params.MaxResults != nil {
		options.Limit = *params.MaxResults
	}

	for _, fn := range optFns {
		fn(&options)
	}

	return &SearchGroupsPaginator{
		options:   options,
		client:    client,
		params:    params,
		firstPage: true,
		nextToken: params.NextToken,
	}
}

// HasMorePages returns a boolean indicating whether more pages are available
func (p *SearchGroupsPaginator) HasMorePages() bool {
	return p.firstPage || (p.nextToken != nil && len(*p.nextToken) != 0)
}

// NextPage retrieves the next SearchGroups page.
func (p *SearchGroupsPaginator) NextPage(ctx context.Context, optFns ...func(*Options)) (*SearchGroupsOutput, error) {
	if !p.HasMorePages() {
		return nil, fmt.Errorf("no more pages available")
	}

	params := *p.params
	params.NextToken = p.nextToken

	var limit *int32
	if p.options.Limit > 0 {
		limit = &p.options.Limit
	}
	params.MaxResults = limit

	optFns = append([]func(*Options){
		addIsPaginatorUserAgent,
	}, optFns...)
	result, err := p.client.SearchGroups(ctx, &params, optFns...)
	if err != nil {
		return nil, err
	}
	p.firstPage = false

	prevToken := p.nextToken
	p.nextToken = result.NextToken

	if p.options.StopOnDuplicateToken &&
		prevToken != nil &&
		p.nextToken != nil &&
		*prevToken == *p.nextToken {
		p.nextToken = nil
	}

	return result, nil
}

// SearchGroupsAPIClient is a client that implements the SearchGroups operation.
type SearchGroupsAPIClient interface {
	SearchGroups(context.Context, *SearchGroupsInput, ...func(*Options)) (*SearchGroupsOutput, error)
}

var _ SearchGroupsAPIClient = (*Client)(nil)

func newServiceMetadataMiddleware_opSearchGroups(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		OperationName: "SearchGroups",
	}
}
