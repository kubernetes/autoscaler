// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AccessDeniedReason string

// Enum values for AccessDeniedReason
const (
	AccessDeniedReasonIamAuth       AccessDeniedReason = "IAM_AUTH"
	AccessDeniedReasonDirectoryAuth AccessDeniedReason = "DIRECTORY_AUTH"
	AccessDeniedReasonDataDisabled  AccessDeniedReason = "DATA_DISABLED"
)

// Values returns all known values for AccessDeniedReason. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AccessDeniedReason) Values() []AccessDeniedReason {
	return []AccessDeniedReason{
		"IAM_AUTH",
		"DIRECTORY_AUTH",
		"DATA_DISABLED",
	}
}

type DirectoryUnavailableReason string

// Enum values for DirectoryUnavailableReason
const (
	DirectoryUnavailableReasonInvalidDirectoryState      DirectoryUnavailableReason = "INVALID_DIRECTORY_STATE"
	DirectoryUnavailableReasonDirectoryTimeout           DirectoryUnavailableReason = "DIRECTORY_TIMEOUT"
	DirectoryUnavailableReasonDirectoryResourcesExceeded DirectoryUnavailableReason = "DIRECTORY_RESOURCES_EXCEEDED"
	DirectoryUnavailableReasonNoDiskSpace                DirectoryUnavailableReason = "NO_DISK_SPACE"
	DirectoryUnavailableReasonTrustAuthFailure           DirectoryUnavailableReason = "TRUST_AUTH_FAILURE"
)

// Values returns all known values for DirectoryUnavailableReason. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DirectoryUnavailableReason) Values() []DirectoryUnavailableReason {
	return []DirectoryUnavailableReason{
		"INVALID_DIRECTORY_STATE",
		"DIRECTORY_TIMEOUT",
		"DIRECTORY_RESOURCES_EXCEEDED",
		"NO_DISK_SPACE",
		"TRUST_AUTH_FAILURE",
	}
}

type GroupScope string

// Enum values for GroupScope
const (
	GroupScopeDomainLocal  GroupScope = "DomainLocal"
	GroupScopeGlobal       GroupScope = "Global"
	GroupScopeUniversal    GroupScope = "Universal"
	GroupScopeBuiltinLocal GroupScope = "BuiltinLocal"
)

// Values returns all known values for GroupScope. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GroupScope) Values() []GroupScope {
	return []GroupScope{
		"DomainLocal",
		"Global",
		"Universal",
		"BuiltinLocal",
	}
}

type GroupType string

// Enum values for GroupType
const (
	GroupTypeDistribution GroupType = "Distribution"
	GroupTypeSecurity     GroupType = "Security"
)

// Values returns all known values for GroupType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GroupType) Values() []GroupType {
	return []GroupType{
		"Distribution",
		"Security",
	}
}

type MemberType string

// Enum values for MemberType
const (
	MemberTypeUser     MemberType = "USER"
	MemberTypeGroup    MemberType = "GROUP"
	MemberTypeComputer MemberType = "COMPUTER"
)

// Values returns all known values for MemberType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MemberType) Values() []MemberType {
	return []MemberType{
		"USER",
		"GROUP",
		"COMPUTER",
	}
}

type UpdateType string

// Enum values for UpdateType
const (
	UpdateTypeAdd     UpdateType = "ADD"
	UpdateTypeReplace UpdateType = "REPLACE"
	UpdateTypeRemove  UpdateType = "REMOVE"
)

// Values returns all known values for UpdateType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (UpdateType) Values() []UpdateType {
	return []UpdateType{
		"ADD",
		"REPLACE",
		"REMOVE",
	}
}

type ValidationExceptionReason string

// Enum values for ValidationExceptionReason
const (
	ValidationExceptionReasonInvalidRealm              ValidationExceptionReason = "INVALID_REALM"
	ValidationExceptionReasonInvalidDirectoryType      ValidationExceptionReason = "INVALID_DIRECTORY_TYPE"
	ValidationExceptionReasonInvalidSecondaryRegion    ValidationExceptionReason = "INVALID_SECONDARY_REGION"
	ValidationExceptionReasonInvalidNextToken          ValidationExceptionReason = "INVALID_NEXT_TOKEN"
	ValidationExceptionReasonInvalidAttributeValue     ValidationExceptionReason = "INVALID_ATTRIBUTE_VALUE"
	ValidationExceptionReasonInvalidAttributeName      ValidationExceptionReason = "INVALID_ATTRIBUTE_NAME"
	ValidationExceptionReasonInvalidAttributeForUser   ValidationExceptionReason = "INVALID_ATTRIBUTE_FOR_USER"
	ValidationExceptionReasonInvalidAttributeForGroup  ValidationExceptionReason = "INVALID_ATTRIBUTE_FOR_GROUP"
	ValidationExceptionReasonInvalidAttributeForSearch ValidationExceptionReason = "INVALID_ATTRIBUTE_FOR_SEARCH"
	ValidationExceptionReasonInvalidAttributeForModify ValidationExceptionReason = "INVALID_ATTRIBUTE_FOR_MODIFY"
	ValidationExceptionReasonDuplicateAttribute        ValidationExceptionReason = "DUPLICATE_ATTRIBUTE"
	ValidationExceptionReasonMissingAttribute          ValidationExceptionReason = "MISSING_ATTRIBUTE"
	ValidationExceptionReasonAttributeExists           ValidationExceptionReason = "ATTRIBUTE_EXISTS"
	ValidationExceptionReasonLdapSizeLimitExceeded     ValidationExceptionReason = "LDAP_SIZE_LIMIT_EXCEEDED"
	ValidationExceptionReasonLdapUnsupportedOperation  ValidationExceptionReason = "LDAP_UNSUPPORTED_OPERATION"
)

// Values returns all known values for ValidationExceptionReason. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ValidationExceptionReason) Values() []ValidationExceptionReason {
	return []ValidationExceptionReason{
		"INVALID_REALM",
		"INVALID_DIRECTORY_TYPE",
		"INVALID_SECONDARY_REGION",
		"INVALID_NEXT_TOKEN",
		"INVALID_ATTRIBUTE_VALUE",
		"INVALID_ATTRIBUTE_NAME",
		"INVALID_ATTRIBUTE_FOR_USER",
		"INVALID_ATTRIBUTE_FOR_GROUP",
		"INVALID_ATTRIBUTE_FOR_SEARCH",
		"INVALID_ATTRIBUTE_FOR_MODIFY",
		"DUPLICATE_ATTRIBUTE",
		"MISSING_ATTRIBUTE",
		"ATTRIBUTE_EXISTS",
		"LDAP_SIZE_LIMIT_EXCEEDED",
		"LDAP_UNSUPPORTED_OPERATION",
	}
}
