// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AttributeName string

// Enum values for AttributeName
const (
	AttributeNameSign             AttributeName = "SIGN"
	AttributeNameSymptom          AttributeName = "SYMPTOM"
	AttributeNameDiagnosis        AttributeName = "DIAGNOSIS"
	AttributeNameNegation         AttributeName = "NEGATION"
	AttributeNamePertainsToFamily AttributeName = "PERTAINS_TO_FAMILY"
	AttributeNameHypothetical     AttributeName = "HYPOTHETICAL"
	AttributeNameLowConfidence    AttributeName = "LOW_CONFIDENCE"
	AttributeNamePastHistory      AttributeName = "PAST_HISTORY"
	AttributeNameFuture           AttributeName = "FUTURE"
)

// Values returns all known values for AttributeName. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AttributeName) Values() []AttributeName {
	return []AttributeName{
		"SIGN",
		"SYMPTOM",
		"DIAGNOSIS",
		"NEGATION",
		"PERTAINS_TO_FAMILY",
		"HYPOTHETICAL",
		"LOW_CONFIDENCE",
		"PAST_HISTORY",
		"FUTURE",
	}
}

type EntitySubType string

// Enum values for EntitySubType
const (
	EntitySubTypeName                 EntitySubType = "NAME"
	EntitySubTypeDxName               EntitySubType = "DX_NAME"
	EntitySubTypeDosage               EntitySubType = "DOSAGE"
	EntitySubTypeRouteOrMode          EntitySubType = "ROUTE_OR_MODE"
	EntitySubTypeForm                 EntitySubType = "FORM"
	EntitySubTypeFrequency            EntitySubType = "FREQUENCY"
	EntitySubTypeDuration             EntitySubType = "DURATION"
	EntitySubTypeGenericName          EntitySubType = "GENERIC_NAME"
	EntitySubTypeBrandName            EntitySubType = "BRAND_NAME"
	EntitySubTypeStrength             EntitySubType = "STRENGTH"
	EntitySubTypeRate                 EntitySubType = "RATE"
	EntitySubTypeAcuity               EntitySubType = "ACUITY"
	EntitySubTypeTestName             EntitySubType = "TEST_NAME"
	EntitySubTypeTestValue            EntitySubType = "TEST_VALUE"
	EntitySubTypeTestUnits            EntitySubType = "TEST_UNITS"
	EntitySubTypeTestUnit             EntitySubType = "TEST_UNIT"
	EntitySubTypeProcedureName        EntitySubType = "PROCEDURE_NAME"
	EntitySubTypeTreatmentName        EntitySubType = "TREATMENT_NAME"
	EntitySubTypeDate                 EntitySubType = "DATE"
	EntitySubTypeAge                  EntitySubType = "AGE"
	EntitySubTypeContactPoint         EntitySubType = "CONTACT_POINT"
	EntitySubTypePhoneOrFax           EntitySubType = "PHONE_OR_FAX"
	EntitySubTypeEmail                EntitySubType = "EMAIL"
	EntitySubTypeIdentifier           EntitySubType = "IDENTIFIER"
	EntitySubTypeId                   EntitySubType = "ID"
	EntitySubTypeUrl                  EntitySubType = "URL"
	EntitySubTypeAddress              EntitySubType = "ADDRESS"
	EntitySubTypeProfession           EntitySubType = "PROFESSION"
	EntitySubTypeSystemOrganSite      EntitySubType = "SYSTEM_ORGAN_SITE"
	EntitySubTypeDirection            EntitySubType = "DIRECTION"
	EntitySubTypeQuality              EntitySubType = "QUALITY"
	EntitySubTypeQuantity             EntitySubType = "QUANTITY"
	EntitySubTypeTimeExpression       EntitySubType = "TIME_EXPRESSION"
	EntitySubTypeTimeToMedicationName EntitySubType = "TIME_TO_MEDICATION_NAME"
	EntitySubTypeTimeToDxName         EntitySubType = "TIME_TO_DX_NAME"
	EntitySubTypeTimeToTestName       EntitySubType = "TIME_TO_TEST_NAME"
	EntitySubTypeTimeToProcedureName  EntitySubType = "TIME_TO_PROCEDURE_NAME"
	EntitySubTypeTimeToTreatmentName  EntitySubType = "TIME_TO_TREATMENT_NAME"
	EntitySubTypeAmount               EntitySubType = "AMOUNT"
	EntitySubTypeGender               EntitySubType = "GENDER"
	EntitySubTypeRaceEthnicity        EntitySubType = "RACE_ETHNICITY"
	EntitySubTypeAllergies            EntitySubType = "ALLERGIES"
	EntitySubTypeTobaccoUse           EntitySubType = "TOBACCO_USE"
	EntitySubTypeAlcoholConsumption   EntitySubType = "ALCOHOL_CONSUMPTION"
	EntitySubTypeRecDrugUse           EntitySubType = "REC_DRUG_USE"
)

// Values returns all known values for EntitySubType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EntitySubType) Values() []EntitySubType {
	return []EntitySubType{
		"NAME",
		"DX_NAME",
		"DOSAGE",
		"ROUTE_OR_MODE",
		"FORM",
		"FREQUENCY",
		"DURATION",
		"GENERIC_NAME",
		"BRAND_NAME",
		"STRENGTH",
		"RATE",
		"ACUITY",
		"TEST_NAME",
		"TEST_VALUE",
		"TEST_UNITS",
		"TEST_UNIT",
		"PROCEDURE_NAME",
		"TREATMENT_NAME",
		"DATE",
		"AGE",
		"CONTACT_POINT",
		"PHONE_OR_FAX",
		"EMAIL",
		"IDENTIFIER",
		"ID",
		"URL",
		"ADDRESS",
		"PROFESSION",
		"SYSTEM_ORGAN_SITE",
		"DIRECTION",
		"QUALITY",
		"QUANTITY",
		"TIME_EXPRESSION",
		"TIME_TO_MEDICATION_NAME",
		"TIME_TO_DX_NAME",
		"TIME_TO_TEST_NAME",
		"TIME_TO_PROCEDURE_NAME",
		"TIME_TO_TREATMENT_NAME",
		"AMOUNT",
		"GENDER",
		"RACE_ETHNICITY",
		"ALLERGIES",
		"TOBACCO_USE",
		"ALCOHOL_CONSUMPTION",
		"REC_DRUG_USE",
	}
}

type EntityType string

// Enum values for EntityType
const (
	EntityTypeMedication                    EntityType = "MEDICATION"
	EntityTypeMedicalCondition              EntityType = "MEDICAL_CONDITION"
	EntityTypeProtectedHealthInformation    EntityType = "PROTECTED_HEALTH_INFORMATION"
	EntityTypeTestTreatmentProcedure        EntityType = "TEST_TREATMENT_PROCEDURE"
	EntityTypeAnatomy                       EntityType = "ANATOMY"
	EntityTypeTimeExpression                EntityType = "TIME_EXPRESSION"
	EntityTypeBehavioralEnvironmentalSocial EntityType = "BEHAVIORAL_ENVIRONMENTAL_SOCIAL"
)

// Values returns all known values for EntityType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EntityType) Values() []EntityType {
	return []EntityType{
		"MEDICATION",
		"MEDICAL_CONDITION",
		"PROTECTED_HEALTH_INFORMATION",
		"TEST_TREATMENT_PROCEDURE",
		"ANATOMY",
		"TIME_EXPRESSION",
		"BEHAVIORAL_ENVIRONMENTAL_SOCIAL",
	}
}

type ICD10CMAttributeType string

// Enum values for ICD10CMAttributeType
const (
	ICD10CMAttributeTypeAcuity          ICD10CMAttributeType = "ACUITY"
	ICD10CMAttributeTypeDirection       ICD10CMAttributeType = "DIRECTION"
	ICD10CMAttributeTypeSystemOrganSite ICD10CMAttributeType = "SYSTEM_ORGAN_SITE"
	ICD10CMAttributeTypeQuality         ICD10CMAttributeType = "QUALITY"
	ICD10CMAttributeTypeQuantity        ICD10CMAttributeType = "QUANTITY"
	ICD10CMAttributeTypeTimeToDxName    ICD10CMAttributeType = "TIME_TO_DX_NAME"
	ICD10CMAttributeTypeTimeExpression  ICD10CMAttributeType = "TIME_EXPRESSION"
)

// Values returns all known values for ICD10CMAttributeType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ICD10CMAttributeType) Values() []ICD10CMAttributeType {
	return []ICD10CMAttributeType{
		"ACUITY",
		"DIRECTION",
		"SYSTEM_ORGAN_SITE",
		"QUALITY",
		"QUANTITY",
		"TIME_TO_DX_NAME",
		"TIME_EXPRESSION",
	}
}

type ICD10CMEntityCategory string

// Enum values for ICD10CMEntityCategory
const (
	ICD10CMEntityCategoryMedicalCondition ICD10CMEntityCategory = "MEDICAL_CONDITION"
)

// Values returns all known values for ICD10CMEntityCategory. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ICD10CMEntityCategory) Values() []ICD10CMEntityCategory {
	return []ICD10CMEntityCategory{
		"MEDICAL_CONDITION",
	}
}

type ICD10CMEntityType string

// Enum values for ICD10CMEntityType
const (
	ICD10CMEntityTypeDxName         ICD10CMEntityType = "DX_NAME"
	ICD10CMEntityTypeTimeExpression ICD10CMEntityType = "TIME_EXPRESSION"
)

// Values returns all known values for ICD10CMEntityType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ICD10CMEntityType) Values() []ICD10CMEntityType {
	return []ICD10CMEntityType{
		"DX_NAME",
		"TIME_EXPRESSION",
	}
}

type ICD10CMRelationshipType string

// Enum values for ICD10CMRelationshipType
const (
	ICD10CMRelationshipTypeOverlap         ICD10CMRelationshipType = "OVERLAP"
	ICD10CMRelationshipTypeSystemOrganSite ICD10CMRelationshipType = "SYSTEM_ORGAN_SITE"
	ICD10CMRelationshipTypeQuality         ICD10CMRelationshipType = "QUALITY"
)

// Values returns all known values for ICD10CMRelationshipType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ICD10CMRelationshipType) Values() []ICD10CMRelationshipType {
	return []ICD10CMRelationshipType{
		"OVERLAP",
		"SYSTEM_ORGAN_SITE",
		"QUALITY",
	}
}

type ICD10CMTraitName string

// Enum values for ICD10CMTraitName
const (
	ICD10CMTraitNameNegation         ICD10CMTraitName = "NEGATION"
	ICD10CMTraitNameDiagnosis        ICD10CMTraitName = "DIAGNOSIS"
	ICD10CMTraitNameSign             ICD10CMTraitName = "SIGN"
	ICD10CMTraitNameSymptom          ICD10CMTraitName = "SYMPTOM"
	ICD10CMTraitNamePertainsToFamily ICD10CMTraitName = "PERTAINS_TO_FAMILY"
	ICD10CMTraitNameHypothetical     ICD10CMTraitName = "HYPOTHETICAL"
	ICD10CMTraitNameLowConfidence    ICD10CMTraitName = "LOW_CONFIDENCE"
)

// Values returns all known values for ICD10CMTraitName. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ICD10CMTraitName) Values() []ICD10CMTraitName {
	return []ICD10CMTraitName{
		"NEGATION",
		"DIAGNOSIS",
		"SIGN",
		"SYMPTOM",
		"PERTAINS_TO_FAMILY",
		"HYPOTHETICAL",
		"LOW_CONFIDENCE",
	}
}

type JobStatus string

// Enum values for JobStatus
const (
	JobStatusSubmitted      JobStatus = "SUBMITTED"
	JobStatusInProgress     JobStatus = "IN_PROGRESS"
	JobStatusCompleted      JobStatus = "COMPLETED"
	JobStatusPartialSuccess JobStatus = "PARTIAL_SUCCESS"
	JobStatusFailed         JobStatus = "FAILED"
	JobStatusStopRequested  JobStatus = "STOP_REQUESTED"
	JobStatusStopped        JobStatus = "STOPPED"
)

// Values returns all known values for JobStatus. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (JobStatus) Values() []JobStatus {
	return []JobStatus{
		"SUBMITTED",
		"IN_PROGRESS",
		"COMPLETED",
		"PARTIAL_SUCCESS",
		"FAILED",
		"STOP_REQUESTED",
		"STOPPED",
	}
}

type LanguageCode string

// Enum values for LanguageCode
const (
	LanguageCodeEn LanguageCode = "en"
)

// Values returns all known values for LanguageCode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LanguageCode) Values() []LanguageCode {
	return []LanguageCode{
		"en",
	}
}

type RelationshipType string

// Enum values for RelationshipType
const (
	RelationshipTypeEvery           RelationshipType = "EVERY"
	RelationshipTypeWithDosage      RelationshipType = "WITH_DOSAGE"
	RelationshipTypeAdministeredVia RelationshipType = "ADMINISTERED_VIA"
	RelationshipTypeFor             RelationshipType = "FOR"
	RelationshipTypeNegative        RelationshipType = "NEGATIVE"
	RelationshipTypeOverlap         RelationshipType = "OVERLAP"
	RelationshipTypeDosage          RelationshipType = "DOSAGE"
	RelationshipTypeRouteOrMode     RelationshipType = "ROUTE_OR_MODE"
	RelationshipTypeForm            RelationshipType = "FORM"
	RelationshipTypeFrequency       RelationshipType = "FREQUENCY"
	RelationshipTypeDuration        RelationshipType = "DURATION"
	RelationshipTypeStrength        RelationshipType = "STRENGTH"
	RelationshipTypeRate            RelationshipType = "RATE"
	RelationshipTypeAcuity          RelationshipType = "ACUITY"
	RelationshipTypeTestValue       RelationshipType = "TEST_VALUE"
	RelationshipTypeTestUnits       RelationshipType = "TEST_UNITS"
	RelationshipTypeTestUnit        RelationshipType = "TEST_UNIT"
	RelationshipTypeDirection       RelationshipType = "DIRECTION"
	RelationshipTypeSystemOrganSite RelationshipType = "SYSTEM_ORGAN_SITE"
	RelationshipTypeAmount          RelationshipType = "AMOUNT"
	RelationshipTypeUsage           RelationshipType = "USAGE"
	RelationshipTypeQuality         RelationshipType = "QUALITY"
)

// Values returns all known values for RelationshipType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RelationshipType) Values() []RelationshipType {
	return []RelationshipType{
		"EVERY",
		"WITH_DOSAGE",
		"ADMINISTERED_VIA",
		"FOR",
		"NEGATIVE",
		"OVERLAP",
		"DOSAGE",
		"ROUTE_OR_MODE",
		"FORM",
		"FREQUENCY",
		"DURATION",
		"STRENGTH",
		"RATE",
		"ACUITY",
		"TEST_VALUE",
		"TEST_UNITS",
		"TEST_UNIT",
		"DIRECTION",
		"SYSTEM_ORGAN_SITE",
		"AMOUNT",
		"USAGE",
		"QUALITY",
	}
}

type RxNormAttributeType string

// Enum values for RxNormAttributeType
const (
	RxNormAttributeTypeDosage      RxNormAttributeType = "DOSAGE"
	RxNormAttributeTypeDuration    RxNormAttributeType = "DURATION"
	RxNormAttributeTypeForm        RxNormAttributeType = "FORM"
	RxNormAttributeTypeFrequency   RxNormAttributeType = "FREQUENCY"
	RxNormAttributeTypeRate        RxNormAttributeType = "RATE"
	RxNormAttributeTypeRouteOrMode RxNormAttributeType = "ROUTE_OR_MODE"
	RxNormAttributeTypeStrength    RxNormAttributeType = "STRENGTH"
)

// Values returns all known values for RxNormAttributeType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RxNormAttributeType) Values() []RxNormAttributeType {
	return []RxNormAttributeType{
		"DOSAGE",
		"DURATION",
		"FORM",
		"FREQUENCY",
		"RATE",
		"ROUTE_OR_MODE",
		"STRENGTH",
	}
}

type RxNormEntityCategory string

// Enum values for RxNormEntityCategory
const (
	RxNormEntityCategoryMedication RxNormEntityCategory = "MEDICATION"
)

// Values returns all known values for RxNormEntityCategory. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RxNormEntityCategory) Values() []RxNormEntityCategory {
	return []RxNormEntityCategory{
		"MEDICATION",
	}
}

type RxNormEntityType string

// Enum values for RxNormEntityType
const (
	RxNormEntityTypeBrandName   RxNormEntityType = "BRAND_NAME"
	RxNormEntityTypeGenericName RxNormEntityType = "GENERIC_NAME"
)

// Values returns all known values for RxNormEntityType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RxNormEntityType) Values() []RxNormEntityType {
	return []RxNormEntityType{
		"BRAND_NAME",
		"GENERIC_NAME",
	}
}

type RxNormTraitName string

// Enum values for RxNormTraitName
const (
	RxNormTraitNameNegation    RxNormTraitName = "NEGATION"
	RxNormTraitNamePastHistory RxNormTraitName = "PAST_HISTORY"
)

// Values returns all known values for RxNormTraitName. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RxNormTraitName) Values() []RxNormTraitName {
	return []RxNormTraitName{
		"NEGATION",
		"PAST_HISTORY",
	}
}

type SNOMEDCTAttributeType string

// Enum values for SNOMEDCTAttributeType
const (
	SNOMEDCTAttributeTypeAcuity          SNOMEDCTAttributeType = "ACUITY"
	SNOMEDCTAttributeTypeQuality         SNOMEDCTAttributeType = "QUALITY"
	SNOMEDCTAttributeTypeDirection       SNOMEDCTAttributeType = "DIRECTION"
	SNOMEDCTAttributeTypeSystemOrganSite SNOMEDCTAttributeType = "SYSTEM_ORGAN_SITE"
	SNOMEDCTAttributeTypeTestValue       SNOMEDCTAttributeType = "TEST_VALUE"
	SNOMEDCTAttributeTypeTestUnit        SNOMEDCTAttributeType = "TEST_UNIT"
)

// Values returns all known values for SNOMEDCTAttributeType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SNOMEDCTAttributeType) Values() []SNOMEDCTAttributeType {
	return []SNOMEDCTAttributeType{
		"ACUITY",
		"QUALITY",
		"DIRECTION",
		"SYSTEM_ORGAN_SITE",
		"TEST_VALUE",
		"TEST_UNIT",
	}
}

type SNOMEDCTEntityCategory string

// Enum values for SNOMEDCTEntityCategory
const (
	SNOMEDCTEntityCategoryMedicalCondition       SNOMEDCTEntityCategory = "MEDICAL_CONDITION"
	SNOMEDCTEntityCategoryAnatomy                SNOMEDCTEntityCategory = "ANATOMY"
	SNOMEDCTEntityCategoryTestTreatmentProcedure SNOMEDCTEntityCategory = "TEST_TREATMENT_PROCEDURE"
)

// Values returns all known values for SNOMEDCTEntityCategory. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SNOMEDCTEntityCategory) Values() []SNOMEDCTEntityCategory {
	return []SNOMEDCTEntityCategory{
		"MEDICAL_CONDITION",
		"ANATOMY",
		"TEST_TREATMENT_PROCEDURE",
	}
}

type SNOMEDCTEntityType string

// Enum values for SNOMEDCTEntityType
const (
	SNOMEDCTEntityTypeDxName        SNOMEDCTEntityType = "DX_NAME"
	SNOMEDCTEntityTypeTestName      SNOMEDCTEntityType = "TEST_NAME"
	SNOMEDCTEntityTypeProcedureName SNOMEDCTEntityType = "PROCEDURE_NAME"
	SNOMEDCTEntityTypeTreatmentName SNOMEDCTEntityType = "TREATMENT_NAME"
)

// Values returns all known values for SNOMEDCTEntityType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SNOMEDCTEntityType) Values() []SNOMEDCTEntityType {
	return []SNOMEDCTEntityType{
		"DX_NAME",
		"TEST_NAME",
		"PROCEDURE_NAME",
		"TREATMENT_NAME",
	}
}

type SNOMEDCTRelationshipType string

// Enum values for SNOMEDCTRelationshipType
const (
	SNOMEDCTRelationshipTypeAcuity          SNOMEDCTRelationshipType = "ACUITY"
	SNOMEDCTRelationshipTypeQuality         SNOMEDCTRelationshipType = "QUALITY"
	SNOMEDCTRelationshipTypeTestValue       SNOMEDCTRelationshipType = "TEST_VALUE"
	SNOMEDCTRelationshipTypeTestUnits       SNOMEDCTRelationshipType = "TEST_UNITS"
	SNOMEDCTRelationshipTypeDirection       SNOMEDCTRelationshipType = "DIRECTION"
	SNOMEDCTRelationshipTypeSystemOrganSite SNOMEDCTRelationshipType = "SYSTEM_ORGAN_SITE"
	SNOMEDCTRelationshipTypeTestUnit        SNOMEDCTRelationshipType = "TEST_UNIT"
)

// Values returns all known values for SNOMEDCTRelationshipType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SNOMEDCTRelationshipType) Values() []SNOMEDCTRelationshipType {
	return []SNOMEDCTRelationshipType{
		"ACUITY",
		"QUALITY",
		"TEST_VALUE",
		"TEST_UNITS",
		"DIRECTION",
		"SYSTEM_ORGAN_SITE",
		"TEST_UNIT",
	}
}

type SNOMEDCTTraitName string

// Enum values for SNOMEDCTTraitName
const (
	SNOMEDCTTraitNameNegation         SNOMEDCTTraitName = "NEGATION"
	SNOMEDCTTraitNameDiagnosis        SNOMEDCTTraitName = "DIAGNOSIS"
	SNOMEDCTTraitNameSign             SNOMEDCTTraitName = "SIGN"
	SNOMEDCTTraitNameSymptom          SNOMEDCTTraitName = "SYMPTOM"
	SNOMEDCTTraitNamePertainsToFamily SNOMEDCTTraitName = "PERTAINS_TO_FAMILY"
	SNOMEDCTTraitNameHypothetical     SNOMEDCTTraitName = "HYPOTHETICAL"
	SNOMEDCTTraitNameLowConfidence    SNOMEDCTTraitName = "LOW_CONFIDENCE"
	SNOMEDCTTraitNamePastHistory      SNOMEDCTTraitName = "PAST_HISTORY"
	SNOMEDCTTraitNameFuture           SNOMEDCTTraitName = "FUTURE"
)

// Values returns all known values for SNOMEDCTTraitName. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SNOMEDCTTraitName) Values() []SNOMEDCTTraitName {
	return []SNOMEDCTTraitName{
		"NEGATION",
		"DIAGNOSIS",
		"SIGN",
		"SYMPTOM",
		"PERTAINS_TO_FAMILY",
		"HYPOTHETICAL",
		"LOW_CONFIDENCE",
		"PAST_HISTORY",
		"FUTURE",
	}
}
