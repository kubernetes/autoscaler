// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AgentStatus string

// Enum values for AgentStatus
const (
	AgentStatusSuccess  AgentStatus = "SUCCESS"
	AgentStatusFailed   AgentStatus = "FAILED"
	AgentStatusActive   AgentStatus = "ACTIVE"
	AgentStatusInactive AgentStatus = "INACTIVE"
)

// Values returns all known values for AgentStatus. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AgentStatus) Values() []AgentStatus {
	return []AgentStatus{
		"SUCCESS",
		"FAILED",
		"ACTIVE",
		"INACTIVE",
	}
}

type AngleUnits string

// Enum values for AngleUnits
const (
	AngleUnitsDegreeAngle AngleUnits = "DEGREE_ANGLE"
	AngleUnitsRadian      AngleUnits = "RADIAN"
)

// Values returns all known values for AngleUnits. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AngleUnits) Values() []AngleUnits {
	return []AngleUnits{
		"DEGREE_ANGLE",
		"RADIAN",
	}
}

type AuditResults string

// Enum values for AuditResults
const (
	AuditResultsHealthy   AuditResults = "HEALTHY"
	AuditResultsUnhealthy AuditResults = "UNHEALTHY"
)

// Values returns all known values for AuditResults. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AuditResults) Values() []AuditResults {
	return []AuditResults{
		"HEALTHY",
		"UNHEALTHY",
	}
}

type BandwidthUnits string

// Enum values for BandwidthUnits
const (
	BandwidthUnitsGhz BandwidthUnits = "GHz"
	BandwidthUnitsMhz BandwidthUnits = "MHz"
	BandwidthUnitsKhz BandwidthUnits = "kHz"
)

// Values returns all known values for BandwidthUnits. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (BandwidthUnits) Values() []BandwidthUnits {
	return []BandwidthUnits{
		"GHz",
		"MHz",
		"kHz",
	}
}

type CapabilityHealth string

// Enum values for CapabilityHealth
const (
	CapabilityHealthHealthy   CapabilityHealth = "HEALTHY"
	CapabilityHealthUnhealthy CapabilityHealth = "UNHEALTHY"
)

// Values returns all known values for CapabilityHealth. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CapabilityHealth) Values() []CapabilityHealth {
	return []CapabilityHealth{
		"HEALTHY",
		"UNHEALTHY",
	}
}

type CapabilityHealthReason string

// Enum values for CapabilityHealthReason
const (
	CapabilityHealthReasonNoRegisteredAgent        CapabilityHealthReason = "NO_REGISTERED_AGENT"
	CapabilityHealthReasonInvalidIpOwnership       CapabilityHealthReason = "INVALID_IP_OWNERSHIP"
	CapabilityHealthReasonNotAuthorizedToCreateSlr CapabilityHealthReason = "NOT_AUTHORIZED_TO_CREATE_SLR"
	CapabilityHealthReasonUnverifiedIpOwnership    CapabilityHealthReason = "UNVERIFIED_IP_OWNERSHIP"
	CapabilityHealthReasonInitializingDataplane    CapabilityHealthReason = "INITIALIZING_DATAPLANE"
	CapabilityHealthReasonDataplaneFailure         CapabilityHealthReason = "DATAPLANE_FAILURE"
	CapabilityHealthReasonHealthy                  CapabilityHealthReason = "HEALTHY"
)

// Values returns all known values for CapabilityHealthReason. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CapabilityHealthReason) Values() []CapabilityHealthReason {
	return []CapabilityHealthReason{
		"NO_REGISTERED_AGENT",
		"INVALID_IP_OWNERSHIP",
		"NOT_AUTHORIZED_TO_CREATE_SLR",
		"UNVERIFIED_IP_OWNERSHIP",
		"INITIALIZING_DATAPLANE",
		"DATAPLANE_FAILURE",
		"HEALTHY",
	}
}

type ConfigCapabilityType string

// Enum values for ConfigCapabilityType
const (
	ConfigCapabilityTypeAntennaDownlink            ConfigCapabilityType = "antenna-downlink"
	ConfigCapabilityTypeAntennaDownlinkDemodDecode ConfigCapabilityType = "antenna-downlink-demod-decode"
	ConfigCapabilityTypeTracking                   ConfigCapabilityType = "tracking"
	ConfigCapabilityTypeDataflowEndpoint           ConfigCapabilityType = "dataflow-endpoint"
	ConfigCapabilityTypeAntennaUplink              ConfigCapabilityType = "antenna-uplink"
	ConfigCapabilityTypeUplinkEcho                 ConfigCapabilityType = "uplink-echo"
	ConfigCapabilityTypeS3Recording                ConfigCapabilityType = "s3-recording"
)

// Values returns all known values for ConfigCapabilityType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ConfigCapabilityType) Values() []ConfigCapabilityType {
	return []ConfigCapabilityType{
		"antenna-downlink",
		"antenna-downlink-demod-decode",
		"tracking",
		"dataflow-endpoint",
		"antenna-uplink",
		"uplink-echo",
		"s3-recording",
	}
}

type ContactStatus string

// Enum values for ContactStatus
const (
	ContactStatusScheduling       ContactStatus = "SCHEDULING"
	ContactStatusFailedToSchedule ContactStatus = "FAILED_TO_SCHEDULE"
	ContactStatusScheduled        ContactStatus = "SCHEDULED"
	ContactStatusCancelled        ContactStatus = "CANCELLED"
	ContactStatusAwsCancelled     ContactStatus = "AWS_CANCELLED"
	ContactStatusPrepass          ContactStatus = "PREPASS"
	ContactStatusPass             ContactStatus = "PASS"
	ContactStatusPostpass         ContactStatus = "POSTPASS"
	ContactStatusCompleted        ContactStatus = "COMPLETED"
	ContactStatusFailed           ContactStatus = "FAILED"
	ContactStatusAvailable        ContactStatus = "AVAILABLE"
	ContactStatusCancelling       ContactStatus = "CANCELLING"
	ContactStatusAwsFailed        ContactStatus = "AWS_FAILED"
)

// Values returns all known values for ContactStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ContactStatus) Values() []ContactStatus {
	return []ContactStatus{
		"SCHEDULING",
		"FAILED_TO_SCHEDULE",
		"SCHEDULED",
		"CANCELLED",
		"AWS_CANCELLED",
		"PREPASS",
		"PASS",
		"POSTPASS",
		"COMPLETED",
		"FAILED",
		"AVAILABLE",
		"CANCELLING",
		"AWS_FAILED",
	}
}

type Criticality string

// Enum values for Criticality
const (
	CriticalityRequired  Criticality = "REQUIRED"
	CriticalityPreferred Criticality = "PREFERRED"
	CriticalityRemoved   Criticality = "REMOVED"
)

// Values returns all known values for Criticality. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Criticality) Values() []Criticality {
	return []Criticality{
		"REQUIRED",
		"PREFERRED",
		"REMOVED",
	}
}

type EirpUnits string

// Enum values for EirpUnits
const (
	EirpUnitsDbw EirpUnits = "dBW"
)

// Values returns all known values for EirpUnits. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EirpUnits) Values() []EirpUnits {
	return []EirpUnits{
		"dBW",
	}
}

type EndpointStatus string

// Enum values for EndpointStatus
const (
	EndpointStatusCreated  EndpointStatus = "created"
	EndpointStatusCreating EndpointStatus = "creating"
	EndpointStatusDeleted  EndpointStatus = "deleted"
	EndpointStatusDeleting EndpointStatus = "deleting"
	EndpointStatusFailed   EndpointStatus = "failed"
)

// Values returns all known values for EndpointStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EndpointStatus) Values() []EndpointStatus {
	return []EndpointStatus{
		"created",
		"creating",
		"deleted",
		"deleting",
		"failed",
	}
}

type EphemerisInvalidReason string

// Enum values for EphemerisInvalidReason
const (
	// Provided spacecraft identifiers such as spacecraft NORAD Id are invalid
	EphemerisInvalidReasonMetadataInvalid EphemerisInvalidReason = "METADATA_INVALID"
	// Start, end, or expiration time(s) are invalid for the provided ephemeris
	EphemerisInvalidReasonTimeRangeInvalid EphemerisInvalidReason = "TIME_RANGE_INVALID"
	// Provided ephemeris defines invalid spacecraft trajectory
	EphemerisInvalidReasonTrajectoryInvalid EphemerisInvalidReason = "TRAJECTORY_INVALID"
	// Provided KMS key is invalid
	EphemerisInvalidReasonKmsKeyInvalid EphemerisInvalidReason = "KMS_KEY_INVALID"
	// Internal Service Error occurred while processing ephemeris
	EphemerisInvalidReasonValidationError EphemerisInvalidReason = "VALIDATION_ERROR"
)

// Values returns all known values for EphemerisInvalidReason. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EphemerisInvalidReason) Values() []EphemerisInvalidReason {
	return []EphemerisInvalidReason{
		"METADATA_INVALID",
		"TIME_RANGE_INVALID",
		"TRAJECTORY_INVALID",
		"KMS_KEY_INVALID",
		"VALIDATION_ERROR",
	}
}

type EphemerisSource string

// Enum values for EphemerisSource
const (
	EphemerisSourceCustomerProvided EphemerisSource = "CUSTOMER_PROVIDED"
	EphemerisSourceSpaceTrack       EphemerisSource = "SPACE_TRACK"
)

// Values returns all known values for EphemerisSource. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EphemerisSource) Values() []EphemerisSource {
	return []EphemerisSource{
		"CUSTOMER_PROVIDED",
		"SPACE_TRACK",
	}
}

type EphemerisStatus string

// Enum values for EphemerisStatus
const (
	EphemerisStatusValidating EphemerisStatus = "VALIDATING"
	EphemerisStatusInvalid    EphemerisStatus = "INVALID"
	EphemerisStatusError      EphemerisStatus = "ERROR"
	EphemerisStatusEnabled    EphemerisStatus = "ENABLED"
	EphemerisStatusDisabled   EphemerisStatus = "DISABLED"
	EphemerisStatusExpired    EphemerisStatus = "EXPIRED"
)

// Values returns all known values for EphemerisStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EphemerisStatus) Values() []EphemerisStatus {
	return []EphemerisStatus{
		"VALIDATING",
		"INVALID",
		"ERROR",
		"ENABLED",
		"DISABLED",
		"EXPIRED",
	}
}

type FrequencyUnits string

// Enum values for FrequencyUnits
const (
	FrequencyUnitsGhz FrequencyUnits = "GHz"
	FrequencyUnitsMhz FrequencyUnits = "MHz"
	FrequencyUnitsKhz FrequencyUnits = "kHz"
)

// Values returns all known values for FrequencyUnits. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FrequencyUnits) Values() []FrequencyUnits {
	return []FrequencyUnits{
		"GHz",
		"MHz",
		"kHz",
	}
}

type Polarization string

// Enum values for Polarization
const (
	PolarizationRightHand Polarization = "RIGHT_HAND"
	PolarizationLeftHand  Polarization = "LEFT_HAND"
	PolarizationNone      Polarization = "NONE"
)

// Values returns all known values for Polarization. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Polarization) Values() []Polarization {
	return []Polarization{
		"RIGHT_HAND",
		"LEFT_HAND",
		"NONE",
	}
}
