// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type BaseModelName string

// Enum values for BaseModelName
const (
	BaseModelNameNarrowBand BaseModelName = "NarrowBand"
	BaseModelNameWideBand   BaseModelName = "WideBand"
)

// Values returns all known values for BaseModelName. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (BaseModelName) Values() []BaseModelName {
	return []BaseModelName{
		"NarrowBand",
		"WideBand",
	}
}

type CallAnalyticsFeature string

// Enum values for CallAnalyticsFeature
const (
	CallAnalyticsFeatureGenerativeSummarization CallAnalyticsFeature = "GENERATIVE_SUMMARIZATION"
)

// Values returns all known values for CallAnalyticsFeature. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CallAnalyticsFeature) Values() []CallAnalyticsFeature {
	return []CallAnalyticsFeature{
		"GENERATIVE_SUMMARIZATION",
	}
}

type CallAnalyticsJobStatus string

// Enum values for CallAnalyticsJobStatus
const (
	CallAnalyticsJobStatusQueued     CallAnalyticsJobStatus = "QUEUED"
	CallAnalyticsJobStatusInProgress CallAnalyticsJobStatus = "IN_PROGRESS"
	CallAnalyticsJobStatusFailed     CallAnalyticsJobStatus = "FAILED"
	CallAnalyticsJobStatusCompleted  CallAnalyticsJobStatus = "COMPLETED"
)

// Values returns all known values for CallAnalyticsJobStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CallAnalyticsJobStatus) Values() []CallAnalyticsJobStatus {
	return []CallAnalyticsJobStatus{
		"QUEUED",
		"IN_PROGRESS",
		"FAILED",
		"COMPLETED",
	}
}

type CallAnalyticsSkippedReasonCode string

// Enum values for CallAnalyticsSkippedReasonCode
const (
	CallAnalyticsSkippedReasonCodeInsufficientConversationContent CallAnalyticsSkippedReasonCode = "INSUFFICIENT_CONVERSATION_CONTENT"
	CallAnalyticsSkippedReasonCodeFailedSafetyGuidelines          CallAnalyticsSkippedReasonCode = "FAILED_SAFETY_GUIDELINES"
)

// Values returns all known values for CallAnalyticsSkippedReasonCode. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CallAnalyticsSkippedReasonCode) Values() []CallAnalyticsSkippedReasonCode {
	return []CallAnalyticsSkippedReasonCode{
		"INSUFFICIENT_CONVERSATION_CONTENT",
		"FAILED_SAFETY_GUIDELINES",
	}
}

type CLMLanguageCode string

// Enum values for CLMLanguageCode
const (
	CLMLanguageCodeEnUs CLMLanguageCode = "en-US"
	CLMLanguageCodeHiIn CLMLanguageCode = "hi-IN"
	CLMLanguageCodeEsUs CLMLanguageCode = "es-US"
	CLMLanguageCodeEnGb CLMLanguageCode = "en-GB"
	CLMLanguageCodeEnAu CLMLanguageCode = "en-AU"
	CLMLanguageCodeDeDe CLMLanguageCode = "de-DE"
	CLMLanguageCodeJaJp CLMLanguageCode = "ja-JP"
)

// Values returns all known values for CLMLanguageCode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CLMLanguageCode) Values() []CLMLanguageCode {
	return []CLMLanguageCode{
		"en-US",
		"hi-IN",
		"es-US",
		"en-GB",
		"en-AU",
		"de-DE",
		"ja-JP",
	}
}

type InputType string

// Enum values for InputType
const (
	InputTypeRealTime InputType = "REAL_TIME"
	InputTypePostCall InputType = "POST_CALL"
)

// Values returns all known values for InputType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InputType) Values() []InputType {
	return []InputType{
		"REAL_TIME",
		"POST_CALL",
	}
}

type LanguageCode string

// Enum values for LanguageCode
const (
	LanguageCodeAfZa  LanguageCode = "af-ZA"
	LanguageCodeArAe  LanguageCode = "ar-AE"
	LanguageCodeArSa  LanguageCode = "ar-SA"
	LanguageCodeDaDk  LanguageCode = "da-DK"
	LanguageCodeDeCh  LanguageCode = "de-CH"
	LanguageCodeDeDe  LanguageCode = "de-DE"
	LanguageCodeEnAb  LanguageCode = "en-AB"
	LanguageCodeEnAu  LanguageCode = "en-AU"
	LanguageCodeEnGb  LanguageCode = "en-GB"
	LanguageCodeEnIe  LanguageCode = "en-IE"
	LanguageCodeEnIn  LanguageCode = "en-IN"
	LanguageCodeEnUs  LanguageCode = "en-US"
	LanguageCodeEnWl  LanguageCode = "en-WL"
	LanguageCodeEsEs  LanguageCode = "es-ES"
	LanguageCodeEsUs  LanguageCode = "es-US"
	LanguageCodeFaIr  LanguageCode = "fa-IR"
	LanguageCodeFrCa  LanguageCode = "fr-CA"
	LanguageCodeFrFr  LanguageCode = "fr-FR"
	LanguageCodeHeIl  LanguageCode = "he-IL"
	LanguageCodeHiIn  LanguageCode = "hi-IN"
	LanguageCodeIdId  LanguageCode = "id-ID"
	LanguageCodeItIt  LanguageCode = "it-IT"
	LanguageCodeJaJp  LanguageCode = "ja-JP"
	LanguageCodeKoKr  LanguageCode = "ko-KR"
	LanguageCodeMsMy  LanguageCode = "ms-MY"
	LanguageCodeNlNl  LanguageCode = "nl-NL"
	LanguageCodePtBr  LanguageCode = "pt-BR"
	LanguageCodePtPt  LanguageCode = "pt-PT"
	LanguageCodeRuRu  LanguageCode = "ru-RU"
	LanguageCodeTaIn  LanguageCode = "ta-IN"
	LanguageCodeTeIn  LanguageCode = "te-IN"
	LanguageCodeTrTr  LanguageCode = "tr-TR"
	LanguageCodeZhCn  LanguageCode = "zh-CN"
	LanguageCodeZhTw  LanguageCode = "zh-TW"
	LanguageCodeThTh  LanguageCode = "th-TH"
	LanguageCodeEnZa  LanguageCode = "en-ZA"
	LanguageCodeEnNz  LanguageCode = "en-NZ"
	LanguageCodeViVn  LanguageCode = "vi-VN"
	LanguageCodeSvSe  LanguageCode = "sv-SE"
	LanguageCodeAbGe  LanguageCode = "ab-GE"
	LanguageCodeAstEs LanguageCode = "ast-ES"
	LanguageCodeAzAz  LanguageCode = "az-AZ"
	LanguageCodeBaRu  LanguageCode = "ba-RU"
	LanguageCodeBeBy  LanguageCode = "be-BY"
	LanguageCodeBgBg  LanguageCode = "bg-BG"
	LanguageCodeBnIn  LanguageCode = "bn-IN"
	LanguageCodeBsBa  LanguageCode = "bs-BA"
	LanguageCodeCaEs  LanguageCode = "ca-ES"
	LanguageCodeCkbIq LanguageCode = "ckb-IQ"
	LanguageCodeCkbIr LanguageCode = "ckb-IR"
	LanguageCodeCsCz  LanguageCode = "cs-CZ"
	LanguageCodeCyWl  LanguageCode = "cy-WL"
	LanguageCodeElGr  LanguageCode = "el-GR"
	LanguageCodeEtEt  LanguageCode = "et-ET"
	LanguageCodeEuEs  LanguageCode = "eu-ES"
	LanguageCodeFiFi  LanguageCode = "fi-FI"
	LanguageCodeGlEs  LanguageCode = "gl-ES"
	LanguageCodeGuIn  LanguageCode = "gu-IN"
	LanguageCodeHaNg  LanguageCode = "ha-NG"
	LanguageCodeHrHr  LanguageCode = "hr-HR"
	LanguageCodeHuHu  LanguageCode = "hu-HU"
	LanguageCodeHyAm  LanguageCode = "hy-AM"
	LanguageCodeIsIs  LanguageCode = "is-IS"
	LanguageCodeKaGe  LanguageCode = "ka-GE"
	LanguageCodeKabDz LanguageCode = "kab-DZ"
	LanguageCodeKkKz  LanguageCode = "kk-KZ"
	LanguageCodeKnIn  LanguageCode = "kn-IN"
	LanguageCodeKyKg  LanguageCode = "ky-KG"
	LanguageCodeLgIn  LanguageCode = "lg-IN"
	LanguageCodeLtLt  LanguageCode = "lt-LT"
	LanguageCodeLvLv  LanguageCode = "lv-LV"
	LanguageCodeMhrRu LanguageCode = "mhr-RU"
	LanguageCodeMiNz  LanguageCode = "mi-NZ"
	LanguageCodeMkMk  LanguageCode = "mk-MK"
	LanguageCodeMlIn  LanguageCode = "ml-IN"
	LanguageCodeMnMn  LanguageCode = "mn-MN"
	LanguageCodeMrIn  LanguageCode = "mr-IN"
	LanguageCodeMtMt  LanguageCode = "mt-MT"
	LanguageCodeNoNo  LanguageCode = "no-NO"
	LanguageCodeOrIn  LanguageCode = "or-IN"
	LanguageCodePaIn  LanguageCode = "pa-IN"
	LanguageCodePlPl  LanguageCode = "pl-PL"
	LanguageCodePsAf  LanguageCode = "ps-AF"
	LanguageCodeRoRo  LanguageCode = "ro-RO"
	LanguageCodeRwRw  LanguageCode = "rw-RW"
	LanguageCodeSiLk  LanguageCode = "si-LK"
	LanguageCodeSkSk  LanguageCode = "sk-SK"
	LanguageCodeSlSi  LanguageCode = "sl-SI"
	LanguageCodeSoSo  LanguageCode = "so-SO"
	LanguageCodeSrRs  LanguageCode = "sr-RS"
	LanguageCodeSuId  LanguageCode = "su-ID"
	LanguageCodeSwBi  LanguageCode = "sw-BI"
	LanguageCodeSwKe  LanguageCode = "sw-KE"
	LanguageCodeSwRw  LanguageCode = "sw-RW"
	LanguageCodeSwTz  LanguageCode = "sw-TZ"
	LanguageCodeSwUg  LanguageCode = "sw-UG"
	LanguageCodeTlPh  LanguageCode = "tl-PH"
	LanguageCodeTtRu  LanguageCode = "tt-RU"
	LanguageCodeUgCn  LanguageCode = "ug-CN"
	LanguageCodeUkUa  LanguageCode = "uk-UA"
	LanguageCodeUzUz  LanguageCode = "uz-UZ"
	LanguageCodeWoSn  LanguageCode = "wo-SN"
	LanguageCodeZhHk  LanguageCode = "zh-HK"
	LanguageCodeZuZa  LanguageCode = "zu-ZA"
)

// Values returns all known values for LanguageCode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LanguageCode) Values() []LanguageCode {
	return []LanguageCode{
		"af-ZA",
		"ar-AE",
		"ar-SA",
		"da-DK",
		"de-CH",
		"de-DE",
		"en-AB",
		"en-AU",
		"en-GB",
		"en-IE",
		"en-IN",
		"en-US",
		"en-WL",
		"es-ES",
		"es-US",
		"fa-IR",
		"fr-CA",
		"fr-FR",
		"he-IL",
		"hi-IN",
		"id-ID",
		"it-IT",
		"ja-JP",
		"ko-KR",
		"ms-MY",
		"nl-NL",
		"pt-BR",
		"pt-PT",
		"ru-RU",
		"ta-IN",
		"te-IN",
		"tr-TR",
		"zh-CN",
		"zh-TW",
		"th-TH",
		"en-ZA",
		"en-NZ",
		"vi-VN",
		"sv-SE",
		"ab-GE",
		"ast-ES",
		"az-AZ",
		"ba-RU",
		"be-BY",
		"bg-BG",
		"bn-IN",
		"bs-BA",
		"ca-ES",
		"ckb-IQ",
		"ckb-IR",
		"cs-CZ",
		"cy-WL",
		"el-GR",
		"et-ET",
		"eu-ES",
		"fi-FI",
		"gl-ES",
		"gu-IN",
		"ha-NG",
		"hr-HR",
		"hu-HU",
		"hy-AM",
		"is-IS",
		"ka-GE",
		"kab-DZ",
		"kk-KZ",
		"kn-IN",
		"ky-KG",
		"lg-IN",
		"lt-LT",
		"lv-LV",
		"mhr-RU",
		"mi-NZ",
		"mk-MK",
		"ml-IN",
		"mn-MN",
		"mr-IN",
		"mt-MT",
		"no-NO",
		"or-IN",
		"pa-IN",
		"pl-PL",
		"ps-AF",
		"ro-RO",
		"rw-RW",
		"si-LK",
		"sk-SK",
		"sl-SI",
		"so-SO",
		"sr-RS",
		"su-ID",
		"sw-BI",
		"sw-KE",
		"sw-RW",
		"sw-TZ",
		"sw-UG",
		"tl-PH",
		"tt-RU",
		"ug-CN",
		"uk-UA",
		"uz-UZ",
		"wo-SN",
		"zh-HK",
		"zu-ZA",
	}
}

type MediaFormat string

// Enum values for MediaFormat
const (
	MediaFormatMp3  MediaFormat = "mp3"
	MediaFormatMp4  MediaFormat = "mp4"
	MediaFormatWav  MediaFormat = "wav"
	MediaFormatFlac MediaFormat = "flac"
	MediaFormatOgg  MediaFormat = "ogg"
	MediaFormatAmr  MediaFormat = "amr"
	MediaFormatWebm MediaFormat = "webm"
	MediaFormatM4a  MediaFormat = "m4a"
)

// Values returns all known values for MediaFormat. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MediaFormat) Values() []MediaFormat {
	return []MediaFormat{
		"mp3",
		"mp4",
		"wav",
		"flac",
		"ogg",
		"amr",
		"webm",
		"m4a",
	}
}

type MedicalContentIdentificationType string

// Enum values for MedicalContentIdentificationType
const (
	MedicalContentIdentificationTypePhi MedicalContentIdentificationType = "PHI"
)

// Values returns all known values for MedicalContentIdentificationType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MedicalContentIdentificationType) Values() []MedicalContentIdentificationType {
	return []MedicalContentIdentificationType{
		"PHI",
	}
}

type MedicalScribeJobStatus string

// Enum values for MedicalScribeJobStatus
const (
	MedicalScribeJobStatusQueued     MedicalScribeJobStatus = "QUEUED"
	MedicalScribeJobStatusInProgress MedicalScribeJobStatus = "IN_PROGRESS"
	MedicalScribeJobStatusFailed     MedicalScribeJobStatus = "FAILED"
	MedicalScribeJobStatusCompleted  MedicalScribeJobStatus = "COMPLETED"
)

// Values returns all known values for MedicalScribeJobStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MedicalScribeJobStatus) Values() []MedicalScribeJobStatus {
	return []MedicalScribeJobStatus{
		"QUEUED",
		"IN_PROGRESS",
		"FAILED",
		"COMPLETED",
	}
}

type MedicalScribeLanguageCode string

// Enum values for MedicalScribeLanguageCode
const (
	MedicalScribeLanguageCodeEnUs MedicalScribeLanguageCode = "en-US"
)

// Values returns all known values for MedicalScribeLanguageCode. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MedicalScribeLanguageCode) Values() []MedicalScribeLanguageCode {
	return []MedicalScribeLanguageCode{
		"en-US",
	}
}

type MedicalScribeNoteTemplate string

// Enum values for MedicalScribeNoteTemplate
const (
	MedicalScribeNoteTemplateHistoryAndPhysical MedicalScribeNoteTemplate = "HISTORY_AND_PHYSICAL"
	MedicalScribeNoteTemplateGirpp              MedicalScribeNoteTemplate = "GIRPP"
	MedicalScribeNoteTemplateBirp               MedicalScribeNoteTemplate = "BIRP"
	MedicalScribeNoteTemplateSirp               MedicalScribeNoteTemplate = "SIRP"
	MedicalScribeNoteTemplateDap                MedicalScribeNoteTemplate = "DAP"
	MedicalScribeNoteTemplateBehavioralSoap     MedicalScribeNoteTemplate = "BEHAVIORAL_SOAP"
	MedicalScribeNoteTemplatePhysicalSoap       MedicalScribeNoteTemplate = "PHYSICAL_SOAP"
)

// Values returns all known values for MedicalScribeNoteTemplate. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MedicalScribeNoteTemplate) Values() []MedicalScribeNoteTemplate {
	return []MedicalScribeNoteTemplate{
		"HISTORY_AND_PHYSICAL",
		"GIRPP",
		"BIRP",
		"SIRP",
		"DAP",
		"BEHAVIORAL_SOAP",
		"PHYSICAL_SOAP",
	}
}

type MedicalScribeParticipantRole string

// Enum values for MedicalScribeParticipantRole
const (
	MedicalScribeParticipantRolePatient   MedicalScribeParticipantRole = "PATIENT"
	MedicalScribeParticipantRoleClinician MedicalScribeParticipantRole = "CLINICIAN"
)

// Values returns all known values for MedicalScribeParticipantRole. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MedicalScribeParticipantRole) Values() []MedicalScribeParticipantRole {
	return []MedicalScribeParticipantRole{
		"PATIENT",
		"CLINICIAN",
	}
}

type ModelStatus string

// Enum values for ModelStatus
const (
	ModelStatusInProgress ModelStatus = "IN_PROGRESS"
	ModelStatusFailed     ModelStatus = "FAILED"
	ModelStatusCompleted  ModelStatus = "COMPLETED"
)

// Values returns all known values for ModelStatus. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ModelStatus) Values() []ModelStatus {
	return []ModelStatus{
		"IN_PROGRESS",
		"FAILED",
		"COMPLETED",
	}
}

type OutputLocationType string

// Enum values for OutputLocationType
const (
	OutputLocationTypeCustomerBucket OutputLocationType = "CUSTOMER_BUCKET"
	OutputLocationTypeServiceBucket  OutputLocationType = "SERVICE_BUCKET"
)

// Values returns all known values for OutputLocationType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (OutputLocationType) Values() []OutputLocationType {
	return []OutputLocationType{
		"CUSTOMER_BUCKET",
		"SERVICE_BUCKET",
	}
}

type ParticipantRole string

// Enum values for ParticipantRole
const (
	ParticipantRoleAgent    ParticipantRole = "AGENT"
	ParticipantRoleCustomer ParticipantRole = "CUSTOMER"
)

// Values returns all known values for ParticipantRole. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ParticipantRole) Values() []ParticipantRole {
	return []ParticipantRole{
		"AGENT",
		"CUSTOMER",
	}
}

type PiiEntityType string

// Enum values for PiiEntityType
const (
	PiiEntityTypeBankAccountNumber PiiEntityType = "BANK_ACCOUNT_NUMBER"
	PiiEntityTypeBankRouting       PiiEntityType = "BANK_ROUTING"
	PiiEntityTypeCreditDebitNumber PiiEntityType = "CREDIT_DEBIT_NUMBER"
	PiiEntityTypeCreditDebitCvv    PiiEntityType = "CREDIT_DEBIT_CVV"
	PiiEntityTypeCreditDebitExpiry PiiEntityType = "CREDIT_DEBIT_EXPIRY"
	PiiEntityTypePin               PiiEntityType = "PIN"
	PiiEntityTypeEmail             PiiEntityType = "EMAIL"
	PiiEntityTypeAddress           PiiEntityType = "ADDRESS"
	PiiEntityTypeName              PiiEntityType = "NAME"
	PiiEntityTypePhone             PiiEntityType = "PHONE"
	PiiEntityTypeSsn               PiiEntityType = "SSN"
	PiiEntityTypeAll               PiiEntityType = "ALL"
)

// Values returns all known values for PiiEntityType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PiiEntityType) Values() []PiiEntityType {
	return []PiiEntityType{
		"BANK_ACCOUNT_NUMBER",
		"BANK_ROUTING",
		"CREDIT_DEBIT_NUMBER",
		"CREDIT_DEBIT_CVV",
		"CREDIT_DEBIT_EXPIRY",
		"PIN",
		"EMAIL",
		"ADDRESS",
		"NAME",
		"PHONE",
		"SSN",
		"ALL",
	}
}

type RedactionOutput string

// Enum values for RedactionOutput
const (
	RedactionOutputRedacted              RedactionOutput = "redacted"
	RedactionOutputRedactedAndUnredacted RedactionOutput = "redacted_and_unredacted"
)

// Values returns all known values for RedactionOutput. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RedactionOutput) Values() []RedactionOutput {
	return []RedactionOutput{
		"redacted",
		"redacted_and_unredacted",
	}
}

type RedactionType string

// Enum values for RedactionType
const (
	RedactionTypePii RedactionType = "PII"
)

// Values returns all known values for RedactionType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RedactionType) Values() []RedactionType {
	return []RedactionType{
		"PII",
	}
}

type SentimentValue string

// Enum values for SentimentValue
const (
	SentimentValuePositive SentimentValue = "POSITIVE"
	SentimentValueNegative SentimentValue = "NEGATIVE"
	SentimentValueNeutral  SentimentValue = "NEUTRAL"
	SentimentValueMixed    SentimentValue = "MIXED"
)

// Values returns all known values for SentimentValue. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SentimentValue) Values() []SentimentValue {
	return []SentimentValue{
		"POSITIVE",
		"NEGATIVE",
		"NEUTRAL",
		"MIXED",
	}
}

type Specialty string

// Enum values for Specialty
const (
	SpecialtyPrimarycare Specialty = "PRIMARYCARE"
)

// Values returns all known values for Specialty. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Specialty) Values() []Specialty {
	return []Specialty{
		"PRIMARYCARE",
	}
}

type SubtitleFormat string

// Enum values for SubtitleFormat
const (
	SubtitleFormatVtt SubtitleFormat = "vtt"
	SubtitleFormatSrt SubtitleFormat = "srt"
)

// Values returns all known values for SubtitleFormat. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SubtitleFormat) Values() []SubtitleFormat {
	return []SubtitleFormat{
		"vtt",
		"srt",
	}
}

type ToxicityCategory string

// Enum values for ToxicityCategory
const (
	ToxicityCategoryAll ToxicityCategory = "ALL"
)

// Values returns all known values for ToxicityCategory. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ToxicityCategory) Values() []ToxicityCategory {
	return []ToxicityCategory{
		"ALL",
	}
}

type TranscriptFilterType string

// Enum values for TranscriptFilterType
const (
	TranscriptFilterTypeExact TranscriptFilterType = "EXACT"
)

// Values returns all known values for TranscriptFilterType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TranscriptFilterType) Values() []TranscriptFilterType {
	return []TranscriptFilterType{
		"EXACT",
	}
}

type TranscriptionJobStatus string

// Enum values for TranscriptionJobStatus
const (
	TranscriptionJobStatusQueued     TranscriptionJobStatus = "QUEUED"
	TranscriptionJobStatusInProgress TranscriptionJobStatus = "IN_PROGRESS"
	TranscriptionJobStatusFailed     TranscriptionJobStatus = "FAILED"
	TranscriptionJobStatusCompleted  TranscriptionJobStatus = "COMPLETED"
)

// Values returns all known values for TranscriptionJobStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TranscriptionJobStatus) Values() []TranscriptionJobStatus {
	return []TranscriptionJobStatus{
		"QUEUED",
		"IN_PROGRESS",
		"FAILED",
		"COMPLETED",
	}
}

type Type string

// Enum values for Type
const (
	TypeConversation Type = "CONVERSATION"
	TypeDictation    Type = "DICTATION"
)

// Values returns all known values for Type. Note that this can be expanded in the
// future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Type) Values() []Type {
	return []Type{
		"CONVERSATION",
		"DICTATION",
	}
}

type VocabularyFilterMethod string

// Enum values for VocabularyFilterMethod
const (
	VocabularyFilterMethodRemove VocabularyFilterMethod = "remove"
	VocabularyFilterMethodMask   VocabularyFilterMethod = "mask"
	VocabularyFilterMethodTag    VocabularyFilterMethod = "tag"
)

// Values returns all known values for VocabularyFilterMethod. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (VocabularyFilterMethod) Values() []VocabularyFilterMethod {
	return []VocabularyFilterMethod{
		"remove",
		"mask",
		"tag",
	}
}

type VocabularyState string

// Enum values for VocabularyState
const (
	VocabularyStatePending VocabularyState = "PENDING"
	VocabularyStateReady   VocabularyState = "READY"
	VocabularyStateFailed  VocabularyState = "FAILED"
)

// Values returns all known values for VocabularyState. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (VocabularyState) Values() []VocabularyState {
	return []VocabularyState{
		"PENDING",
		"READY",
		"FAILED",
	}
}
