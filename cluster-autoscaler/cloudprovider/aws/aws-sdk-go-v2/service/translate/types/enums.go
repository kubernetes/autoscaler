// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type Brevity string

// Enum values for Brevity
const (
	BrevityOn Brevity = "ON"
)

// Values returns all known values for Brevity. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Brevity) Values() []Brevity {
	return []Brevity{
		"ON",
	}
}

type Directionality string

// Enum values for Directionality
const (
	DirectionalityUni   Directionality = "UNI"
	DirectionalityMulti Directionality = "MULTI"
)

// Values returns all known values for Directionality. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Directionality) Values() []Directionality {
	return []Directionality{
		"UNI",
		"MULTI",
	}
}

type DisplayLanguageCode string

// Enum values for DisplayLanguageCode
const (
	DisplayLanguageCodeDe   DisplayLanguageCode = "de"
	DisplayLanguageCodeEn   DisplayLanguageCode = "en"
	DisplayLanguageCodeEs   DisplayLanguageCode = "es"
	DisplayLanguageCodeFr   DisplayLanguageCode = "fr"
	DisplayLanguageCodeIt   DisplayLanguageCode = "it"
	DisplayLanguageCodeJa   DisplayLanguageCode = "ja"
	DisplayLanguageCodeKo   DisplayLanguageCode = "ko"
	DisplayLanguageCodePt   DisplayLanguageCode = "pt"
	DisplayLanguageCodeZh   DisplayLanguageCode = "zh"
	DisplayLanguageCodeZhTw DisplayLanguageCode = "zh-TW"
)

// Values returns all known values for DisplayLanguageCode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DisplayLanguageCode) Values() []DisplayLanguageCode {
	return []DisplayLanguageCode{
		"de",
		"en",
		"es",
		"fr",
		"it",
		"ja",
		"ko",
		"pt",
		"zh",
		"zh-TW",
	}
}

type EncryptionKeyType string

// Enum values for EncryptionKeyType
const (
	EncryptionKeyTypeKms EncryptionKeyType = "KMS"
)

// Values returns all known values for EncryptionKeyType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EncryptionKeyType) Values() []EncryptionKeyType {
	return []EncryptionKeyType{
		"KMS",
	}
}

type Formality string

// Enum values for Formality
const (
	FormalityFormal   Formality = "FORMAL"
	FormalityInformal Formality = "INFORMAL"
)

// Values returns all known values for Formality. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Formality) Values() []Formality {
	return []Formality{
		"FORMAL",
		"INFORMAL",
	}
}

type JobStatus string

// Enum values for JobStatus
const (
	JobStatusSubmitted          JobStatus = "SUBMITTED"
	JobStatusInProgress         JobStatus = "IN_PROGRESS"
	JobStatusCompleted          JobStatus = "COMPLETED"
	JobStatusCompletedWithError JobStatus = "COMPLETED_WITH_ERROR"
	JobStatusFailed             JobStatus = "FAILED"
	JobStatusStopRequested      JobStatus = "STOP_REQUESTED"
	JobStatusStopped            JobStatus = "STOPPED"
)

// Values returns all known values for JobStatus. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (JobStatus) Values() []JobStatus {
	return []JobStatus{
		"SUBMITTED",
		"IN_PROGRESS",
		"COMPLETED",
		"COMPLETED_WITH_ERROR",
		"FAILED",
		"STOP_REQUESTED",
		"STOPPED",
	}
}

type MergeStrategy string

// Enum values for MergeStrategy
const (
	MergeStrategyOverwrite MergeStrategy = "OVERWRITE"
)

// Values returns all known values for MergeStrategy. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MergeStrategy) Values() []MergeStrategy {
	return []MergeStrategy{
		"OVERWRITE",
	}
}

type ParallelDataFormat string

// Enum values for ParallelDataFormat
const (
	ParallelDataFormatTsv ParallelDataFormat = "TSV"
	ParallelDataFormatCsv ParallelDataFormat = "CSV"
	ParallelDataFormatTmx ParallelDataFormat = "TMX"
)

// Values returns all known values for ParallelDataFormat. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ParallelDataFormat) Values() []ParallelDataFormat {
	return []ParallelDataFormat{
		"TSV",
		"CSV",
		"TMX",
	}
}

type ParallelDataStatus string

// Enum values for ParallelDataStatus
const (
	ParallelDataStatusCreating ParallelDataStatus = "CREATING"
	ParallelDataStatusUpdating ParallelDataStatus = "UPDATING"
	ParallelDataStatusActive   ParallelDataStatus = "ACTIVE"
	ParallelDataStatusDeleting ParallelDataStatus = "DELETING"
	ParallelDataStatusFailed   ParallelDataStatus = "FAILED"
)

// Values returns all known values for ParallelDataStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ParallelDataStatus) Values() []ParallelDataStatus {
	return []ParallelDataStatus{
		"CREATING",
		"UPDATING",
		"ACTIVE",
		"DELETING",
		"FAILED",
	}
}

type Profanity string

// Enum values for Profanity
const (
	ProfanityMask Profanity = "MASK"
)

// Values returns all known values for Profanity. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Profanity) Values() []Profanity {
	return []Profanity{
		"MASK",
	}
}

type TerminologyDataFormat string

// Enum values for TerminologyDataFormat
const (
	TerminologyDataFormatCsv TerminologyDataFormat = "CSV"
	TerminologyDataFormatTmx TerminologyDataFormat = "TMX"
	TerminologyDataFormatTsv TerminologyDataFormat = "TSV"
)

// Values returns all known values for TerminologyDataFormat. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TerminologyDataFormat) Values() []TerminologyDataFormat {
	return []TerminologyDataFormat{
		"CSV",
		"TMX",
		"TSV",
	}
}
