// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AccessType string

// Enum values for AccessType
const (
	AccessTypeLakeformation AccessType = "LAKEFORMATION"
	AccessTypeS3            AccessType = "S3"
)

// Values returns all known values for AccessType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AccessType) Values() []AccessType {
	return []AccessType{
		"LAKEFORMATION",
		"S3",
	}
}

type AwsLogSourceName string

// Enum values for AwsLogSourceName
const (
	AwsLogSourceNameRoute53         AwsLogSourceName = "ROUTE53"
	AwsLogSourceNameVpcFlow         AwsLogSourceName = "VPC_FLOW"
	AwsLogSourceNameShFindings      AwsLogSourceName = "SH_FINDINGS"
	AwsLogSourceNameCloudTrailMgmt  AwsLogSourceName = "CLOUD_TRAIL_MGMT"
	AwsLogSourceNameLambdaExecution AwsLogSourceName = "LAMBDA_EXECUTION"
	AwsLogSourceNameS3Data          AwsLogSourceName = "S3_DATA"
	AwsLogSourceNameEksAudit        AwsLogSourceName = "EKS_AUDIT"
	AwsLogSourceNameWaf             AwsLogSourceName = "WAF"
)

// Values returns all known values for AwsLogSourceName. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AwsLogSourceName) Values() []AwsLogSourceName {
	return []AwsLogSourceName{
		"ROUTE53",
		"VPC_FLOW",
		"SH_FINDINGS",
		"CLOUD_TRAIL_MGMT",
		"LAMBDA_EXECUTION",
		"S3_DATA",
		"EKS_AUDIT",
		"WAF",
	}
}

type DataLakeStatus string

// Enum values for DataLakeStatus
const (
	DataLakeStatusInitialized DataLakeStatus = "INITIALIZED"
	DataLakeStatusPending     DataLakeStatus = "PENDING"
	DataLakeStatusCompleted   DataLakeStatus = "COMPLETED"
	DataLakeStatusFailed      DataLakeStatus = "FAILED"
)

// Values returns all known values for DataLakeStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DataLakeStatus) Values() []DataLakeStatus {
	return []DataLakeStatus{
		"INITIALIZED",
		"PENDING",
		"COMPLETED",
		"FAILED",
	}
}

type HttpMethod string

// Enum values for HttpMethod
const (
	HttpMethodPost HttpMethod = "POST"
	HttpMethodPut  HttpMethod = "PUT"
)

// Values returns all known values for HttpMethod. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HttpMethod) Values() []HttpMethod {
	return []HttpMethod{
		"POST",
		"PUT",
	}
}

type SourceCollectionStatus string

// Enum values for SourceCollectionStatus
const (
	SourceCollectionStatusCollecting    SourceCollectionStatus = "COLLECTING"
	SourceCollectionStatusMisconfigured SourceCollectionStatus = "MISCONFIGURED"
	SourceCollectionStatusNotCollecting SourceCollectionStatus = "NOT_COLLECTING"
)

// Values returns all known values for SourceCollectionStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SourceCollectionStatus) Values() []SourceCollectionStatus {
	return []SourceCollectionStatus{
		"COLLECTING",
		"MISCONFIGURED",
		"NOT_COLLECTING",
	}
}

type SubscriberStatus string

// Enum values for SubscriberStatus
const (
	SubscriberStatusActive      SubscriberStatus = "ACTIVE"
	SubscriberStatusDeactivated SubscriberStatus = "DEACTIVATED"
	SubscriberStatusPending     SubscriberStatus = "PENDING"
	SubscriberStatusReady       SubscriberStatus = "READY"
)

// Values returns all known values for SubscriberStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SubscriberStatus) Values() []SubscriberStatus {
	return []SubscriberStatus{
		"ACTIVE",
		"DEACTIVATED",
		"PENDING",
		"READY",
	}
}
