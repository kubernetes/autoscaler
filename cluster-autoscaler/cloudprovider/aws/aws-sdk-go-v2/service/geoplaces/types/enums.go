// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AutocompleteAdditionalFeature string

// Enum values for AutocompleteAdditionalFeature
const (
	AutocompleteAdditionalFeatureCore AutocompleteAdditionalFeature = "Core"
)

// Values returns all known values for AutocompleteAdditionalFeature. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AutocompleteAdditionalFeature) Values() []AutocompleteAdditionalFeature {
	return []AutocompleteAdditionalFeature{
		"Core",
	}
}

type AutocompleteFilterPlaceType string

// Enum values for AutocompleteFilterPlaceType
const (
	AutocompleteFilterPlaceTypeLocality   AutocompleteFilterPlaceType = "Locality"
	AutocompleteFilterPlaceTypePostalCode AutocompleteFilterPlaceType = "PostalCode"
)

// Values returns all known values for AutocompleteFilterPlaceType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AutocompleteFilterPlaceType) Values() []AutocompleteFilterPlaceType {
	return []AutocompleteFilterPlaceType{
		"Locality",
		"PostalCode",
	}
}

type AutocompleteIntendedUse string

// Enum values for AutocompleteIntendedUse
const (
	// Indicates that results of the operation are for single use, e.g., displaying
	// results on a map or presenting options to users.
	AutocompleteIntendedUseSingleUse AutocompleteIntendedUse = "SingleUse"
)

// Values returns all known values for AutocompleteIntendedUse. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AutocompleteIntendedUse) Values() []AutocompleteIntendedUse {
	return []AutocompleteIntendedUse{
		"SingleUse",
	}
}

type GeocodeAdditionalFeature string

// Enum values for GeocodeAdditionalFeature
const (
	GeocodeAdditionalFeatureTimeZone GeocodeAdditionalFeature = "TimeZone"
	GeocodeAdditionalFeatureAccess   GeocodeAdditionalFeature = "Access"
)

// Values returns all known values for GeocodeAdditionalFeature. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GeocodeAdditionalFeature) Values() []GeocodeAdditionalFeature {
	return []GeocodeAdditionalFeature{
		"TimeZone",
		"Access",
	}
}

type GeocodeFilterPlaceType string

// Enum values for GeocodeFilterPlaceType
const (
	GeocodeFilterPlaceTypeLocality            GeocodeFilterPlaceType = "Locality"
	GeocodeFilterPlaceTypePostalCode          GeocodeFilterPlaceType = "PostalCode"
	GeocodeFilterPlaceTypeIntersection        GeocodeFilterPlaceType = "Intersection"
	GeocodeFilterPlaceTypeStreet              GeocodeFilterPlaceType = "Street"
	GeocodeFilterPlaceTypePointAddress        GeocodeFilterPlaceType = "PointAddress"
	GeocodeFilterPlaceTypeInterpolatedAddress GeocodeFilterPlaceType = "InterpolatedAddress"
)

// Values returns all known values for GeocodeFilterPlaceType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GeocodeFilterPlaceType) Values() []GeocodeFilterPlaceType {
	return []GeocodeFilterPlaceType{
		"Locality",
		"PostalCode",
		"Intersection",
		"Street",
		"PointAddress",
		"InterpolatedAddress",
	}
}

type GeocodeIntendedUse string

// Enum values for GeocodeIntendedUse
const (
	// Indicates that results of the operation are for single use, e.g., displaying
	// results on a map or presenting options to users.
	GeocodeIntendedUseSingleUse GeocodeIntendedUse = "SingleUse"
	// Indicates that results of the operation may be stored locally.
	GeocodeIntendedUseStorage GeocodeIntendedUse = "Storage"
)

// Values returns all known values for GeocodeIntendedUse. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GeocodeIntendedUse) Values() []GeocodeIntendedUse {
	return []GeocodeIntendedUse{
		"SingleUse",
		"Storage",
	}
}

type GetPlaceAdditionalFeature string

// Enum values for GetPlaceAdditionalFeature
const (
	GetPlaceAdditionalFeatureTimeZone GetPlaceAdditionalFeature = "TimeZone"
	GetPlaceAdditionalFeaturePhonemes GetPlaceAdditionalFeature = "Phonemes"
	GetPlaceAdditionalFeatureAccess   GetPlaceAdditionalFeature = "Access"
	GetPlaceAdditionalFeatureContact  GetPlaceAdditionalFeature = "Contact"
)

// Values returns all known values for GetPlaceAdditionalFeature. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GetPlaceAdditionalFeature) Values() []GetPlaceAdditionalFeature {
	return []GetPlaceAdditionalFeature{
		"TimeZone",
		"Phonemes",
		"Access",
		"Contact",
	}
}

type GetPlaceIntendedUse string

// Enum values for GetPlaceIntendedUse
const (
	// Indicates that results of the operation are for single use, e.g., displaying
	// results on a map or presenting options to users.
	GetPlaceIntendedUseSingleUse GetPlaceIntendedUse = "SingleUse"
	// Indicates that results of the operation may be stored locally.
	GetPlaceIntendedUseStorage GetPlaceIntendedUse = "Storage"
)

// Values returns all known values for GetPlaceIntendedUse. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GetPlaceIntendedUse) Values() []GetPlaceIntendedUse {
	return []GetPlaceIntendedUse{
		"SingleUse",
		"Storage",
	}
}

type PlaceType string

// Enum values for PlaceType
const (
	PlaceTypeCountry             PlaceType = "Country"
	PlaceTypeRegion              PlaceType = "Region"
	PlaceTypeSubRegion           PlaceType = "SubRegion"
	PlaceTypeLocality            PlaceType = "Locality"
	PlaceTypeDistrict            PlaceType = "District"
	PlaceTypeSubDistrict         PlaceType = "SubDistrict"
	PlaceTypePostalCode          PlaceType = "PostalCode"
	PlaceTypeBlock               PlaceType = "Block"
	PlaceTypeSubBlock            PlaceType = "SubBlock"
	PlaceTypeIntersection        PlaceType = "Intersection"
	PlaceTypeStreet              PlaceType = "Street"
	PlaceTypePointOfInterest     PlaceType = "PointOfInterest"
	PlaceTypePointAddress        PlaceType = "PointAddress"
	PlaceTypeInterpolatedAddress PlaceType = "InterpolatedAddress"
)

// Values returns all known values for PlaceType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PlaceType) Values() []PlaceType {
	return []PlaceType{
		"Country",
		"Region",
		"SubRegion",
		"Locality",
		"District",
		"SubDistrict",
		"PostalCode",
		"Block",
		"SubBlock",
		"Intersection",
		"Street",
		"PointOfInterest",
		"PointAddress",
		"InterpolatedAddress",
	}
}

type PostalAuthority string

// Enum values for PostalAuthority
const (
	PostalAuthorityUsps PostalAuthority = "Usps"
)

// Values returns all known values for PostalAuthority. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PostalAuthority) Values() []PostalAuthority {
	return []PostalAuthority{
		"Usps",
	}
}

type PostalCodeMode string

// Enum values for PostalCodeMode
const (
	PostalCodeModeMergeAllSpannedLocalities  PostalCodeMode = "MergeAllSpannedLocalities"
	PostalCodeModeEnumerateSpannedLocalities PostalCodeMode = "EnumerateSpannedLocalities"
)

// Values returns all known values for PostalCodeMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PostalCodeMode) Values() []PostalCodeMode {
	return []PostalCodeMode{
		"MergeAllSpannedLocalities",
		"EnumerateSpannedLocalities",
	}
}

type PostalCodeType string

// Enum values for PostalCodeType
const (
	PostalCodeTypeUspsZip      PostalCodeType = "UspsZip"
	PostalCodeTypeUspsZipPlus4 PostalCodeType = "UspsZipPlus4"
)

// Values returns all known values for PostalCodeType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PostalCodeType) Values() []PostalCodeType {
	return []PostalCodeType{
		"UspsZip",
		"UspsZipPlus4",
	}
}

type QueryType string

// Enum values for QueryType
const (
	QueryTypeCategory      QueryType = "Category"
	QueryTypeBusinessChain QueryType = "BusinessChain"
)

// Values returns all known values for QueryType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (QueryType) Values() []QueryType {
	return []QueryType{
		"Category",
		"BusinessChain",
	}
}

type RecordTypeCode string

// Enum values for RecordTypeCode
const (
	RecordTypeCodeFirm          RecordTypeCode = "Firm"
	RecordTypeCodeGeneral       RecordTypeCode = "General"
	RecordTypeCodeHighRise      RecordTypeCode = "HighRise"
	RecordTypeCodePostOfficeBox RecordTypeCode = "PostOfficeBox"
	RecordTypeCodeRural         RecordTypeCode = "Rural"
	RecordTypeCodeStreet        RecordTypeCode = "Street"
)

// Values returns all known values for RecordTypeCode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RecordTypeCode) Values() []RecordTypeCode {
	return []RecordTypeCode{
		"Firm",
		"General",
		"HighRise",
		"PostOfficeBox",
		"Rural",
		"Street",
	}
}

type ReverseGeocodeAdditionalFeature string

// Enum values for ReverseGeocodeAdditionalFeature
const (
	ReverseGeocodeAdditionalFeatureTimeZone ReverseGeocodeAdditionalFeature = "TimeZone"
	ReverseGeocodeAdditionalFeatureAccess   ReverseGeocodeAdditionalFeature = "Access"
)

// Values returns all known values for ReverseGeocodeAdditionalFeature. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ReverseGeocodeAdditionalFeature) Values() []ReverseGeocodeAdditionalFeature {
	return []ReverseGeocodeAdditionalFeature{
		"TimeZone",
		"Access",
	}
}

type ReverseGeocodeFilterPlaceType string

// Enum values for ReverseGeocodeFilterPlaceType
const (
	ReverseGeocodeFilterPlaceTypeLocality            ReverseGeocodeFilterPlaceType = "Locality"
	ReverseGeocodeFilterPlaceTypeIntersection        ReverseGeocodeFilterPlaceType = "Intersection"
	ReverseGeocodeFilterPlaceTypeStreet              ReverseGeocodeFilterPlaceType = "Street"
	ReverseGeocodeFilterPlaceTypePointAddress        ReverseGeocodeFilterPlaceType = "PointAddress"
	ReverseGeocodeFilterPlaceTypeInterpolatedAddress ReverseGeocodeFilterPlaceType = "InterpolatedAddress"
)

// Values returns all known values for ReverseGeocodeFilterPlaceType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ReverseGeocodeFilterPlaceType) Values() []ReverseGeocodeFilterPlaceType {
	return []ReverseGeocodeFilterPlaceType{
		"Locality",
		"Intersection",
		"Street",
		"PointAddress",
		"InterpolatedAddress",
	}
}

type ReverseGeocodeIntendedUse string

// Enum values for ReverseGeocodeIntendedUse
const (
	// Indicates that results of the operation are for single use, e.g., displaying
	// results on a map or presenting options to users.
	ReverseGeocodeIntendedUseSingleUse ReverseGeocodeIntendedUse = "SingleUse"
	// Indicates that results of the operation may be stored locally.
	ReverseGeocodeIntendedUseStorage ReverseGeocodeIntendedUse = "Storage"
)

// Values returns all known values for ReverseGeocodeIntendedUse. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ReverseGeocodeIntendedUse) Values() []ReverseGeocodeIntendedUse {
	return []ReverseGeocodeIntendedUse{
		"SingleUse",
		"Storage",
	}
}

type SearchNearbyAdditionalFeature string

// Enum values for SearchNearbyAdditionalFeature
const (
	SearchNearbyAdditionalFeatureTimeZone SearchNearbyAdditionalFeature = "TimeZone"
	SearchNearbyAdditionalFeaturePhonemes SearchNearbyAdditionalFeature = "Phonemes"
	SearchNearbyAdditionalFeatureAccess   SearchNearbyAdditionalFeature = "Access"
	SearchNearbyAdditionalFeatureContact  SearchNearbyAdditionalFeature = "Contact"
)

// Values returns all known values for SearchNearbyAdditionalFeature. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SearchNearbyAdditionalFeature) Values() []SearchNearbyAdditionalFeature {
	return []SearchNearbyAdditionalFeature{
		"TimeZone",
		"Phonemes",
		"Access",
		"Contact",
	}
}

type SearchNearbyIntendedUse string

// Enum values for SearchNearbyIntendedUse
const (
	// Indicates that results of the operation are for single use, e.g., displaying
	// results on a map or presenting options to users.
	SearchNearbyIntendedUseSingleUse SearchNearbyIntendedUse = "SingleUse"
	// Indicates that results of the operation may be stored locally.
	SearchNearbyIntendedUseStorage SearchNearbyIntendedUse = "Storage"
)

// Values returns all known values for SearchNearbyIntendedUse. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SearchNearbyIntendedUse) Values() []SearchNearbyIntendedUse {
	return []SearchNearbyIntendedUse{
		"SingleUse",
		"Storage",
	}
}

type SearchTextAdditionalFeature string

// Enum values for SearchTextAdditionalFeature
const (
	SearchTextAdditionalFeatureTimeZone SearchTextAdditionalFeature = "TimeZone"
	SearchTextAdditionalFeaturePhonemes SearchTextAdditionalFeature = "Phonemes"
	SearchTextAdditionalFeatureAccess   SearchTextAdditionalFeature = "Access"
	SearchTextAdditionalFeatureContact  SearchTextAdditionalFeature = "Contact"
)

// Values returns all known values for SearchTextAdditionalFeature. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SearchTextAdditionalFeature) Values() []SearchTextAdditionalFeature {
	return []SearchTextAdditionalFeature{
		"TimeZone",
		"Phonemes",
		"Access",
		"Contact",
	}
}

type SearchTextIntendedUse string

// Enum values for SearchTextIntendedUse
const (
	// Indicates that results of the operation are for single use, e.g., displaying
	// results on a map or presenting options to users.
	SearchTextIntendedUseSingleUse SearchTextIntendedUse = "SingleUse"
	// Indicates that results of the operation may be stored locally.
	SearchTextIntendedUseStorage SearchTextIntendedUse = "Storage"
)

// Values returns all known values for SearchTextIntendedUse. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SearchTextIntendedUse) Values() []SearchTextIntendedUse {
	return []SearchTextIntendedUse{
		"SingleUse",
		"Storage",
	}
}

type SuggestAdditionalFeature string

// Enum values for SuggestAdditionalFeature
const (
	SuggestAdditionalFeatureCore     SuggestAdditionalFeature = "Core"
	SuggestAdditionalFeatureTimeZone SuggestAdditionalFeature = "TimeZone"
	SuggestAdditionalFeaturePhonemes SuggestAdditionalFeature = "Phonemes"
	SuggestAdditionalFeatureAccess   SuggestAdditionalFeature = "Access"
)

// Values returns all known values for SuggestAdditionalFeature. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SuggestAdditionalFeature) Values() []SuggestAdditionalFeature {
	return []SuggestAdditionalFeature{
		"Core",
		"TimeZone",
		"Phonemes",
		"Access",
	}
}

type SuggestIntendedUse string

// Enum values for SuggestIntendedUse
const (
	// Indicates that results of the operation are for single use, e.g., displaying
	// results on a map or presenting options to users.
	SuggestIntendedUseSingleUse SuggestIntendedUse = "SingleUse"
)

// Values returns all known values for SuggestIntendedUse. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SuggestIntendedUse) Values() []SuggestIntendedUse {
	return []SuggestIntendedUse{
		"SingleUse",
	}
}

type SuggestResultItemType string

// Enum values for SuggestResultItemType
const (
	SuggestResultItemTypePlace SuggestResultItemType = "Place"
	SuggestResultItemTypeQuery SuggestResultItemType = "Query"
)

// Values returns all known values for SuggestResultItemType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SuggestResultItemType) Values() []SuggestResultItemType {
	return []SuggestResultItemType{
		"Place",
		"Query",
	}
}

type TypePlacement string

// Enum values for TypePlacement
const (
	TypePlacementBeforeBaseName TypePlacement = "BeforeBaseName"
	TypePlacementAfterBaseName  TypePlacement = "AfterBaseName"
)

// Values returns all known values for TypePlacement. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TypePlacement) Values() []TypePlacement {
	return []TypePlacement{
		"BeforeBaseName",
		"AfterBaseName",
	}
}

type ValidationExceptionReason string

// Enum values for ValidationExceptionReason
const (
	// No such operation is supported.
	ValidationExceptionReasonUnknownOperation ValidationExceptionReason = "UnknownOperation"
	// The required input is missing.
	ValidationExceptionReasonMissing ValidationExceptionReason = "Missing"
	// The input cannot be parsed. For example a required JSON document, ARN
	// identifier, date value, or numeric field cannot be parsed.
	ValidationExceptionReasonCannotParse ValidationExceptionReason = "CannotParse"
	// The input is present and parsable, but it is otherwise invalid. For example, a
	// required numeric argument is outside the allowed range.
	ValidationExceptionReasonFieldValidationFailed ValidationExceptionReason = "FieldValidationFailed"
	// The input is invalid but no more specific reason is applicable.
	ValidationExceptionReasonOther ValidationExceptionReason = "Other"
	// No such field is supported.
	ValidationExceptionReasonUnknownField ValidationExceptionReason = "UnknownField"
)

// Values returns all known values for ValidationExceptionReason. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ValidationExceptionReason) Values() []ValidationExceptionReason {
	return []ValidationExceptionReason{
		"UnknownOperation",
		"Missing",
		"CannotParse",
		"FieldValidationFailed",
		"Other",
		"UnknownField",
	}
}

type ZipClassificationCode string

// Enum values for ZipClassificationCode
const (
	ZipClassificationCodeMilitary        ZipClassificationCode = "Military"
	ZipClassificationCodePostOfficeBoxes ZipClassificationCode = "PostOfficeBoxes"
	ZipClassificationCodeUnique          ZipClassificationCode = "Unique"
)

// Values returns all known values for ZipClassificationCode. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ZipClassificationCode) Values() []ZipClassificationCode {
	return []ZipClassificationCode{
		"Military",
		"PostOfficeBoxes",
		"Unique",
	}
}
