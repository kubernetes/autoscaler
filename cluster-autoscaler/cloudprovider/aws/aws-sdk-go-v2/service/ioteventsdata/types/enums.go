// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AlarmStateName string

// Enum values for AlarmStateName
const (
	AlarmStateNameDisabled       AlarmStateName = "DISABLED"
	AlarmStateNameNormal         AlarmStateName = "NORMAL"
	AlarmStateNameActive         AlarmStateName = "ACTIVE"
	AlarmStateNameAcknowledged   AlarmStateName = "ACKNOWLEDGED"
	AlarmStateNameSnoozeDisabled AlarmStateName = "SNOOZE_DISABLED"
	AlarmStateNameLatched        AlarmStateName = "LATCHED"
)

// Values returns all known values for AlarmStateName. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AlarmStateName) Values() []AlarmStateName {
	return []AlarmStateName{
		"DISABLED",
		"NORMAL",
		"ACTIVE",
		"ACKNOWLEDGED",
		"SNOOZE_DISABLED",
		"LATCHED",
	}
}

type ComparisonOperator string

// Enum values for ComparisonOperator
const (
	ComparisonOperatorGreater        ComparisonOperator = "GREATER"
	ComparisonOperatorGreaterOrEqual ComparisonOperator = "GREATER_OR_EQUAL"
	ComparisonOperatorLess           ComparisonOperator = "LESS"
	ComparisonOperatorLessOrEqual    ComparisonOperator = "LESS_OR_EQUAL"
	ComparisonOperatorEqual          ComparisonOperator = "EQUAL"
	ComparisonOperatorNotEqual       ComparisonOperator = "NOT_EQUAL"
)

// Values returns all known values for ComparisonOperator. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ComparisonOperator) Values() []ComparisonOperator {
	return []ComparisonOperator{
		"GREATER",
		"GREATER_OR_EQUAL",
		"LESS",
		"LESS_OR_EQUAL",
		"EQUAL",
		"NOT_EQUAL",
	}
}

type CustomerActionName string

// Enum values for CustomerActionName
const (
	CustomerActionNameSnooze      CustomerActionName = "SNOOZE"
	CustomerActionNameEnable      CustomerActionName = "ENABLE"
	CustomerActionNameDisable     CustomerActionName = "DISABLE"
	CustomerActionNameAcknowledge CustomerActionName = "ACKNOWLEDGE"
	CustomerActionNameReset       CustomerActionName = "RESET"
)

// Values returns all known values for CustomerActionName. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CustomerActionName) Values() []CustomerActionName {
	return []CustomerActionName{
		"SNOOZE",
		"ENABLE",
		"DISABLE",
		"ACKNOWLEDGE",
		"RESET",
	}
}

type ErrorCode string

// Enum values for ErrorCode
const (
	ErrorCodeResourceNotFoundException   ErrorCode = "ResourceNotFoundException"
	ErrorCodeInvalidRequestException     ErrorCode = "InvalidRequestException"
	ErrorCodeInternalFailureException    ErrorCode = "InternalFailureException"
	ErrorCodeServiceUnavailableException ErrorCode = "ServiceUnavailableException"
	ErrorCodeThrottlingException         ErrorCode = "ThrottlingException"
)

// Values returns all known values for ErrorCode. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ErrorCode) Values() []ErrorCode {
	return []ErrorCode{
		"ResourceNotFoundException",
		"InvalidRequestException",
		"InternalFailureException",
		"ServiceUnavailableException",
		"ThrottlingException",
	}
}

type EventType string

// Enum values for EventType
const (
	EventTypeStateChange EventType = "STATE_CHANGE"
)

// Values returns all known values for EventType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EventType) Values() []EventType {
	return []EventType{
		"STATE_CHANGE",
	}
}

type TriggerType string

// Enum values for TriggerType
const (
	TriggerTypeSnoozeTimeout TriggerType = "SNOOZE_TIMEOUT"
)

// Values returns all known values for TriggerType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TriggerType) Values() []TriggerType {
	return []TriggerType{
		"SNOOZE_TIMEOUT",
	}
}
