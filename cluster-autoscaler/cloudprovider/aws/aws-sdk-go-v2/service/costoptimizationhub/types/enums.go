// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type ActionType string

// Enum values for ActionType
const (
	ActionTypeRightsize                 ActionType = "Rightsize"
	ActionTypeStop                      ActionType = "Stop"
	ActionTypeUpgrade                   ActionType = "Upgrade"
	ActionTypePurchaseSavingsPlans      ActionType = "PurchaseSavingsPlans"
	ActionTypePurchaseReservedInstances ActionType = "PurchaseReservedInstances"
	ActionTypeMigrateToGraviton         ActionType = "MigrateToGraviton"
	ActionTypeDelete                    ActionType = "Delete"
	ActionTypeScaleIn                   ActionType = "ScaleIn"
)

// Values returns all known values for ActionType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ActionType) Values() []ActionType {
	return []ActionType{
		"Rightsize",
		"Stop",
		"Upgrade",
		"PurchaseSavingsPlans",
		"PurchaseReservedInstances",
		"MigrateToGraviton",
		"Delete",
		"ScaleIn",
	}
}

type AllocationStrategy string

// Enum values for AllocationStrategy
const (
	AllocationStrategyPrioritized AllocationStrategy = "Prioritized"
	AllocationStrategyLowestPrice AllocationStrategy = "LowestPrice"
)

// Values returns all known values for AllocationStrategy. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AllocationStrategy) Values() []AllocationStrategy {
	return []AllocationStrategy{
		"Prioritized",
		"LowestPrice",
	}
}

type Ec2AutoScalingGroupType string

// Enum values for Ec2AutoScalingGroupType
const (
	Ec2AutoScalingGroupTypeSingleInstanceType Ec2AutoScalingGroupType = "SingleInstanceType"
	Ec2AutoScalingGroupTypeMixedInstanceTypes Ec2AutoScalingGroupType = "MixedInstanceTypes"
)

// Values returns all known values for Ec2AutoScalingGroupType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Ec2AutoScalingGroupType) Values() []Ec2AutoScalingGroupType {
	return []Ec2AutoScalingGroupType{
		"SingleInstanceType",
		"MixedInstanceTypes",
	}
}

type EnrollmentStatus string

// Enum values for EnrollmentStatus
const (
	EnrollmentStatusActive   EnrollmentStatus = "Active"
	EnrollmentStatusInactive EnrollmentStatus = "Inactive"
)

// Values returns all known values for EnrollmentStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EnrollmentStatus) Values() []EnrollmentStatus {
	return []EnrollmentStatus{
		"Active",
		"Inactive",
	}
}

type ImplementationEffort string

// Enum values for ImplementationEffort
const (
	ImplementationEffortVeryLow  ImplementationEffort = "VeryLow"
	ImplementationEffortLow      ImplementationEffort = "Low"
	ImplementationEffortMedium   ImplementationEffort = "Medium"
	ImplementationEffortHigh     ImplementationEffort = "High"
	ImplementationEffortVeryHigh ImplementationEffort = "VeryHigh"
)

// Values returns all known values for ImplementationEffort. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ImplementationEffort) Values() []ImplementationEffort {
	return []ImplementationEffort{
		"VeryLow",
		"Low",
		"Medium",
		"High",
		"VeryHigh",
	}
}

type MemberAccountDiscountVisibility string

// Enum values for MemberAccountDiscountVisibility
const (
	MemberAccountDiscountVisibilityAll  MemberAccountDiscountVisibility = "All"
	MemberAccountDiscountVisibilityNone MemberAccountDiscountVisibility = "None"
)

// Values returns all known values for MemberAccountDiscountVisibility. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MemberAccountDiscountVisibility) Values() []MemberAccountDiscountVisibility {
	return []MemberAccountDiscountVisibility{
		"All",
		"None",
	}
}

type Order string

// Enum values for Order
const (
	OrderAsc  Order = "Asc"
	OrderDesc Order = "Desc"
)

// Values returns all known values for Order. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Order) Values() []Order {
	return []Order{
		"Asc",
		"Desc",
	}
}

type PaymentOption string

// Enum values for PaymentOption
const (
	PaymentOptionAllUpfront     PaymentOption = "AllUpfront"
	PaymentOptionPartialUpfront PaymentOption = "PartialUpfront"
	PaymentOptionNoUpfront      PaymentOption = "NoUpfront"
)

// Values returns all known values for PaymentOption. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PaymentOption) Values() []PaymentOption {
	return []PaymentOption{
		"AllUpfront",
		"PartialUpfront",
		"NoUpfront",
	}
}

type ResourceType string

// Enum values for ResourceType
const (
	ResourceTypeEc2Instance                  ResourceType = "Ec2Instance"
	ResourceTypeLambdaFunction               ResourceType = "LambdaFunction"
	ResourceTypeEbsVolume                    ResourceType = "EbsVolume"
	ResourceTypeEcsService                   ResourceType = "EcsService"
	ResourceTypeEc2AutoScalingGroup          ResourceType = "Ec2AutoScalingGroup"
	ResourceTypeEc2InstanceSavingsPlans      ResourceType = "Ec2InstanceSavingsPlans"
	ResourceTypeComputeSavingsPlans          ResourceType = "ComputeSavingsPlans"
	ResourceTypeSageMakerSavingsPlans        ResourceType = "SageMakerSavingsPlans"
	ResourceTypeEc2ReservedInstances         ResourceType = "Ec2ReservedInstances"
	ResourceTypeRdsReservedInstances         ResourceType = "RdsReservedInstances"
	ResourceTypeOpenSearchReservedInstances  ResourceType = "OpenSearchReservedInstances"
	ResourceTypeRedshiftReservedInstances    ResourceType = "RedshiftReservedInstances"
	ResourceTypeElastiCacheReservedInstances ResourceType = "ElastiCacheReservedInstances"
	ResourceTypeRdsDbInstanceStorage         ResourceType = "RdsDbInstanceStorage"
	ResourceTypeRdsDbInstance                ResourceType = "RdsDbInstance"
	ResourceTypeAuroraDbClusterStorage       ResourceType = "AuroraDbClusterStorage"
	ResourceTypeDynamoDbReservedCapacity     ResourceType = "DynamoDbReservedCapacity"
	ResourceTypeMemoryDbReservedInstances    ResourceType = "MemoryDbReservedInstances"
)

// Values returns all known values for ResourceType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ResourceType) Values() []ResourceType {
	return []ResourceType{
		"Ec2Instance",
		"LambdaFunction",
		"EbsVolume",
		"EcsService",
		"Ec2AutoScalingGroup",
		"Ec2InstanceSavingsPlans",
		"ComputeSavingsPlans",
		"SageMakerSavingsPlans",
		"Ec2ReservedInstances",
		"RdsReservedInstances",
		"OpenSearchReservedInstances",
		"RedshiftReservedInstances",
		"ElastiCacheReservedInstances",
		"RdsDbInstanceStorage",
		"RdsDbInstance",
		"AuroraDbClusterStorage",
		"DynamoDbReservedCapacity",
		"MemoryDbReservedInstances",
	}
}

type SavingsEstimationMode string

// Enum values for SavingsEstimationMode
const (
	SavingsEstimationModeBeforeDiscounts SavingsEstimationMode = "BeforeDiscounts"
	SavingsEstimationModeAfterDiscounts  SavingsEstimationMode = "AfterDiscounts"
)

// Values returns all known values for SavingsEstimationMode. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SavingsEstimationMode) Values() []SavingsEstimationMode {
	return []SavingsEstimationMode{
		"BeforeDiscounts",
		"AfterDiscounts",
	}
}

type Source string

// Enum values for Source
const (
	SourceComputeOptimizer Source = "ComputeOptimizer"
	SourceCostExplorer     Source = "CostExplorer"
)

// Values returns all known values for Source. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Source) Values() []Source {
	return []Source{
		"ComputeOptimizer",
		"CostExplorer",
	}
}

type SummaryMetrics string

// Enum values for SummaryMetrics
const (
	SummaryMetricsSavingsPercentage SummaryMetrics = "SavingsPercentage"
)

// Values returns all known values for SummaryMetrics. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SummaryMetrics) Values() []SummaryMetrics {
	return []SummaryMetrics{
		"SavingsPercentage",
	}
}

type Term string

// Enum values for Term
const (
	TermOneYear    Term = "OneYear"
	TermThreeYears Term = "ThreeYears"
)

// Values returns all known values for Term. Note that this can be expanded in the
// future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Term) Values() []Term {
	return []Term{
		"OneYear",
		"ThreeYears",
	}
}

type ValidationExceptionReason string

// Enum values for ValidationExceptionReason
const (
	ValidationExceptionReasonFieldValidationFailed ValidationExceptionReason = "FieldValidationFailed"
	ValidationExceptionReasonOther                 ValidationExceptionReason = "Other"
)

// Values returns all known values for ValidationExceptionReason. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ValidationExceptionReason) Values() []ValidationExceptionReason {
	return []ValidationExceptionReason{
		"FieldValidationFailed",
		"Other",
	}
}
