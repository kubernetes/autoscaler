// Code generated by smithy-go-codegen DO NOT EDIT.

package licensemanagerlinuxsubscriptions

import (
	"context"
	"fmt"
	awsmiddleware "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/aws/middleware"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/service/licensemanagerlinuxsubscriptions/types"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/middleware"
	smithyhttp "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/transport/http"
)

// Register the supported third-party subscription provider for your Bring Your
// Own License (BYOL) subscription.
func (c *Client) RegisterSubscriptionProvider(ctx context.Context, params *RegisterSubscriptionProviderInput, optFns ...func(*Options)) (*RegisterSubscriptionProviderOutput, error) {
	if params == nil {
		params = &RegisterSubscriptionProviderInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "RegisterSubscriptionProvider", params, optFns, c.addOperationRegisterSubscriptionProviderMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*RegisterSubscriptionProviderOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type RegisterSubscriptionProviderInput struct {

	// The Amazon Resource Name (ARN) of the secret where you've stored your
	// subscription provider's access token. For RHEL subscriptions managed through the
	// Red Hat Subscription Manager (RHSM), the secret contains your Red Hat Offline
	// token.
	//
	// This member is required.
	SecretArn *string

	// The supported Linux subscription provider to register.
	//
	// This member is required.
	SubscriptionProviderSource types.SubscriptionProviderSource

	// The metadata tags to assign to your registered Linux subscription provider
	// resource.
	Tags map[string]string

	noSmithyDocumentSerde
}

type RegisterSubscriptionProviderOutput struct {

	// The Amazon Resource Name (ARN) of the Linux subscription provider resource that
	// you registered.
	SubscriptionProviderArn *string

	// The Linux subscription provider that you registered.
	SubscriptionProviderSource types.SubscriptionProviderSource

	// Indicates the status of the registration action for the Linux subscription
	// provider that you requested.
	SubscriptionProviderStatus types.SubscriptionProviderStatus

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationRegisterSubscriptionProviderMiddlewares(stack *middleware.Stack, options Options) (err error) {
	if err := stack.Serialize.Add(&setOperationInputMiddleware{}, middleware.After); err != nil {
		return err
	}
	err = stack.Serialize.Add(&awsRestjson1_serializeOpRegisterSubscriptionProvider{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpRegisterSubscriptionProvider{}, middleware.After)
	if err != nil {
		return err
	}
	if err := addProtocolFinalizerMiddlewares(stack, options, "RegisterSubscriptionProvider"); err != nil {
		return fmt.Errorf("add protocol finalizers: %v", err)
	}

	if err = addlegacyEndpointContextSetter(stack, options); err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = addClientRequestID(stack); err != nil {
		return err
	}
	if err = addComputeContentLength(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = addComputePayloadSHA256(stack); err != nil {
		return err
	}
	if err = addRetry(stack, options); err != nil {
		return err
	}
	if err = addRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = addRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addSpanRetryLoop(stack, options); err != nil {
		return err
	}
	if err = addClientUserAgent(stack, options); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addSetLegacyContextSigningOptionsMiddleware(stack); err != nil {
		return err
	}
	if err = addTimeOffsetBuild(stack, c); err != nil {
		return err
	}
	if err = addUserAgentRetryMode(stack, options); err != nil {
		return err
	}
	if err = addCredentialSource(stack, options); err != nil {
		return err
	}
	if err = addOpRegisterSubscriptionProviderValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opRegisterSubscriptionProvider(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRecursionDetection(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	if err = addDisableHTTPSMiddleware(stack, options); err != nil {
		return err
	}
	if err = addSpanInitializeStart(stack); err != nil {
		return err
	}
	if err = addSpanInitializeEnd(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestStart(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestEnd(stack); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opRegisterSubscriptionProvider(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		OperationName: "RegisterSubscriptionProvider",
	}
}
