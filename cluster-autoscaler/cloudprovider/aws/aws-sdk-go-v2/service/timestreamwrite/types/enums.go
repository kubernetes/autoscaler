// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type BatchLoadDataFormat string

// Enum values for BatchLoadDataFormat
const (
	BatchLoadDataFormatCsv BatchLoadDataFormat = "CSV"
)

// Values returns all known values for BatchLoadDataFormat. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (BatchLoadDataFormat) Values() []BatchLoadDataFormat {
	return []BatchLoadDataFormat{
		"CSV",
	}
}

type BatchLoadStatus string

// Enum values for BatchLoadStatus
const (
	BatchLoadStatusCreated         BatchLoadStatus = "CREATED"
	BatchLoadStatusInProgress      BatchLoadStatus = "IN_PROGRESS"
	BatchLoadStatusFailed          BatchLoadStatus = "FAILED"
	BatchLoadStatusSucceeded       BatchLoadStatus = "SUCCEEDED"
	BatchLoadStatusProgressStopped BatchLoadStatus = "PROGRESS_STOPPED"
	BatchLoadStatusPendingResume   BatchLoadStatus = "PENDING_RESUME"
)

// Values returns all known values for BatchLoadStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (BatchLoadStatus) Values() []BatchLoadStatus {
	return []BatchLoadStatus{
		"CREATED",
		"IN_PROGRESS",
		"FAILED",
		"SUCCEEDED",
		"PROGRESS_STOPPED",
		"PENDING_RESUME",
	}
}

type DimensionValueType string

// Enum values for DimensionValueType
const (
	DimensionValueTypeVarchar DimensionValueType = "VARCHAR"
)

// Values returns all known values for DimensionValueType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DimensionValueType) Values() []DimensionValueType {
	return []DimensionValueType{
		"VARCHAR",
	}
}

type MeasureValueType string

// Enum values for MeasureValueType
const (
	MeasureValueTypeDouble    MeasureValueType = "DOUBLE"
	MeasureValueTypeBigint    MeasureValueType = "BIGINT"
	MeasureValueTypeVarchar   MeasureValueType = "VARCHAR"
	MeasureValueTypeBoolean   MeasureValueType = "BOOLEAN"
	MeasureValueTypeTimestamp MeasureValueType = "TIMESTAMP"
	MeasureValueTypeMulti     MeasureValueType = "MULTI"
)

// Values returns all known values for MeasureValueType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MeasureValueType) Values() []MeasureValueType {
	return []MeasureValueType{
		"DOUBLE",
		"BIGINT",
		"VARCHAR",
		"BOOLEAN",
		"TIMESTAMP",
		"MULTI",
	}
}

type PartitionKeyEnforcementLevel string

// Enum values for PartitionKeyEnforcementLevel
const (
	PartitionKeyEnforcementLevelRequired PartitionKeyEnforcementLevel = "REQUIRED"
	PartitionKeyEnforcementLevelOptional PartitionKeyEnforcementLevel = "OPTIONAL"
)

// Values returns all known values for PartitionKeyEnforcementLevel. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PartitionKeyEnforcementLevel) Values() []PartitionKeyEnforcementLevel {
	return []PartitionKeyEnforcementLevel{
		"REQUIRED",
		"OPTIONAL",
	}
}

type PartitionKeyType string

// Enum values for PartitionKeyType
const (
	PartitionKeyTypeDimension PartitionKeyType = "DIMENSION"
	PartitionKeyTypeMeasure   PartitionKeyType = "MEASURE"
)

// Values returns all known values for PartitionKeyType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PartitionKeyType) Values() []PartitionKeyType {
	return []PartitionKeyType{
		"DIMENSION",
		"MEASURE",
	}
}

type S3EncryptionOption string

// Enum values for S3EncryptionOption
const (
	S3EncryptionOptionSseS3  S3EncryptionOption = "SSE_S3"
	S3EncryptionOptionSseKms S3EncryptionOption = "SSE_KMS"
)

// Values returns all known values for S3EncryptionOption. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (S3EncryptionOption) Values() []S3EncryptionOption {
	return []S3EncryptionOption{
		"SSE_S3",
		"SSE_KMS",
	}
}

type ScalarMeasureValueType string

// Enum values for ScalarMeasureValueType
const (
	ScalarMeasureValueTypeDouble    ScalarMeasureValueType = "DOUBLE"
	ScalarMeasureValueTypeBigint    ScalarMeasureValueType = "BIGINT"
	ScalarMeasureValueTypeBoolean   ScalarMeasureValueType = "BOOLEAN"
	ScalarMeasureValueTypeVarchar   ScalarMeasureValueType = "VARCHAR"
	ScalarMeasureValueTypeTimestamp ScalarMeasureValueType = "TIMESTAMP"
)

// Values returns all known values for ScalarMeasureValueType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ScalarMeasureValueType) Values() []ScalarMeasureValueType {
	return []ScalarMeasureValueType{
		"DOUBLE",
		"BIGINT",
		"BOOLEAN",
		"VARCHAR",
		"TIMESTAMP",
	}
}

type TableStatus string

// Enum values for TableStatus
const (
	TableStatusActive    TableStatus = "ACTIVE"
	TableStatusDeleting  TableStatus = "DELETING"
	TableStatusRestoring TableStatus = "RESTORING"
)

// Values returns all known values for TableStatus. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TableStatus) Values() []TableStatus {
	return []TableStatus{
		"ACTIVE",
		"DELETING",
		"RESTORING",
	}
}

type TimeUnit string

// Enum values for TimeUnit
const (
	TimeUnitMilliseconds TimeUnit = "MILLISECONDS"
	TimeUnitSeconds      TimeUnit = "SECONDS"
	TimeUnitMicroseconds TimeUnit = "MICROSECONDS"
	TimeUnitNanoseconds  TimeUnit = "NANOSECONDS"
)

// Values returns all known values for TimeUnit. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TimeUnit) Values() []TimeUnit {
	return []TimeUnit{
		"MILLISECONDS",
		"SECONDS",
		"MICROSECONDS",
		"NANOSECONDS",
	}
}
