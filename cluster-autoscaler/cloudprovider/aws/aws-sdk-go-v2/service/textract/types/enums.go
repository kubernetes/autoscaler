// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AdapterVersionStatus string

// Enum values for AdapterVersionStatus
const (
	AdapterVersionStatusActive             AdapterVersionStatus = "ACTIVE"
	AdapterVersionStatusAtRisk             AdapterVersionStatus = "AT_RISK"
	AdapterVersionStatusDeprecated         AdapterVersionStatus = "DEPRECATED"
	AdapterVersionStatusCreationError      AdapterVersionStatus = "CREATION_ERROR"
	AdapterVersionStatusCreationInProgress AdapterVersionStatus = "CREATION_IN_PROGRESS"
)

// Values returns all known values for AdapterVersionStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AdapterVersionStatus) Values() []AdapterVersionStatus {
	return []AdapterVersionStatus{
		"ACTIVE",
		"AT_RISK",
		"DEPRECATED",
		"CREATION_ERROR",
		"CREATION_IN_PROGRESS",
	}
}

type AutoUpdate string

// Enum values for AutoUpdate
const (
	AutoUpdateEnabled  AutoUpdate = "ENABLED"
	AutoUpdateDisabled AutoUpdate = "DISABLED"
)

// Values returns all known values for AutoUpdate. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AutoUpdate) Values() []AutoUpdate {
	return []AutoUpdate{
		"ENABLED",
		"DISABLED",
	}
}

type BlockType string

// Enum values for BlockType
const (
	BlockTypeKeyValueSet         BlockType = "KEY_VALUE_SET"
	BlockTypePage                BlockType = "PAGE"
	BlockTypeLine                BlockType = "LINE"
	BlockTypeWord                BlockType = "WORD"
	BlockTypeTable               BlockType = "TABLE"
	BlockTypeCell                BlockType = "CELL"
	BlockTypeSelectionElement    BlockType = "SELECTION_ELEMENT"
	BlockTypeMergedCell          BlockType = "MERGED_CELL"
	BlockTypeTitle               BlockType = "TITLE"
	BlockTypeQuery               BlockType = "QUERY"
	BlockTypeQueryResult         BlockType = "QUERY_RESULT"
	BlockTypeSignature           BlockType = "SIGNATURE"
	BlockTypeTableTitle          BlockType = "TABLE_TITLE"
	BlockTypeTableFooter         BlockType = "TABLE_FOOTER"
	BlockTypeLayoutText          BlockType = "LAYOUT_TEXT"
	BlockTypeLayoutTitle         BlockType = "LAYOUT_TITLE"
	BlockTypeLayoutHeader        BlockType = "LAYOUT_HEADER"
	BlockTypeLayoutFooter        BlockType = "LAYOUT_FOOTER"
	BlockTypeLayoutSectionHeader BlockType = "LAYOUT_SECTION_HEADER"
	BlockTypeLayoutPageNumber    BlockType = "LAYOUT_PAGE_NUMBER"
	BlockTypeLayoutList          BlockType = "LAYOUT_LIST"
	BlockTypeLayoutFigure        BlockType = "LAYOUT_FIGURE"
	BlockTypeLayoutTable         BlockType = "LAYOUT_TABLE"
	BlockTypeLayoutKeyValue      BlockType = "LAYOUT_KEY_VALUE"
)

// Values returns all known values for BlockType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (BlockType) Values() []BlockType {
	return []BlockType{
		"KEY_VALUE_SET",
		"PAGE",
		"LINE",
		"WORD",
		"TABLE",
		"CELL",
		"SELECTION_ELEMENT",
		"MERGED_CELL",
		"TITLE",
		"QUERY",
		"QUERY_RESULT",
		"SIGNATURE",
		"TABLE_TITLE",
		"TABLE_FOOTER",
		"LAYOUT_TEXT",
		"LAYOUT_TITLE",
		"LAYOUT_HEADER",
		"LAYOUT_FOOTER",
		"LAYOUT_SECTION_HEADER",
		"LAYOUT_PAGE_NUMBER",
		"LAYOUT_LIST",
		"LAYOUT_FIGURE",
		"LAYOUT_TABLE",
		"LAYOUT_KEY_VALUE",
	}
}

type ContentClassifier string

// Enum values for ContentClassifier
const (
	ContentClassifierFreeOfPersonallyIdentifiableInformation ContentClassifier = "FreeOfPersonallyIdentifiableInformation"
	ContentClassifierFreeOfAdultContent                      ContentClassifier = "FreeOfAdultContent"
)

// Values returns all known values for ContentClassifier. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ContentClassifier) Values() []ContentClassifier {
	return []ContentClassifier{
		"FreeOfPersonallyIdentifiableInformation",
		"FreeOfAdultContent",
	}
}

type EntityType string

// Enum values for EntityType
const (
	EntityTypeKey                 EntityType = "KEY"
	EntityTypeValue               EntityType = "VALUE"
	EntityTypeColumnHeader        EntityType = "COLUMN_HEADER"
	EntityTypeTableTitle          EntityType = "TABLE_TITLE"
	EntityTypeTableFooter         EntityType = "TABLE_FOOTER"
	EntityTypeTableSectionTitle   EntityType = "TABLE_SECTION_TITLE"
	EntityTypeTableSummary        EntityType = "TABLE_SUMMARY"
	EntityTypeStructuredTable     EntityType = "STRUCTURED_TABLE"
	EntityTypeSemiStructuredTable EntityType = "SEMI_STRUCTURED_TABLE"
)

// Values returns all known values for EntityType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EntityType) Values() []EntityType {
	return []EntityType{
		"KEY",
		"VALUE",
		"COLUMN_HEADER",
		"TABLE_TITLE",
		"TABLE_FOOTER",
		"TABLE_SECTION_TITLE",
		"TABLE_SUMMARY",
		"STRUCTURED_TABLE",
		"SEMI_STRUCTURED_TABLE",
	}
}

type FeatureType string

// Enum values for FeatureType
const (
	FeatureTypeTables     FeatureType = "TABLES"
	FeatureTypeForms      FeatureType = "FORMS"
	FeatureTypeQueries    FeatureType = "QUERIES"
	FeatureTypeSignatures FeatureType = "SIGNATURES"
	FeatureTypeLayout     FeatureType = "LAYOUT"
)

// Values returns all known values for FeatureType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FeatureType) Values() []FeatureType {
	return []FeatureType{
		"TABLES",
		"FORMS",
		"QUERIES",
		"SIGNATURES",
		"LAYOUT",
	}
}

type JobStatus string

// Enum values for JobStatus
const (
	JobStatusInProgress     JobStatus = "IN_PROGRESS"
	JobStatusSucceeded      JobStatus = "SUCCEEDED"
	JobStatusFailed         JobStatus = "FAILED"
	JobStatusPartialSuccess JobStatus = "PARTIAL_SUCCESS"
)

// Values returns all known values for JobStatus. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (JobStatus) Values() []JobStatus {
	return []JobStatus{
		"IN_PROGRESS",
		"SUCCEEDED",
		"FAILED",
		"PARTIAL_SUCCESS",
	}
}

type RelationshipType string

// Enum values for RelationshipType
const (
	RelationshipTypeValue           RelationshipType = "VALUE"
	RelationshipTypeChild           RelationshipType = "CHILD"
	RelationshipTypeComplexFeatures RelationshipType = "COMPLEX_FEATURES"
	RelationshipTypeMergedCell      RelationshipType = "MERGED_CELL"
	RelationshipTypeTitle           RelationshipType = "TITLE"
	RelationshipTypeAnswer          RelationshipType = "ANSWER"
	RelationshipTypeTable           RelationshipType = "TABLE"
	RelationshipTypeTableTitle      RelationshipType = "TABLE_TITLE"
	RelationshipTypeTableFooter     RelationshipType = "TABLE_FOOTER"
)

// Values returns all known values for RelationshipType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RelationshipType) Values() []RelationshipType {
	return []RelationshipType{
		"VALUE",
		"CHILD",
		"COMPLEX_FEATURES",
		"MERGED_CELL",
		"TITLE",
		"ANSWER",
		"TABLE",
		"TABLE_TITLE",
		"TABLE_FOOTER",
	}
}

type SelectionStatus string

// Enum values for SelectionStatus
const (
	SelectionStatusSelected    SelectionStatus = "SELECTED"
	SelectionStatusNotSelected SelectionStatus = "NOT_SELECTED"
)

// Values returns all known values for SelectionStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SelectionStatus) Values() []SelectionStatus {
	return []SelectionStatus{
		"SELECTED",
		"NOT_SELECTED",
	}
}

type TextType string

// Enum values for TextType
const (
	TextTypeHandwriting TextType = "HANDWRITING"
	TextTypePrinted     TextType = "PRINTED"
)

// Values returns all known values for TextType. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TextType) Values() []TextType {
	return []TextType{
		"HANDWRITING",
		"PRINTED",
	}
}

type ValueType string

// Enum values for ValueType
const (
	ValueTypeDate ValueType = "DATE"
)

// Values returns all known values for ValueType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ValueType) Values() []ValueType {
	return []ValueType{
		"DATE",
	}
}
