// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type ActionCategory string

// Enum values for ActionCategory
const (
	ActionCategoryDisasterRecovery       ActionCategory = "DISASTER_RECOVERY"
	ActionCategoryOperatingSystem        ActionCategory = "OPERATING_SYSTEM"
	ActionCategoryLicenseAndSubscription ActionCategory = "LICENSE_AND_SUBSCRIPTION"
	ActionCategoryValidation             ActionCategory = "VALIDATION"
	ActionCategoryObservability          ActionCategory = "OBSERVABILITY"
	ActionCategoryRefactoring            ActionCategory = "REFACTORING"
	ActionCategorySecurity               ActionCategory = "SECURITY"
	ActionCategoryNetworking             ActionCategory = "NETWORKING"
	ActionCategoryConfiguration          ActionCategory = "CONFIGURATION"
	ActionCategoryBackup                 ActionCategory = "BACKUP"
	ActionCategoryOther                  ActionCategory = "OTHER"
)

// Values returns all known values for ActionCategory. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ActionCategory) Values() []ActionCategory {
	return []ActionCategory{
		"DISASTER_RECOVERY",
		"OPERATING_SYSTEM",
		"LICENSE_AND_SUBSCRIPTION",
		"VALIDATION",
		"OBSERVABILITY",
		"REFACTORING",
		"SECURITY",
		"NETWORKING",
		"CONFIGURATION",
		"BACKUP",
		"OTHER",
	}
}

type ApplicationHealthStatus string

// Enum values for ApplicationHealthStatus
const (
	ApplicationHealthStatusHealthy ApplicationHealthStatus = "HEALTHY"
	ApplicationHealthStatusLagging ApplicationHealthStatus = "LAGGING"
	ApplicationHealthStatusError   ApplicationHealthStatus = "ERROR"
)

// Values returns all known values for ApplicationHealthStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ApplicationHealthStatus) Values() []ApplicationHealthStatus {
	return []ApplicationHealthStatus{
		"HEALTHY",
		"LAGGING",
		"ERROR",
	}
}

type ApplicationProgressStatus string

// Enum values for ApplicationProgressStatus
const (
	ApplicationProgressStatusNotStarted ApplicationProgressStatus = "NOT_STARTED"
	ApplicationProgressStatusInProgress ApplicationProgressStatus = "IN_PROGRESS"
	ApplicationProgressStatusCompleted  ApplicationProgressStatus = "COMPLETED"
)

// Values returns all known values for ApplicationProgressStatus. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ApplicationProgressStatus) Values() []ApplicationProgressStatus {
	return []ApplicationProgressStatus{
		"NOT_STARTED",
		"IN_PROGRESS",
		"COMPLETED",
	}
}

type BootMode string

// Enum values for BootMode
const (
	BootModeLegacyBios BootMode = "LEGACY_BIOS"
	BootModeUefi       BootMode = "UEFI"
	BootModeUseSource  BootMode = "USE_SOURCE"
)

// Values returns all known values for BootMode. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (BootMode) Values() []BootMode {
	return []BootMode{
		"LEGACY_BIOS",
		"UEFI",
		"USE_SOURCE",
	}
}

type ChangeServerLifeCycleStateSourceServerLifecycleState string

// Enum values for ChangeServerLifeCycleStateSourceServerLifecycleState
const (
	ChangeServerLifeCycleStateSourceServerLifecycleStateReadyForTest    ChangeServerLifeCycleStateSourceServerLifecycleState = "READY_FOR_TEST"
	ChangeServerLifeCycleStateSourceServerLifecycleStateReadyForCutover ChangeServerLifeCycleStateSourceServerLifecycleState = "READY_FOR_CUTOVER"
	ChangeServerLifeCycleStateSourceServerLifecycleStateCutover         ChangeServerLifeCycleStateSourceServerLifecycleState = "CUTOVER"
)

// Values returns all known values for
// ChangeServerLifeCycleStateSourceServerLifecycleState. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ChangeServerLifeCycleStateSourceServerLifecycleState) Values() []ChangeServerLifeCycleStateSourceServerLifecycleState {
	return []ChangeServerLifeCycleStateSourceServerLifecycleState{
		"READY_FOR_TEST",
		"READY_FOR_CUTOVER",
		"CUTOVER",
	}
}

type DataReplicationErrorString string

// Enum values for DataReplicationErrorString
const (
	DataReplicationErrorStringAgentNotSeen                            DataReplicationErrorString = "AGENT_NOT_SEEN"
	DataReplicationErrorStringSnapshotsFailure                        DataReplicationErrorString = "SNAPSHOTS_FAILURE"
	DataReplicationErrorStringNotConverging                           DataReplicationErrorString = "NOT_CONVERGING"
	DataReplicationErrorStringUnstableNetwork                         DataReplicationErrorString = "UNSTABLE_NETWORK"
	DataReplicationErrorStringFailedToCreateSecurityGroup             DataReplicationErrorString = "FAILED_TO_CREATE_SECURITY_GROUP"
	DataReplicationErrorStringFailedToLaunchReplicationServer         DataReplicationErrorString = "FAILED_TO_LAUNCH_REPLICATION_SERVER"
	DataReplicationErrorStringFailedToBootReplicationServer           DataReplicationErrorString = "FAILED_TO_BOOT_REPLICATION_SERVER"
	DataReplicationErrorStringFailedToAuthenticateWithService         DataReplicationErrorString = "FAILED_TO_AUTHENTICATE_WITH_SERVICE"
	DataReplicationErrorStringFailedToDownloadReplicationSoftware     DataReplicationErrorString = "FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE"
	DataReplicationErrorStringFailedToCreateStagingDisks              DataReplicationErrorString = "FAILED_TO_CREATE_STAGING_DISKS"
	DataReplicationErrorStringFailedToAttachStagingDisks              DataReplicationErrorString = "FAILED_TO_ATTACH_STAGING_DISKS"
	DataReplicationErrorStringFailedToPairReplicationServerWithAgent  DataReplicationErrorString = "FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT"
	DataReplicationErrorStringFailedToConnectAgentToReplicationServer DataReplicationErrorString = "FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER"
	DataReplicationErrorStringFailedToStartDataTransfer               DataReplicationErrorString = "FAILED_TO_START_DATA_TRANSFER"
	DataReplicationErrorStringUnsupportedVmConfiguration              DataReplicationErrorString = "UNSUPPORTED_VM_CONFIGURATION"
	DataReplicationErrorStringLastSnapshotJobFailed                   DataReplicationErrorString = "LAST_SNAPSHOT_JOB_FAILED"
)

// Values returns all known values for DataReplicationErrorString. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DataReplicationErrorString) Values() []DataReplicationErrorString {
	return []DataReplicationErrorString{
		"AGENT_NOT_SEEN",
		"SNAPSHOTS_FAILURE",
		"NOT_CONVERGING",
		"UNSTABLE_NETWORK",
		"FAILED_TO_CREATE_SECURITY_GROUP",
		"FAILED_TO_LAUNCH_REPLICATION_SERVER",
		"FAILED_TO_BOOT_REPLICATION_SERVER",
		"FAILED_TO_AUTHENTICATE_WITH_SERVICE",
		"FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE",
		"FAILED_TO_CREATE_STAGING_DISKS",
		"FAILED_TO_ATTACH_STAGING_DISKS",
		"FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT",
		"FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER",
		"FAILED_TO_START_DATA_TRANSFER",
		"UNSUPPORTED_VM_CONFIGURATION",
		"LAST_SNAPSHOT_JOB_FAILED",
	}
}

type DataReplicationInitiationStepName string

// Enum values for DataReplicationInitiationStepName
const (
	DataReplicationInitiationStepNameWait                            DataReplicationInitiationStepName = "WAIT"
	DataReplicationInitiationStepNameCreateSecurityGroup             DataReplicationInitiationStepName = "CREATE_SECURITY_GROUP"
	DataReplicationInitiationStepNameLaunchReplicationServer         DataReplicationInitiationStepName = "LAUNCH_REPLICATION_SERVER"
	DataReplicationInitiationStepNameBootReplicationServer           DataReplicationInitiationStepName = "BOOT_REPLICATION_SERVER"
	DataReplicationInitiationStepNameAuthenticateWithService         DataReplicationInitiationStepName = "AUTHENTICATE_WITH_SERVICE"
	DataReplicationInitiationStepNameDownloadReplicationSoftware     DataReplicationInitiationStepName = "DOWNLOAD_REPLICATION_SOFTWARE"
	DataReplicationInitiationStepNameCreateStagingDisks              DataReplicationInitiationStepName = "CREATE_STAGING_DISKS"
	DataReplicationInitiationStepNameAttachStagingDisks              DataReplicationInitiationStepName = "ATTACH_STAGING_DISKS"
	DataReplicationInitiationStepNamePairReplicationServerWithAgent  DataReplicationInitiationStepName = "PAIR_REPLICATION_SERVER_WITH_AGENT"
	DataReplicationInitiationStepNameConnectAgentToReplicationServer DataReplicationInitiationStepName = "CONNECT_AGENT_TO_REPLICATION_SERVER"
	DataReplicationInitiationStepNameStartDataTransfer               DataReplicationInitiationStepName = "START_DATA_TRANSFER"
)

// Values returns all known values for DataReplicationInitiationStepName. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DataReplicationInitiationStepName) Values() []DataReplicationInitiationStepName {
	return []DataReplicationInitiationStepName{
		"WAIT",
		"CREATE_SECURITY_GROUP",
		"LAUNCH_REPLICATION_SERVER",
		"BOOT_REPLICATION_SERVER",
		"AUTHENTICATE_WITH_SERVICE",
		"DOWNLOAD_REPLICATION_SOFTWARE",
		"CREATE_STAGING_DISKS",
		"ATTACH_STAGING_DISKS",
		"PAIR_REPLICATION_SERVER_WITH_AGENT",
		"CONNECT_AGENT_TO_REPLICATION_SERVER",
		"START_DATA_TRANSFER",
	}
}

type DataReplicationInitiationStepStatus string

// Enum values for DataReplicationInitiationStepStatus
const (
	DataReplicationInitiationStepStatusNotStarted DataReplicationInitiationStepStatus = "NOT_STARTED"
	DataReplicationInitiationStepStatusInProgress DataReplicationInitiationStepStatus = "IN_PROGRESS"
	DataReplicationInitiationStepStatusSucceeded  DataReplicationInitiationStepStatus = "SUCCEEDED"
	DataReplicationInitiationStepStatusFailed     DataReplicationInitiationStepStatus = "FAILED"
	DataReplicationInitiationStepStatusSkipped    DataReplicationInitiationStepStatus = "SKIPPED"
)

// Values returns all known values for DataReplicationInitiationStepStatus. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DataReplicationInitiationStepStatus) Values() []DataReplicationInitiationStepStatus {
	return []DataReplicationInitiationStepStatus{
		"NOT_STARTED",
		"IN_PROGRESS",
		"SUCCEEDED",
		"FAILED",
		"SKIPPED",
	}
}

type DataReplicationState string

// Enum values for DataReplicationState
const (
	DataReplicationStateStopped                 DataReplicationState = "STOPPED"
	DataReplicationStateInitiating              DataReplicationState = "INITIATING"
	DataReplicationStateInitialSync             DataReplicationState = "INITIAL_SYNC"
	DataReplicationStateBacklog                 DataReplicationState = "BACKLOG"
	DataReplicationStateCreatingSnapshot        DataReplicationState = "CREATING_SNAPSHOT"
	DataReplicationStateContinuous              DataReplicationState = "CONTINUOUS"
	DataReplicationStatePaused                  DataReplicationState = "PAUSED"
	DataReplicationStateRescan                  DataReplicationState = "RESCAN"
	DataReplicationStateStalled                 DataReplicationState = "STALLED"
	DataReplicationStateDisconnected            DataReplicationState = "DISCONNECTED"
	DataReplicationStatePendingSnapshotShipping DataReplicationState = "PENDING_SNAPSHOT_SHIPPING"
	DataReplicationStateShippingSnapshot        DataReplicationState = "SHIPPING_SNAPSHOT"
)

// Values returns all known values for DataReplicationState. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DataReplicationState) Values() []DataReplicationState {
	return []DataReplicationState{
		"STOPPED",
		"INITIATING",
		"INITIAL_SYNC",
		"BACKLOG",
		"CREATING_SNAPSHOT",
		"CONTINUOUS",
		"PAUSED",
		"RESCAN",
		"STALLED",
		"DISCONNECTED",
		"PENDING_SNAPSHOT_SHIPPING",
		"SHIPPING_SNAPSHOT",
	}
}

type ExportStatus string

// Enum values for ExportStatus
const (
	ExportStatusPending   ExportStatus = "PENDING"
	ExportStatusStarted   ExportStatus = "STARTED"
	ExportStatusFailed    ExportStatus = "FAILED"
	ExportStatusSucceeded ExportStatus = "SUCCEEDED"
)

// Values returns all known values for ExportStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ExportStatus) Values() []ExportStatus {
	return []ExportStatus{
		"PENDING",
		"STARTED",
		"FAILED",
		"SUCCEEDED",
	}
}

type FirstBoot string

// Enum values for FirstBoot
const (
	FirstBootWaiting   FirstBoot = "WAITING"
	FirstBootSucceeded FirstBoot = "SUCCEEDED"
	FirstBootUnknown   FirstBoot = "UNKNOWN"
	FirstBootStopped   FirstBoot = "STOPPED"
)

// Values returns all known values for FirstBoot. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FirstBoot) Values() []FirstBoot {
	return []FirstBoot{
		"WAITING",
		"SUCCEEDED",
		"UNKNOWN",
		"STOPPED",
	}
}

type ImportErrorType string

// Enum values for ImportErrorType
const (
	ImportErrorTypeValidationError ImportErrorType = "VALIDATION_ERROR"
	ImportErrorTypeProcessingError ImportErrorType = "PROCESSING_ERROR"
)

// Values returns all known values for ImportErrorType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ImportErrorType) Values() []ImportErrorType {
	return []ImportErrorType{
		"VALIDATION_ERROR",
		"PROCESSING_ERROR",
	}
}

type ImportStatus string

// Enum values for ImportStatus
const (
	ImportStatusPending   ImportStatus = "PENDING"
	ImportStatusStarted   ImportStatus = "STARTED"
	ImportStatusFailed    ImportStatus = "FAILED"
	ImportStatusSucceeded ImportStatus = "SUCCEEDED"
)

// Values returns all known values for ImportStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ImportStatus) Values() []ImportStatus {
	return []ImportStatus{
		"PENDING",
		"STARTED",
		"FAILED",
		"SUCCEEDED",
	}
}

type InitiatedBy string

// Enum values for InitiatedBy
const (
	InitiatedByStartTest    InitiatedBy = "START_TEST"
	InitiatedByStartCutover InitiatedBy = "START_CUTOVER"
	InitiatedByDiagnostic   InitiatedBy = "DIAGNOSTIC"
	InitiatedByTerminate    InitiatedBy = "TERMINATE"
)

// Values returns all known values for InitiatedBy. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InitiatedBy) Values() []InitiatedBy {
	return []InitiatedBy{
		"START_TEST",
		"START_CUTOVER",
		"DIAGNOSTIC",
		"TERMINATE",
	}
}

type JobLogEvent string

// Enum values for JobLogEvent
const (
	JobLogEventJobStart              JobLogEvent = "JOB_START"
	JobLogEventServerSkipped         JobLogEvent = "SERVER_SKIPPED"
	JobLogEventCleanupStart          JobLogEvent = "CLEANUP_START"
	JobLogEventCleanupEnd            JobLogEvent = "CLEANUP_END"
	JobLogEventCleanupFail           JobLogEvent = "CLEANUP_FAIL"
	JobLogEventSnapshotStart         JobLogEvent = "SNAPSHOT_START"
	JobLogEventSnapshotEnd           JobLogEvent = "SNAPSHOT_END"
	JobLogEventSnapshotFail          JobLogEvent = "SNAPSHOT_FAIL"
	JobLogEventUsingPreviousSnapshot JobLogEvent = "USING_PREVIOUS_SNAPSHOT"
	JobLogEventConversionStart       JobLogEvent = "CONVERSION_START"
	JobLogEventConversionEnd         JobLogEvent = "CONVERSION_END"
	JobLogEventConversionFail        JobLogEvent = "CONVERSION_FAIL"
	JobLogEventLaunchStart           JobLogEvent = "LAUNCH_START"
	JobLogEventLaunchFailed          JobLogEvent = "LAUNCH_FAILED"
	JobLogEventJobCancel             JobLogEvent = "JOB_CANCEL"
	JobLogEventJobEnd                JobLogEvent = "JOB_END"
)

// Values returns all known values for JobLogEvent. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (JobLogEvent) Values() []JobLogEvent {
	return []JobLogEvent{
		"JOB_START",
		"SERVER_SKIPPED",
		"CLEANUP_START",
		"CLEANUP_END",
		"CLEANUP_FAIL",
		"SNAPSHOT_START",
		"SNAPSHOT_END",
		"SNAPSHOT_FAIL",
		"USING_PREVIOUS_SNAPSHOT",
		"CONVERSION_START",
		"CONVERSION_END",
		"CONVERSION_FAIL",
		"LAUNCH_START",
		"LAUNCH_FAILED",
		"JOB_CANCEL",
		"JOB_END",
	}
}

type JobStatus string

// Enum values for JobStatus
const (
	JobStatusPending   JobStatus = "PENDING"
	JobStatusStarted   JobStatus = "STARTED"
	JobStatusCompleted JobStatus = "COMPLETED"
)

// Values returns all known values for JobStatus. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (JobStatus) Values() []JobStatus {
	return []JobStatus{
		"PENDING",
		"STARTED",
		"COMPLETED",
	}
}

type JobType string

// Enum values for JobType
const (
	JobTypeLaunch    JobType = "LAUNCH"
	JobTypeTerminate JobType = "TERMINATE"
)

// Values returns all known values for JobType. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (JobType) Values() []JobType {
	return []JobType{
		"LAUNCH",
		"TERMINATE",
	}
}

type LaunchDisposition string

// Enum values for LaunchDisposition
const (
	LaunchDispositionStopped LaunchDisposition = "STOPPED"
	LaunchDispositionStarted LaunchDisposition = "STARTED"
)

// Values returns all known values for LaunchDisposition. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LaunchDisposition) Values() []LaunchDisposition {
	return []LaunchDisposition{
		"STOPPED",
		"STARTED",
	}
}

type LaunchStatus string

// Enum values for LaunchStatus
const (
	LaunchStatusPending    LaunchStatus = "PENDING"
	LaunchStatusInProgress LaunchStatus = "IN_PROGRESS"
	LaunchStatusLaunched   LaunchStatus = "LAUNCHED"
	LaunchStatusFailed     LaunchStatus = "FAILED"
	LaunchStatusTerminated LaunchStatus = "TERMINATED"
)

// Values returns all known values for LaunchStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LaunchStatus) Values() []LaunchStatus {
	return []LaunchStatus{
		"PENDING",
		"IN_PROGRESS",
		"LAUNCHED",
		"FAILED",
		"TERMINATED",
	}
}

type LifeCycleState string

// Enum values for LifeCycleState
const (
	LifeCycleStateStopped             LifeCycleState = "STOPPED"
	LifeCycleStateNotReady            LifeCycleState = "NOT_READY"
	LifeCycleStateReadyForTest        LifeCycleState = "READY_FOR_TEST"
	LifeCycleStateTesting             LifeCycleState = "TESTING"
	LifeCycleStateReadyForCutover     LifeCycleState = "READY_FOR_CUTOVER"
	LifeCycleStateCuttingOver         LifeCycleState = "CUTTING_OVER"
	LifeCycleStateCutover             LifeCycleState = "CUTOVER"
	LifeCycleStateDisconnected        LifeCycleState = "DISCONNECTED"
	LifeCycleStateDiscovered          LifeCycleState = "DISCOVERED"
	LifeCycleStatePendingInstallation LifeCycleState = "PENDING_INSTALLATION"
)

// Values returns all known values for LifeCycleState. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LifeCycleState) Values() []LifeCycleState {
	return []LifeCycleState{
		"STOPPED",
		"NOT_READY",
		"READY_FOR_TEST",
		"TESTING",
		"READY_FOR_CUTOVER",
		"CUTTING_OVER",
		"CUTOVER",
		"DISCONNECTED",
		"DISCOVERED",
		"PENDING_INSTALLATION",
	}
}

type PostLaunchActionExecutionStatus string

// Enum values for PostLaunchActionExecutionStatus
const (
	PostLaunchActionExecutionStatusInProgress PostLaunchActionExecutionStatus = "IN_PROGRESS"
	PostLaunchActionExecutionStatusSuccess    PostLaunchActionExecutionStatus = "SUCCESS"
	PostLaunchActionExecutionStatusFailed     PostLaunchActionExecutionStatus = "FAILED"
)

// Values returns all known values for PostLaunchActionExecutionStatus. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PostLaunchActionExecutionStatus) Values() []PostLaunchActionExecutionStatus {
	return []PostLaunchActionExecutionStatus{
		"IN_PROGRESS",
		"SUCCESS",
		"FAILED",
	}
}

type PostLaunchActionsDeploymentType string

// Enum values for PostLaunchActionsDeploymentType
const (
	PostLaunchActionsDeploymentTypeTestAndCutover PostLaunchActionsDeploymentType = "TEST_AND_CUTOVER"
	PostLaunchActionsDeploymentTypeCutoverOnly    PostLaunchActionsDeploymentType = "CUTOVER_ONLY"
	PostLaunchActionsDeploymentTypeTestOnly       PostLaunchActionsDeploymentType = "TEST_ONLY"
)

// Values returns all known values for PostLaunchActionsDeploymentType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PostLaunchActionsDeploymentType) Values() []PostLaunchActionsDeploymentType {
	return []PostLaunchActionsDeploymentType{
		"TEST_AND_CUTOVER",
		"CUTOVER_ONLY",
		"TEST_ONLY",
	}
}

type ReplicationConfigurationDataPlaneRouting string

// Enum values for ReplicationConfigurationDataPlaneRouting
const (
	ReplicationConfigurationDataPlaneRoutingPrivateIp ReplicationConfigurationDataPlaneRouting = "PRIVATE_IP"
	ReplicationConfigurationDataPlaneRoutingPublicIp  ReplicationConfigurationDataPlaneRouting = "PUBLIC_IP"
)

// Values returns all known values for ReplicationConfigurationDataPlaneRouting.
// Note that this can be expanded in the future, and so it is only as up to date as
// the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ReplicationConfigurationDataPlaneRouting) Values() []ReplicationConfigurationDataPlaneRouting {
	return []ReplicationConfigurationDataPlaneRouting{
		"PRIVATE_IP",
		"PUBLIC_IP",
	}
}

type ReplicationConfigurationDefaultLargeStagingDiskType string

// Enum values for ReplicationConfigurationDefaultLargeStagingDiskType
const (
	ReplicationConfigurationDefaultLargeStagingDiskTypeGp2 ReplicationConfigurationDefaultLargeStagingDiskType = "GP2"
	ReplicationConfigurationDefaultLargeStagingDiskTypeSt1 ReplicationConfigurationDefaultLargeStagingDiskType = "ST1"
	ReplicationConfigurationDefaultLargeStagingDiskTypeGp3 ReplicationConfigurationDefaultLargeStagingDiskType = "GP3"
)

// Values returns all known values for
// ReplicationConfigurationDefaultLargeStagingDiskType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ReplicationConfigurationDefaultLargeStagingDiskType) Values() []ReplicationConfigurationDefaultLargeStagingDiskType {
	return []ReplicationConfigurationDefaultLargeStagingDiskType{
		"GP2",
		"ST1",
		"GP3",
	}
}

type ReplicationConfigurationEbsEncryption string

// Enum values for ReplicationConfigurationEbsEncryption
const (
	ReplicationConfigurationEbsEncryptionDefault ReplicationConfigurationEbsEncryption = "DEFAULT"
	ReplicationConfigurationEbsEncryptionCustom  ReplicationConfigurationEbsEncryption = "CUSTOM"
)

// Values returns all known values for ReplicationConfigurationEbsEncryption. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ReplicationConfigurationEbsEncryption) Values() []ReplicationConfigurationEbsEncryption {
	return []ReplicationConfigurationEbsEncryption{
		"DEFAULT",
		"CUSTOM",
	}
}

type ReplicationConfigurationReplicatedDiskStagingDiskType string

// Enum values for ReplicationConfigurationReplicatedDiskStagingDiskType
const (
	ReplicationConfigurationReplicatedDiskStagingDiskTypeAuto     ReplicationConfigurationReplicatedDiskStagingDiskType = "AUTO"
	ReplicationConfigurationReplicatedDiskStagingDiskTypeGp2      ReplicationConfigurationReplicatedDiskStagingDiskType = "GP2"
	ReplicationConfigurationReplicatedDiskStagingDiskTypeIo1      ReplicationConfigurationReplicatedDiskStagingDiskType = "IO1"
	ReplicationConfigurationReplicatedDiskStagingDiskTypeSc1      ReplicationConfigurationReplicatedDiskStagingDiskType = "SC1"
	ReplicationConfigurationReplicatedDiskStagingDiskTypeSt1      ReplicationConfigurationReplicatedDiskStagingDiskType = "ST1"
	ReplicationConfigurationReplicatedDiskStagingDiskTypeStandard ReplicationConfigurationReplicatedDiskStagingDiskType = "STANDARD"
	ReplicationConfigurationReplicatedDiskStagingDiskTypeGp3      ReplicationConfigurationReplicatedDiskStagingDiskType = "GP3"
	ReplicationConfigurationReplicatedDiskStagingDiskTypeIo2      ReplicationConfigurationReplicatedDiskStagingDiskType = "IO2"
)

// Values returns all known values for
// ReplicationConfigurationReplicatedDiskStagingDiskType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ReplicationConfigurationReplicatedDiskStagingDiskType) Values() []ReplicationConfigurationReplicatedDiskStagingDiskType {
	return []ReplicationConfigurationReplicatedDiskStagingDiskType{
		"AUTO",
		"GP2",
		"IO1",
		"SC1",
		"ST1",
		"STANDARD",
		"GP3",
		"IO2",
	}
}

type ReplicationType string

// Enum values for ReplicationType
const (
	ReplicationTypeAgentBased       ReplicationType = "AGENT_BASED"
	ReplicationTypeSnapshotShipping ReplicationType = "SNAPSHOT_SHIPPING"
)

// Values returns all known values for ReplicationType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ReplicationType) Values() []ReplicationType {
	return []ReplicationType{
		"AGENT_BASED",
		"SNAPSHOT_SHIPPING",
	}
}

type SsmDocumentType string

// Enum values for SsmDocumentType
const (
	SsmDocumentTypeAutomation SsmDocumentType = "AUTOMATION"
	SsmDocumentTypeCommand    SsmDocumentType = "COMMAND"
)

// Values returns all known values for SsmDocumentType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SsmDocumentType) Values() []SsmDocumentType {
	return []SsmDocumentType{
		"AUTOMATION",
		"COMMAND",
	}
}

type SsmParameterStoreParameterType string

// Enum values for SsmParameterStoreParameterType
const (
	SsmParameterStoreParameterTypeString SsmParameterStoreParameterType = "STRING"
)

// Values returns all known values for SsmParameterStoreParameterType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SsmParameterStoreParameterType) Values() []SsmParameterStoreParameterType {
	return []SsmParameterStoreParameterType{
		"STRING",
	}
}

type TargetInstanceTypeRightSizingMethod string

// Enum values for TargetInstanceTypeRightSizingMethod
const (
	TargetInstanceTypeRightSizingMethodNone  TargetInstanceTypeRightSizingMethod = "NONE"
	TargetInstanceTypeRightSizingMethodBasic TargetInstanceTypeRightSizingMethod = "BASIC"
)

// Values returns all known values for TargetInstanceTypeRightSizingMethod. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TargetInstanceTypeRightSizingMethod) Values() []TargetInstanceTypeRightSizingMethod {
	return []TargetInstanceTypeRightSizingMethod{
		"NONE",
		"BASIC",
	}
}

type ValidationExceptionReason string

// Enum values for ValidationExceptionReason
const (
	ValidationExceptionReasonUnknownOperation      ValidationExceptionReason = "unknownOperation"
	ValidationExceptionReasonCannotParse           ValidationExceptionReason = "cannotParse"
	ValidationExceptionReasonFieldValidationFailed ValidationExceptionReason = "fieldValidationFailed"
	ValidationExceptionReasonOther                 ValidationExceptionReason = "other"
)

// Values returns all known values for ValidationExceptionReason. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ValidationExceptionReason) Values() []ValidationExceptionReason {
	return []ValidationExceptionReason{
		"unknownOperation",
		"cannotParse",
		"fieldValidationFailed",
		"other",
	}
}

type VolumeType string

// Enum values for VolumeType
const (
	VolumeTypeIo1      VolumeType = "io1"
	VolumeTypeIo2      VolumeType = "io2"
	VolumeTypeGp3      VolumeType = "gp3"
	VolumeTypeGp2      VolumeType = "gp2"
	VolumeTypeSt1      VolumeType = "st1"
	VolumeTypeSc1      VolumeType = "sc1"
	VolumeTypeStandard VolumeType = "standard"
)

// Values returns all known values for VolumeType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (VolumeType) Values() []VolumeType {
	return []VolumeType{
		"io1",
		"io2",
		"gp3",
		"gp2",
		"st1",
		"sc1",
		"standard",
	}
}

type WaveHealthStatus string

// Enum values for WaveHealthStatus
const (
	WaveHealthStatusHealthy WaveHealthStatus = "HEALTHY"
	WaveHealthStatusLagging WaveHealthStatus = "LAGGING"
	WaveHealthStatusError   WaveHealthStatus = "ERROR"
)

// Values returns all known values for WaveHealthStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (WaveHealthStatus) Values() []WaveHealthStatus {
	return []WaveHealthStatus{
		"HEALTHY",
		"LAGGING",
		"ERROR",
	}
}

type WaveProgressStatus string

// Enum values for WaveProgressStatus
const (
	WaveProgressStatusNotStarted WaveProgressStatus = "NOT_STARTED"
	WaveProgressStatusInProgress WaveProgressStatus = "IN_PROGRESS"
	WaveProgressStatusCompleted  WaveProgressStatus = "COMPLETED"
)

// Values returns all known values for WaveProgressStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (WaveProgressStatus) Values() []WaveProgressStatus {
	return []WaveProgressStatus{
		"NOT_STARTED",
		"IN_PROGRESS",
		"COMPLETED",
	}
}
