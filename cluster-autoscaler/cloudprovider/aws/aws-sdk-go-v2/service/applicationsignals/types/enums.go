// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type DurationUnit string

// Enum values for DurationUnit
const (
	DurationUnitMinute DurationUnit = "MINUTE"
	DurationUnitHour   DurationUnit = "HOUR"
	DurationUnitDay    DurationUnit = "DAY"
	DurationUnitMonth  DurationUnit = "MONTH"
)

// Values returns all known values for DurationUnit. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DurationUnit) Values() []DurationUnit {
	return []DurationUnit{
		"MINUTE",
		"HOUR",
		"DAY",
		"MONTH",
	}
}

type EvaluationType string

// Enum values for EvaluationType
const (
	EvaluationTypePeriodBased  EvaluationType = "PeriodBased"
	EvaluationTypeRequestBased EvaluationType = "RequestBased"
)

// Values returns all known values for EvaluationType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EvaluationType) Values() []EvaluationType {
	return []EvaluationType{
		"PeriodBased",
		"RequestBased",
	}
}

type MetricSourceType string

// Enum values for MetricSourceType
const (
	MetricSourceTypeServiceOperation  MetricSourceType = "ServiceOperation"
	MetricSourceTypeCloudwatchMetric  MetricSourceType = "CloudWatchMetric"
	MetricSourceTypeServiceDependency MetricSourceType = "ServiceDependency"
)

// Values returns all known values for MetricSourceType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MetricSourceType) Values() []MetricSourceType {
	return []MetricSourceType{
		"ServiceOperation",
		"CloudWatchMetric",
		"ServiceDependency",
	}
}

type ServiceLevelIndicatorComparisonOperator string

// Enum values for ServiceLevelIndicatorComparisonOperator
const (
	ServiceLevelIndicatorComparisonOperatorGreaterThanOrEqualTo ServiceLevelIndicatorComparisonOperator = "GreaterThanOrEqualTo"
	ServiceLevelIndicatorComparisonOperatorGreaterThan          ServiceLevelIndicatorComparisonOperator = "GreaterThan"
	ServiceLevelIndicatorComparisonOperatorLessThan             ServiceLevelIndicatorComparisonOperator = "LessThan"
	ServiceLevelIndicatorComparisonOperatorLessThanOrEqualTo    ServiceLevelIndicatorComparisonOperator = "LessThanOrEqualTo"
)

// Values returns all known values for ServiceLevelIndicatorComparisonOperator.
// Note that this can be expanded in the future, and so it is only as up to date as
// the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ServiceLevelIndicatorComparisonOperator) Values() []ServiceLevelIndicatorComparisonOperator {
	return []ServiceLevelIndicatorComparisonOperator{
		"GreaterThanOrEqualTo",
		"GreaterThan",
		"LessThan",
		"LessThanOrEqualTo",
	}
}

type ServiceLevelIndicatorMetricType string

// Enum values for ServiceLevelIndicatorMetricType
const (
	ServiceLevelIndicatorMetricTypeLatency      ServiceLevelIndicatorMetricType = "LATENCY"
	ServiceLevelIndicatorMetricTypeAvailability ServiceLevelIndicatorMetricType = "AVAILABILITY"
)

// Values returns all known values for ServiceLevelIndicatorMetricType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ServiceLevelIndicatorMetricType) Values() []ServiceLevelIndicatorMetricType {
	return []ServiceLevelIndicatorMetricType{
		"LATENCY",
		"AVAILABILITY",
	}
}

type ServiceLevelObjectiveBudgetStatus string

// Enum values for ServiceLevelObjectiveBudgetStatus
const (
	ServiceLevelObjectiveBudgetStatusOk               ServiceLevelObjectiveBudgetStatus = "OK"
	ServiceLevelObjectiveBudgetStatusWarning          ServiceLevelObjectiveBudgetStatus = "WARNING"
	ServiceLevelObjectiveBudgetStatusBreached         ServiceLevelObjectiveBudgetStatus = "BREACHED"
	ServiceLevelObjectiveBudgetStatusInsufficientData ServiceLevelObjectiveBudgetStatus = "INSUFFICIENT_DATA"
)

// Values returns all known values for ServiceLevelObjectiveBudgetStatus. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ServiceLevelObjectiveBudgetStatus) Values() []ServiceLevelObjectiveBudgetStatus {
	return []ServiceLevelObjectiveBudgetStatus{
		"OK",
		"WARNING",
		"BREACHED",
		"INSUFFICIENT_DATA",
	}
}

type StandardUnit string

// Enum values for StandardUnit
const (
	StandardUnitMicroseconds    StandardUnit = "Microseconds"
	StandardUnitMilliseconds    StandardUnit = "Milliseconds"
	StandardUnitSeconds         StandardUnit = "Seconds"
	StandardUnitBytes           StandardUnit = "Bytes"
	StandardUnitKilobytes       StandardUnit = "Kilobytes"
	StandardUnitMegabytes       StandardUnit = "Megabytes"
	StandardUnitGigabytes       StandardUnit = "Gigabytes"
	StandardUnitTerabytes       StandardUnit = "Terabytes"
	StandardUnitBits            StandardUnit = "Bits"
	StandardUnitKilobits        StandardUnit = "Kilobits"
	StandardUnitMegabits        StandardUnit = "Megabits"
	StandardUnitGigabits        StandardUnit = "Gigabits"
	StandardUnitTerabits        StandardUnit = "Terabits"
	StandardUnitPercent         StandardUnit = "Percent"
	StandardUnitCount           StandardUnit = "Count"
	StandardUnitBytesSecond     StandardUnit = "Bytes/Second"
	StandardUnitKilobytesSecond StandardUnit = "Kilobytes/Second"
	StandardUnitMegabytesSecond StandardUnit = "Megabytes/Second"
	StandardUnitGigabytesSecond StandardUnit = "Gigabytes/Second"
	StandardUnitTerabytesSecond StandardUnit = "Terabytes/Second"
	StandardUnitBitsSecond      StandardUnit = "Bits/Second"
	StandardUnitKilobitsSecond  StandardUnit = "Kilobits/Second"
	StandardUnitMegabitsSecond  StandardUnit = "Megabits/Second"
	StandardUnitGigabitsSecond  StandardUnit = "Gigabits/Second"
	StandardUnitTerabitsSecond  StandardUnit = "Terabits/Second"
	StandardUnitCountSecond     StandardUnit = "Count/Second"
	StandardUnitNone            StandardUnit = "None"
)

// Values returns all known values for StandardUnit. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (StandardUnit) Values() []StandardUnit {
	return []StandardUnit{
		"Microseconds",
		"Milliseconds",
		"Seconds",
		"Bytes",
		"Kilobytes",
		"Megabytes",
		"Gigabytes",
		"Terabytes",
		"Bits",
		"Kilobits",
		"Megabits",
		"Gigabits",
		"Terabits",
		"Percent",
		"Count",
		"Bytes/Second",
		"Kilobytes/Second",
		"Megabytes/Second",
		"Gigabytes/Second",
		"Terabytes/Second",
		"Bits/Second",
		"Kilobits/Second",
		"Megabits/Second",
		"Gigabits/Second",
		"Terabits/Second",
		"Count/Second",
		"None",
	}
}
