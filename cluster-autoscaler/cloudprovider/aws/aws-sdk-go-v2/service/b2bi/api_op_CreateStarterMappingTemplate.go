// Code generated by smithy-go-codegen DO NOT EDIT.

package b2bi

import (
	"context"
	"fmt"
	awsmiddleware "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/aws/middleware"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/service/b2bi/types"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/middleware"
	smithyhttp "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/transport/http"
)

// Amazon Web Services B2B Data Interchange uses a mapping template in JSONata or
// XSLT format to transform a customer input file into a JSON or XML file that can
// be converted to EDI.
//
// If you provide a sample EDI file with the same structure as the EDI files that
// you wish to generate, then the service can generate a mapping template. The
// starter template contains placeholder values which you can replace with JSONata
// or XSLT expressions to take data from your input file and insert it into the
// JSON or XML file that is used to generate the EDI.
//
// If you do not provide a sample EDI file, then the service can generate a
// mapping template based on the EDI settings in the templateDetails parameter.
//
// Currently, we only support generating a template that can generate the input to
// produce an Outbound X12 EDI file.
func (c *Client) CreateStarterMappingTemplate(ctx context.Context, params *CreateStarterMappingTemplateInput, optFns ...func(*Options)) (*CreateStarterMappingTemplateOutput, error) {
	if params == nil {
		params = &CreateStarterMappingTemplateInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "CreateStarterMappingTemplate", params, optFns, c.addOperationCreateStarterMappingTemplateMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*CreateStarterMappingTemplateOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateStarterMappingTemplateInput struct {

	// Specify the format for the mapping template: either JSONATA or XSLT.
	//
	// This member is required.
	MappingType types.MappingType

	//  Describes the details needed for generating the template. Specify the X12
	// transaction set and version for which the template is used: currently, we only
	// support X12.
	//
	// This member is required.
	TemplateDetails types.TemplateDetails

	// Specify the location of the sample EDI file that is used to generate the
	// mapping template.
	OutputSampleLocation *types.S3Location

	noSmithyDocumentSerde
}

type CreateStarterMappingTemplateOutput struct {

	// Returns a string that represents the mapping template.
	//
	// This member is required.
	MappingTemplate *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationCreateStarterMappingTemplateMiddlewares(stack *middleware.Stack, options Options) (err error) {
	if err := stack.Serialize.Add(&setOperationInputMiddleware{}, middleware.After); err != nil {
		return err
	}
	err = stack.Serialize.Add(&awsAwsjson10_serializeOpCreateStarterMappingTemplate{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson10_deserializeOpCreateStarterMappingTemplate{}, middleware.After)
	if err != nil {
		return err
	}
	if err := addProtocolFinalizerMiddlewares(stack, options, "CreateStarterMappingTemplate"); err != nil {
		return fmt.Errorf("add protocol finalizers: %v", err)
	}

	if err = addlegacyEndpointContextSetter(stack, options); err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = addClientRequestID(stack); err != nil {
		return err
	}
	if err = addComputeContentLength(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = addComputePayloadSHA256(stack); err != nil {
		return err
	}
	if err = addRetry(stack, options); err != nil {
		return err
	}
	if err = addRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = addRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addSpanRetryLoop(stack, options); err != nil {
		return err
	}
	if err = addClientUserAgent(stack, options); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addSetLegacyContextSigningOptionsMiddleware(stack); err != nil {
		return err
	}
	if err = addTimeOffsetBuild(stack, c); err != nil {
		return err
	}
	if err = addUserAgentRetryMode(stack, options); err != nil {
		return err
	}
	if err = addCredentialSource(stack, options); err != nil {
		return err
	}
	if err = addOpCreateStarterMappingTemplateValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opCreateStarterMappingTemplate(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRecursionDetection(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	if err = addDisableHTTPSMiddleware(stack, options); err != nil {
		return err
	}
	if err = addSpanInitializeStart(stack); err != nil {
		return err
	}
	if err = addSpanInitializeEnd(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestStart(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestEnd(stack); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opCreateStarterMappingTemplate(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		OperationName: "CreateStarterMappingTemplate",
	}
}
