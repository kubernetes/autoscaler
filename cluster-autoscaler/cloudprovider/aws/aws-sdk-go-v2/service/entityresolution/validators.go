// Code generated by smithy-go-codegen DO NOT EDIT.

package entityresolution

import (
	"context"
	"fmt"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/service/entityresolution/types"
	smithy "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/middleware"
)

type validateOpAddPolicyStatement struct {
}

func (*validateOpAddPolicyStatement) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpAddPolicyStatement) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*AddPolicyStatementInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpAddPolicyStatementInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpBatchDeleteUniqueId struct {
}

func (*validateOpBatchDeleteUniqueId) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpBatchDeleteUniqueId) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*BatchDeleteUniqueIdInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpBatchDeleteUniqueIdInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateIdMappingWorkflow struct {
}

func (*validateOpCreateIdMappingWorkflow) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateIdMappingWorkflow) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateIdMappingWorkflowInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateIdMappingWorkflowInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateIdNamespace struct {
}

func (*validateOpCreateIdNamespace) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateIdNamespace) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateIdNamespaceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateIdNamespaceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateMatchingWorkflow struct {
}

func (*validateOpCreateMatchingWorkflow) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateMatchingWorkflow) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateMatchingWorkflowInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateMatchingWorkflowInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateSchemaMapping struct {
}

func (*validateOpCreateSchemaMapping) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateSchemaMapping) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateSchemaMappingInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateSchemaMappingInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteIdMappingWorkflow struct {
}

func (*validateOpDeleteIdMappingWorkflow) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteIdMappingWorkflow) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteIdMappingWorkflowInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteIdMappingWorkflowInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteIdNamespace struct {
}

func (*validateOpDeleteIdNamespace) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteIdNamespace) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteIdNamespaceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteIdNamespaceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteMatchingWorkflow struct {
}

func (*validateOpDeleteMatchingWorkflow) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteMatchingWorkflow) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteMatchingWorkflowInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteMatchingWorkflowInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeletePolicyStatement struct {
}

func (*validateOpDeletePolicyStatement) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeletePolicyStatement) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeletePolicyStatementInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeletePolicyStatementInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteSchemaMapping struct {
}

func (*validateOpDeleteSchemaMapping) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteSchemaMapping) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteSchemaMappingInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteSchemaMappingInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGenerateMatchId struct {
}

func (*validateOpGenerateMatchId) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGenerateMatchId) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GenerateMatchIdInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGenerateMatchIdInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetIdMappingJob struct {
}

func (*validateOpGetIdMappingJob) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetIdMappingJob) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetIdMappingJobInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetIdMappingJobInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetIdMappingWorkflow struct {
}

func (*validateOpGetIdMappingWorkflow) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetIdMappingWorkflow) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetIdMappingWorkflowInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetIdMappingWorkflowInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetIdNamespace struct {
}

func (*validateOpGetIdNamespace) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetIdNamespace) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetIdNamespaceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetIdNamespaceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetMatchId struct {
}

func (*validateOpGetMatchId) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetMatchId) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetMatchIdInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetMatchIdInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetMatchingJob struct {
}

func (*validateOpGetMatchingJob) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetMatchingJob) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetMatchingJobInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetMatchingJobInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetMatchingWorkflow struct {
}

func (*validateOpGetMatchingWorkflow) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetMatchingWorkflow) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetMatchingWorkflowInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetMatchingWorkflowInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetPolicy struct {
}

func (*validateOpGetPolicy) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetPolicy) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetPolicyInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetPolicyInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetProviderService struct {
}

func (*validateOpGetProviderService) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetProviderService) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetProviderServiceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetProviderServiceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetSchemaMapping struct {
}

func (*validateOpGetSchemaMapping) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetSchemaMapping) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetSchemaMappingInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetSchemaMappingInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListIdMappingJobs struct {
}

func (*validateOpListIdMappingJobs) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListIdMappingJobs) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListIdMappingJobsInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListIdMappingJobsInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListMatchingJobs struct {
}

func (*validateOpListMatchingJobs) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListMatchingJobs) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListMatchingJobsInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListMatchingJobsInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListTagsForResource struct {
}

func (*validateOpListTagsForResource) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListTagsForResource) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListTagsForResourceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListTagsForResourceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpPutPolicy struct {
}

func (*validateOpPutPolicy) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpPutPolicy) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*PutPolicyInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpPutPolicyInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpStartIdMappingJob struct {
}

func (*validateOpStartIdMappingJob) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpStartIdMappingJob) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*StartIdMappingJobInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpStartIdMappingJobInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpStartMatchingJob struct {
}

func (*validateOpStartMatchingJob) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpStartMatchingJob) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*StartMatchingJobInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpStartMatchingJobInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpTagResource struct {
}

func (*validateOpTagResource) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpTagResource) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*TagResourceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpTagResourceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUntagResource struct {
}

func (*validateOpUntagResource) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUntagResource) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UntagResourceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUntagResourceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateIdMappingWorkflow struct {
}

func (*validateOpUpdateIdMappingWorkflow) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateIdMappingWorkflow) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateIdMappingWorkflowInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateIdMappingWorkflowInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateIdNamespace struct {
}

func (*validateOpUpdateIdNamespace) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateIdNamespace) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateIdNamespaceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateIdNamespaceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateMatchingWorkflow struct {
}

func (*validateOpUpdateMatchingWorkflow) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateMatchingWorkflow) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateMatchingWorkflowInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateMatchingWorkflowInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateSchemaMapping struct {
}

func (*validateOpUpdateSchemaMapping) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateSchemaMapping) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateSchemaMappingInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateSchemaMappingInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

func addOpAddPolicyStatementValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpAddPolicyStatement{}, middleware.After)
}

func addOpBatchDeleteUniqueIdValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpBatchDeleteUniqueId{}, middleware.After)
}

func addOpCreateIdMappingWorkflowValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateIdMappingWorkflow{}, middleware.After)
}

func addOpCreateIdNamespaceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateIdNamespace{}, middleware.After)
}

func addOpCreateMatchingWorkflowValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateMatchingWorkflow{}, middleware.After)
}

func addOpCreateSchemaMappingValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateSchemaMapping{}, middleware.After)
}

func addOpDeleteIdMappingWorkflowValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteIdMappingWorkflow{}, middleware.After)
}

func addOpDeleteIdNamespaceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteIdNamespace{}, middleware.After)
}

func addOpDeleteMatchingWorkflowValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteMatchingWorkflow{}, middleware.After)
}

func addOpDeletePolicyStatementValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeletePolicyStatement{}, middleware.After)
}

func addOpDeleteSchemaMappingValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteSchemaMapping{}, middleware.After)
}

func addOpGenerateMatchIdValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGenerateMatchId{}, middleware.After)
}

func addOpGetIdMappingJobValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetIdMappingJob{}, middleware.After)
}

func addOpGetIdMappingWorkflowValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetIdMappingWorkflow{}, middleware.After)
}

func addOpGetIdNamespaceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetIdNamespace{}, middleware.After)
}

func addOpGetMatchIdValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetMatchId{}, middleware.After)
}

func addOpGetMatchingJobValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetMatchingJob{}, middleware.After)
}

func addOpGetMatchingWorkflowValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetMatchingWorkflow{}, middleware.After)
}

func addOpGetPolicyValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetPolicy{}, middleware.After)
}

func addOpGetProviderServiceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetProviderService{}, middleware.After)
}

func addOpGetSchemaMappingValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetSchemaMapping{}, middleware.After)
}

func addOpListIdMappingJobsValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListIdMappingJobs{}, middleware.After)
}

func addOpListMatchingJobsValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListMatchingJobs{}, middleware.After)
}

func addOpListTagsForResourceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListTagsForResource{}, middleware.After)
}

func addOpPutPolicyValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpPutPolicy{}, middleware.After)
}

func addOpStartIdMappingJobValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpStartIdMappingJob{}, middleware.After)
}

func addOpStartMatchingJobValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpStartMatchingJob{}, middleware.After)
}

func addOpTagResourceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpTagResource{}, middleware.After)
}

func addOpUntagResourceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUntagResource{}, middleware.After)
}

func addOpUpdateIdMappingWorkflowValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateIdMappingWorkflow{}, middleware.After)
}

func addOpUpdateIdNamespaceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateIdNamespace{}, middleware.After)
}

func addOpUpdateMatchingWorkflowValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateMatchingWorkflow{}, middleware.After)
}

func addOpUpdateSchemaMappingValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateSchemaMapping{}, middleware.After)
}

func validateIdMappingJobOutputSource(v *types.IdMappingJobOutputSource) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "IdMappingJobOutputSource"}
	if v.RoleArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RoleArn"))
	}
	if v.OutputS3Path == nil {
		invalidParams.Add(smithy.NewErrParamRequired("OutputS3Path"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateIdMappingJobOutputSourceConfig(v []types.IdMappingJobOutputSource) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "IdMappingJobOutputSourceConfig"}
	for i := range v {
		if err := validateIdMappingJobOutputSource(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateIdMappingRuleBasedProperties(v *types.IdMappingRuleBasedProperties) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "IdMappingRuleBasedProperties"}
	if v.Rules != nil {
		if err := validateRuleList(v.Rules); err != nil {
			invalidParams.AddNested("Rules", err.(smithy.InvalidParamsError))
		}
	}
	if len(v.RuleDefinitionType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("RuleDefinitionType"))
	}
	if len(v.AttributeMatchingModel) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("AttributeMatchingModel"))
	}
	if len(v.RecordMatchingModel) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("RecordMatchingModel"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateIdMappingTechniques(v *types.IdMappingTechniques) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "IdMappingTechniques"}
	if len(v.IdMappingType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("IdMappingType"))
	}
	if v.RuleBasedProperties != nil {
		if err := validateIdMappingRuleBasedProperties(v.RuleBasedProperties); err != nil {
			invalidParams.AddNested("RuleBasedProperties", err.(smithy.InvalidParamsError))
		}
	}
	if v.ProviderProperties != nil {
		if err := validateProviderProperties(v.ProviderProperties); err != nil {
			invalidParams.AddNested("ProviderProperties", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateIdMappingWorkflowInputSource(v *types.IdMappingWorkflowInputSource) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "IdMappingWorkflowInputSource"}
	if v.InputSourceARN == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InputSourceARN"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateIdMappingWorkflowInputSourceConfig(v []types.IdMappingWorkflowInputSource) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "IdMappingWorkflowInputSourceConfig"}
	for i := range v {
		if err := validateIdMappingWorkflowInputSource(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateIdMappingWorkflowOutputSource(v *types.IdMappingWorkflowOutputSource) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "IdMappingWorkflowOutputSource"}
	if v.OutputS3Path == nil {
		invalidParams.Add(smithy.NewErrParamRequired("OutputS3Path"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateIdMappingWorkflowOutputSourceConfig(v []types.IdMappingWorkflowOutputSource) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "IdMappingWorkflowOutputSourceConfig"}
	for i := range v {
		if err := validateIdMappingWorkflowOutputSource(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateIdNamespaceIdMappingWorkflowProperties(v *types.IdNamespaceIdMappingWorkflowProperties) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "IdNamespaceIdMappingWorkflowProperties"}
	if len(v.IdMappingType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("IdMappingType"))
	}
	if v.RuleBasedProperties != nil {
		if err := validateNamespaceRuleBasedProperties(v.RuleBasedProperties); err != nil {
			invalidParams.AddNested("RuleBasedProperties", err.(smithy.InvalidParamsError))
		}
	}
	if v.ProviderProperties != nil {
		if err := validateNamespaceProviderProperties(v.ProviderProperties); err != nil {
			invalidParams.AddNested("ProviderProperties", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateIdNamespaceIdMappingWorkflowPropertiesList(v []types.IdNamespaceIdMappingWorkflowProperties) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "IdNamespaceIdMappingWorkflowPropertiesList"}
	for i := range v {
		if err := validateIdNamespaceIdMappingWorkflowProperties(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateIdNamespaceInputSource(v *types.IdNamespaceInputSource) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "IdNamespaceInputSource"}
	if v.InputSourceARN == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InputSourceARN"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateIdNamespaceInputSourceConfig(v []types.IdNamespaceInputSource) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "IdNamespaceInputSourceConfig"}
	for i := range v {
		if err := validateIdNamespaceInputSource(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateInputSource(v *types.InputSource) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "InputSource"}
	if v.InputSourceARN == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InputSourceARN"))
	}
	if v.SchemaName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("SchemaName"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateInputSourceConfig(v []types.InputSource) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "InputSourceConfig"}
	for i := range v {
		if err := validateInputSource(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateIntermediateSourceConfiguration(v *types.IntermediateSourceConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "IntermediateSourceConfiguration"}
	if v.IntermediateS3Path == nil {
		invalidParams.Add(smithy.NewErrParamRequired("IntermediateS3Path"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateNamespaceProviderProperties(v *types.NamespaceProviderProperties) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "NamespaceProviderProperties"}
	if v.ProviderServiceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ProviderServiceArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateNamespaceRuleBasedProperties(v *types.NamespaceRuleBasedProperties) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "NamespaceRuleBasedProperties"}
	if v.Rules != nil {
		if err := validateRuleList(v.Rules); err != nil {
			invalidParams.AddNested("Rules", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOutputAttribute(v *types.OutputAttribute) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "OutputAttribute"}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOutputAttributes(v []types.OutputAttribute) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "OutputAttributes"}
	for i := range v {
		if err := validateOutputAttribute(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOutputSource(v *types.OutputSource) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "OutputSource"}
	if v.OutputS3Path == nil {
		invalidParams.Add(smithy.NewErrParamRequired("OutputS3Path"))
	}
	if v.Output == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Output"))
	} else if v.Output != nil {
		if err := validateOutputAttributes(v.Output); err != nil {
			invalidParams.AddNested("Output", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOutputSourceConfig(v []types.OutputSource) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "OutputSourceConfig"}
	for i := range v {
		if err := validateOutputSource(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateProviderProperties(v *types.ProviderProperties) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ProviderProperties"}
	if v.ProviderServiceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ProviderServiceArn"))
	}
	if v.IntermediateSourceConfiguration != nil {
		if err := validateIntermediateSourceConfiguration(v.IntermediateSourceConfiguration); err != nil {
			invalidParams.AddNested("IntermediateSourceConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRecord(v *types.Record) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "Record"}
	if v.InputSourceARN == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InputSourceARN"))
	}
	if v.UniqueId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("UniqueId"))
	}
	if v.RecordAttributeMap == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RecordAttributeMap"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRecordList(v []types.Record) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RecordList"}
	for i := range v {
		if err := validateRecord(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateResolutionTechniques(v *types.ResolutionTechniques) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ResolutionTechniques"}
	if len(v.ResolutionType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("ResolutionType"))
	}
	if v.RuleBasedProperties != nil {
		if err := validateRuleBasedProperties(v.RuleBasedProperties); err != nil {
			invalidParams.AddNested("RuleBasedProperties", err.(smithy.InvalidParamsError))
		}
	}
	if v.ProviderProperties != nil {
		if err := validateProviderProperties(v.ProviderProperties); err != nil {
			invalidParams.AddNested("ProviderProperties", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRule(v *types.Rule) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "Rule"}
	if v.RuleName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RuleName"))
	}
	if v.MatchingKeys == nil {
		invalidParams.Add(smithy.NewErrParamRequired("MatchingKeys"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRuleBasedProperties(v *types.RuleBasedProperties) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RuleBasedProperties"}
	if v.Rules == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Rules"))
	} else if v.Rules != nil {
		if err := validateRuleList(v.Rules); err != nil {
			invalidParams.AddNested("Rules", err.(smithy.InvalidParamsError))
		}
	}
	if len(v.AttributeMatchingModel) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("AttributeMatchingModel"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRuleList(v []types.Rule) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RuleList"}
	for i := range v {
		if err := validateRule(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateSchemaInputAttribute(v *types.SchemaInputAttribute) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "SchemaInputAttribute"}
	if v.FieldName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("FieldName"))
	}
	if len(v.Type) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Type"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateSchemaInputAttributes(v []types.SchemaInputAttribute) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "SchemaInputAttributes"}
	for i := range v {
		if err := validateSchemaInputAttribute(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpAddPolicyStatementInput(v *AddPolicyStatementInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AddPolicyStatementInput"}
	if v.Arn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Arn"))
	}
	if v.StatementId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("StatementId"))
	}
	if len(v.Effect) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Effect"))
	}
	if v.Action == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Action"))
	}
	if v.Principal == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Principal"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpBatchDeleteUniqueIdInput(v *BatchDeleteUniqueIdInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "BatchDeleteUniqueIdInput"}
	if v.WorkflowName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("WorkflowName"))
	}
	if v.UniqueIds == nil {
		invalidParams.Add(smithy.NewErrParamRequired("UniqueIds"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateIdMappingWorkflowInput(v *CreateIdMappingWorkflowInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateIdMappingWorkflowInput"}
	if v.WorkflowName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("WorkflowName"))
	}
	if v.InputSourceConfig == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InputSourceConfig"))
	} else if v.InputSourceConfig != nil {
		if err := validateIdMappingWorkflowInputSourceConfig(v.InputSourceConfig); err != nil {
			invalidParams.AddNested("InputSourceConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.OutputSourceConfig != nil {
		if err := validateIdMappingWorkflowOutputSourceConfig(v.OutputSourceConfig); err != nil {
			invalidParams.AddNested("OutputSourceConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.IdMappingTechniques == nil {
		invalidParams.Add(smithy.NewErrParamRequired("IdMappingTechniques"))
	} else if v.IdMappingTechniques != nil {
		if err := validateIdMappingTechniques(v.IdMappingTechniques); err != nil {
			invalidParams.AddNested("IdMappingTechniques", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateIdNamespaceInput(v *CreateIdNamespaceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateIdNamespaceInput"}
	if v.IdNamespaceName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("IdNamespaceName"))
	}
	if v.InputSourceConfig != nil {
		if err := validateIdNamespaceInputSourceConfig(v.InputSourceConfig); err != nil {
			invalidParams.AddNested("InputSourceConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.IdMappingWorkflowProperties != nil {
		if err := validateIdNamespaceIdMappingWorkflowPropertiesList(v.IdMappingWorkflowProperties); err != nil {
			invalidParams.AddNested("IdMappingWorkflowProperties", err.(smithy.InvalidParamsError))
		}
	}
	if len(v.Type) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Type"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateMatchingWorkflowInput(v *CreateMatchingWorkflowInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateMatchingWorkflowInput"}
	if v.WorkflowName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("WorkflowName"))
	}
	if v.InputSourceConfig == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InputSourceConfig"))
	} else if v.InputSourceConfig != nil {
		if err := validateInputSourceConfig(v.InputSourceConfig); err != nil {
			invalidParams.AddNested("InputSourceConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.OutputSourceConfig == nil {
		invalidParams.Add(smithy.NewErrParamRequired("OutputSourceConfig"))
	} else if v.OutputSourceConfig != nil {
		if err := validateOutputSourceConfig(v.OutputSourceConfig); err != nil {
			invalidParams.AddNested("OutputSourceConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.ResolutionTechniques == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ResolutionTechniques"))
	} else if v.ResolutionTechniques != nil {
		if err := validateResolutionTechniques(v.ResolutionTechniques); err != nil {
			invalidParams.AddNested("ResolutionTechniques", err.(smithy.InvalidParamsError))
		}
	}
	if v.RoleArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RoleArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateSchemaMappingInput(v *CreateSchemaMappingInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateSchemaMappingInput"}
	if v.SchemaName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("SchemaName"))
	}
	if v.MappedInputFields == nil {
		invalidParams.Add(smithy.NewErrParamRequired("MappedInputFields"))
	} else if v.MappedInputFields != nil {
		if err := validateSchemaInputAttributes(v.MappedInputFields); err != nil {
			invalidParams.AddNested("MappedInputFields", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteIdMappingWorkflowInput(v *DeleteIdMappingWorkflowInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteIdMappingWorkflowInput"}
	if v.WorkflowName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("WorkflowName"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteIdNamespaceInput(v *DeleteIdNamespaceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteIdNamespaceInput"}
	if v.IdNamespaceName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("IdNamespaceName"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteMatchingWorkflowInput(v *DeleteMatchingWorkflowInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteMatchingWorkflowInput"}
	if v.WorkflowName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("WorkflowName"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeletePolicyStatementInput(v *DeletePolicyStatementInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeletePolicyStatementInput"}
	if v.Arn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Arn"))
	}
	if v.StatementId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("StatementId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteSchemaMappingInput(v *DeleteSchemaMappingInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteSchemaMappingInput"}
	if v.SchemaName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("SchemaName"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGenerateMatchIdInput(v *GenerateMatchIdInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GenerateMatchIdInput"}
	if v.WorkflowName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("WorkflowName"))
	}
	if v.Records == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Records"))
	} else if v.Records != nil {
		if err := validateRecordList(v.Records); err != nil {
			invalidParams.AddNested("Records", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetIdMappingJobInput(v *GetIdMappingJobInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetIdMappingJobInput"}
	if v.WorkflowName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("WorkflowName"))
	}
	if v.JobId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("JobId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetIdMappingWorkflowInput(v *GetIdMappingWorkflowInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetIdMappingWorkflowInput"}
	if v.WorkflowName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("WorkflowName"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetIdNamespaceInput(v *GetIdNamespaceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetIdNamespaceInput"}
	if v.IdNamespaceName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("IdNamespaceName"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetMatchIdInput(v *GetMatchIdInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetMatchIdInput"}
	if v.WorkflowName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("WorkflowName"))
	}
	if v.Record == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Record"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetMatchingJobInput(v *GetMatchingJobInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetMatchingJobInput"}
	if v.WorkflowName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("WorkflowName"))
	}
	if v.JobId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("JobId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetMatchingWorkflowInput(v *GetMatchingWorkflowInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetMatchingWorkflowInput"}
	if v.WorkflowName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("WorkflowName"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetPolicyInput(v *GetPolicyInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetPolicyInput"}
	if v.Arn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Arn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetProviderServiceInput(v *GetProviderServiceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetProviderServiceInput"}
	if v.ProviderName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ProviderName"))
	}
	if v.ProviderServiceName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ProviderServiceName"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetSchemaMappingInput(v *GetSchemaMappingInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetSchemaMappingInput"}
	if v.SchemaName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("SchemaName"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListIdMappingJobsInput(v *ListIdMappingJobsInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListIdMappingJobsInput"}
	if v.WorkflowName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("WorkflowName"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListMatchingJobsInput(v *ListMatchingJobsInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListMatchingJobsInput"}
	if v.WorkflowName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("WorkflowName"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListTagsForResourceInput(v *ListTagsForResourceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListTagsForResourceInput"}
	if v.ResourceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ResourceArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpPutPolicyInput(v *PutPolicyInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "PutPolicyInput"}
	if v.Arn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Arn"))
	}
	if v.Policy == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Policy"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpStartIdMappingJobInput(v *StartIdMappingJobInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "StartIdMappingJobInput"}
	if v.WorkflowName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("WorkflowName"))
	}
	if v.OutputSourceConfig != nil {
		if err := validateIdMappingJobOutputSourceConfig(v.OutputSourceConfig); err != nil {
			invalidParams.AddNested("OutputSourceConfig", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpStartMatchingJobInput(v *StartMatchingJobInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "StartMatchingJobInput"}
	if v.WorkflowName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("WorkflowName"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpTagResourceInput(v *TagResourceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "TagResourceInput"}
	if v.ResourceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ResourceArn"))
	}
	if v.Tags == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Tags"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUntagResourceInput(v *UntagResourceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UntagResourceInput"}
	if v.ResourceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ResourceArn"))
	}
	if v.TagKeys == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TagKeys"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateIdMappingWorkflowInput(v *UpdateIdMappingWorkflowInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateIdMappingWorkflowInput"}
	if v.WorkflowName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("WorkflowName"))
	}
	if v.InputSourceConfig == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InputSourceConfig"))
	} else if v.InputSourceConfig != nil {
		if err := validateIdMappingWorkflowInputSourceConfig(v.InputSourceConfig); err != nil {
			invalidParams.AddNested("InputSourceConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.OutputSourceConfig != nil {
		if err := validateIdMappingWorkflowOutputSourceConfig(v.OutputSourceConfig); err != nil {
			invalidParams.AddNested("OutputSourceConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.IdMappingTechniques == nil {
		invalidParams.Add(smithy.NewErrParamRequired("IdMappingTechniques"))
	} else if v.IdMappingTechniques != nil {
		if err := validateIdMappingTechniques(v.IdMappingTechniques); err != nil {
			invalidParams.AddNested("IdMappingTechniques", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateIdNamespaceInput(v *UpdateIdNamespaceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateIdNamespaceInput"}
	if v.IdNamespaceName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("IdNamespaceName"))
	}
	if v.InputSourceConfig != nil {
		if err := validateIdNamespaceInputSourceConfig(v.InputSourceConfig); err != nil {
			invalidParams.AddNested("InputSourceConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.IdMappingWorkflowProperties != nil {
		if err := validateIdNamespaceIdMappingWorkflowPropertiesList(v.IdMappingWorkflowProperties); err != nil {
			invalidParams.AddNested("IdMappingWorkflowProperties", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateMatchingWorkflowInput(v *UpdateMatchingWorkflowInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateMatchingWorkflowInput"}
	if v.WorkflowName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("WorkflowName"))
	}
	if v.InputSourceConfig == nil {
		invalidParams.Add(smithy.NewErrParamRequired("InputSourceConfig"))
	} else if v.InputSourceConfig != nil {
		if err := validateInputSourceConfig(v.InputSourceConfig); err != nil {
			invalidParams.AddNested("InputSourceConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.OutputSourceConfig == nil {
		invalidParams.Add(smithy.NewErrParamRequired("OutputSourceConfig"))
	} else if v.OutputSourceConfig != nil {
		if err := validateOutputSourceConfig(v.OutputSourceConfig); err != nil {
			invalidParams.AddNested("OutputSourceConfig", err.(smithy.InvalidParamsError))
		}
	}
	if v.ResolutionTechniques == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ResolutionTechniques"))
	} else if v.ResolutionTechniques != nil {
		if err := validateResolutionTechniques(v.ResolutionTechniques); err != nil {
			invalidParams.AddNested("ResolutionTechniques", err.(smithy.InvalidParamsError))
		}
	}
	if v.RoleArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RoleArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateSchemaMappingInput(v *UpdateSchemaMappingInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateSchemaMappingInput"}
	if v.SchemaName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("SchemaName"))
	}
	if v.MappedInputFields == nil {
		invalidParams.Add(smithy.NewErrParamRequired("MappedInputFields"))
	} else if v.MappedInputFields != nil {
		if err := validateSchemaInputAttributes(v.MappedInputFields); err != nil {
			invalidParams.AddNested("MappedInputFields", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}
