// Code generated by smithy-go-codegen DO NOT EDIT.

package auditmanager

import (
	"context"
	"fmt"
	awsmiddleware "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/aws/middleware"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/service/auditmanager/types"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/middleware"
	smithyhttp "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/transport/http"
)

// Creates an assessment in Audit Manager.
func (c *Client) CreateAssessment(ctx context.Context, params *CreateAssessmentInput, optFns ...func(*Options)) (*CreateAssessmentOutput, error) {
	if params == nil {
		params = &CreateAssessmentInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "CreateAssessment", params, optFns, c.addOperationCreateAssessmentMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*CreateAssessmentOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateAssessmentInput struct {

	//  The assessment report storage destination for the assessment that's being
	// created.
	//
	// This member is required.
	AssessmentReportsDestination *types.AssessmentReportsDestination

	//  The identifier for the framework that the assessment will be created from.
	//
	// This member is required.
	FrameworkId *string

	//  The name of the assessment to be created.
	//
	// This member is required.
	Name *string

	//  The list of roles for the assessment.
	//
	// This member is required.
	Roles []types.Role

	//  The wrapper that contains the Amazon Web Services accounts that are in scope
	// for the assessment.
	//
	// You no longer need to specify which Amazon Web Services services are in scope
	// when you create or update an assessment. Audit Manager infers the services in
	// scope by examining your assessment controls and their data sources, and then
	// mapping this information to the relevant Amazon Web Services services.
	//
	// If an underlying data source changes for your assessment, we automatically
	// update the services scope as needed to reflect the correct Amazon Web Services
	// services. This ensures that your assessment collects accurate and comprehensive
	// evidence about all of the relevant services in your AWS environment.
	//
	// This member is required.
	Scope *types.Scope

	//  The optional description of the assessment to be created.
	Description *string

	//  The tags that are associated with the assessment.
	Tags map[string]string

	noSmithyDocumentSerde
}

type CreateAssessmentOutput struct {

	//  An entity that defines the scope of audit evidence collected by Audit Manager.
	// An Audit Manager assessment is an implementation of an Audit Manager framework.
	Assessment *types.Assessment

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationCreateAssessmentMiddlewares(stack *middleware.Stack, options Options) (err error) {
	if err := stack.Serialize.Add(&setOperationInputMiddleware{}, middleware.After); err != nil {
		return err
	}
	err = stack.Serialize.Add(&awsRestjson1_serializeOpCreateAssessment{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpCreateAssessment{}, middleware.After)
	if err != nil {
		return err
	}
	if err := addProtocolFinalizerMiddlewares(stack, options, "CreateAssessment"); err != nil {
		return fmt.Errorf("add protocol finalizers: %v", err)
	}

	if err = addlegacyEndpointContextSetter(stack, options); err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = addClientRequestID(stack); err != nil {
		return err
	}
	if err = addComputeContentLength(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = addComputePayloadSHA256(stack); err != nil {
		return err
	}
	if err = addRetry(stack, options); err != nil {
		return err
	}
	if err = addRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = addRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addSpanRetryLoop(stack, options); err != nil {
		return err
	}
	if err = addClientUserAgent(stack, options); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addSetLegacyContextSigningOptionsMiddleware(stack); err != nil {
		return err
	}
	if err = addTimeOffsetBuild(stack, c); err != nil {
		return err
	}
	if err = addUserAgentRetryMode(stack, options); err != nil {
		return err
	}
	if err = addCredentialSource(stack, options); err != nil {
		return err
	}
	if err = addOpCreateAssessmentValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opCreateAssessment(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRecursionDetection(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	if err = addDisableHTTPSMiddleware(stack, options); err != nil {
		return err
	}
	if err = addSpanInitializeStart(stack); err != nil {
		return err
	}
	if err = addSpanInitializeEnd(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestStart(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestEnd(stack); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opCreateAssessment(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		OperationName: "CreateAssessment",
	}
}
