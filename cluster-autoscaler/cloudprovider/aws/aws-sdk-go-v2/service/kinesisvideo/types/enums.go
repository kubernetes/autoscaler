// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type APIName string

// Enum values for APIName
const (
	APINamePutMedia                   APIName = "PUT_MEDIA"
	APINameGetMedia                   APIName = "GET_MEDIA"
	APINameListFragments              APIName = "LIST_FRAGMENTS"
	APINameGetMediaForFragmentList    APIName = "GET_MEDIA_FOR_FRAGMENT_LIST"
	APINameGetHlsStreamingSessionUrl  APIName = "GET_HLS_STREAMING_SESSION_URL"
	APINameGetDashStreamingSessionUrl APIName = "GET_DASH_STREAMING_SESSION_URL"
	APINameGetClip                    APIName = "GET_CLIP"
	APINameGetImages                  APIName = "GET_IMAGES"
)

// Values returns all known values for APIName. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (APIName) Values() []APIName {
	return []APIName{
		"PUT_MEDIA",
		"GET_MEDIA",
		"LIST_FRAGMENTS",
		"GET_MEDIA_FOR_FRAGMENT_LIST",
		"GET_HLS_STREAMING_SESSION_URL",
		"GET_DASH_STREAMING_SESSION_URL",
		"GET_CLIP",
		"GET_IMAGES",
	}
}

type ChannelProtocol string

// Enum values for ChannelProtocol
const (
	ChannelProtocolWss    ChannelProtocol = "WSS"
	ChannelProtocolHttps  ChannelProtocol = "HTTPS"
	ChannelProtocolWebrtc ChannelProtocol = "WEBRTC"
)

// Values returns all known values for ChannelProtocol. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ChannelProtocol) Values() []ChannelProtocol {
	return []ChannelProtocol{
		"WSS",
		"HTTPS",
		"WEBRTC",
	}
}

type ChannelRole string

// Enum values for ChannelRole
const (
	ChannelRoleMaster ChannelRole = "MASTER"
	ChannelRoleViewer ChannelRole = "VIEWER"
)

// Values returns all known values for ChannelRole. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ChannelRole) Values() []ChannelRole {
	return []ChannelRole{
		"MASTER",
		"VIEWER",
	}
}

type ChannelType string

// Enum values for ChannelType
const (
	ChannelTypeSingleMaster ChannelType = "SINGLE_MASTER"
	ChannelTypeFullMesh     ChannelType = "FULL_MESH"
)

// Values returns all known values for ChannelType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ChannelType) Values() []ChannelType {
	return []ChannelType{
		"SINGLE_MASTER",
		"FULL_MESH",
	}
}

type ComparisonOperator string

// Enum values for ComparisonOperator
const (
	ComparisonOperatorBeginsWith ComparisonOperator = "BEGINS_WITH"
)

// Values returns all known values for ComparisonOperator. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ComparisonOperator) Values() []ComparisonOperator {
	return []ComparisonOperator{
		"BEGINS_WITH",
	}
}

type ConfigurationStatus string

// Enum values for ConfigurationStatus
const (
	ConfigurationStatusEnabled  ConfigurationStatus = "ENABLED"
	ConfigurationStatusDisabled ConfigurationStatus = "DISABLED"
)

// Values returns all known values for ConfigurationStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ConfigurationStatus) Values() []ConfigurationStatus {
	return []ConfigurationStatus{
		"ENABLED",
		"DISABLED",
	}
}

type Format string

// Enum values for Format
const (
	FormatJpeg Format = "JPEG"
	FormatPng  Format = "PNG"
)

// Values returns all known values for Format. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Format) Values() []Format {
	return []Format{
		"JPEG",
		"PNG",
	}
}

type FormatConfigKey string

// Enum values for FormatConfigKey
const (
	FormatConfigKeyJPEGQuality FormatConfigKey = "JPEGQuality"
)

// Values returns all known values for FormatConfigKey. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FormatConfigKey) Values() []FormatConfigKey {
	return []FormatConfigKey{
		"JPEGQuality",
	}
}

type ImageSelectorType string

// Enum values for ImageSelectorType
const (
	ImageSelectorTypeServerTimestamp   ImageSelectorType = "SERVER_TIMESTAMP"
	ImageSelectorTypeProducerTimestamp ImageSelectorType = "PRODUCER_TIMESTAMP"
)

// Values returns all known values for ImageSelectorType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ImageSelectorType) Values() []ImageSelectorType {
	return []ImageSelectorType{
		"SERVER_TIMESTAMP",
		"PRODUCER_TIMESTAMP",
	}
}

type MediaStorageConfigurationStatus string

// Enum values for MediaStorageConfigurationStatus
const (
	MediaStorageConfigurationStatusEnabled  MediaStorageConfigurationStatus = "ENABLED"
	MediaStorageConfigurationStatusDisabled MediaStorageConfigurationStatus = "DISABLED"
)

// Values returns all known values for MediaStorageConfigurationStatus. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MediaStorageConfigurationStatus) Values() []MediaStorageConfigurationStatus {
	return []MediaStorageConfigurationStatus{
		"ENABLED",
		"DISABLED",
	}
}

type MediaUriType string

// Enum values for MediaUriType
const (
	MediaUriTypeRtspUri MediaUriType = "RTSP_URI"
	MediaUriTypeFileUri MediaUriType = "FILE_URI"
)

// Values returns all known values for MediaUriType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MediaUriType) Values() []MediaUriType {
	return []MediaUriType{
		"RTSP_URI",
		"FILE_URI",
	}
}

type RecorderStatus string

// Enum values for RecorderStatus
const (
	RecorderStatusSuccess     RecorderStatus = "SUCCESS"
	RecorderStatusUserError   RecorderStatus = "USER_ERROR"
	RecorderStatusSystemError RecorderStatus = "SYSTEM_ERROR"
)

// Values returns all known values for RecorderStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RecorderStatus) Values() []RecorderStatus {
	return []RecorderStatus{
		"SUCCESS",
		"USER_ERROR",
		"SYSTEM_ERROR",
	}
}

type Status string

// Enum values for Status
const (
	StatusCreating Status = "CREATING"
	StatusActive   Status = "ACTIVE"
	StatusUpdating Status = "UPDATING"
	StatusDeleting Status = "DELETING"
)

// Values returns all known values for Status. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Status) Values() []Status {
	return []Status{
		"CREATING",
		"ACTIVE",
		"UPDATING",
		"DELETING",
	}
}

type StrategyOnFullSize string

// Enum values for StrategyOnFullSize
const (
	StrategyOnFullSizeDeleteOldestMedia StrategyOnFullSize = "DELETE_OLDEST_MEDIA"
	StrategyOnFullSizeDenyNewMedia      StrategyOnFullSize = "DENY_NEW_MEDIA"
)

// Values returns all known values for StrategyOnFullSize. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (StrategyOnFullSize) Values() []StrategyOnFullSize {
	return []StrategyOnFullSize{
		"DELETE_OLDEST_MEDIA",
		"DENY_NEW_MEDIA",
	}
}

type SyncStatus string

// Enum values for SyncStatus
const (
	SyncStatusSyncing              SyncStatus = "SYNCING"
	SyncStatusAcknowledged         SyncStatus = "ACKNOWLEDGED"
	SyncStatusInSync               SyncStatus = "IN_SYNC"
	SyncStatusSyncFailed           SyncStatus = "SYNC_FAILED"
	SyncStatusDeleting             SyncStatus = "DELETING"
	SyncStatusDeleteFailed         SyncStatus = "DELETE_FAILED"
	SyncStatusDeletingAcknowledged SyncStatus = "DELETING_ACKNOWLEDGED"
)

// Values returns all known values for SyncStatus. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SyncStatus) Values() []SyncStatus {
	return []SyncStatus{
		"SYNCING",
		"ACKNOWLEDGED",
		"IN_SYNC",
		"SYNC_FAILED",
		"DELETING",
		"DELETE_FAILED",
		"DELETING_ACKNOWLEDGED",
	}
}

type UpdateDataRetentionOperation string

// Enum values for UpdateDataRetentionOperation
const (
	UpdateDataRetentionOperationIncreaseDataRetention UpdateDataRetentionOperation = "INCREASE_DATA_RETENTION"
	UpdateDataRetentionOperationDecreaseDataRetention UpdateDataRetentionOperation = "DECREASE_DATA_RETENTION"
)

// Values returns all known values for UpdateDataRetentionOperation. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (UpdateDataRetentionOperation) Values() []UpdateDataRetentionOperation {
	return []UpdateDataRetentionOperation{
		"INCREASE_DATA_RETENTION",
		"DECREASE_DATA_RETENTION",
	}
}

type UploaderStatus string

// Enum values for UploaderStatus
const (
	UploaderStatusSuccess     UploaderStatus = "SUCCESS"
	UploaderStatusUserError   UploaderStatus = "USER_ERROR"
	UploaderStatusSystemError UploaderStatus = "SYSTEM_ERROR"
)

// Values returns all known values for UploaderStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (UploaderStatus) Values() []UploaderStatus {
	return []UploaderStatus{
		"SUCCESS",
		"USER_ERROR",
		"SYSTEM_ERROR",
	}
}
