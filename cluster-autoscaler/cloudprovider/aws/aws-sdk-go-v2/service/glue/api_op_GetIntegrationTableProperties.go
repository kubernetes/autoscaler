// Code generated by smithy-go-codegen DO NOT EDIT.

package glue

import (
	"context"
	"fmt"
	awsmiddleware "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/aws/middleware"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/service/glue/types"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/middleware"
	smithyhttp "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/transport/http"
)

// This API is used to retrieve optional override properties for the tables that
// need to be replicated. These properties can include properties for filtering and
// partition for source and target tables.
func (c *Client) GetIntegrationTableProperties(ctx context.Context, params *GetIntegrationTablePropertiesInput, optFns ...func(*Options)) (*GetIntegrationTablePropertiesOutput, error) {
	if params == nil {
		params = &GetIntegrationTablePropertiesInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "GetIntegrationTableProperties", params, optFns, c.addOperationGetIntegrationTablePropertiesMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*GetIntegrationTablePropertiesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetIntegrationTablePropertiesInput struct {

	// The Amazon Resource Name (ARN) of the target table for which to retrieve
	// integration table properties. Currently, this API only supports retrieving
	// properties for target tables, and the provided ARN should be the ARN of the
	// target table in the Glue Data Catalog. Support for retrieving integration table
	// properties for source connections (using the connection ARN) is not yet
	// implemented and will be added in a future release.
	//
	// This member is required.
	ResourceArn *string

	// The name of the table to be replicated.
	//
	// This member is required.
	TableName *string

	noSmithyDocumentSerde
}

type GetIntegrationTablePropertiesOutput struct {

	// The Amazon Resource Name (ARN) of the target table for which to retrieve
	// integration table properties. Currently, this API only supports retrieving
	// properties for target tables, and the provided ARN should be the ARN of the
	// target table in the Glue Data Catalog. Support for retrieving integration table
	// properties for source connections (using the connection ARN) is not yet
	// implemented and will be added in a future release.
	ResourceArn *string

	// A structure for the source table configuration.
	SourceTableConfig *types.SourceTableConfig

	// The name of the table to be replicated.
	TableName *string

	// A structure for the target table configuration.
	TargetTableConfig *types.TargetTableConfig

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationGetIntegrationTablePropertiesMiddlewares(stack *middleware.Stack, options Options) (err error) {
	if err := stack.Serialize.Add(&setOperationInputMiddleware{}, middleware.After); err != nil {
		return err
	}
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpGetIntegrationTableProperties{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpGetIntegrationTableProperties{}, middleware.After)
	if err != nil {
		return err
	}
	if err := addProtocolFinalizerMiddlewares(stack, options, "GetIntegrationTableProperties"); err != nil {
		return fmt.Errorf("add protocol finalizers: %v", err)
	}

	if err = addlegacyEndpointContextSetter(stack, options); err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = addClientRequestID(stack); err != nil {
		return err
	}
	if err = addComputeContentLength(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = addComputePayloadSHA256(stack); err != nil {
		return err
	}
	if err = addRetry(stack, options); err != nil {
		return err
	}
	if err = addRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = addRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addSpanRetryLoop(stack, options); err != nil {
		return err
	}
	if err = addClientUserAgent(stack, options); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addSetLegacyContextSigningOptionsMiddleware(stack); err != nil {
		return err
	}
	if err = addTimeOffsetBuild(stack, c); err != nil {
		return err
	}
	if err = addUserAgentRetryMode(stack, options); err != nil {
		return err
	}
	if err = addCredentialSource(stack, options); err != nil {
		return err
	}
	if err = addOpGetIntegrationTablePropertiesValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opGetIntegrationTableProperties(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRecursionDetection(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	if err = addDisableHTTPSMiddleware(stack, options); err != nil {
		return err
	}
	if err = addSpanInitializeStart(stack); err != nil {
		return err
	}
	if err = addSpanInitializeEnd(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestStart(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestEnd(stack); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opGetIntegrationTableProperties(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		OperationName: "GetIntegrationTableProperties",
	}
}
