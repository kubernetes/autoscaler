// Code generated by smithy-go-codegen DO NOT EDIT.

package glue

import (
	"context"
	"fmt"
	awsmiddleware "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/aws/middleware"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/service/glue/types"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/middleware"
	smithyhttp "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/transport/http"
	"time"
)

// Modifies a Zero-ETL integration in the caller's account.
func (c *Client) ModifyIntegration(ctx context.Context, params *ModifyIntegrationInput, optFns ...func(*Options)) (*ModifyIntegrationOutput, error) {
	if params == nil {
		params = &ModifyIntegrationInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "ModifyIntegration", params, optFns, c.addOperationModifyIntegrationMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*ModifyIntegrationOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type ModifyIntegrationInput struct {

	// The Amazon Resource Name (ARN) for the integration.
	//
	// This member is required.
	IntegrationIdentifier *string

	// Selects source tables for the integration using Maxwell filter syntax.
	DataFilter *string

	// A description of the integration.
	Description *string

	// A unique name for an integration in Glue.
	IntegrationName *string

	noSmithyDocumentSerde
}

type ModifyIntegrationOutput struct {

	// The time when the integration was created, in UTC.
	//
	// This member is required.
	CreateTime *time.Time

	// The Amazon Resource Name (ARN) for the integration.
	//
	// This member is required.
	IntegrationArn *string

	// A unique name for an integration in Glue.
	//
	// This member is required.
	IntegrationName *string

	// The ARN of the source for the integration.
	//
	// This member is required.
	SourceArn *string

	// The status of the integration being modified.
	//
	// The possible statuses are:
	//
	//   - CREATING: The integration is being created.
	//
	//   - ACTIVE: The integration creation succeeds.
	//
	//   - MODIFYING: The integration is being modified.
	//
	//   - FAILED: The integration creation fails.
	//
	//   - DELETING: The integration is deleted.
	//
	//   - SYNCING: The integration is synchronizing.
	//
	//   - NEEDS_ATTENTION: The integration needs attention, such as synchronization.
	//
	// This member is required.
	Status types.IntegrationStatus

	// The ARN of the target for the integration.
	//
	// This member is required.
	TargetArn *string

	// An optional set of non-secret keyâ€“value pairs that contains additional
	// contextual information for encryption.
	AdditionalEncryptionContext map[string]string

	// Selects source tables for the integration using Maxwell filter syntax.
	DataFilter *string

	// A description of the integration.
	Description *string

	// A list of errors associated with the integration modification.
	Errors []types.IntegrationError

	// The ARN of a KMS key used for encrypting the channel.
	KmsKeyId *string

	// Metadata assigned to the resource consisting of a list of key-value pairs.
	Tags []types.Tag

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationModifyIntegrationMiddlewares(stack *middleware.Stack, options Options) (err error) {
	if err := stack.Serialize.Add(&setOperationInputMiddleware{}, middleware.After); err != nil {
		return err
	}
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpModifyIntegration{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpModifyIntegration{}, middleware.After)
	if err != nil {
		return err
	}
	if err := addProtocolFinalizerMiddlewares(stack, options, "ModifyIntegration"); err != nil {
		return fmt.Errorf("add protocol finalizers: %v", err)
	}

	if err = addlegacyEndpointContextSetter(stack, options); err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = addClientRequestID(stack); err != nil {
		return err
	}
	if err = addComputeContentLength(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = addComputePayloadSHA256(stack); err != nil {
		return err
	}
	if err = addRetry(stack, options); err != nil {
		return err
	}
	if err = addRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = addRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addSpanRetryLoop(stack, options); err != nil {
		return err
	}
	if err = addClientUserAgent(stack, options); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addSetLegacyContextSigningOptionsMiddleware(stack); err != nil {
		return err
	}
	if err = addTimeOffsetBuild(stack, c); err != nil {
		return err
	}
	if err = addUserAgentRetryMode(stack, options); err != nil {
		return err
	}
	if err = addCredentialSource(stack, options); err != nil {
		return err
	}
	if err = addOpModifyIntegrationValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opModifyIntegration(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRecursionDetection(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	if err = addDisableHTTPSMiddleware(stack, options); err != nil {
		return err
	}
	if err = addSpanInitializeStart(stack); err != nil {
		return err
	}
	if err = addSpanInitializeEnd(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestStart(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestEnd(stack); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opModifyIntegration(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		OperationName: "ModifyIntegration",
	}
}
