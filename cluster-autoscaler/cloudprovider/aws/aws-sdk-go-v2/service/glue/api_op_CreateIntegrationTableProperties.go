// Code generated by smithy-go-codegen DO NOT EDIT.

package glue

import (
	"context"
	"fmt"
	awsmiddleware "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/aws/middleware"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/service/glue/types"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/middleware"
	smithyhttp "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/transport/http"
)

// This API is used to provide optional override properties for the the tables
// that need to be replicated. These properties can include properties for
// filtering and partitioning for the source and target tables. To set both source
// and target properties the same API need to be invoked with the Glue connection
// ARN as ResourceArn with SourceTableConfig , and the Glue database ARN as
// ResourceArn with TargetTableConfig respectively.
func (c *Client) CreateIntegrationTableProperties(ctx context.Context, params *CreateIntegrationTablePropertiesInput, optFns ...func(*Options)) (*CreateIntegrationTablePropertiesOutput, error) {
	if params == nil {
		params = &CreateIntegrationTablePropertiesInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "CreateIntegrationTableProperties", params, optFns, c.addOperationCreateIntegrationTablePropertiesMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*CreateIntegrationTablePropertiesOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateIntegrationTablePropertiesInput struct {

	// The Amazon Resource Name (ARN) of the target table for which to create
	// integration table properties. Currently, this API only supports creating
	// integration table properties for target tables, and the provided ARN should be
	// the ARN of the target table in the Glue Data Catalog. Support for creating
	// integration table properties for source connections (using the connection ARN)
	// is not yet implemented and will be added in a future release.
	//
	// This member is required.
	ResourceArn *string

	// The name of the table to be replicated.
	//
	// This member is required.
	TableName *string

	// A structure for the source table configuration. See the SourceTableConfig
	// structure to see list of supported source properties.
	SourceTableConfig *types.SourceTableConfig

	// A structure for the target table configuration.
	TargetTableConfig *types.TargetTableConfig

	noSmithyDocumentSerde
}

type CreateIntegrationTablePropertiesOutput struct {
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationCreateIntegrationTablePropertiesMiddlewares(stack *middleware.Stack, options Options) (err error) {
	if err := stack.Serialize.Add(&setOperationInputMiddleware{}, middleware.After); err != nil {
		return err
	}
	err = stack.Serialize.Add(&awsAwsjson11_serializeOpCreateIntegrationTableProperties{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson11_deserializeOpCreateIntegrationTableProperties{}, middleware.After)
	if err != nil {
		return err
	}
	if err := addProtocolFinalizerMiddlewares(stack, options, "CreateIntegrationTableProperties"); err != nil {
		return fmt.Errorf("add protocol finalizers: %v", err)
	}

	if err = addlegacyEndpointContextSetter(stack, options); err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = addClientRequestID(stack); err != nil {
		return err
	}
	if err = addComputeContentLength(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = addComputePayloadSHA256(stack); err != nil {
		return err
	}
	if err = addRetry(stack, options); err != nil {
		return err
	}
	if err = addRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = addRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addSpanRetryLoop(stack, options); err != nil {
		return err
	}
	if err = addClientUserAgent(stack, options); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addSetLegacyContextSigningOptionsMiddleware(stack); err != nil {
		return err
	}
	if err = addTimeOffsetBuild(stack, c); err != nil {
		return err
	}
	if err = addUserAgentRetryMode(stack, options); err != nil {
		return err
	}
	if err = addCredentialSource(stack, options); err != nil {
		return err
	}
	if err = addOpCreateIntegrationTablePropertiesValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opCreateIntegrationTableProperties(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRecursionDetection(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	if err = addDisableHTTPSMiddleware(stack, options); err != nil {
		return err
	}
	if err = addSpanInitializeStart(stack); err != nil {
		return err
	}
	if err = addSpanInitializeEnd(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestStart(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestEnd(stack); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opCreateIntegrationTableProperties(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		OperationName: "CreateIntegrationTableProperties",
	}
}
