// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AutoPromotionResult string

// Enum values for AutoPromotionResult
const (
	AutoPromotionResultModelPromoted           AutoPromotionResult = "MODEL_PROMOTED"
	AutoPromotionResultModelNotPromoted        AutoPromotionResult = "MODEL_NOT_PROMOTED"
	AutoPromotionResultRetrainingInternalError AutoPromotionResult = "RETRAINING_INTERNAL_ERROR"
	AutoPromotionResultRetrainingCustomerError AutoPromotionResult = "RETRAINING_CUSTOMER_ERROR"
	AutoPromotionResultRetrainingCancelled     AutoPromotionResult = "RETRAINING_CANCELLED"
)

// Values returns all known values for AutoPromotionResult. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AutoPromotionResult) Values() []AutoPromotionResult {
	return []AutoPromotionResult{
		"MODEL_PROMOTED",
		"MODEL_NOT_PROMOTED",
		"RETRAINING_INTERNAL_ERROR",
		"RETRAINING_CUSTOMER_ERROR",
		"RETRAINING_CANCELLED",
	}
}

type DatasetStatus string

// Enum values for DatasetStatus
const (
	DatasetStatusCreated             DatasetStatus = "CREATED"
	DatasetStatusIngestionInProgress DatasetStatus = "INGESTION_IN_PROGRESS"
	DatasetStatusActive              DatasetStatus = "ACTIVE"
	DatasetStatusImportInProgress    DatasetStatus = "IMPORT_IN_PROGRESS"
)

// Values returns all known values for DatasetStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DatasetStatus) Values() []DatasetStatus {
	return []DatasetStatus{
		"CREATED",
		"INGESTION_IN_PROGRESS",
		"ACTIVE",
		"IMPORT_IN_PROGRESS",
	}
}

type DataUploadFrequency string

// Enum values for DataUploadFrequency
const (
	DataUploadFrequencyPt5m  DataUploadFrequency = "PT5M"
	DataUploadFrequencyPt10m DataUploadFrequency = "PT10M"
	DataUploadFrequencyPt15m DataUploadFrequency = "PT15M"
	DataUploadFrequencyPt30m DataUploadFrequency = "PT30M"
	DataUploadFrequencyPt1h  DataUploadFrequency = "PT1H"
)

// Values returns all known values for DataUploadFrequency. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DataUploadFrequency) Values() []DataUploadFrequency {
	return []DataUploadFrequency{
		"PT5M",
		"PT10M",
		"PT15M",
		"PT30M",
		"PT1H",
	}
}

type InferenceDataImportStrategy string

// Enum values for InferenceDataImportStrategy
const (
	InferenceDataImportStrategyNoImport     InferenceDataImportStrategy = "NO_IMPORT"
	InferenceDataImportStrategyAddWhenEmpty InferenceDataImportStrategy = "ADD_WHEN_EMPTY"
	InferenceDataImportStrategyOverwrite    InferenceDataImportStrategy = "OVERWRITE"
)

// Values returns all known values for InferenceDataImportStrategy. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InferenceDataImportStrategy) Values() []InferenceDataImportStrategy {
	return []InferenceDataImportStrategy{
		"NO_IMPORT",
		"ADD_WHEN_EMPTY",
		"OVERWRITE",
	}
}

type InferenceExecutionStatus string

// Enum values for InferenceExecutionStatus
const (
	InferenceExecutionStatusInProgress InferenceExecutionStatus = "IN_PROGRESS"
	InferenceExecutionStatusSuccess    InferenceExecutionStatus = "SUCCESS"
	InferenceExecutionStatusFailed     InferenceExecutionStatus = "FAILED"
)

// Values returns all known values for InferenceExecutionStatus. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InferenceExecutionStatus) Values() []InferenceExecutionStatus {
	return []InferenceExecutionStatus{
		"IN_PROGRESS",
		"SUCCESS",
		"FAILED",
	}
}

type InferenceSchedulerStatus string

// Enum values for InferenceSchedulerStatus
const (
	InferenceSchedulerStatusPending  InferenceSchedulerStatus = "PENDING"
	InferenceSchedulerStatusRunning  InferenceSchedulerStatus = "RUNNING"
	InferenceSchedulerStatusStopping InferenceSchedulerStatus = "STOPPING"
	InferenceSchedulerStatusStopped  InferenceSchedulerStatus = "STOPPED"
)

// Values returns all known values for InferenceSchedulerStatus. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InferenceSchedulerStatus) Values() []InferenceSchedulerStatus {
	return []InferenceSchedulerStatus{
		"PENDING",
		"RUNNING",
		"STOPPING",
		"STOPPED",
	}
}

type IngestionJobStatus string

// Enum values for IngestionJobStatus
const (
	IngestionJobStatusInProgress       IngestionJobStatus = "IN_PROGRESS"
	IngestionJobStatusSuccess          IngestionJobStatus = "SUCCESS"
	IngestionJobStatusFailed           IngestionJobStatus = "FAILED"
	IngestionJobStatusImportInProgress IngestionJobStatus = "IMPORT_IN_PROGRESS"
)

// Values returns all known values for IngestionJobStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IngestionJobStatus) Values() []IngestionJobStatus {
	return []IngestionJobStatus{
		"IN_PROGRESS",
		"SUCCESS",
		"FAILED",
		"IMPORT_IN_PROGRESS",
	}
}

type LabelRating string

// Enum values for LabelRating
const (
	LabelRatingAnomaly   LabelRating = "ANOMALY"
	LabelRatingNoAnomaly LabelRating = "NO_ANOMALY"
	LabelRatingNeutral   LabelRating = "NEUTRAL"
)

// Values returns all known values for LabelRating. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LabelRating) Values() []LabelRating {
	return []LabelRating{
		"ANOMALY",
		"NO_ANOMALY",
		"NEUTRAL",
	}
}

type LatestInferenceResult string

// Enum values for LatestInferenceResult
const (
	LatestInferenceResultAnomalous LatestInferenceResult = "ANOMALOUS"
	LatestInferenceResultNormal    LatestInferenceResult = "NORMAL"
)

// Values returns all known values for LatestInferenceResult. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LatestInferenceResult) Values() []LatestInferenceResult {
	return []LatestInferenceResult{
		"ANOMALOUS",
		"NORMAL",
	}
}

type ModelPromoteMode string

// Enum values for ModelPromoteMode
const (
	ModelPromoteModeManaged ModelPromoteMode = "MANAGED"
	ModelPromoteModeManual  ModelPromoteMode = "MANUAL"
)

// Values returns all known values for ModelPromoteMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ModelPromoteMode) Values() []ModelPromoteMode {
	return []ModelPromoteMode{
		"MANAGED",
		"MANUAL",
	}
}

type ModelQuality string

// Enum values for ModelQuality
const (
	ModelQualityQualityThresholdMet    ModelQuality = "QUALITY_THRESHOLD_MET"
	ModelQualityCannotDetermineQuality ModelQuality = "CANNOT_DETERMINE_QUALITY"
	ModelQualityPoorQualityDetected    ModelQuality = "POOR_QUALITY_DETECTED"
)

// Values returns all known values for ModelQuality. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ModelQuality) Values() []ModelQuality {
	return []ModelQuality{
		"QUALITY_THRESHOLD_MET",
		"CANNOT_DETERMINE_QUALITY",
		"POOR_QUALITY_DETECTED",
	}
}

type ModelStatus string

// Enum values for ModelStatus
const (
	ModelStatusInProgress       ModelStatus = "IN_PROGRESS"
	ModelStatusSuccess          ModelStatus = "SUCCESS"
	ModelStatusFailed           ModelStatus = "FAILED"
	ModelStatusImportInProgress ModelStatus = "IMPORT_IN_PROGRESS"
)

// Values returns all known values for ModelStatus. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ModelStatus) Values() []ModelStatus {
	return []ModelStatus{
		"IN_PROGRESS",
		"SUCCESS",
		"FAILED",
		"IMPORT_IN_PROGRESS",
	}
}

type ModelVersionSourceType string

// Enum values for ModelVersionSourceType
const (
	ModelVersionSourceTypeTraining   ModelVersionSourceType = "TRAINING"
	ModelVersionSourceTypeRetraining ModelVersionSourceType = "RETRAINING"
	ModelVersionSourceTypeImport     ModelVersionSourceType = "IMPORT"
)

// Values returns all known values for ModelVersionSourceType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ModelVersionSourceType) Values() []ModelVersionSourceType {
	return []ModelVersionSourceType{
		"TRAINING",
		"RETRAINING",
		"IMPORT",
	}
}

type ModelVersionStatus string

// Enum values for ModelVersionStatus
const (
	ModelVersionStatusInProgress       ModelVersionStatus = "IN_PROGRESS"
	ModelVersionStatusSuccess          ModelVersionStatus = "SUCCESS"
	ModelVersionStatusFailed           ModelVersionStatus = "FAILED"
	ModelVersionStatusImportInProgress ModelVersionStatus = "IMPORT_IN_PROGRESS"
	ModelVersionStatusCanceled         ModelVersionStatus = "CANCELED"
)

// Values returns all known values for ModelVersionStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ModelVersionStatus) Values() []ModelVersionStatus {
	return []ModelVersionStatus{
		"IN_PROGRESS",
		"SUCCESS",
		"FAILED",
		"IMPORT_IN_PROGRESS",
		"CANCELED",
	}
}

type Monotonicity string

// Enum values for Monotonicity
const (
	MonotonicityDecreasing Monotonicity = "DECREASING"
	MonotonicityIncreasing Monotonicity = "INCREASING"
	MonotonicityStatic     Monotonicity = "STATIC"
)

// Values returns all known values for Monotonicity. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Monotonicity) Values() []Monotonicity {
	return []Monotonicity{
		"DECREASING",
		"INCREASING",
		"STATIC",
	}
}

type RetrainingSchedulerStatus string

// Enum values for RetrainingSchedulerStatus
const (
	RetrainingSchedulerStatusPending  RetrainingSchedulerStatus = "PENDING"
	RetrainingSchedulerStatusRunning  RetrainingSchedulerStatus = "RUNNING"
	RetrainingSchedulerStatusStopping RetrainingSchedulerStatus = "STOPPING"
	RetrainingSchedulerStatusStopped  RetrainingSchedulerStatus = "STOPPED"
)

// Values returns all known values for RetrainingSchedulerStatus. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RetrainingSchedulerStatus) Values() []RetrainingSchedulerStatus {
	return []RetrainingSchedulerStatus{
		"PENDING",
		"RUNNING",
		"STOPPING",
		"STOPPED",
	}
}

type StatisticalIssueStatus string

// Enum values for StatisticalIssueStatus
const (
	StatisticalIssueStatusPotentialIssueDetected StatisticalIssueStatus = "POTENTIAL_ISSUE_DETECTED"
	StatisticalIssueStatusNoIssueDetected        StatisticalIssueStatus = "NO_ISSUE_DETECTED"
)

// Values returns all known values for StatisticalIssueStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (StatisticalIssueStatus) Values() []StatisticalIssueStatus {
	return []StatisticalIssueStatus{
		"POTENTIAL_ISSUE_DETECTED",
		"NO_ISSUE_DETECTED",
	}
}

type TargetSamplingRate string

// Enum values for TargetSamplingRate
const (
	TargetSamplingRatePt1s  TargetSamplingRate = "PT1S"
	TargetSamplingRatePt5s  TargetSamplingRate = "PT5S"
	TargetSamplingRatePt10s TargetSamplingRate = "PT10S"
	TargetSamplingRatePt15s TargetSamplingRate = "PT15S"
	TargetSamplingRatePt30s TargetSamplingRate = "PT30S"
	TargetSamplingRatePt1m  TargetSamplingRate = "PT1M"
	TargetSamplingRatePt5m  TargetSamplingRate = "PT5M"
	TargetSamplingRatePt10m TargetSamplingRate = "PT10M"
	TargetSamplingRatePt15m TargetSamplingRate = "PT15M"
	TargetSamplingRatePt30m TargetSamplingRate = "PT30M"
	TargetSamplingRatePt1h  TargetSamplingRate = "PT1H"
)

// Values returns all known values for TargetSamplingRate. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TargetSamplingRate) Values() []TargetSamplingRate {
	return []TargetSamplingRate{
		"PT1S",
		"PT5S",
		"PT10S",
		"PT15S",
		"PT30S",
		"PT1M",
		"PT5M",
		"PT10M",
		"PT15M",
		"PT30M",
		"PT1H",
	}
}
