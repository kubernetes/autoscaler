// Code generated by smithy-go-codegen DO NOT EDIT.

package trustedadvisor

import (
	"context"
	"fmt"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/service/trustedadvisor/types"
	smithy "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/middleware"
)

type validateOpBatchUpdateRecommendationResourceExclusion struct {
}

func (*validateOpBatchUpdateRecommendationResourceExclusion) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpBatchUpdateRecommendationResourceExclusion) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*BatchUpdateRecommendationResourceExclusionInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpBatchUpdateRecommendationResourceExclusionInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetOrganizationRecommendation struct {
}

func (*validateOpGetOrganizationRecommendation) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetOrganizationRecommendation) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetOrganizationRecommendationInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetOrganizationRecommendationInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetRecommendation struct {
}

func (*validateOpGetRecommendation) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetRecommendation) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetRecommendationInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetRecommendationInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListOrganizationRecommendationAccounts struct {
}

func (*validateOpListOrganizationRecommendationAccounts) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListOrganizationRecommendationAccounts) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListOrganizationRecommendationAccountsInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListOrganizationRecommendationAccountsInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListOrganizationRecommendationResources struct {
}

func (*validateOpListOrganizationRecommendationResources) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListOrganizationRecommendationResources) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListOrganizationRecommendationResourcesInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListOrganizationRecommendationResourcesInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListRecommendationResources struct {
}

func (*validateOpListRecommendationResources) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListRecommendationResources) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListRecommendationResourcesInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListRecommendationResourcesInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateOrganizationRecommendationLifecycle struct {
}

func (*validateOpUpdateOrganizationRecommendationLifecycle) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateOrganizationRecommendationLifecycle) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateOrganizationRecommendationLifecycleInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateOrganizationRecommendationLifecycleInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateRecommendationLifecycle struct {
}

func (*validateOpUpdateRecommendationLifecycle) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateRecommendationLifecycle) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateRecommendationLifecycleInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateRecommendationLifecycleInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

func addOpBatchUpdateRecommendationResourceExclusionValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpBatchUpdateRecommendationResourceExclusion{}, middleware.After)
}

func addOpGetOrganizationRecommendationValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetOrganizationRecommendation{}, middleware.After)
}

func addOpGetRecommendationValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetRecommendation{}, middleware.After)
}

func addOpListOrganizationRecommendationAccountsValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListOrganizationRecommendationAccounts{}, middleware.After)
}

func addOpListOrganizationRecommendationResourcesValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListOrganizationRecommendationResources{}, middleware.After)
}

func addOpListRecommendationResourcesValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListRecommendationResources{}, middleware.After)
}

func addOpUpdateOrganizationRecommendationLifecycleValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateOrganizationRecommendationLifecycle{}, middleware.After)
}

func addOpUpdateRecommendationLifecycleValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateRecommendationLifecycle{}, middleware.After)
}

func validateRecommendationResourceExclusion(v *types.RecommendationResourceExclusion) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RecommendationResourceExclusion"}
	if v.Arn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Arn"))
	}
	if v.IsExcluded == nil {
		invalidParams.Add(smithy.NewErrParamRequired("IsExcluded"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRecommendationResourceExclusionList(v []types.RecommendationResourceExclusion) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RecommendationResourceExclusionList"}
	for i := range v {
		if err := validateRecommendationResourceExclusion(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpBatchUpdateRecommendationResourceExclusionInput(v *BatchUpdateRecommendationResourceExclusionInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "BatchUpdateRecommendationResourceExclusionInput"}
	if v.RecommendationResourceExclusions == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RecommendationResourceExclusions"))
	} else if v.RecommendationResourceExclusions != nil {
		if err := validateRecommendationResourceExclusionList(v.RecommendationResourceExclusions); err != nil {
			invalidParams.AddNested("RecommendationResourceExclusions", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetOrganizationRecommendationInput(v *GetOrganizationRecommendationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetOrganizationRecommendationInput"}
	if v.OrganizationRecommendationIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("OrganizationRecommendationIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetRecommendationInput(v *GetRecommendationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetRecommendationInput"}
	if v.RecommendationIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RecommendationIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListOrganizationRecommendationAccountsInput(v *ListOrganizationRecommendationAccountsInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListOrganizationRecommendationAccountsInput"}
	if v.OrganizationRecommendationIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("OrganizationRecommendationIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListOrganizationRecommendationResourcesInput(v *ListOrganizationRecommendationResourcesInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListOrganizationRecommendationResourcesInput"}
	if v.OrganizationRecommendationIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("OrganizationRecommendationIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListRecommendationResourcesInput(v *ListRecommendationResourcesInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListRecommendationResourcesInput"}
	if v.RecommendationIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RecommendationIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateOrganizationRecommendationLifecycleInput(v *UpdateOrganizationRecommendationLifecycleInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateOrganizationRecommendationLifecycleInput"}
	if len(v.LifecycleStage) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("LifecycleStage"))
	}
	if v.OrganizationRecommendationIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("OrganizationRecommendationIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateRecommendationLifecycleInput(v *UpdateRecommendationLifecycleInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateRecommendationLifecycleInput"}
	if len(v.LifecycleStage) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("LifecycleStage"))
	}
	if v.RecommendationIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RecommendationIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}
