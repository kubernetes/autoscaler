// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type ColorScheme string

// Enum values for ColorScheme
const (
	ColorSchemeLight ColorScheme = "Light"
	ColorSchemeDark  ColorScheme = "Dark"
)

// Values returns all known values for ColorScheme. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ColorScheme) Values() []ColorScheme {
	return []ColorScheme{
		"Light",
		"Dark",
	}
}

type LabelSize string

// Enum values for LabelSize
const (
	LabelSizeSmall LabelSize = "Small"
	LabelSizeLarge LabelSize = "Large"
)

// Values returns all known values for LabelSize. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LabelSize) Values() []LabelSize {
	return []LabelSize{
		"Small",
		"Large",
	}
}

type MapFeatureMode string

// Enum values for MapFeatureMode
const (
	MapFeatureModeEnabled  MapFeatureMode = "Enabled"
	MapFeatureModeDisabled MapFeatureMode = "Disabled"
)

// Values returns all known values for MapFeatureMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MapFeatureMode) Values() []MapFeatureMode {
	return []MapFeatureMode{
		"Enabled",
		"Disabled",
	}
}

type MapStyle string

// Enum values for MapStyle
const (
	MapStyleStandard   MapStyle = "Standard"
	MapStyleMonochrome MapStyle = "Monochrome"
	MapStyleHybrid     MapStyle = "Hybrid"
	MapStyleSatellite  MapStyle = "Satellite"
)

// Values returns all known values for MapStyle. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MapStyle) Values() []MapStyle {
	return []MapStyle{
		"Standard",
		"Monochrome",
		"Hybrid",
		"Satellite",
	}
}

type ScaleBarUnit string

// Enum values for ScaleBarUnit
const (
	ScaleBarUnitKilometers      ScaleBarUnit = "Kilometers"
	ScaleBarUnitKilometersMiles ScaleBarUnit = "KilometersMiles"
	ScaleBarUnitMiles           ScaleBarUnit = "Miles"
	ScaleBarUnitMilesKilometers ScaleBarUnit = "MilesKilometers"
)

// Values returns all known values for ScaleBarUnit. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ScaleBarUnit) Values() []ScaleBarUnit {
	return []ScaleBarUnit{
		"Kilometers",
		"KilometersMiles",
		"Miles",
		"MilesKilometers",
	}
}

type StaticMapStyle string

// Enum values for StaticMapStyle
const (
	StaticMapStyleSatellite StaticMapStyle = "Satellite"
	StaticMapStyleStandard  StaticMapStyle = "Standard"
)

// Values returns all known values for StaticMapStyle. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (StaticMapStyle) Values() []StaticMapStyle {
	return []StaticMapStyle{
		"Satellite",
		"Standard",
	}
}

type ValidationExceptionReason string

// Enum values for ValidationExceptionReason
const (
	// No such operation is supported.
	ValidationExceptionReasonUnknownOperation ValidationExceptionReason = "UnknownOperation"
	// The required input is missing.
	ValidationExceptionReasonMissing ValidationExceptionReason = "Missing"
	// The input cannot be parsed. For example a required JSON document, ARN
	// identifier, date value, or numeric field cannot be parsed.
	ValidationExceptionReasonCannotParse ValidationExceptionReason = "CannotParse"
	// The input is present and parsable, but it is otherwise invalid. For example, a
	// required numeric argument is outside the allowed range.
	ValidationExceptionReasonFieldValidationFailed ValidationExceptionReason = "FieldValidationFailed"
	// The input is invalid but no more specific reason is applicable.
	ValidationExceptionReasonOther ValidationExceptionReason = "Other"
	// No such field is supported.
	ValidationExceptionReasonUnknownField ValidationExceptionReason = "UnknownField"
)

// Values returns all known values for ValidationExceptionReason. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ValidationExceptionReason) Values() []ValidationExceptionReason {
	return []ValidationExceptionReason{
		"UnknownOperation",
		"Missing",
		"CannotParse",
		"FieldValidationFailed",
		"Other",
		"UnknownField",
	}
}

type Variant string

// Enum values for Variant
const (
	VariantDefault Variant = "Default"
)

// Values returns all known values for Variant. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Variant) Values() []Variant {
	return []Variant{
		"Default",
	}
}
