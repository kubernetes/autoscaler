// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"fmt"
	smithy "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go"
)

// The Amazon Redshift Data API operation failed because the maximum number of
// active sessions exceeded.
type ActiveSessionsExceededException struct {
	Message *string

	ErrorCodeOverride *string

	noSmithyDocumentSerde
}

func (e *ActiveSessionsExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ActiveSessionsExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ActiveSessionsExceededException) ErrorCode() string {
	if e == nil || e.ErrorCodeOverride == nil {
		return "ActiveSessionsExceededException"
	}
	return *e.ErrorCodeOverride
}
func (e *ActiveSessionsExceededException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The number of active statements exceeds the limit.
type ActiveStatementsExceededException struct {
	Message *string

	ErrorCodeOverride *string

	noSmithyDocumentSerde
}

func (e *ActiveStatementsExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ActiveStatementsExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ActiveStatementsExceededException) ErrorCode() string {
	if e == nil || e.ErrorCodeOverride == nil {
		return "ActiveStatementsExceededException"
	}
	return *e.ErrorCodeOverride
}
func (e *ActiveStatementsExceededException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// An SQL statement encountered an environmental error while running.
type BatchExecuteStatementException struct {
	Message *string

	ErrorCodeOverride *string

	StatementId *string

	noSmithyDocumentSerde
}

func (e *BatchExecuteStatementException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *BatchExecuteStatementException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *BatchExecuteStatementException) ErrorCode() string {
	if e == nil || e.ErrorCodeOverride == nil {
		return "BatchExecuteStatementException"
	}
	return *e.ErrorCodeOverride
}
func (e *BatchExecuteStatementException) ErrorFault() smithy.ErrorFault { return smithy.FaultServer }

// Connection to a database failed.
type DatabaseConnectionException struct {
	Message *string

	ErrorCodeOverride *string

	noSmithyDocumentSerde
}

func (e *DatabaseConnectionException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *DatabaseConnectionException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *DatabaseConnectionException) ErrorCode() string {
	if e == nil || e.ErrorCodeOverride == nil {
		return "DatabaseConnectionException"
	}
	return *e.ErrorCodeOverride
}
func (e *DatabaseConnectionException) ErrorFault() smithy.ErrorFault { return smithy.FaultServer }

// The SQL statement encountered an environmental error while running.
type ExecuteStatementException struct {
	Message *string

	ErrorCodeOverride *string

	StatementId *string

	noSmithyDocumentSerde
}

func (e *ExecuteStatementException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ExecuteStatementException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ExecuteStatementException) ErrorCode() string {
	if e == nil || e.ErrorCodeOverride == nil {
		return "ExecuteStatementException"
	}
	return *e.ErrorCodeOverride
}
func (e *ExecuteStatementException) ErrorFault() smithy.ErrorFault { return smithy.FaultServer }

// The Amazon Redshift Data API operation failed due to invalid input.
type InternalServerException struct {
	Message *string

	ErrorCodeOverride *string

	noSmithyDocumentSerde
}

func (e *InternalServerException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InternalServerException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InternalServerException) ErrorCode() string {
	if e == nil || e.ErrorCodeOverride == nil {
		return "InternalServerException"
	}
	return *e.ErrorCodeOverride
}
func (e *InternalServerException) ErrorFault() smithy.ErrorFault { return smithy.FaultServer }

// The Amazon Redshift Data API operation failed due to timeout.
type QueryTimeoutException struct {
	Message *string

	ErrorCodeOverride *string

	noSmithyDocumentSerde
}

func (e *QueryTimeoutException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *QueryTimeoutException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *QueryTimeoutException) ErrorCode() string {
	if e == nil || e.ErrorCodeOverride == nil {
		return "QueryTimeoutException"
	}
	return *e.ErrorCodeOverride
}
func (e *QueryTimeoutException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The Amazon Redshift Data API operation failed due to a missing resource.
type ResourceNotFoundException struct {
	Message *string

	ErrorCodeOverride *string

	ResourceId *string

	noSmithyDocumentSerde
}

func (e *ResourceNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ResourceNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ResourceNotFoundException) ErrorCode() string {
	if e == nil || e.ErrorCodeOverride == nil {
		return "ResourceNotFoundException"
	}
	return *e.ErrorCodeOverride
}
func (e *ResourceNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The Amazon Redshift Data API operation failed due to invalid input.
type ValidationException struct {
	Message *string

	ErrorCodeOverride *string

	noSmithyDocumentSerde
}

func (e *ValidationException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ValidationException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ValidationException) ErrorCode() string {
	if e == nil || e.ErrorCodeOverride == nil {
		return "ValidationException"
	}
	return *e.ErrorCodeOverride
}
func (e *ValidationException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
