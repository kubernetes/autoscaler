// Code generated by smithy-go-codegen DO NOT EDIT.

package networkfirewall

import (
	"context"
	"fmt"
	awsmiddleware "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/aws/middleware"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/service/networkfirewall/types"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/middleware"
	smithyhttp "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/transport/http"
)

// Accepts a transit gateway attachment request for Network Firewall. When you
// accept the attachment request, Network Firewall creates the necessary routing
// components to enable traffic flow between the transit gateway and firewall
// endpoints.
//
// You must accept a transit gateway attachment to complete the creation of a
// transit gateway-attached firewall, unless auto-accept is enabled on the transit
// gateway. After acceptance, use DescribeFirewallto verify the firewall status.
//
// To reject an attachment instead of accepting it, use RejectNetworkFirewallTransitGatewayAttachment.
//
// It can take several minutes for the attachment acceptance to complete and the
// firewall to become available.
func (c *Client) AcceptNetworkFirewallTransitGatewayAttachment(ctx context.Context, params *AcceptNetworkFirewallTransitGatewayAttachmentInput, optFns ...func(*Options)) (*AcceptNetworkFirewallTransitGatewayAttachmentOutput, error) {
	if params == nil {
		params = &AcceptNetworkFirewallTransitGatewayAttachmentInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "AcceptNetworkFirewallTransitGatewayAttachment", params, optFns, c.addOperationAcceptNetworkFirewallTransitGatewayAttachmentMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*AcceptNetworkFirewallTransitGatewayAttachmentOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type AcceptNetworkFirewallTransitGatewayAttachmentInput struct {

	// Required. The unique identifier of the transit gateway attachment to accept.
	// This ID is returned in the response when creating a transit gateway-attached
	// firewall.
	//
	// This member is required.
	TransitGatewayAttachmentId *string

	noSmithyDocumentSerde
}

type AcceptNetworkFirewallTransitGatewayAttachmentOutput struct {

	// The unique identifier of the transit gateway attachment that was accepted.
	//
	// This member is required.
	TransitGatewayAttachmentId *string

	// The current status of the transit gateway attachment. Valid values are:
	//
	//   - CREATING - The attachment is being created
	//
	//   - DELETING - The attachment is being deleted
	//
	//   - DELETED - The attachment has been deleted
	//
	//   - FAILED - The attachment creation has failed and cannot be recovered
	//
	//   - ERROR - The attachment is in an error state that might be recoverable
	//
	//   - READY - The attachment is active and processing traffic
	//
	//   - PENDING_ACCEPTANCE - The attachment is waiting to be accepted
	//
	//   - REJECTING - The attachment is in the process of being rejected
	//
	//   - REJECTED - The attachment has been rejected
	//
	// This member is required.
	TransitGatewayAttachmentStatus types.TransitGatewayAttachmentStatus

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationAcceptNetworkFirewallTransitGatewayAttachmentMiddlewares(stack *middleware.Stack, options Options) (err error) {
	if err := stack.Serialize.Add(&setOperationInputMiddleware{}, middleware.After); err != nil {
		return err
	}
	err = stack.Serialize.Add(&awsAwsjson10_serializeOpAcceptNetworkFirewallTransitGatewayAttachment{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson10_deserializeOpAcceptNetworkFirewallTransitGatewayAttachment{}, middleware.After)
	if err != nil {
		return err
	}
	if err := addProtocolFinalizerMiddlewares(stack, options, "AcceptNetworkFirewallTransitGatewayAttachment"); err != nil {
		return fmt.Errorf("add protocol finalizers: %v", err)
	}

	if err = addlegacyEndpointContextSetter(stack, options); err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = addClientRequestID(stack); err != nil {
		return err
	}
	if err = addComputeContentLength(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = addComputePayloadSHA256(stack); err != nil {
		return err
	}
	if err = addRetry(stack, options); err != nil {
		return err
	}
	if err = addRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = addRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addSpanRetryLoop(stack, options); err != nil {
		return err
	}
	if err = addClientUserAgent(stack, options); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addSetLegacyContextSigningOptionsMiddleware(stack); err != nil {
		return err
	}
	if err = addTimeOffsetBuild(stack, c); err != nil {
		return err
	}
	if err = addUserAgentRetryMode(stack, options); err != nil {
		return err
	}
	if err = addCredentialSource(stack, options); err != nil {
		return err
	}
	if err = addOpAcceptNetworkFirewallTransitGatewayAttachmentValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opAcceptNetworkFirewallTransitGatewayAttachment(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRecursionDetection(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	if err = addDisableHTTPSMiddleware(stack, options); err != nil {
		return err
	}
	if err = addSpanInitializeStart(stack); err != nil {
		return err
	}
	if err = addSpanInitializeEnd(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestStart(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestEnd(stack); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opAcceptNetworkFirewallTransitGatewayAttachment(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		OperationName: "AcceptNetworkFirewallTransitGatewayAttachment",
	}
}
