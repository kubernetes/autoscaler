// Code generated by smithy-go-codegen DO NOT EDIT.

package mailmanager

import (
	"context"
	"fmt"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/service/mailmanager/types"
	smithy "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/middleware"
)

type validateOpCreateAddonInstance struct {
}

func (*validateOpCreateAddonInstance) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateAddonInstance) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateAddonInstanceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateAddonInstanceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateAddonSubscription struct {
}

func (*validateOpCreateAddonSubscription) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateAddonSubscription) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateAddonSubscriptionInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateAddonSubscriptionInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateAddressListImportJob struct {
}

func (*validateOpCreateAddressListImportJob) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateAddressListImportJob) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateAddressListImportJobInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateAddressListImportJobInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateAddressList struct {
}

func (*validateOpCreateAddressList) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateAddressList) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateAddressListInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateAddressListInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateArchive struct {
}

func (*validateOpCreateArchive) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateArchive) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateArchiveInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateArchiveInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateIngressPoint struct {
}

func (*validateOpCreateIngressPoint) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateIngressPoint) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateIngressPointInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateIngressPointInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateRelay struct {
}

func (*validateOpCreateRelay) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateRelay) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateRelayInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateRelayInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateRuleSet struct {
}

func (*validateOpCreateRuleSet) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateRuleSet) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateRuleSetInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateRuleSetInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpCreateTrafficPolicy struct {
}

func (*validateOpCreateTrafficPolicy) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateTrafficPolicy) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateTrafficPolicyInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateTrafficPolicyInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteAddonInstance struct {
}

func (*validateOpDeleteAddonInstance) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteAddonInstance) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteAddonInstanceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteAddonInstanceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteAddonSubscription struct {
}

func (*validateOpDeleteAddonSubscription) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteAddonSubscription) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteAddonSubscriptionInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteAddonSubscriptionInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteAddressList struct {
}

func (*validateOpDeleteAddressList) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteAddressList) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteAddressListInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteAddressListInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteArchive struct {
}

func (*validateOpDeleteArchive) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteArchive) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteArchiveInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteArchiveInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteIngressPoint struct {
}

func (*validateOpDeleteIngressPoint) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteIngressPoint) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteIngressPointInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteIngressPointInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteRelay struct {
}

func (*validateOpDeleteRelay) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteRelay) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteRelayInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteRelayInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteRuleSet struct {
}

func (*validateOpDeleteRuleSet) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteRuleSet) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteRuleSetInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteRuleSetInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteTrafficPolicy struct {
}

func (*validateOpDeleteTrafficPolicy) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteTrafficPolicy) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteTrafficPolicyInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteTrafficPolicyInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeregisterMemberFromAddressList struct {
}

func (*validateOpDeregisterMemberFromAddressList) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeregisterMemberFromAddressList) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeregisterMemberFromAddressListInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeregisterMemberFromAddressListInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetAddonInstance struct {
}

func (*validateOpGetAddonInstance) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetAddonInstance) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetAddonInstanceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetAddonInstanceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetAddonSubscription struct {
}

func (*validateOpGetAddonSubscription) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetAddonSubscription) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetAddonSubscriptionInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetAddonSubscriptionInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetAddressListImportJob struct {
}

func (*validateOpGetAddressListImportJob) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetAddressListImportJob) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetAddressListImportJobInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetAddressListImportJobInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetAddressList struct {
}

func (*validateOpGetAddressList) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetAddressList) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetAddressListInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetAddressListInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetArchiveExport struct {
}

func (*validateOpGetArchiveExport) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetArchiveExport) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetArchiveExportInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetArchiveExportInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetArchive struct {
}

func (*validateOpGetArchive) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetArchive) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetArchiveInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetArchiveInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetArchiveMessageContent struct {
}

func (*validateOpGetArchiveMessageContent) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetArchiveMessageContent) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetArchiveMessageContentInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetArchiveMessageContentInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetArchiveMessage struct {
}

func (*validateOpGetArchiveMessage) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetArchiveMessage) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetArchiveMessageInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetArchiveMessageInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetArchiveSearch struct {
}

func (*validateOpGetArchiveSearch) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetArchiveSearch) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetArchiveSearchInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetArchiveSearchInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetArchiveSearchResults struct {
}

func (*validateOpGetArchiveSearchResults) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetArchiveSearchResults) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetArchiveSearchResultsInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetArchiveSearchResultsInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetIngressPoint struct {
}

func (*validateOpGetIngressPoint) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetIngressPoint) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetIngressPointInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetIngressPointInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetMemberOfAddressList struct {
}

func (*validateOpGetMemberOfAddressList) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetMemberOfAddressList) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetMemberOfAddressListInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetMemberOfAddressListInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetRelay struct {
}

func (*validateOpGetRelay) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetRelay) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetRelayInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetRelayInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetRuleSet struct {
}

func (*validateOpGetRuleSet) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetRuleSet) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetRuleSetInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetRuleSetInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetTrafficPolicy struct {
}

func (*validateOpGetTrafficPolicy) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetTrafficPolicy) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetTrafficPolicyInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetTrafficPolicyInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListAddressListImportJobs struct {
}

func (*validateOpListAddressListImportJobs) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListAddressListImportJobs) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListAddressListImportJobsInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListAddressListImportJobsInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListArchiveExports struct {
}

func (*validateOpListArchiveExports) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListArchiveExports) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListArchiveExportsInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListArchiveExportsInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListArchiveSearches struct {
}

func (*validateOpListArchiveSearches) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListArchiveSearches) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListArchiveSearchesInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListArchiveSearchesInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListMembersOfAddressList struct {
}

func (*validateOpListMembersOfAddressList) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListMembersOfAddressList) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListMembersOfAddressListInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListMembersOfAddressListInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListTagsForResource struct {
}

func (*validateOpListTagsForResource) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListTagsForResource) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListTagsForResourceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListTagsForResourceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpRegisterMemberToAddressList struct {
}

func (*validateOpRegisterMemberToAddressList) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpRegisterMemberToAddressList) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*RegisterMemberToAddressListInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpRegisterMemberToAddressListInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpStartAddressListImportJob struct {
}

func (*validateOpStartAddressListImportJob) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpStartAddressListImportJob) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*StartAddressListImportJobInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpStartAddressListImportJobInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpStartArchiveExport struct {
}

func (*validateOpStartArchiveExport) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpStartArchiveExport) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*StartArchiveExportInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpStartArchiveExportInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpStartArchiveSearch struct {
}

func (*validateOpStartArchiveSearch) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpStartArchiveSearch) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*StartArchiveSearchInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpStartArchiveSearchInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpStopAddressListImportJob struct {
}

func (*validateOpStopAddressListImportJob) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpStopAddressListImportJob) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*StopAddressListImportJobInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpStopAddressListImportJobInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpStopArchiveExport struct {
}

func (*validateOpStopArchiveExport) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpStopArchiveExport) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*StopArchiveExportInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpStopArchiveExportInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpStopArchiveSearch struct {
}

func (*validateOpStopArchiveSearch) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpStopArchiveSearch) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*StopArchiveSearchInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpStopArchiveSearchInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpTagResource struct {
}

func (*validateOpTagResource) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpTagResource) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*TagResourceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpTagResourceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUntagResource struct {
}

func (*validateOpUntagResource) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUntagResource) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UntagResourceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUntagResourceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateArchive struct {
}

func (*validateOpUpdateArchive) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateArchive) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateArchiveInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateArchiveInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateIngressPoint struct {
}

func (*validateOpUpdateIngressPoint) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateIngressPoint) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateIngressPointInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateIngressPointInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateRelay struct {
}

func (*validateOpUpdateRelay) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateRelay) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateRelayInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateRelayInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateRuleSet struct {
}

func (*validateOpUpdateRuleSet) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateRuleSet) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateRuleSetInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateRuleSetInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateTrafficPolicy struct {
}

func (*validateOpUpdateTrafficPolicy) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateTrafficPolicy) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateTrafficPolicyInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateTrafficPolicyInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

func addOpCreateAddonInstanceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateAddonInstance{}, middleware.After)
}

func addOpCreateAddonSubscriptionValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateAddonSubscription{}, middleware.After)
}

func addOpCreateAddressListImportJobValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateAddressListImportJob{}, middleware.After)
}

func addOpCreateAddressListValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateAddressList{}, middleware.After)
}

func addOpCreateArchiveValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateArchive{}, middleware.After)
}

func addOpCreateIngressPointValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateIngressPoint{}, middleware.After)
}

func addOpCreateRelayValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateRelay{}, middleware.After)
}

func addOpCreateRuleSetValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateRuleSet{}, middleware.After)
}

func addOpCreateTrafficPolicyValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateTrafficPolicy{}, middleware.After)
}

func addOpDeleteAddonInstanceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteAddonInstance{}, middleware.After)
}

func addOpDeleteAddonSubscriptionValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteAddonSubscription{}, middleware.After)
}

func addOpDeleteAddressListValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteAddressList{}, middleware.After)
}

func addOpDeleteArchiveValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteArchive{}, middleware.After)
}

func addOpDeleteIngressPointValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteIngressPoint{}, middleware.After)
}

func addOpDeleteRelayValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteRelay{}, middleware.After)
}

func addOpDeleteRuleSetValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteRuleSet{}, middleware.After)
}

func addOpDeleteTrafficPolicyValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteTrafficPolicy{}, middleware.After)
}

func addOpDeregisterMemberFromAddressListValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeregisterMemberFromAddressList{}, middleware.After)
}

func addOpGetAddonInstanceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetAddonInstance{}, middleware.After)
}

func addOpGetAddonSubscriptionValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetAddonSubscription{}, middleware.After)
}

func addOpGetAddressListImportJobValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetAddressListImportJob{}, middleware.After)
}

func addOpGetAddressListValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetAddressList{}, middleware.After)
}

func addOpGetArchiveExportValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetArchiveExport{}, middleware.After)
}

func addOpGetArchiveValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetArchive{}, middleware.After)
}

func addOpGetArchiveMessageContentValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetArchiveMessageContent{}, middleware.After)
}

func addOpGetArchiveMessageValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetArchiveMessage{}, middleware.After)
}

func addOpGetArchiveSearchValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetArchiveSearch{}, middleware.After)
}

func addOpGetArchiveSearchResultsValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetArchiveSearchResults{}, middleware.After)
}

func addOpGetIngressPointValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetIngressPoint{}, middleware.After)
}

func addOpGetMemberOfAddressListValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetMemberOfAddressList{}, middleware.After)
}

func addOpGetRelayValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetRelay{}, middleware.After)
}

func addOpGetRuleSetValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetRuleSet{}, middleware.After)
}

func addOpGetTrafficPolicyValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetTrafficPolicy{}, middleware.After)
}

func addOpListAddressListImportJobsValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListAddressListImportJobs{}, middleware.After)
}

func addOpListArchiveExportsValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListArchiveExports{}, middleware.After)
}

func addOpListArchiveSearchesValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListArchiveSearches{}, middleware.After)
}

func addOpListMembersOfAddressListValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListMembersOfAddressList{}, middleware.After)
}

func addOpListTagsForResourceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListTagsForResource{}, middleware.After)
}

func addOpRegisterMemberToAddressListValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpRegisterMemberToAddressList{}, middleware.After)
}

func addOpStartAddressListImportJobValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpStartAddressListImportJob{}, middleware.After)
}

func addOpStartArchiveExportValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpStartArchiveExport{}, middleware.After)
}

func addOpStartArchiveSearchValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpStartArchiveSearch{}, middleware.After)
}

func addOpStopAddressListImportJobValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpStopAddressListImportJob{}, middleware.After)
}

func addOpStopArchiveExportValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpStopArchiveExport{}, middleware.After)
}

func addOpStopArchiveSearchValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpStopArchiveSearch{}, middleware.After)
}

func addOpTagResourceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpTagResource{}, middleware.After)
}

func addOpUntagResourceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUntagResource{}, middleware.After)
}

func addOpUpdateArchiveValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateArchive{}, middleware.After)
}

func addOpUpdateIngressPointValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateIngressPoint{}, middleware.After)
}

func addOpUpdateRelayValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateRelay{}, middleware.After)
}

func addOpUpdateRuleSetValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateRuleSet{}, middleware.After)
}

func addOpUpdateTrafficPolicyValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateTrafficPolicy{}, middleware.After)
}

func validateAddHeaderAction(v *types.AddHeaderAction) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AddHeaderAction"}
	if v.HeaderName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("HeaderName"))
	}
	if v.HeaderValue == nil {
		invalidParams.Add(smithy.NewErrParamRequired("HeaderValue"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateAnalysis(v *types.Analysis) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "Analysis"}
	if v.Analyzer == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Analyzer"))
	}
	if v.ResultField == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ResultField"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateArchiveAction(v *types.ArchiveAction) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ArchiveAction"}
	if v.TargetArchive == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TargetArchive"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateArchiveBooleanExpression(v *types.ArchiveBooleanExpression) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ArchiveBooleanExpression"}
	if v.Evaluate == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Evaluate"))
	}
	if len(v.Operator) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Operator"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateArchiveFilterCondition(v types.ArchiveFilterCondition) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ArchiveFilterCondition"}
	switch uv := v.(type) {
	case *types.ArchiveFilterConditionMemberBooleanExpression:
		if err := validateArchiveBooleanExpression(&uv.Value); err != nil {
			invalidParams.AddNested("[BooleanExpression]", err.(smithy.InvalidParamsError))
		}

	case *types.ArchiveFilterConditionMemberStringExpression:
		if err := validateArchiveStringExpression(&uv.Value); err != nil {
			invalidParams.AddNested("[StringExpression]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateArchiveFilterConditions(v []types.ArchiveFilterCondition) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ArchiveFilterConditions"}
	for i := range v {
		if err := validateArchiveFilterCondition(v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateArchiveFilters(v *types.ArchiveFilters) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ArchiveFilters"}
	if v.Include != nil {
		if err := validateArchiveFilterConditions(v.Include); err != nil {
			invalidParams.AddNested("Include", err.(smithy.InvalidParamsError))
		}
	}
	if v.Unless != nil {
		if err := validateArchiveFilterConditions(v.Unless); err != nil {
			invalidParams.AddNested("Unless", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateArchiveStringExpression(v *types.ArchiveStringExpression) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ArchiveStringExpression"}
	if v.Evaluate == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Evaluate"))
	}
	if len(v.Operator) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Operator"))
	}
	if v.Values == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Values"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateDeliverToMailboxAction(v *types.DeliverToMailboxAction) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeliverToMailboxAction"}
	if v.MailboxArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("MailboxArn"))
	}
	if v.RoleArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RoleArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateDeliverToQBusinessAction(v *types.DeliverToQBusinessAction) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeliverToQBusinessAction"}
	if v.ApplicationId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ApplicationId"))
	}
	if v.IndexId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("IndexId"))
	}
	if v.RoleArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RoleArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateImportDataFormat(v *types.ImportDataFormat) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ImportDataFormat"}
	if len(v.ImportDataType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("ImportDataType"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateIngressAnalysis(v *types.IngressAnalysis) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "IngressAnalysis"}
	if v.Analyzer == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Analyzer"))
	}
	if v.ResultField == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ResultField"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateIngressBooleanExpression(v *types.IngressBooleanExpression) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "IngressBooleanExpression"}
	if v.Evaluate == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Evaluate"))
	} else if v.Evaluate != nil {
		if err := validateIngressBooleanToEvaluate(v.Evaluate); err != nil {
			invalidParams.AddNested("Evaluate", err.(smithy.InvalidParamsError))
		}
	}
	if len(v.Operator) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Operator"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateIngressBooleanToEvaluate(v types.IngressBooleanToEvaluate) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "IngressBooleanToEvaluate"}
	switch uv := v.(type) {
	case *types.IngressBooleanToEvaluateMemberAnalysis:
		if err := validateIngressAnalysis(&uv.Value); err != nil {
			invalidParams.AddNested("[Analysis]", err.(smithy.InvalidParamsError))
		}

	case *types.IngressBooleanToEvaluateMemberIsInAddressList:
		if err := validateIngressIsInAddressList(&uv.Value); err != nil {
			invalidParams.AddNested("[IsInAddressList]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateIngressIpv4Expression(v *types.IngressIpv4Expression) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "IngressIpv4Expression"}
	if v.Evaluate == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Evaluate"))
	}
	if len(v.Operator) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Operator"))
	}
	if v.Values == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Values"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateIngressIpv6Expression(v *types.IngressIpv6Expression) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "IngressIpv6Expression"}
	if v.Evaluate == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Evaluate"))
	}
	if len(v.Operator) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Operator"))
	}
	if v.Values == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Values"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateIngressIsInAddressList(v *types.IngressIsInAddressList) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "IngressIsInAddressList"}
	if len(v.Attribute) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Attribute"))
	}
	if v.AddressLists == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AddressLists"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateIngressStringExpression(v *types.IngressStringExpression) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "IngressStringExpression"}
	if v.Evaluate == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Evaluate"))
	} else if v.Evaluate != nil {
		if err := validateIngressStringToEvaluate(v.Evaluate); err != nil {
			invalidParams.AddNested("Evaluate", err.(smithy.InvalidParamsError))
		}
	}
	if len(v.Operator) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Operator"))
	}
	if v.Values == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Values"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateIngressStringToEvaluate(v types.IngressStringToEvaluate) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "IngressStringToEvaluate"}
	switch uv := v.(type) {
	case *types.IngressStringToEvaluateMemberAnalysis:
		if err := validateIngressAnalysis(&uv.Value); err != nil {
			invalidParams.AddNested("[Analysis]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateIngressTlsProtocolExpression(v *types.IngressTlsProtocolExpression) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "IngressTlsProtocolExpression"}
	if v.Evaluate == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Evaluate"))
	}
	if len(v.Operator) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Operator"))
	}
	if len(v.Value) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Value"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateNetworkConfiguration(v types.NetworkConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "NetworkConfiguration"}
	switch uv := v.(type) {
	case *types.NetworkConfigurationMemberPrivateNetworkConfiguration:
		if err := validatePrivateNetworkConfiguration(&uv.Value); err != nil {
			invalidParams.AddNested("[PrivateNetworkConfiguration]", err.(smithy.InvalidParamsError))
		}

	case *types.NetworkConfigurationMemberPublicNetworkConfiguration:
		if err := validatePublicNetworkConfiguration(&uv.Value); err != nil {
			invalidParams.AddNested("[PublicNetworkConfiguration]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validatePolicyCondition(v types.PolicyCondition) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "PolicyCondition"}
	switch uv := v.(type) {
	case *types.PolicyConditionMemberBooleanExpression:
		if err := validateIngressBooleanExpression(&uv.Value); err != nil {
			invalidParams.AddNested("[BooleanExpression]", err.(smithy.InvalidParamsError))
		}

	case *types.PolicyConditionMemberIpExpression:
		if err := validateIngressIpv4Expression(&uv.Value); err != nil {
			invalidParams.AddNested("[IpExpression]", err.(smithy.InvalidParamsError))
		}

	case *types.PolicyConditionMemberIpv6Expression:
		if err := validateIngressIpv6Expression(&uv.Value); err != nil {
			invalidParams.AddNested("[Ipv6Expression]", err.(smithy.InvalidParamsError))
		}

	case *types.PolicyConditionMemberStringExpression:
		if err := validateIngressStringExpression(&uv.Value); err != nil {
			invalidParams.AddNested("[StringExpression]", err.(smithy.InvalidParamsError))
		}

	case *types.PolicyConditionMemberTlsExpression:
		if err := validateIngressTlsProtocolExpression(&uv.Value); err != nil {
			invalidParams.AddNested("[TlsExpression]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validatePolicyConditions(v []types.PolicyCondition) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "PolicyConditions"}
	for i := range v {
		if err := validatePolicyCondition(v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validatePolicyStatement(v *types.PolicyStatement) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "PolicyStatement"}
	if v.Conditions == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Conditions"))
	} else if v.Conditions != nil {
		if err := validatePolicyConditions(v.Conditions); err != nil {
			invalidParams.AddNested("Conditions", err.(smithy.InvalidParamsError))
		}
	}
	if len(v.Action) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Action"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validatePolicyStatementList(v []types.PolicyStatement) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "PolicyStatementList"}
	for i := range v {
		if err := validatePolicyStatement(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validatePrivateNetworkConfiguration(v *types.PrivateNetworkConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "PrivateNetworkConfiguration"}
	if v.VpcEndpointId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("VpcEndpointId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validatePublicNetworkConfiguration(v *types.PublicNetworkConfiguration) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "PublicNetworkConfiguration"}
	if len(v.IpType) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("IpType"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRelayAction(v *types.RelayAction) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RelayAction"}
	if v.Relay == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Relay"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRule(v *types.Rule) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "Rule"}
	if v.Conditions != nil {
		if err := validateRuleConditions(v.Conditions); err != nil {
			invalidParams.AddNested("Conditions", err.(smithy.InvalidParamsError))
		}
	}
	if v.Unless != nil {
		if err := validateRuleConditions(v.Unless); err != nil {
			invalidParams.AddNested("Unless", err.(smithy.InvalidParamsError))
		}
	}
	if v.Actions == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Actions"))
	} else if v.Actions != nil {
		if err := validateRuleActions(v.Actions); err != nil {
			invalidParams.AddNested("Actions", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRuleAction(v types.RuleAction) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RuleAction"}
	switch uv := v.(type) {
	case *types.RuleActionMemberAddHeader:
		if err := validateAddHeaderAction(&uv.Value); err != nil {
			invalidParams.AddNested("[AddHeader]", err.(smithy.InvalidParamsError))
		}

	case *types.RuleActionMemberArchive:
		if err := validateArchiveAction(&uv.Value); err != nil {
			invalidParams.AddNested("[Archive]", err.(smithy.InvalidParamsError))
		}

	case *types.RuleActionMemberDeliverToMailbox:
		if err := validateDeliverToMailboxAction(&uv.Value); err != nil {
			invalidParams.AddNested("[DeliverToMailbox]", err.(smithy.InvalidParamsError))
		}

	case *types.RuleActionMemberDeliverToQBusiness:
		if err := validateDeliverToQBusinessAction(&uv.Value); err != nil {
			invalidParams.AddNested("[DeliverToQBusiness]", err.(smithy.InvalidParamsError))
		}

	case *types.RuleActionMemberPublishToSns:
		if err := validateSnsAction(&uv.Value); err != nil {
			invalidParams.AddNested("[PublishToSns]", err.(smithy.InvalidParamsError))
		}

	case *types.RuleActionMemberRelay:
		if err := validateRelayAction(&uv.Value); err != nil {
			invalidParams.AddNested("[Relay]", err.(smithy.InvalidParamsError))
		}

	case *types.RuleActionMemberSend:
		if err := validateSendAction(&uv.Value); err != nil {
			invalidParams.AddNested("[Send]", err.(smithy.InvalidParamsError))
		}

	case *types.RuleActionMemberWriteToS3:
		if err := validateS3Action(&uv.Value); err != nil {
			invalidParams.AddNested("[WriteToS3]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRuleActions(v []types.RuleAction) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RuleActions"}
	for i := range v {
		if err := validateRuleAction(v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRuleBooleanExpression(v *types.RuleBooleanExpression) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RuleBooleanExpression"}
	if v.Evaluate == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Evaluate"))
	} else if v.Evaluate != nil {
		if err := validateRuleBooleanToEvaluate(v.Evaluate); err != nil {
			invalidParams.AddNested("Evaluate", err.(smithy.InvalidParamsError))
		}
	}
	if len(v.Operator) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Operator"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRuleBooleanToEvaluate(v types.RuleBooleanToEvaluate) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RuleBooleanToEvaluate"}
	switch uv := v.(type) {
	case *types.RuleBooleanToEvaluateMemberAnalysis:
		if err := validateAnalysis(&uv.Value); err != nil {
			invalidParams.AddNested("[Analysis]", err.(smithy.InvalidParamsError))
		}

	case *types.RuleBooleanToEvaluateMemberIsInAddressList:
		if err := validateRuleIsInAddressList(&uv.Value); err != nil {
			invalidParams.AddNested("[IsInAddressList]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRuleCondition(v types.RuleCondition) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RuleCondition"}
	switch uv := v.(type) {
	case *types.RuleConditionMemberBooleanExpression:
		if err := validateRuleBooleanExpression(&uv.Value); err != nil {
			invalidParams.AddNested("[BooleanExpression]", err.(smithy.InvalidParamsError))
		}

	case *types.RuleConditionMemberDmarcExpression:
		if err := validateRuleDmarcExpression(&uv.Value); err != nil {
			invalidParams.AddNested("[DmarcExpression]", err.(smithy.InvalidParamsError))
		}

	case *types.RuleConditionMemberIpExpression:
		if err := validateRuleIpExpression(&uv.Value); err != nil {
			invalidParams.AddNested("[IpExpression]", err.(smithy.InvalidParamsError))
		}

	case *types.RuleConditionMemberNumberExpression:
		if err := validateRuleNumberExpression(&uv.Value); err != nil {
			invalidParams.AddNested("[NumberExpression]", err.(smithy.InvalidParamsError))
		}

	case *types.RuleConditionMemberStringExpression:
		if err := validateRuleStringExpression(&uv.Value); err != nil {
			invalidParams.AddNested("[StringExpression]", err.(smithy.InvalidParamsError))
		}

	case *types.RuleConditionMemberVerdictExpression:
		if err := validateRuleVerdictExpression(&uv.Value); err != nil {
			invalidParams.AddNested("[VerdictExpression]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRuleConditions(v []types.RuleCondition) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RuleConditions"}
	for i := range v {
		if err := validateRuleCondition(v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRuleDmarcExpression(v *types.RuleDmarcExpression) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RuleDmarcExpression"}
	if len(v.Operator) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Operator"))
	}
	if v.Values == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Values"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRuleIpExpression(v *types.RuleIpExpression) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RuleIpExpression"}
	if v.Evaluate == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Evaluate"))
	}
	if len(v.Operator) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Operator"))
	}
	if v.Values == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Values"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRuleIsInAddressList(v *types.RuleIsInAddressList) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RuleIsInAddressList"}
	if len(v.Attribute) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Attribute"))
	}
	if v.AddressLists == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AddressLists"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRuleNumberExpression(v *types.RuleNumberExpression) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RuleNumberExpression"}
	if v.Evaluate == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Evaluate"))
	}
	if len(v.Operator) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Operator"))
	}
	if v.Value == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Value"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRules(v []types.Rule) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "Rules"}
	for i := range v {
		if err := validateRule(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRuleStringExpression(v *types.RuleStringExpression) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RuleStringExpression"}
	if v.Evaluate == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Evaluate"))
	} else if v.Evaluate != nil {
		if err := validateRuleStringToEvaluate(v.Evaluate); err != nil {
			invalidParams.AddNested("Evaluate", err.(smithy.InvalidParamsError))
		}
	}
	if len(v.Operator) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Operator"))
	}
	if v.Values == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Values"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRuleStringToEvaluate(v types.RuleStringToEvaluate) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RuleStringToEvaluate"}
	switch uv := v.(type) {
	case *types.RuleStringToEvaluateMemberAnalysis:
		if err := validateAnalysis(&uv.Value); err != nil {
			invalidParams.AddNested("[Analysis]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRuleVerdictExpression(v *types.RuleVerdictExpression) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RuleVerdictExpression"}
	if v.Evaluate == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Evaluate"))
	} else if v.Evaluate != nil {
		if err := validateRuleVerdictToEvaluate(v.Evaluate); err != nil {
			invalidParams.AddNested("Evaluate", err.(smithy.InvalidParamsError))
		}
	}
	if len(v.Operator) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Operator"))
	}
	if v.Values == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Values"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateRuleVerdictToEvaluate(v types.RuleVerdictToEvaluate) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RuleVerdictToEvaluate"}
	switch uv := v.(type) {
	case *types.RuleVerdictToEvaluateMemberAnalysis:
		if err := validateAnalysis(&uv.Value); err != nil {
			invalidParams.AddNested("[Analysis]", err.(smithy.InvalidParamsError))
		}

	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateS3Action(v *types.S3Action) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "S3Action"}
	if v.RoleArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RoleArn"))
	}
	if v.S3Bucket == nil {
		invalidParams.Add(smithy.NewErrParamRequired("S3Bucket"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateSendAction(v *types.SendAction) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "SendAction"}
	if v.RoleArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RoleArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateSnsAction(v *types.SnsAction) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "SnsAction"}
	if v.TopicArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TopicArn"))
	}
	if v.RoleArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RoleArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateTag(v *types.Tag) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "Tag"}
	if v.Key == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Key"))
	}
	if v.Value == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Value"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateTagList(v []types.Tag) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "TagList"}
	for i := range v {
		if err := validateTag(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateAddonInstanceInput(v *CreateAddonInstanceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateAddonInstanceInput"}
	if v.AddonSubscriptionId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AddonSubscriptionId"))
	}
	if v.Tags != nil {
		if err := validateTagList(v.Tags); err != nil {
			invalidParams.AddNested("Tags", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateAddonSubscriptionInput(v *CreateAddonSubscriptionInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateAddonSubscriptionInput"}
	if v.AddonName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AddonName"))
	}
	if v.Tags != nil {
		if err := validateTagList(v.Tags); err != nil {
			invalidParams.AddNested("Tags", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateAddressListImportJobInput(v *CreateAddressListImportJobInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateAddressListImportJobInput"}
	if v.AddressListId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AddressListId"))
	}
	if v.Name == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Name"))
	}
	if v.ImportDataFormat == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ImportDataFormat"))
	} else if v.ImportDataFormat != nil {
		if err := validateImportDataFormat(v.ImportDataFormat); err != nil {
			invalidParams.AddNested("ImportDataFormat", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateAddressListInput(v *CreateAddressListInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateAddressListInput"}
	if v.AddressListName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AddressListName"))
	}
	if v.Tags != nil {
		if err := validateTagList(v.Tags); err != nil {
			invalidParams.AddNested("Tags", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateArchiveInput(v *CreateArchiveInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateArchiveInput"}
	if v.ArchiveName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ArchiveName"))
	}
	if v.Tags != nil {
		if err := validateTagList(v.Tags); err != nil {
			invalidParams.AddNested("Tags", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateIngressPointInput(v *CreateIngressPointInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateIngressPointInput"}
	if v.IngressPointName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("IngressPointName"))
	}
	if len(v.Type) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("Type"))
	}
	if v.RuleSetId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RuleSetId"))
	}
	if v.TrafficPolicyId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TrafficPolicyId"))
	}
	if v.NetworkConfiguration != nil {
		if err := validateNetworkConfiguration(v.NetworkConfiguration); err != nil {
			invalidParams.AddNested("NetworkConfiguration", err.(smithy.InvalidParamsError))
		}
	}
	if v.Tags != nil {
		if err := validateTagList(v.Tags); err != nil {
			invalidParams.AddNested("Tags", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateRelayInput(v *CreateRelayInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateRelayInput"}
	if v.RelayName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RelayName"))
	}
	if v.ServerName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ServerName"))
	}
	if v.ServerPort == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ServerPort"))
	}
	if v.Authentication == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Authentication"))
	}
	if v.Tags != nil {
		if err := validateTagList(v.Tags); err != nil {
			invalidParams.AddNested("Tags", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateRuleSetInput(v *CreateRuleSetInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateRuleSetInput"}
	if v.RuleSetName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RuleSetName"))
	}
	if v.Rules == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Rules"))
	} else if v.Rules != nil {
		if err := validateRules(v.Rules); err != nil {
			invalidParams.AddNested("Rules", err.(smithy.InvalidParamsError))
		}
	}
	if v.Tags != nil {
		if err := validateTagList(v.Tags); err != nil {
			invalidParams.AddNested("Tags", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateTrafficPolicyInput(v *CreateTrafficPolicyInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateTrafficPolicyInput"}
	if v.TrafficPolicyName == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TrafficPolicyName"))
	}
	if v.PolicyStatements == nil {
		invalidParams.Add(smithy.NewErrParamRequired("PolicyStatements"))
	} else if v.PolicyStatements != nil {
		if err := validatePolicyStatementList(v.PolicyStatements); err != nil {
			invalidParams.AddNested("PolicyStatements", err.(smithy.InvalidParamsError))
		}
	}
	if len(v.DefaultAction) == 0 {
		invalidParams.Add(smithy.NewErrParamRequired("DefaultAction"))
	}
	if v.Tags != nil {
		if err := validateTagList(v.Tags); err != nil {
			invalidParams.AddNested("Tags", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteAddonInstanceInput(v *DeleteAddonInstanceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteAddonInstanceInput"}
	if v.AddonInstanceId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AddonInstanceId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteAddonSubscriptionInput(v *DeleteAddonSubscriptionInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteAddonSubscriptionInput"}
	if v.AddonSubscriptionId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AddonSubscriptionId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteAddressListInput(v *DeleteAddressListInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteAddressListInput"}
	if v.AddressListId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AddressListId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteArchiveInput(v *DeleteArchiveInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteArchiveInput"}
	if v.ArchiveId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ArchiveId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteIngressPointInput(v *DeleteIngressPointInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteIngressPointInput"}
	if v.IngressPointId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("IngressPointId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteRelayInput(v *DeleteRelayInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteRelayInput"}
	if v.RelayId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RelayId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteRuleSetInput(v *DeleteRuleSetInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteRuleSetInput"}
	if v.RuleSetId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RuleSetId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteTrafficPolicyInput(v *DeleteTrafficPolicyInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteTrafficPolicyInput"}
	if v.TrafficPolicyId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TrafficPolicyId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeregisterMemberFromAddressListInput(v *DeregisterMemberFromAddressListInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeregisterMemberFromAddressListInput"}
	if v.AddressListId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AddressListId"))
	}
	if v.Address == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Address"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetAddonInstanceInput(v *GetAddonInstanceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetAddonInstanceInput"}
	if v.AddonInstanceId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AddonInstanceId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetAddonSubscriptionInput(v *GetAddonSubscriptionInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetAddonSubscriptionInput"}
	if v.AddonSubscriptionId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AddonSubscriptionId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetAddressListImportJobInput(v *GetAddressListImportJobInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetAddressListImportJobInput"}
	if v.JobId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("JobId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetAddressListInput(v *GetAddressListInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetAddressListInput"}
	if v.AddressListId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AddressListId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetArchiveExportInput(v *GetArchiveExportInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetArchiveExportInput"}
	if v.ExportId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ExportId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetArchiveInput(v *GetArchiveInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetArchiveInput"}
	if v.ArchiveId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ArchiveId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetArchiveMessageContentInput(v *GetArchiveMessageContentInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetArchiveMessageContentInput"}
	if v.ArchivedMessageId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ArchivedMessageId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetArchiveMessageInput(v *GetArchiveMessageInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetArchiveMessageInput"}
	if v.ArchivedMessageId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ArchivedMessageId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetArchiveSearchInput(v *GetArchiveSearchInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetArchiveSearchInput"}
	if v.SearchId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("SearchId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetArchiveSearchResultsInput(v *GetArchiveSearchResultsInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetArchiveSearchResultsInput"}
	if v.SearchId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("SearchId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetIngressPointInput(v *GetIngressPointInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetIngressPointInput"}
	if v.IngressPointId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("IngressPointId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetMemberOfAddressListInput(v *GetMemberOfAddressListInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetMemberOfAddressListInput"}
	if v.AddressListId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AddressListId"))
	}
	if v.Address == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Address"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetRelayInput(v *GetRelayInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetRelayInput"}
	if v.RelayId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RelayId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetRuleSetInput(v *GetRuleSetInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetRuleSetInput"}
	if v.RuleSetId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RuleSetId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetTrafficPolicyInput(v *GetTrafficPolicyInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetTrafficPolicyInput"}
	if v.TrafficPolicyId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TrafficPolicyId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListAddressListImportJobsInput(v *ListAddressListImportJobsInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListAddressListImportJobsInput"}
	if v.AddressListId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AddressListId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListArchiveExportsInput(v *ListArchiveExportsInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListArchiveExportsInput"}
	if v.ArchiveId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ArchiveId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListArchiveSearchesInput(v *ListArchiveSearchesInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListArchiveSearchesInput"}
	if v.ArchiveId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ArchiveId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListMembersOfAddressListInput(v *ListMembersOfAddressListInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListMembersOfAddressListInput"}
	if v.AddressListId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AddressListId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListTagsForResourceInput(v *ListTagsForResourceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListTagsForResourceInput"}
	if v.ResourceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ResourceArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpRegisterMemberToAddressListInput(v *RegisterMemberToAddressListInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "RegisterMemberToAddressListInput"}
	if v.AddressListId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("AddressListId"))
	}
	if v.Address == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Address"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpStartAddressListImportJobInput(v *StartAddressListImportJobInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "StartAddressListImportJobInput"}
	if v.JobId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("JobId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpStartArchiveExportInput(v *StartArchiveExportInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "StartArchiveExportInput"}
	if v.ArchiveId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ArchiveId"))
	}
	if v.Filters != nil {
		if err := validateArchiveFilters(v.Filters); err != nil {
			invalidParams.AddNested("Filters", err.(smithy.InvalidParamsError))
		}
	}
	if v.FromTimestamp == nil {
		invalidParams.Add(smithy.NewErrParamRequired("FromTimestamp"))
	}
	if v.ToTimestamp == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ToTimestamp"))
	}
	if v.ExportDestinationConfiguration == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ExportDestinationConfiguration"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpStartArchiveSearchInput(v *StartArchiveSearchInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "StartArchiveSearchInput"}
	if v.ArchiveId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ArchiveId"))
	}
	if v.Filters != nil {
		if err := validateArchiveFilters(v.Filters); err != nil {
			invalidParams.AddNested("Filters", err.(smithy.InvalidParamsError))
		}
	}
	if v.FromTimestamp == nil {
		invalidParams.Add(smithy.NewErrParamRequired("FromTimestamp"))
	}
	if v.ToTimestamp == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ToTimestamp"))
	}
	if v.MaxResults == nil {
		invalidParams.Add(smithy.NewErrParamRequired("MaxResults"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpStopAddressListImportJobInput(v *StopAddressListImportJobInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "StopAddressListImportJobInput"}
	if v.JobId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("JobId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpStopArchiveExportInput(v *StopArchiveExportInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "StopArchiveExportInput"}
	if v.ExportId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ExportId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpStopArchiveSearchInput(v *StopArchiveSearchInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "StopArchiveSearchInput"}
	if v.SearchId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("SearchId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpTagResourceInput(v *TagResourceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "TagResourceInput"}
	if v.ResourceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ResourceArn"))
	}
	if v.Tags == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Tags"))
	} else if v.Tags != nil {
		if err := validateTagList(v.Tags); err != nil {
			invalidParams.AddNested("Tags", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUntagResourceInput(v *UntagResourceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UntagResourceInput"}
	if v.ResourceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ResourceArn"))
	}
	if v.TagKeys == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TagKeys"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateArchiveInput(v *UpdateArchiveInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateArchiveInput"}
	if v.ArchiveId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ArchiveId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateIngressPointInput(v *UpdateIngressPointInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateIngressPointInput"}
	if v.IngressPointId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("IngressPointId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateRelayInput(v *UpdateRelayInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateRelayInput"}
	if v.RelayId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RelayId"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateRuleSetInput(v *UpdateRuleSetInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateRuleSetInput"}
	if v.RuleSetId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("RuleSetId"))
	}
	if v.Rules != nil {
		if err := validateRules(v.Rules); err != nil {
			invalidParams.AddNested("Rules", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateTrafficPolicyInput(v *UpdateTrafficPolicyInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateTrafficPolicyInput"}
	if v.TrafficPolicyId == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TrafficPolicyId"))
	}
	if v.PolicyStatements != nil {
		if err := validatePolicyStatementList(v.PolicyStatements); err != nil {
			invalidParams.AddNested("PolicyStatements", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}
