// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type DayOfWeek string

// Enum values for DayOfWeek
const (
	DayOfWeekMonday    DayOfWeek = "Monday"
	DayOfWeekTuesday   DayOfWeek = "Tuesday"
	DayOfWeekWednesday DayOfWeek = "Wednesday"
	DayOfWeekThursday  DayOfWeek = "Thursday"
	DayOfWeekFriday    DayOfWeek = "Friday"
	DayOfWeekSaturday  DayOfWeek = "Saturday"
	DayOfWeekSunday    DayOfWeek = "Sunday"
)

// Values returns all known values for DayOfWeek. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DayOfWeek) Values() []DayOfWeek {
	return []DayOfWeek{
		"Monday",
		"Tuesday",
		"Wednesday",
		"Thursday",
		"Friday",
		"Saturday",
		"Sunday",
	}
}

type GeometryFormat string

// Enum values for GeometryFormat
const (
	GeometryFormatFlexiblePolyline GeometryFormat = "FlexiblePolyline"
	GeometryFormatSimple           GeometryFormat = "Simple"
)

// Values returns all known values for GeometryFormat. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GeometryFormat) Values() []GeometryFormat {
	return []GeometryFormat{
		"FlexiblePolyline",
		"Simple",
	}
}

type IsolineEngineType string

// Enum values for IsolineEngineType
const (
	IsolineEngineTypeElectric           IsolineEngineType = "Electric"
	IsolineEngineTypeInternalCombustion IsolineEngineType = "InternalCombustion"
	IsolineEngineTypePluginHybrid       IsolineEngineType = "PluginHybrid"
)

// Values returns all known values for IsolineEngineType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IsolineEngineType) Values() []IsolineEngineType {
	return []IsolineEngineType{
		"Electric",
		"InternalCombustion",
		"PluginHybrid",
	}
}

type IsolineHazardousCargoType string

// Enum values for IsolineHazardousCargoType
const (
	IsolineHazardousCargoTypeCombustible         IsolineHazardousCargoType = "Combustible"
	IsolineHazardousCargoTypeCorrosive           IsolineHazardousCargoType = "Corrosive"
	IsolineHazardousCargoTypeExplosive           IsolineHazardousCargoType = "Explosive"
	IsolineHazardousCargoTypeFlammable           IsolineHazardousCargoType = "Flammable"
	IsolineHazardousCargoTypeGas                 IsolineHazardousCargoType = "Gas"
	IsolineHazardousCargoTypeHarmfulToWater      IsolineHazardousCargoType = "HarmfulToWater"
	IsolineHazardousCargoTypeOrganic             IsolineHazardousCargoType = "Organic"
	IsolineHazardousCargoTypeOther               IsolineHazardousCargoType = "Other"
	IsolineHazardousCargoTypePoison              IsolineHazardousCargoType = "Poison"
	IsolineHazardousCargoTypePoisonousInhalation IsolineHazardousCargoType = "PoisonousInhalation"
	IsolineHazardousCargoTypeRadioactive         IsolineHazardousCargoType = "Radioactive"
)

// Values returns all known values for IsolineHazardousCargoType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IsolineHazardousCargoType) Values() []IsolineHazardousCargoType {
	return []IsolineHazardousCargoType{
		"Combustible",
		"Corrosive",
		"Explosive",
		"Flammable",
		"Gas",
		"HarmfulToWater",
		"Organic",
		"Other",
		"Poison",
		"PoisonousInhalation",
		"Radioactive",
	}
}

type IsolineOptimizationObjective string

// Enum values for IsolineOptimizationObjective
const (
	IsolineOptimizationObjectiveAccurateCalculation IsolineOptimizationObjective = "AccurateCalculation"
	IsolineOptimizationObjectiveBalancedCalculation IsolineOptimizationObjective = "BalancedCalculation"
	IsolineOptimizationObjectiveFastCalculation     IsolineOptimizationObjective = "FastCalculation"
)

// Values returns all known values for IsolineOptimizationObjective. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IsolineOptimizationObjective) Values() []IsolineOptimizationObjective {
	return []IsolineOptimizationObjective{
		"AccurateCalculation",
		"BalancedCalculation",
		"FastCalculation",
	}
}

type IsolineTravelMode string

// Enum values for IsolineTravelMode
const (
	IsolineTravelModeCar        IsolineTravelMode = "Car"
	IsolineTravelModePedestrian IsolineTravelMode = "Pedestrian"
	IsolineTravelModeScooter    IsolineTravelMode = "Scooter"
	IsolineTravelModeTruck      IsolineTravelMode = "Truck"
)

// Values returns all known values for IsolineTravelMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IsolineTravelMode) Values() []IsolineTravelMode {
	return []IsolineTravelMode{
		"Car",
		"Pedestrian",
		"Scooter",
		"Truck",
	}
}

type IsolineTruckType string

// Enum values for IsolineTruckType
const (
	IsolineTruckTypeLightTruck    IsolineTruckType = "LightTruck"
	IsolineTruckTypeStraightTruck IsolineTruckType = "StraightTruck"
	IsolineTruckTypeTractor       IsolineTruckType = "Tractor"
)

// Values returns all known values for IsolineTruckType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IsolineTruckType) Values() []IsolineTruckType {
	return []IsolineTruckType{
		"LightTruck",
		"StraightTruck",
		"Tractor",
	}
}

type IsolineZoneCategory string

// Enum values for IsolineZoneCategory
const (
	IsolineZoneCategoryCongestionPricing IsolineZoneCategory = "CongestionPricing"
	IsolineZoneCategoryEnvironmental     IsolineZoneCategory = "Environmental"
	IsolineZoneCategoryVignette          IsolineZoneCategory = "Vignette"
)

// Values returns all known values for IsolineZoneCategory. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IsolineZoneCategory) Values() []IsolineZoneCategory {
	return []IsolineZoneCategory{
		"CongestionPricing",
		"Environmental",
		"Vignette",
	}
}

type MatchingStrategy string

// Enum values for MatchingStrategy
const (
	MatchingStrategyMatchAny                 MatchingStrategy = "MatchAny"
	MatchingStrategyMatchMostSignificantRoad MatchingStrategy = "MatchMostSignificantRoad"
)

// Values returns all known values for MatchingStrategy. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MatchingStrategy) Values() []MatchingStrategy {
	return []MatchingStrategy{
		"MatchAny",
		"MatchMostSignificantRoad",
	}
}

type MeasurementSystem string

// Enum values for MeasurementSystem
const (
	MeasurementSystemMetric   MeasurementSystem = "Metric"
	MeasurementSystemImperial MeasurementSystem = "Imperial"
)

// Values returns all known values for MeasurementSystem. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MeasurementSystem) Values() []MeasurementSystem {
	return []MeasurementSystem{
		"Metric",
		"Imperial",
	}
}

type RoadSnapHazardousCargoType string

// Enum values for RoadSnapHazardousCargoType
const (
	RoadSnapHazardousCargoTypeCombustible         RoadSnapHazardousCargoType = "Combustible"
	RoadSnapHazardousCargoTypeCorrosive           RoadSnapHazardousCargoType = "Corrosive"
	RoadSnapHazardousCargoTypeExplosive           RoadSnapHazardousCargoType = "Explosive"
	RoadSnapHazardousCargoTypeFlammable           RoadSnapHazardousCargoType = "Flammable"
	RoadSnapHazardousCargoTypeGas                 RoadSnapHazardousCargoType = "Gas"
	RoadSnapHazardousCargoTypeHarmfulToWater      RoadSnapHazardousCargoType = "HarmfulToWater"
	RoadSnapHazardousCargoTypeOrganic             RoadSnapHazardousCargoType = "Organic"
	RoadSnapHazardousCargoTypeOther               RoadSnapHazardousCargoType = "Other"
	RoadSnapHazardousCargoTypePoison              RoadSnapHazardousCargoType = "Poison"
	RoadSnapHazardousCargoTypePoisonousInhalation RoadSnapHazardousCargoType = "PoisonousInhalation"
	RoadSnapHazardousCargoTypeRadioactive         RoadSnapHazardousCargoType = "Radioactive"
)

// Values returns all known values for RoadSnapHazardousCargoType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RoadSnapHazardousCargoType) Values() []RoadSnapHazardousCargoType {
	return []RoadSnapHazardousCargoType{
		"Combustible",
		"Corrosive",
		"Explosive",
		"Flammable",
		"Gas",
		"HarmfulToWater",
		"Organic",
		"Other",
		"Poison",
		"PoisonousInhalation",
		"Radioactive",
	}
}

type RoadSnapNoticeCode string

// Enum values for RoadSnapNoticeCode
const (
	RoadSnapNoticeCodeTracePointsHeadingIgnored       RoadSnapNoticeCode = "TracePointsHeadingIgnored"
	RoadSnapNoticeCodeTracePointsIgnored              RoadSnapNoticeCode = "TracePointsIgnored"
	RoadSnapNoticeCodeTracePointsMovedByLargeDistance RoadSnapNoticeCode = "TracePointsMovedByLargeDistance"
	RoadSnapNoticeCodeTracePointsNotMatched           RoadSnapNoticeCode = "TracePointsNotMatched"
	RoadSnapNoticeCodeTracePointsOutOfSequence        RoadSnapNoticeCode = "TracePointsOutOfSequence"
	RoadSnapNoticeCodeTracePointsSpeedEstimated       RoadSnapNoticeCode = "TracePointsSpeedEstimated"
	RoadSnapNoticeCodeTracePointsSpeedIgnored         RoadSnapNoticeCode = "TracePointsSpeedIgnored"
)

// Values returns all known values for RoadSnapNoticeCode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RoadSnapNoticeCode) Values() []RoadSnapNoticeCode {
	return []RoadSnapNoticeCode{
		"TracePointsHeadingIgnored",
		"TracePointsIgnored",
		"TracePointsMovedByLargeDistance",
		"TracePointsNotMatched",
		"TracePointsOutOfSequence",
		"TracePointsSpeedEstimated",
		"TracePointsSpeedIgnored",
	}
}

type RoadSnapTravelMode string

// Enum values for RoadSnapTravelMode
const (
	RoadSnapTravelModeCar        RoadSnapTravelMode = "Car"
	RoadSnapTravelModePedestrian RoadSnapTravelMode = "Pedestrian"
	RoadSnapTravelModeScooter    RoadSnapTravelMode = "Scooter"
	RoadSnapTravelModeTruck      RoadSnapTravelMode = "Truck"
)

// Values returns all known values for RoadSnapTravelMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RoadSnapTravelMode) Values() []RoadSnapTravelMode {
	return []RoadSnapTravelMode{
		"Car",
		"Pedestrian",
		"Scooter",
		"Truck",
	}
}

type RouteDirection string

// Enum values for RouteDirection
const (
	RouteDirectionEast  RouteDirection = "East"
	RouteDirectionNorth RouteDirection = "North"
	RouteDirectionSouth RouteDirection = "South"
	RouteDirectionWest  RouteDirection = "West"
)

// Values returns all known values for RouteDirection. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteDirection) Values() []RouteDirection {
	return []RouteDirection{
		"East",
		"North",
		"South",
		"West",
	}
}

type RouteEngineType string

// Enum values for RouteEngineType
const (
	RouteEngineTypeElectric           RouteEngineType = "Electric"
	RouteEngineTypeInternalCombustion RouteEngineType = "InternalCombustion"
	RouteEngineTypePluginHybrid       RouteEngineType = "PluginHybrid"
)

// Values returns all known values for RouteEngineType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteEngineType) Values() []RouteEngineType {
	return []RouteEngineType{
		"Electric",
		"InternalCombustion",
		"PluginHybrid",
	}
}

type RouteFerryAfterTravelStepType string

// Enum values for RouteFerryAfterTravelStepType
const (
	RouteFerryAfterTravelStepTypeDeboard RouteFerryAfterTravelStepType = "Deboard"
)

// Values returns all known values for RouteFerryAfterTravelStepType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteFerryAfterTravelStepType) Values() []RouteFerryAfterTravelStepType {
	return []RouteFerryAfterTravelStepType{
		"Deboard",
	}
}

type RouteFerryBeforeTravelStepType string

// Enum values for RouteFerryBeforeTravelStepType
const (
	RouteFerryBeforeTravelStepTypeBoard RouteFerryBeforeTravelStepType = "Board"
)

// Values returns all known values for RouteFerryBeforeTravelStepType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteFerryBeforeTravelStepType) Values() []RouteFerryBeforeTravelStepType {
	return []RouteFerryBeforeTravelStepType{
		"Board",
	}
}

type RouteFerryNoticeCode string

// Enum values for RouteFerryNoticeCode
const (
	RouteFerryNoticeCodeAccuratePolylineUnavailable RouteFerryNoticeCode = "AccuratePolylineUnavailable"
	RouteFerryNoticeCodeNoSchedule                  RouteFerryNoticeCode = "NoSchedule"
	RouteFerryNoticeCodeOther                       RouteFerryNoticeCode = "Other"
	RouteFerryNoticeCodeViolatedAvoidFerry          RouteFerryNoticeCode = "ViolatedAvoidFerry"
	RouteFerryNoticeCodeViolatedAvoidRailFerry      RouteFerryNoticeCode = "ViolatedAvoidRailFerry"
	RouteFerryNoticeCodeSeasonalClosure             RouteFerryNoticeCode = "SeasonalClosure"
)

// Values returns all known values for RouteFerryNoticeCode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteFerryNoticeCode) Values() []RouteFerryNoticeCode {
	return []RouteFerryNoticeCode{
		"AccuratePolylineUnavailable",
		"NoSchedule",
		"Other",
		"ViolatedAvoidFerry",
		"ViolatedAvoidRailFerry",
		"SeasonalClosure",
	}
}

type RouteFerryTravelStepType string

// Enum values for RouteFerryTravelStepType
const (
	RouteFerryTravelStepTypeDepart   RouteFerryTravelStepType = "Depart"
	RouteFerryTravelStepTypeContinue RouteFerryTravelStepType = "Continue"
	RouteFerryTravelStepTypeArrive   RouteFerryTravelStepType = "Arrive"
)

// Values returns all known values for RouteFerryTravelStepType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteFerryTravelStepType) Values() []RouteFerryTravelStepType {
	return []RouteFerryTravelStepType{
		"Depart",
		"Continue",
		"Arrive",
	}
}

type RouteHazardousCargoType string

// Enum values for RouteHazardousCargoType
const (
	RouteHazardousCargoTypeCombustible         RouteHazardousCargoType = "Combustible"
	RouteHazardousCargoTypeCorrosive           RouteHazardousCargoType = "Corrosive"
	RouteHazardousCargoTypeExplosive           RouteHazardousCargoType = "Explosive"
	RouteHazardousCargoTypeFlammable           RouteHazardousCargoType = "Flammable"
	RouteHazardousCargoTypeGas                 RouteHazardousCargoType = "Gas"
	RouteHazardousCargoTypeHarmfulToWater      RouteHazardousCargoType = "HarmfulToWater"
	RouteHazardousCargoTypeOrganic             RouteHazardousCargoType = "Organic"
	RouteHazardousCargoTypeOther               RouteHazardousCargoType = "Other"
	RouteHazardousCargoTypePoison              RouteHazardousCargoType = "Poison"
	RouteHazardousCargoTypePoisonousInhalation RouteHazardousCargoType = "PoisonousInhalation"
	RouteHazardousCargoTypeRadioactive         RouteHazardousCargoType = "Radioactive"
)

// Values returns all known values for RouteHazardousCargoType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteHazardousCargoType) Values() []RouteHazardousCargoType {
	return []RouteHazardousCargoType{
		"Combustible",
		"Corrosive",
		"Explosive",
		"Flammable",
		"Gas",
		"HarmfulToWater",
		"Organic",
		"Other",
		"Poison",
		"PoisonousInhalation",
		"Radioactive",
	}
}

type RouteLegAdditionalFeature string

// Enum values for RouteLegAdditionalFeature
const (
	RouteLegAdditionalFeatureElevation              RouteLegAdditionalFeature = "Elevation"
	RouteLegAdditionalFeatureIncidents              RouteLegAdditionalFeature = "Incidents"
	RouteLegAdditionalFeaturePassThroughWaypoints   RouteLegAdditionalFeature = "PassThroughWaypoints"
	RouteLegAdditionalFeatureSummary                RouteLegAdditionalFeature = "Summary"
	RouteLegAdditionalFeatureTolls                  RouteLegAdditionalFeature = "Tolls"
	RouteLegAdditionalFeatureTravelStepInstructions RouteLegAdditionalFeature = "TravelStepInstructions"
	RouteLegAdditionalFeatureTruckRoadTypes         RouteLegAdditionalFeature = "TruckRoadTypes"
	RouteLegAdditionalFeatureTypicalDuration        RouteLegAdditionalFeature = "TypicalDuration"
	RouteLegAdditionalFeatureZones                  RouteLegAdditionalFeature = "Zones"
)

// Values returns all known values for RouteLegAdditionalFeature. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteLegAdditionalFeature) Values() []RouteLegAdditionalFeature {
	return []RouteLegAdditionalFeature{
		"Elevation",
		"Incidents",
		"PassThroughWaypoints",
		"Summary",
		"Tolls",
		"TravelStepInstructions",
		"TruckRoadTypes",
		"TypicalDuration",
		"Zones",
	}
}

type RouteLegTravelMode string

// Enum values for RouteLegTravelMode
const (
	RouteLegTravelModeCar             RouteLegTravelMode = "Car"
	RouteLegTravelModeFerry           RouteLegTravelMode = "Ferry"
	RouteLegTravelModePedestrian      RouteLegTravelMode = "Pedestrian"
	RouteLegTravelModeScooter         RouteLegTravelMode = "Scooter"
	RouteLegTravelModeTruck           RouteLegTravelMode = "Truck"
	RouteLegTravelModeCarShuttleTrain RouteLegTravelMode = "CarShuttleTrain"
)

// Values returns all known values for RouteLegTravelMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteLegTravelMode) Values() []RouteLegTravelMode {
	return []RouteLegTravelMode{
		"Car",
		"Ferry",
		"Pedestrian",
		"Scooter",
		"Truck",
		"CarShuttleTrain",
	}
}

type RouteLegType string

// Enum values for RouteLegType
const (
	RouteLegTypeFerry      RouteLegType = "Ferry"
	RouteLegTypePedestrian RouteLegType = "Pedestrian"
	RouteLegTypeVehicle    RouteLegType = "Vehicle"
)

// Values returns all known values for RouteLegType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteLegType) Values() []RouteLegType {
	return []RouteLegType{
		"Ferry",
		"Pedestrian",
		"Vehicle",
	}
}

type RouteMatrixErrorCode string

// Enum values for RouteMatrixErrorCode
const (
	RouteMatrixErrorCodeNoMatch                RouteMatrixErrorCode = "NoMatch"
	RouteMatrixErrorCodeNoMatchDestination     RouteMatrixErrorCode = "NoMatchDestination"
	RouteMatrixErrorCodeNoMatchOrigin          RouteMatrixErrorCode = "NoMatchOrigin"
	RouteMatrixErrorCodeNoRoute                RouteMatrixErrorCode = "NoRoute"
	RouteMatrixErrorCodeOutOfBounds            RouteMatrixErrorCode = "OutOfBounds"
	RouteMatrixErrorCodeOutOfBoundsDestination RouteMatrixErrorCode = "OutOfBoundsDestination"
	RouteMatrixErrorCodeOutOfBoundsOrigin      RouteMatrixErrorCode = "OutOfBoundsOrigin"
	RouteMatrixErrorCodeOther                  RouteMatrixErrorCode = "Other"
	RouteMatrixErrorCodeViolation              RouteMatrixErrorCode = "Violation"
)

// Values returns all known values for RouteMatrixErrorCode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteMatrixErrorCode) Values() []RouteMatrixErrorCode {
	return []RouteMatrixErrorCode{
		"NoMatch",
		"NoMatchDestination",
		"NoMatchOrigin",
		"NoRoute",
		"OutOfBounds",
		"OutOfBoundsDestination",
		"OutOfBoundsOrigin",
		"Other",
		"Violation",
	}
}

type RouteMatrixHazardousCargoType string

// Enum values for RouteMatrixHazardousCargoType
const (
	RouteMatrixHazardousCargoTypeCombustible         RouteMatrixHazardousCargoType = "Combustible"
	RouteMatrixHazardousCargoTypeCorrosive           RouteMatrixHazardousCargoType = "Corrosive"
	RouteMatrixHazardousCargoTypeExplosive           RouteMatrixHazardousCargoType = "Explosive"
	RouteMatrixHazardousCargoTypeFlammable           RouteMatrixHazardousCargoType = "Flammable"
	RouteMatrixHazardousCargoTypeGas                 RouteMatrixHazardousCargoType = "Gas"
	RouteMatrixHazardousCargoTypeHarmfulToWater      RouteMatrixHazardousCargoType = "HarmfulToWater"
	RouteMatrixHazardousCargoTypeOrganic             RouteMatrixHazardousCargoType = "Organic"
	RouteMatrixHazardousCargoTypeOther               RouteMatrixHazardousCargoType = "Other"
	RouteMatrixHazardousCargoTypePoison              RouteMatrixHazardousCargoType = "Poison"
	RouteMatrixHazardousCargoTypePoisonousInhalation RouteMatrixHazardousCargoType = "PoisonousInhalation"
	RouteMatrixHazardousCargoTypeRadioactive         RouteMatrixHazardousCargoType = "Radioactive"
)

// Values returns all known values for RouteMatrixHazardousCargoType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteMatrixHazardousCargoType) Values() []RouteMatrixHazardousCargoType {
	return []RouteMatrixHazardousCargoType{
		"Combustible",
		"Corrosive",
		"Explosive",
		"Flammable",
		"Gas",
		"HarmfulToWater",
		"Organic",
		"Other",
		"Poison",
		"PoisonousInhalation",
		"Radioactive",
	}
}

type RouteMatrixTravelMode string

// Enum values for RouteMatrixTravelMode
const (
	RouteMatrixTravelModeCar        RouteMatrixTravelMode = "Car"
	RouteMatrixTravelModePedestrian RouteMatrixTravelMode = "Pedestrian"
	RouteMatrixTravelModeScooter    RouteMatrixTravelMode = "Scooter"
	RouteMatrixTravelModeTruck      RouteMatrixTravelMode = "Truck"
)

// Values returns all known values for RouteMatrixTravelMode. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteMatrixTravelMode) Values() []RouteMatrixTravelMode {
	return []RouteMatrixTravelMode{
		"Car",
		"Pedestrian",
		"Scooter",
		"Truck",
	}
}

type RouteMatrixTruckType string

// Enum values for RouteMatrixTruckType
const (
	RouteMatrixTruckTypeLightTruck    RouteMatrixTruckType = "LightTruck"
	RouteMatrixTruckTypeStraightTruck RouteMatrixTruckType = "StraightTruck"
	RouteMatrixTruckTypeTractor       RouteMatrixTruckType = "Tractor"
)

// Values returns all known values for RouteMatrixTruckType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteMatrixTruckType) Values() []RouteMatrixTruckType {
	return []RouteMatrixTruckType{
		"LightTruck",
		"StraightTruck",
		"Tractor",
	}
}

type RouteMatrixZoneCategory string

// Enum values for RouteMatrixZoneCategory
const (
	RouteMatrixZoneCategoryCongestionPricing RouteMatrixZoneCategory = "CongestionPricing"
	RouteMatrixZoneCategoryEnvironmental     RouteMatrixZoneCategory = "Environmental"
	RouteMatrixZoneCategoryVignette          RouteMatrixZoneCategory = "Vignette"
)

// Values returns all known values for RouteMatrixZoneCategory. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteMatrixZoneCategory) Values() []RouteMatrixZoneCategory {
	return []RouteMatrixZoneCategory{
		"CongestionPricing",
		"Environmental",
		"Vignette",
	}
}

type RouteNoticeImpact string

// Enum values for RouteNoticeImpact
const (
	RouteNoticeImpactHigh RouteNoticeImpact = "High"
	RouteNoticeImpactLow  RouteNoticeImpact = "Low"
)

// Values returns all known values for RouteNoticeImpact. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteNoticeImpact) Values() []RouteNoticeImpact {
	return []RouteNoticeImpact{
		"High",
		"Low",
	}
}

type RoutePedestrianNoticeCode string

// Enum values for RoutePedestrianNoticeCode
const (
	RoutePedestrianNoticeCodeAccuratePolylineUnavailable RoutePedestrianNoticeCode = "AccuratePolylineUnavailable"
	RoutePedestrianNoticeCodeOther                       RoutePedestrianNoticeCode = "Other"
	RoutePedestrianNoticeCodeViolatedAvoidDirtRoad       RoutePedestrianNoticeCode = "ViolatedAvoidDirtRoad"
	RoutePedestrianNoticeCodeViolatedAvoidTunnel         RoutePedestrianNoticeCode = "ViolatedAvoidTunnel"
	RoutePedestrianNoticeCodeViolatedPedestrianOption    RoutePedestrianNoticeCode = "ViolatedPedestrianOption"
)

// Values returns all known values for RoutePedestrianNoticeCode. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RoutePedestrianNoticeCode) Values() []RoutePedestrianNoticeCode {
	return []RoutePedestrianNoticeCode{
		"AccuratePolylineUnavailable",
		"Other",
		"ViolatedAvoidDirtRoad",
		"ViolatedAvoidTunnel",
		"ViolatedPedestrianOption",
	}
}

type RoutePedestrianTravelStepType string

// Enum values for RoutePedestrianTravelStepType
const (
	RoutePedestrianTravelStepTypeArrive          RoutePedestrianTravelStepType = "Arrive"
	RoutePedestrianTravelStepTypeContinue        RoutePedestrianTravelStepType = "Continue"
	RoutePedestrianTravelStepTypeDepart          RoutePedestrianTravelStepType = "Depart"
	RoutePedestrianTravelStepTypeKeep            RoutePedestrianTravelStepType = "Keep"
	RoutePedestrianTravelStepTypeRoundaboutEnter RoutePedestrianTravelStepType = "RoundaboutEnter"
	RoutePedestrianTravelStepTypeRoundaboutExit  RoutePedestrianTravelStepType = "RoundaboutExit"
	RoutePedestrianTravelStepTypeRoundaboutPass  RoutePedestrianTravelStepType = "RoundaboutPass"
	RoutePedestrianTravelStepTypeTurn            RoutePedestrianTravelStepType = "Turn"
	RoutePedestrianTravelStepTypeExit            RoutePedestrianTravelStepType = "Exit"
	RoutePedestrianTravelStepTypeRamp            RoutePedestrianTravelStepType = "Ramp"
	RoutePedestrianTravelStepTypeUTurn           RoutePedestrianTravelStepType = "UTurn"
)

// Values returns all known values for RoutePedestrianTravelStepType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RoutePedestrianTravelStepType) Values() []RoutePedestrianTravelStepType {
	return []RoutePedestrianTravelStepType{
		"Arrive",
		"Continue",
		"Depart",
		"Keep",
		"RoundaboutEnter",
		"RoundaboutExit",
		"RoundaboutPass",
		"Turn",
		"Exit",
		"Ramp",
		"UTurn",
	}
}

type RouteResponseNoticeCode string

// Enum values for RouteResponseNoticeCode
const (
	RouteResponseNoticeCodeMainLanguageNotFound             RouteResponseNoticeCode = "MainLanguageNotFound"
	RouteResponseNoticeCodeOther                            RouteResponseNoticeCode = "Other"
	RouteResponseNoticeCodeTravelTimeExceedsDriverWorkHours RouteResponseNoticeCode = "TravelTimeExceedsDriverWorkHours"
)

// Values returns all known values for RouteResponseNoticeCode. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteResponseNoticeCode) Values() []RouteResponseNoticeCode {
	return []RouteResponseNoticeCode{
		"MainLanguageNotFound",
		"Other",
		"TravelTimeExceedsDriverWorkHours",
	}
}

type RouteRoadType string

// Enum values for RouteRoadType
const (
	RouteRoadTypeHighway RouteRoadType = "Highway"
	RouteRoadTypeRural   RouteRoadType = "Rural"
	RouteRoadTypeUrban   RouteRoadType = "Urban"
)

// Values returns all known values for RouteRoadType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteRoadType) Values() []RouteRoadType {
	return []RouteRoadType{
		"Highway",
		"Rural",
		"Urban",
	}
}

type RouteSideOfStreet string

// Enum values for RouteSideOfStreet
const (
	RouteSideOfStreetLeft  RouteSideOfStreet = "Left"
	RouteSideOfStreetRight RouteSideOfStreet = "Right"
)

// Values returns all known values for RouteSideOfStreet. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteSideOfStreet) Values() []RouteSideOfStreet {
	return []RouteSideOfStreet{
		"Left",
		"Right",
	}
}

type RouteSpanAdditionalFeature string

// Enum values for RouteSpanAdditionalFeature
const (
	RouteSpanAdditionalFeatureBestCaseDuration         RouteSpanAdditionalFeature = "BestCaseDuration"
	RouteSpanAdditionalFeatureCarAccess                RouteSpanAdditionalFeature = "CarAccess"
	RouteSpanAdditionalFeatureCountry                  RouteSpanAdditionalFeature = "Country"
	RouteSpanAdditionalFeatureDistance                 RouteSpanAdditionalFeature = "Distance"
	RouteSpanAdditionalFeatureDuration                 RouteSpanAdditionalFeature = "Duration"
	RouteSpanAdditionalFeatureDynamicSpeed             RouteSpanAdditionalFeature = "DynamicSpeed"
	RouteSpanAdditionalFeatureFunctionalClassification RouteSpanAdditionalFeature = "FunctionalClassification"
	RouteSpanAdditionalFeatureGates                    RouteSpanAdditionalFeature = "Gates"
	RouteSpanAdditionalFeatureIncidents                RouteSpanAdditionalFeature = "Incidents"
	RouteSpanAdditionalFeatureNames                    RouteSpanAdditionalFeature = "Names"
	RouteSpanAdditionalFeatureNotices                  RouteSpanAdditionalFeature = "Notices"
	RouteSpanAdditionalFeaturePedestrianAccess         RouteSpanAdditionalFeature = "PedestrianAccess"
	RouteSpanAdditionalFeatureRailwayCrossings         RouteSpanAdditionalFeature = "RailwayCrossings"
	RouteSpanAdditionalFeatureRegion                   RouteSpanAdditionalFeature = "Region"
	RouteSpanAdditionalFeatureRoadAttributes           RouteSpanAdditionalFeature = "RoadAttributes"
	RouteSpanAdditionalFeatureRouteNumbers             RouteSpanAdditionalFeature = "RouteNumbers"
	RouteSpanAdditionalFeatureScooterAccess            RouteSpanAdditionalFeature = "ScooterAccess"
	RouteSpanAdditionalFeatureSpeedLimit               RouteSpanAdditionalFeature = "SpeedLimit"
	RouteSpanAdditionalFeatureTollSystems              RouteSpanAdditionalFeature = "TollSystems"
	RouteSpanAdditionalFeatureTruckAccess              RouteSpanAdditionalFeature = "TruckAccess"
	RouteSpanAdditionalFeatureTruckRoadTypes           RouteSpanAdditionalFeature = "TruckRoadTypes"
	RouteSpanAdditionalFeatureTypicalDuration          RouteSpanAdditionalFeature = "TypicalDuration"
	RouteSpanAdditionalFeatureZones                    RouteSpanAdditionalFeature = "Zones"
	RouteSpanAdditionalFeatureConsumption              RouteSpanAdditionalFeature = "Consumption"
)

// Values returns all known values for RouteSpanAdditionalFeature. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteSpanAdditionalFeature) Values() []RouteSpanAdditionalFeature {
	return []RouteSpanAdditionalFeature{
		"BestCaseDuration",
		"CarAccess",
		"Country",
		"Distance",
		"Duration",
		"DynamicSpeed",
		"FunctionalClassification",
		"Gates",
		"Incidents",
		"Names",
		"Notices",
		"PedestrianAccess",
		"RailwayCrossings",
		"Region",
		"RoadAttributes",
		"RouteNumbers",
		"ScooterAccess",
		"SpeedLimit",
		"TollSystems",
		"TruckAccess",
		"TruckRoadTypes",
		"TypicalDuration",
		"Zones",
		"Consumption",
	}
}

type RouteSpanCarAccessAttribute string

// Enum values for RouteSpanCarAccessAttribute
const (
	RouteSpanCarAccessAttributeAllowed          RouteSpanCarAccessAttribute = "Allowed"
	RouteSpanCarAccessAttributeNoThroughTraffic RouteSpanCarAccessAttribute = "NoThroughTraffic"
	RouteSpanCarAccessAttributeTollRoad         RouteSpanCarAccessAttribute = "TollRoad"
)

// Values returns all known values for RouteSpanCarAccessAttribute. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteSpanCarAccessAttribute) Values() []RouteSpanCarAccessAttribute {
	return []RouteSpanCarAccessAttribute{
		"Allowed",
		"NoThroughTraffic",
		"TollRoad",
	}
}

type RouteSpanGateAttribute string

// Enum values for RouteSpanGateAttribute
const (
	RouteSpanGateAttributeEmergency          RouteSpanGateAttribute = "Emergency"
	RouteSpanGateAttributeKeyAccess          RouteSpanGateAttribute = "KeyAccess"
	RouteSpanGateAttributePermissionRequired RouteSpanGateAttribute = "PermissionRequired"
)

// Values returns all known values for RouteSpanGateAttribute. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteSpanGateAttribute) Values() []RouteSpanGateAttribute {
	return []RouteSpanGateAttribute{
		"Emergency",
		"KeyAccess",
		"PermissionRequired",
	}
}

type RouteSpanPedestrianAccessAttribute string

// Enum values for RouteSpanPedestrianAccessAttribute
const (
	RouteSpanPedestrianAccessAttributeAllowed          RouteSpanPedestrianAccessAttribute = "Allowed"
	RouteSpanPedestrianAccessAttributeIndoors          RouteSpanPedestrianAccessAttribute = "Indoors"
	RouteSpanPedestrianAccessAttributeNoThroughTraffic RouteSpanPedestrianAccessAttribute = "NoThroughTraffic"
	RouteSpanPedestrianAccessAttributePark             RouteSpanPedestrianAccessAttribute = "Park"
	RouteSpanPedestrianAccessAttributeStairs           RouteSpanPedestrianAccessAttribute = "Stairs"
	RouteSpanPedestrianAccessAttributeTollRoad         RouteSpanPedestrianAccessAttribute = "TollRoad"
)

// Values returns all known values for RouteSpanPedestrianAccessAttribute. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteSpanPedestrianAccessAttribute) Values() []RouteSpanPedestrianAccessAttribute {
	return []RouteSpanPedestrianAccessAttribute{
		"Allowed",
		"Indoors",
		"NoThroughTraffic",
		"Park",
		"Stairs",
		"TollRoad",
	}
}

type RouteSpanRailwayCrossingAttribute string

// Enum values for RouteSpanRailwayCrossingAttribute
const (
	RouteSpanRailwayCrossingAttributeProtected   RouteSpanRailwayCrossingAttribute = "Protected"
	RouteSpanRailwayCrossingAttributeUnprotected RouteSpanRailwayCrossingAttribute = "Unprotected"
)

// Values returns all known values for RouteSpanRailwayCrossingAttribute. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteSpanRailwayCrossingAttribute) Values() []RouteSpanRailwayCrossingAttribute {
	return []RouteSpanRailwayCrossingAttribute{
		"Protected",
		"Unprotected",
	}
}

type RouteSpanRoadAttribute string

// Enum values for RouteSpanRoadAttribute
const (
	RouteSpanRoadAttributeBridge                  RouteSpanRoadAttribute = "Bridge"
	RouteSpanRoadAttributeBuiltUpArea             RouteSpanRoadAttribute = "BuiltUpArea"
	RouteSpanRoadAttributeControlledAccessHighway RouteSpanRoadAttribute = "ControlledAccessHighway"
	RouteSpanRoadAttributeDirtRoad                RouteSpanRoadAttribute = "DirtRoad"
	RouteSpanRoadAttributeDividedRoad             RouteSpanRoadAttribute = "DividedRoad"
	RouteSpanRoadAttributeMotorway                RouteSpanRoadAttribute = "Motorway"
	RouteSpanRoadAttributePrivateRoad             RouteSpanRoadAttribute = "PrivateRoad"
	RouteSpanRoadAttributeRamp                    RouteSpanRoadAttribute = "Ramp"
	RouteSpanRoadAttributeRightHandTraffic        RouteSpanRoadAttribute = "RightHandTraffic"
	RouteSpanRoadAttributeRoundabout              RouteSpanRoadAttribute = "Roundabout"
	RouteSpanRoadAttributeTunnel                  RouteSpanRoadAttribute = "Tunnel"
	RouteSpanRoadAttributeUnderConstruction       RouteSpanRoadAttribute = "UnderConstruction"
)

// Values returns all known values for RouteSpanRoadAttribute. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteSpanRoadAttribute) Values() []RouteSpanRoadAttribute {
	return []RouteSpanRoadAttribute{
		"Bridge",
		"BuiltUpArea",
		"ControlledAccessHighway",
		"DirtRoad",
		"DividedRoad",
		"Motorway",
		"PrivateRoad",
		"Ramp",
		"RightHandTraffic",
		"Roundabout",
		"Tunnel",
		"UnderConstruction",
	}
}

type RouteSpanScooterAccessAttribute string

// Enum values for RouteSpanScooterAccessAttribute
const (
	RouteSpanScooterAccessAttributeAllowed          RouteSpanScooterAccessAttribute = "Allowed"
	RouteSpanScooterAccessAttributeNoThroughTraffic RouteSpanScooterAccessAttribute = "NoThroughTraffic"
	RouteSpanScooterAccessAttributeTollRoad         RouteSpanScooterAccessAttribute = "TollRoad"
)

// Values returns all known values for RouteSpanScooterAccessAttribute. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteSpanScooterAccessAttribute) Values() []RouteSpanScooterAccessAttribute {
	return []RouteSpanScooterAccessAttribute{
		"Allowed",
		"NoThroughTraffic",
		"TollRoad",
	}
}

type RouteSpanTruckAccessAttribute string

// Enum values for RouteSpanTruckAccessAttribute
const (
	RouteSpanTruckAccessAttributeAllowed          RouteSpanTruckAccessAttribute = "Allowed"
	RouteSpanTruckAccessAttributeNoThroughTraffic RouteSpanTruckAccessAttribute = "NoThroughTraffic"
	RouteSpanTruckAccessAttributeTollRoad         RouteSpanTruckAccessAttribute = "TollRoad"
)

// Values returns all known values for RouteSpanTruckAccessAttribute. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteSpanTruckAccessAttribute) Values() []RouteSpanTruckAccessAttribute {
	return []RouteSpanTruckAccessAttribute{
		"Allowed",
		"NoThroughTraffic",
		"TollRoad",
	}
}

type RouteSteeringDirection string

// Enum values for RouteSteeringDirection
const (
	RouteSteeringDirectionLeft     RouteSteeringDirection = "Left"
	RouteSteeringDirectionRight    RouteSteeringDirection = "Right"
	RouteSteeringDirectionStraight RouteSteeringDirection = "Straight"
)

// Values returns all known values for RouteSteeringDirection. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteSteeringDirection) Values() []RouteSteeringDirection {
	return []RouteSteeringDirection{
		"Left",
		"Right",
		"Straight",
	}
}

type RouteTollPassValidityPeriodType string

// Enum values for RouteTollPassValidityPeriodType
const (
	RouteTollPassValidityPeriodTypeAnnual         RouteTollPassValidityPeriodType = "Annual"
	RouteTollPassValidityPeriodTypeDays           RouteTollPassValidityPeriodType = "Days"
	RouteTollPassValidityPeriodTypeExtendedAnnual RouteTollPassValidityPeriodType = "ExtendedAnnual"
	RouteTollPassValidityPeriodTypeMinutes        RouteTollPassValidityPeriodType = "Minutes"
	RouteTollPassValidityPeriodTypeMonths         RouteTollPassValidityPeriodType = "Months"
)

// Values returns all known values for RouteTollPassValidityPeriodType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteTollPassValidityPeriodType) Values() []RouteTollPassValidityPeriodType {
	return []RouteTollPassValidityPeriodType{
		"Annual",
		"Days",
		"ExtendedAnnual",
		"Minutes",
		"Months",
	}
}

type RouteTollPaymentMethod string

// Enum values for RouteTollPaymentMethod
const (
	RouteTollPaymentMethodBankCard         RouteTollPaymentMethod = "BankCard"
	RouteTollPaymentMethodCash             RouteTollPaymentMethod = "Cash"
	RouteTollPaymentMethodCashExact        RouteTollPaymentMethod = "CashExact"
	RouteTollPaymentMethodCreditCard       RouteTollPaymentMethod = "CreditCard"
	RouteTollPaymentMethodPassSubscription RouteTollPaymentMethod = "PassSubscription"
	RouteTollPaymentMethodTravelCard       RouteTollPaymentMethod = "TravelCard"
	RouteTollPaymentMethodTransponder      RouteTollPaymentMethod = "Transponder"
	RouteTollPaymentMethodVideoToll        RouteTollPaymentMethod = "VideoToll"
)

// Values returns all known values for RouteTollPaymentMethod. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteTollPaymentMethod) Values() []RouteTollPaymentMethod {
	return []RouteTollPaymentMethod{
		"BankCard",
		"Cash",
		"CashExact",
		"CreditCard",
		"PassSubscription",
		"TravelCard",
		"Transponder",
		"VideoToll",
	}
}

type RouteTollVehicleCategory string

// Enum values for RouteTollVehicleCategory
const (
	RouteTollVehicleCategoryMinibus RouteTollVehicleCategory = "Minibus"
)

// Values returns all known values for RouteTollVehicleCategory. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteTollVehicleCategory) Values() []RouteTollVehicleCategory {
	return []RouteTollVehicleCategory{
		"Minibus",
	}
}

type RouteTravelMode string

// Enum values for RouteTravelMode
const (
	RouteTravelModeCar        RouteTravelMode = "Car"
	RouteTravelModePedestrian RouteTravelMode = "Pedestrian"
	RouteTravelModeScooter    RouteTravelMode = "Scooter"
	RouteTravelModeTruck      RouteTravelMode = "Truck"
)

// Values returns all known values for RouteTravelMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteTravelMode) Values() []RouteTravelMode {
	return []RouteTravelMode{
		"Car",
		"Pedestrian",
		"Scooter",
		"Truck",
	}
}

type RouteTravelStepType string

// Enum values for RouteTravelStepType
const (
	RouteTravelStepTypeDefault    RouteTravelStepType = "Default"
	RouteTravelStepTypeTurnByTurn RouteTravelStepType = "TurnByTurn"
)

// Values returns all known values for RouteTravelStepType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteTravelStepType) Values() []RouteTravelStepType {
	return []RouteTravelStepType{
		"Default",
		"TurnByTurn",
	}
}

type RouteTruckType string

// Enum values for RouteTruckType
const (
	RouteTruckTypeLightTruck    RouteTruckType = "LightTruck"
	RouteTruckTypeStraightTruck RouteTruckType = "StraightTruck"
	RouteTruckTypeTractor       RouteTruckType = "Tractor"
)

// Values returns all known values for RouteTruckType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteTruckType) Values() []RouteTruckType {
	return []RouteTruckType{
		"LightTruck",
		"StraightTruck",
		"Tractor",
	}
}

type RouteTurnIntensity string

// Enum values for RouteTurnIntensity
const (
	RouteTurnIntensitySharp   RouteTurnIntensity = "Sharp"
	RouteTurnIntensitySlight  RouteTurnIntensity = "Slight"
	RouteTurnIntensityTypical RouteTurnIntensity = "Typical"
)

// Values returns all known values for RouteTurnIntensity. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteTurnIntensity) Values() []RouteTurnIntensity {
	return []RouteTurnIntensity{
		"Sharp",
		"Slight",
		"Typical",
	}
}

type RouteVehicleIncidentSeverity string

// Enum values for RouteVehicleIncidentSeverity
const (
	RouteVehicleIncidentSeverityCritical RouteVehicleIncidentSeverity = "Critical"
	RouteVehicleIncidentSeverityHigh     RouteVehicleIncidentSeverity = "High"
	RouteVehicleIncidentSeverityMedium   RouteVehicleIncidentSeverity = "Medium"
	RouteVehicleIncidentSeverityLow      RouteVehicleIncidentSeverity = "Low"
)

// Values returns all known values for RouteVehicleIncidentSeverity. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteVehicleIncidentSeverity) Values() []RouteVehicleIncidentSeverity {
	return []RouteVehicleIncidentSeverity{
		"Critical",
		"High",
		"Medium",
		"Low",
	}
}

type RouteVehicleIncidentType string

// Enum values for RouteVehicleIncidentType
const (
	RouteVehicleIncidentTypeAccident        RouteVehicleIncidentType = "Accident"
	RouteVehicleIncidentTypeCongestion      RouteVehicleIncidentType = "Congestion"
	RouteVehicleIncidentTypeConstruction    RouteVehicleIncidentType = "Construction"
	RouteVehicleIncidentTypeDisabledVehicle RouteVehicleIncidentType = "DisabledVehicle"
	RouteVehicleIncidentTypeLaneRestriction RouteVehicleIncidentType = "LaneRestriction"
	RouteVehicleIncidentTypeMassTransit     RouteVehicleIncidentType = "MassTransit"
	RouteVehicleIncidentTypeOther           RouteVehicleIncidentType = "Other"
	RouteVehicleIncidentTypePlannedEvent    RouteVehicleIncidentType = "PlannedEvent"
	RouteVehicleIncidentTypeRoadClosure     RouteVehicleIncidentType = "RoadClosure"
	RouteVehicleIncidentTypeRoadHazard      RouteVehicleIncidentType = "RoadHazard"
	RouteVehicleIncidentTypeWeather         RouteVehicleIncidentType = "Weather"
)

// Values returns all known values for RouteVehicleIncidentType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteVehicleIncidentType) Values() []RouteVehicleIncidentType {
	return []RouteVehicleIncidentType{
		"Accident",
		"Congestion",
		"Construction",
		"DisabledVehicle",
		"LaneRestriction",
		"MassTransit",
		"Other",
		"PlannedEvent",
		"RoadClosure",
		"RoadHazard",
		"Weather",
	}
}

type RouteVehicleNoticeCode string

// Enum values for RouteVehicleNoticeCode
const (
	RouteVehicleNoticeCodeAccuratePolylineUnavailable              RouteVehicleNoticeCode = "AccuratePolylineUnavailable"
	RouteVehicleNoticeCodeOther                                    RouteVehicleNoticeCode = "Other"
	RouteVehicleNoticeCodePotentialViolatedAvoidTollRoadUsage      RouteVehicleNoticeCode = "PotentialViolatedAvoidTollRoadUsage"
	RouteVehicleNoticeCodePotentialViolatedCarpoolUsage            RouteVehicleNoticeCode = "PotentialViolatedCarpoolUsage"
	RouteVehicleNoticeCodePotentialViolatedTurnRestrictionUsage    RouteVehicleNoticeCode = "PotentialViolatedTurnRestrictionUsage"
	RouteVehicleNoticeCodePotentialViolatedVehicleRestrictionUsage RouteVehicleNoticeCode = "PotentialViolatedVehicleRestrictionUsage"
	RouteVehicleNoticeCodePotentialViolatedZoneRestrictionUsage    RouteVehicleNoticeCode = "PotentialViolatedZoneRestrictionUsage"
	RouteVehicleNoticeCodeSeasonalClosure                          RouteVehicleNoticeCode = "SeasonalClosure"
	RouteVehicleNoticeCodeTollsDataTemporarilyUnavailable          RouteVehicleNoticeCode = "TollsDataTemporarilyUnavailable"
	RouteVehicleNoticeCodeTollsDataUnavailable                     RouteVehicleNoticeCode = "TollsDataUnavailable"
	RouteVehicleNoticeCodeTollTransponder                          RouteVehicleNoticeCode = "TollTransponder"
	RouteVehicleNoticeCodeViolatedAvoidControlledAccessHighway     RouteVehicleNoticeCode = "ViolatedAvoidControlledAccessHighway"
	RouteVehicleNoticeCodeViolatedAvoidDifficultTurns              RouteVehicleNoticeCode = "ViolatedAvoidDifficultTurns"
	RouteVehicleNoticeCodeViolatedAvoidDirtRoad                    RouteVehicleNoticeCode = "ViolatedAvoidDirtRoad"
	RouteVehicleNoticeCodeViolatedAvoidSeasonalClosure             RouteVehicleNoticeCode = "ViolatedAvoidSeasonalClosure"
	RouteVehicleNoticeCodeViolatedAvoidTollRoad                    RouteVehicleNoticeCode = "ViolatedAvoidTollRoad"
	RouteVehicleNoticeCodeViolatedAvoidTollTransponder             RouteVehicleNoticeCode = "ViolatedAvoidTollTransponder"
	RouteVehicleNoticeCodeViolatedAvoidTruckRoadType               RouteVehicleNoticeCode = "ViolatedAvoidTruckRoadType"
	RouteVehicleNoticeCodeViolatedAvoidTunnel                      RouteVehicleNoticeCode = "ViolatedAvoidTunnel"
	RouteVehicleNoticeCodeViolatedAvoidUTurns                      RouteVehicleNoticeCode = "ViolatedAvoidUTurns"
	RouteVehicleNoticeCodeViolatedBlockedRoad                      RouteVehicleNoticeCode = "ViolatedBlockedRoad"
	RouteVehicleNoticeCodeViolatedCarpool                          RouteVehicleNoticeCode = "ViolatedCarpool"
	RouteVehicleNoticeCodeViolatedEmergencyGate                    RouteVehicleNoticeCode = "ViolatedEmergencyGate"
	RouteVehicleNoticeCodeViolatedStartDirection                   RouteVehicleNoticeCode = "ViolatedStartDirection"
	RouteVehicleNoticeCodeViolatedTurnRestriction                  RouteVehicleNoticeCode = "ViolatedTurnRestriction"
	RouteVehicleNoticeCodeViolatedVehicleRestriction               RouteVehicleNoticeCode = "ViolatedVehicleRestriction"
	RouteVehicleNoticeCodeViolatedZoneRestriction                  RouteVehicleNoticeCode = "ViolatedZoneRestriction"
)

// Values returns all known values for RouteVehicleNoticeCode. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteVehicleNoticeCode) Values() []RouteVehicleNoticeCode {
	return []RouteVehicleNoticeCode{
		"AccuratePolylineUnavailable",
		"Other",
		"PotentialViolatedAvoidTollRoadUsage",
		"PotentialViolatedCarpoolUsage",
		"PotentialViolatedTurnRestrictionUsage",
		"PotentialViolatedVehicleRestrictionUsage",
		"PotentialViolatedZoneRestrictionUsage",
		"SeasonalClosure",
		"TollsDataTemporarilyUnavailable",
		"TollsDataUnavailable",
		"TollTransponder",
		"ViolatedAvoidControlledAccessHighway",
		"ViolatedAvoidDifficultTurns",
		"ViolatedAvoidDirtRoad",
		"ViolatedAvoidSeasonalClosure",
		"ViolatedAvoidTollRoad",
		"ViolatedAvoidTollTransponder",
		"ViolatedAvoidTruckRoadType",
		"ViolatedAvoidTunnel",
		"ViolatedAvoidUTurns",
		"ViolatedBlockedRoad",
		"ViolatedCarpool",
		"ViolatedEmergencyGate",
		"ViolatedStartDirection",
		"ViolatedTurnRestriction",
		"ViolatedVehicleRestriction",
		"ViolatedZoneRestriction",
	}
}

type RouteVehicleTravelStepType string

// Enum values for RouteVehicleTravelStepType
const (
	RouteVehicleTravelStepTypeArrive          RouteVehicleTravelStepType = "Arrive"
	RouteVehicleTravelStepTypeContinue        RouteVehicleTravelStepType = "Continue"
	RouteVehicleTravelStepTypeContinueHighway RouteVehicleTravelStepType = "ContinueHighway"
	RouteVehicleTravelStepTypeDepart          RouteVehicleTravelStepType = "Depart"
	RouteVehicleTravelStepTypeEnterHighway    RouteVehicleTravelStepType = "EnterHighway"
	RouteVehicleTravelStepTypeExit            RouteVehicleTravelStepType = "Exit"
	RouteVehicleTravelStepTypeKeep            RouteVehicleTravelStepType = "Keep"
	RouteVehicleTravelStepTypeRamp            RouteVehicleTravelStepType = "Ramp"
	RouteVehicleTravelStepTypeRoundaboutEnter RouteVehicleTravelStepType = "RoundaboutEnter"
	RouteVehicleTravelStepTypeRoundaboutExit  RouteVehicleTravelStepType = "RoundaboutExit"
	RouteVehicleTravelStepTypeRoundaboutPass  RouteVehicleTravelStepType = "RoundaboutPass"
	RouteVehicleTravelStepTypeTurn            RouteVehicleTravelStepType = "Turn"
	RouteVehicleTravelStepTypeUTurn           RouteVehicleTravelStepType = "UTurn"
)

// Values returns all known values for RouteVehicleTravelStepType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteVehicleTravelStepType) Values() []RouteVehicleTravelStepType {
	return []RouteVehicleTravelStepType{
		"Arrive",
		"Continue",
		"ContinueHighway",
		"Depart",
		"EnterHighway",
		"Exit",
		"Keep",
		"Ramp",
		"RoundaboutEnter",
		"RoundaboutExit",
		"RoundaboutPass",
		"Turn",
		"UTurn",
	}
}

type RouteWeightConstraintType string

// Enum values for RouteWeightConstraintType
const (
	RouteWeightConstraintTypeCurrent RouteWeightConstraintType = "Current"
	RouteWeightConstraintTypeGross   RouteWeightConstraintType = "Gross"
	RouteWeightConstraintTypeUnknown RouteWeightConstraintType = "Unknown"
)

// Values returns all known values for RouteWeightConstraintType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteWeightConstraintType) Values() []RouteWeightConstraintType {
	return []RouteWeightConstraintType{
		"Current",
		"Gross",
		"Unknown",
	}
}

type RouteZoneCategory string

// Enum values for RouteZoneCategory
const (
	RouteZoneCategoryCongestionPricing RouteZoneCategory = "CongestionPricing"
	RouteZoneCategoryEnvironmental     RouteZoneCategory = "Environmental"
	RouteZoneCategoryVignette          RouteZoneCategory = "Vignette"
)

// Values returns all known values for RouteZoneCategory. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RouteZoneCategory) Values() []RouteZoneCategory {
	return []RouteZoneCategory{
		"CongestionPricing",
		"Environmental",
		"Vignette",
	}
}

type RoutingObjective string

// Enum values for RoutingObjective
const (
	RoutingObjectiveFastestRoute  RoutingObjective = "FastestRoute"
	RoutingObjectiveShortestRoute RoutingObjective = "ShortestRoute"
)

// Values returns all known values for RoutingObjective. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RoutingObjective) Values() []RoutingObjective {
	return []RoutingObjective{
		"FastestRoute",
		"ShortestRoute",
	}
}

type SideOfStreetMatchingStrategy string

// Enum values for SideOfStreetMatchingStrategy
const (
	SideOfStreetMatchingStrategyAnyStreet         SideOfStreetMatchingStrategy = "AnyStreet"
	SideOfStreetMatchingStrategyDividedStreetOnly SideOfStreetMatchingStrategy = "DividedStreetOnly"
)

// Values returns all known values for SideOfStreetMatchingStrategy. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SideOfStreetMatchingStrategy) Values() []SideOfStreetMatchingStrategy {
	return []SideOfStreetMatchingStrategy{
		"AnyStreet",
		"DividedStreetOnly",
	}
}

type TrafficUsage string

// Enum values for TrafficUsage
const (
	TrafficUsageIgnoreTrafficData TrafficUsage = "IgnoreTrafficData"
	TrafficUsageUseTrafficData    TrafficUsage = "UseTrafficData"
)

// Values returns all known values for TrafficUsage. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TrafficUsage) Values() []TrafficUsage {
	return []TrafficUsage{
		"IgnoreTrafficData",
		"UseTrafficData",
	}
}

type ValidationExceptionReason string

// Enum values for ValidationExceptionReason
const (
	// No such operation is supported.
	ValidationExceptionReasonUnknownOperation ValidationExceptionReason = "UnknownOperation"
	// The required input is missing.
	ValidationExceptionReasonMissing ValidationExceptionReason = "Missing"
	// The input cannot be parsed. For example a required JSON document, ARN
	// identifier, date value, or numeric field cannot be parsed.
	ValidationExceptionReasonCannotParse ValidationExceptionReason = "CannotParse"
	// The input is present and parsable, but it is otherwise invalid. For example, a
	// required numeric argument is outside the allowed range.
	ValidationExceptionReasonFieldValidationFailed ValidationExceptionReason = "FieldValidationFailed"
	// The input is invalid but no more specific reason is applicable.
	ValidationExceptionReasonOther ValidationExceptionReason = "Other"
	// No such field is supported.
	ValidationExceptionReasonUnknownField ValidationExceptionReason = "UnknownField"
)

// Values returns all known values for ValidationExceptionReason. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ValidationExceptionReason) Values() []ValidationExceptionReason {
	return []ValidationExceptionReason{
		"UnknownOperation",
		"Missing",
		"CannotParse",
		"FieldValidationFailed",
		"Other",
		"UnknownField",
	}
}

type WaypointOptimizationClusteringAlgorithm string

// Enum values for WaypointOptimizationClusteringAlgorithm
const (
	WaypointOptimizationClusteringAlgorithmDrivingDistance WaypointOptimizationClusteringAlgorithm = "DrivingDistance"
	WaypointOptimizationClusteringAlgorithmTopologySegment WaypointOptimizationClusteringAlgorithm = "TopologySegment"
)

// Values returns all known values for WaypointOptimizationClusteringAlgorithm.
// Note that this can be expanded in the future, and so it is only as up to date as
// the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (WaypointOptimizationClusteringAlgorithm) Values() []WaypointOptimizationClusteringAlgorithm {
	return []WaypointOptimizationClusteringAlgorithm{
		"DrivingDistance",
		"TopologySegment",
	}
}

type WaypointOptimizationConstraint string

// Enum values for WaypointOptimizationConstraint
const (
	WaypointOptimizationConstraintAccessHours     WaypointOptimizationConstraint = "AccessHours"
	WaypointOptimizationConstraintAppointmentTime WaypointOptimizationConstraint = "AppointmentTime"
	WaypointOptimizationConstraintBefore          WaypointOptimizationConstraint = "Before"
	WaypointOptimizationConstraintHeading         WaypointOptimizationConstraint = "Heading"
	WaypointOptimizationConstraintServiceDuration WaypointOptimizationConstraint = "ServiceDuration"
	WaypointOptimizationConstraintSideOfStreet    WaypointOptimizationConstraint = "SideOfStreet"
)

// Values returns all known values for WaypointOptimizationConstraint. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (WaypointOptimizationConstraint) Values() []WaypointOptimizationConstraint {
	return []WaypointOptimizationConstraint{
		"AccessHours",
		"AppointmentTime",
		"Before",
		"Heading",
		"ServiceDuration",
		"SideOfStreet",
	}
}

type WaypointOptimizationHazardousCargoType string

// Enum values for WaypointOptimizationHazardousCargoType
const (
	WaypointOptimizationHazardousCargoTypeCombustible         WaypointOptimizationHazardousCargoType = "Combustible"
	WaypointOptimizationHazardousCargoTypeCorrosive           WaypointOptimizationHazardousCargoType = "Corrosive"
	WaypointOptimizationHazardousCargoTypeExplosive           WaypointOptimizationHazardousCargoType = "Explosive"
	WaypointOptimizationHazardousCargoTypeFlammable           WaypointOptimizationHazardousCargoType = "Flammable"
	WaypointOptimizationHazardousCargoTypeGas                 WaypointOptimizationHazardousCargoType = "Gas"
	WaypointOptimizationHazardousCargoTypeHarmfulToWater      WaypointOptimizationHazardousCargoType = "HarmfulToWater"
	WaypointOptimizationHazardousCargoTypeOrganic             WaypointOptimizationHazardousCargoType = "Organic"
	WaypointOptimizationHazardousCargoTypeOther               WaypointOptimizationHazardousCargoType = "Other"
	WaypointOptimizationHazardousCargoTypePoison              WaypointOptimizationHazardousCargoType = "Poison"
	WaypointOptimizationHazardousCargoTypePoisonousInhalation WaypointOptimizationHazardousCargoType = "PoisonousInhalation"
	WaypointOptimizationHazardousCargoTypeRadioactive         WaypointOptimizationHazardousCargoType = "Radioactive"
)

// Values returns all known values for WaypointOptimizationHazardousCargoType.
// Note that this can be expanded in the future, and so it is only as up to date as
// the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (WaypointOptimizationHazardousCargoType) Values() []WaypointOptimizationHazardousCargoType {
	return []WaypointOptimizationHazardousCargoType{
		"Combustible",
		"Corrosive",
		"Explosive",
		"Flammable",
		"Gas",
		"HarmfulToWater",
		"Organic",
		"Other",
		"Poison",
		"PoisonousInhalation",
		"Radioactive",
	}
}

type WaypointOptimizationSequencingObjective string

// Enum values for WaypointOptimizationSequencingObjective
const (
	WaypointOptimizationSequencingObjectiveFastestRoute  WaypointOptimizationSequencingObjective = "FastestRoute"
	WaypointOptimizationSequencingObjectiveShortestRoute WaypointOptimizationSequencingObjective = "ShortestRoute"
)

// Values returns all known values for WaypointOptimizationSequencingObjective.
// Note that this can be expanded in the future, and so it is only as up to date as
// the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (WaypointOptimizationSequencingObjective) Values() []WaypointOptimizationSequencingObjective {
	return []WaypointOptimizationSequencingObjective{
		"FastestRoute",
		"ShortestRoute",
	}
}

type WaypointOptimizationServiceTimeTreatment string

// Enum values for WaypointOptimizationServiceTimeTreatment
const (
	WaypointOptimizationServiceTimeTreatmentRest WaypointOptimizationServiceTimeTreatment = "Rest"
	WaypointOptimizationServiceTimeTreatmentWork WaypointOptimizationServiceTimeTreatment = "Work"
)

// Values returns all known values for WaypointOptimizationServiceTimeTreatment.
// Note that this can be expanded in the future, and so it is only as up to date as
// the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (WaypointOptimizationServiceTimeTreatment) Values() []WaypointOptimizationServiceTimeTreatment {
	return []WaypointOptimizationServiceTimeTreatment{
		"Rest",
		"Work",
	}
}

type WaypointOptimizationTravelMode string

// Enum values for WaypointOptimizationTravelMode
const (
	WaypointOptimizationTravelModeCar        WaypointOptimizationTravelMode = "Car"
	WaypointOptimizationTravelModePedestrian WaypointOptimizationTravelMode = "Pedestrian"
	WaypointOptimizationTravelModeScooter    WaypointOptimizationTravelMode = "Scooter"
	WaypointOptimizationTravelModeTruck      WaypointOptimizationTravelMode = "Truck"
)

// Values returns all known values for WaypointOptimizationTravelMode. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (WaypointOptimizationTravelMode) Values() []WaypointOptimizationTravelMode {
	return []WaypointOptimizationTravelMode{
		"Car",
		"Pedestrian",
		"Scooter",
		"Truck",
	}
}

type WaypointOptimizationTruckType string

// Enum values for WaypointOptimizationTruckType
const (
	WaypointOptimizationTruckTypeStraightTruck WaypointOptimizationTruckType = "StraightTruck"
	WaypointOptimizationTruckTypeTractor       WaypointOptimizationTruckType = "Tractor"
)

// Values returns all known values for WaypointOptimizationTruckType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (WaypointOptimizationTruckType) Values() []WaypointOptimizationTruckType {
	return []WaypointOptimizationTruckType{
		"StraightTruck",
		"Tractor",
	}
}
