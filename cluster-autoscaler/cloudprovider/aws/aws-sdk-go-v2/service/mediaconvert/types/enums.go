// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AacAudioDescriptionBroadcasterMix string

// Enum values for AacAudioDescriptionBroadcasterMix
const (
	AacAudioDescriptionBroadcasterMixBroadcasterMixedAd AacAudioDescriptionBroadcasterMix = "BROADCASTER_MIXED_AD"
	AacAudioDescriptionBroadcasterMixNormal             AacAudioDescriptionBroadcasterMix = "NORMAL"
)

// Values returns all known values for AacAudioDescriptionBroadcasterMix. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AacAudioDescriptionBroadcasterMix) Values() []AacAudioDescriptionBroadcasterMix {
	return []AacAudioDescriptionBroadcasterMix{
		"BROADCASTER_MIXED_AD",
		"NORMAL",
	}
}

type AacCodecProfile string

// Enum values for AacCodecProfile
const (
	AacCodecProfileLc   AacCodecProfile = "LC"
	AacCodecProfileHev1 AacCodecProfile = "HEV1"
	AacCodecProfileHev2 AacCodecProfile = "HEV2"
)

// Values returns all known values for AacCodecProfile. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AacCodecProfile) Values() []AacCodecProfile {
	return []AacCodecProfile{
		"LC",
		"HEV1",
		"HEV2",
	}
}

type AacCodingMode string

// Enum values for AacCodingMode
const (
	AacCodingModeAdReceiverMix AacCodingMode = "AD_RECEIVER_MIX"
	AacCodingModeCodingMode10  AacCodingMode = "CODING_MODE_1_0"
	AacCodingModeCodingMode11  AacCodingMode = "CODING_MODE_1_1"
	AacCodingModeCodingMode20  AacCodingMode = "CODING_MODE_2_0"
	AacCodingModeCodingMode51  AacCodingMode = "CODING_MODE_5_1"
)

// Values returns all known values for AacCodingMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AacCodingMode) Values() []AacCodingMode {
	return []AacCodingMode{
		"AD_RECEIVER_MIX",
		"CODING_MODE_1_0",
		"CODING_MODE_1_1",
		"CODING_MODE_2_0",
		"CODING_MODE_5_1",
	}
}

type AacRateControlMode string

// Enum values for AacRateControlMode
const (
	AacRateControlModeCbr AacRateControlMode = "CBR"
	AacRateControlModeVbr AacRateControlMode = "VBR"
)

// Values returns all known values for AacRateControlMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AacRateControlMode) Values() []AacRateControlMode {
	return []AacRateControlMode{
		"CBR",
		"VBR",
	}
}

type AacRawFormat string

// Enum values for AacRawFormat
const (
	AacRawFormatLatmLoas AacRawFormat = "LATM_LOAS"
	AacRawFormatNone     AacRawFormat = "NONE"
)

// Values returns all known values for AacRawFormat. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AacRawFormat) Values() []AacRawFormat {
	return []AacRawFormat{
		"LATM_LOAS",
		"NONE",
	}
}

type AacSpecification string

// Enum values for AacSpecification
const (
	AacSpecificationMpeg2 AacSpecification = "MPEG2"
	AacSpecificationMpeg4 AacSpecification = "MPEG4"
)

// Values returns all known values for AacSpecification. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AacSpecification) Values() []AacSpecification {
	return []AacSpecification{
		"MPEG2",
		"MPEG4",
	}
}

type AacVbrQuality string

// Enum values for AacVbrQuality
const (
	AacVbrQualityLow        AacVbrQuality = "LOW"
	AacVbrQualityMediumLow  AacVbrQuality = "MEDIUM_LOW"
	AacVbrQualityMediumHigh AacVbrQuality = "MEDIUM_HIGH"
	AacVbrQualityHigh       AacVbrQuality = "HIGH"
)

// Values returns all known values for AacVbrQuality. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AacVbrQuality) Values() []AacVbrQuality {
	return []AacVbrQuality{
		"LOW",
		"MEDIUM_LOW",
		"MEDIUM_HIGH",
		"HIGH",
	}
}

type Ac3BitstreamMode string

// Enum values for Ac3BitstreamMode
const (
	Ac3BitstreamModeCompleteMain     Ac3BitstreamMode = "COMPLETE_MAIN"
	Ac3BitstreamModeCommentary       Ac3BitstreamMode = "COMMENTARY"
	Ac3BitstreamModeDialogue         Ac3BitstreamMode = "DIALOGUE"
	Ac3BitstreamModeEmergency        Ac3BitstreamMode = "EMERGENCY"
	Ac3BitstreamModeHearingImpaired  Ac3BitstreamMode = "HEARING_IMPAIRED"
	Ac3BitstreamModeMusicAndEffects  Ac3BitstreamMode = "MUSIC_AND_EFFECTS"
	Ac3BitstreamModeVisuallyImpaired Ac3BitstreamMode = "VISUALLY_IMPAIRED"
	Ac3BitstreamModeVoiceOver        Ac3BitstreamMode = "VOICE_OVER"
)

// Values returns all known values for Ac3BitstreamMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Ac3BitstreamMode) Values() []Ac3BitstreamMode {
	return []Ac3BitstreamMode{
		"COMPLETE_MAIN",
		"COMMENTARY",
		"DIALOGUE",
		"EMERGENCY",
		"HEARING_IMPAIRED",
		"MUSIC_AND_EFFECTS",
		"VISUALLY_IMPAIRED",
		"VOICE_OVER",
	}
}

type Ac3CodingMode string

// Enum values for Ac3CodingMode
const (
	Ac3CodingModeCodingMode10    Ac3CodingMode = "CODING_MODE_1_0"
	Ac3CodingModeCodingMode11    Ac3CodingMode = "CODING_MODE_1_1"
	Ac3CodingModeCodingMode20    Ac3CodingMode = "CODING_MODE_2_0"
	Ac3CodingModeCodingMode32Lfe Ac3CodingMode = "CODING_MODE_3_2_LFE"
)

// Values returns all known values for Ac3CodingMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Ac3CodingMode) Values() []Ac3CodingMode {
	return []Ac3CodingMode{
		"CODING_MODE_1_0",
		"CODING_MODE_1_1",
		"CODING_MODE_2_0",
		"CODING_MODE_3_2_LFE",
	}
}

type Ac3DynamicRangeCompressionLine string

// Enum values for Ac3DynamicRangeCompressionLine
const (
	Ac3DynamicRangeCompressionLineFilmStandard  Ac3DynamicRangeCompressionLine = "FILM_STANDARD"
	Ac3DynamicRangeCompressionLineFilmLight     Ac3DynamicRangeCompressionLine = "FILM_LIGHT"
	Ac3DynamicRangeCompressionLineMusicStandard Ac3DynamicRangeCompressionLine = "MUSIC_STANDARD"
	Ac3DynamicRangeCompressionLineMusicLight    Ac3DynamicRangeCompressionLine = "MUSIC_LIGHT"
	Ac3DynamicRangeCompressionLineSpeech        Ac3DynamicRangeCompressionLine = "SPEECH"
	Ac3DynamicRangeCompressionLineNone          Ac3DynamicRangeCompressionLine = "NONE"
)

// Values returns all known values for Ac3DynamicRangeCompressionLine. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Ac3DynamicRangeCompressionLine) Values() []Ac3DynamicRangeCompressionLine {
	return []Ac3DynamicRangeCompressionLine{
		"FILM_STANDARD",
		"FILM_LIGHT",
		"MUSIC_STANDARD",
		"MUSIC_LIGHT",
		"SPEECH",
		"NONE",
	}
}

type Ac3DynamicRangeCompressionProfile string

// Enum values for Ac3DynamicRangeCompressionProfile
const (
	Ac3DynamicRangeCompressionProfileFilmStandard Ac3DynamicRangeCompressionProfile = "FILM_STANDARD"
	Ac3DynamicRangeCompressionProfileNone         Ac3DynamicRangeCompressionProfile = "NONE"
)

// Values returns all known values for Ac3DynamicRangeCompressionProfile. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Ac3DynamicRangeCompressionProfile) Values() []Ac3DynamicRangeCompressionProfile {
	return []Ac3DynamicRangeCompressionProfile{
		"FILM_STANDARD",
		"NONE",
	}
}

type Ac3DynamicRangeCompressionRf string

// Enum values for Ac3DynamicRangeCompressionRf
const (
	Ac3DynamicRangeCompressionRfFilmStandard  Ac3DynamicRangeCompressionRf = "FILM_STANDARD"
	Ac3DynamicRangeCompressionRfFilmLight     Ac3DynamicRangeCompressionRf = "FILM_LIGHT"
	Ac3DynamicRangeCompressionRfMusicStandard Ac3DynamicRangeCompressionRf = "MUSIC_STANDARD"
	Ac3DynamicRangeCompressionRfMusicLight    Ac3DynamicRangeCompressionRf = "MUSIC_LIGHT"
	Ac3DynamicRangeCompressionRfSpeech        Ac3DynamicRangeCompressionRf = "SPEECH"
	Ac3DynamicRangeCompressionRfNone          Ac3DynamicRangeCompressionRf = "NONE"
)

// Values returns all known values for Ac3DynamicRangeCompressionRf. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Ac3DynamicRangeCompressionRf) Values() []Ac3DynamicRangeCompressionRf {
	return []Ac3DynamicRangeCompressionRf{
		"FILM_STANDARD",
		"FILM_LIGHT",
		"MUSIC_STANDARD",
		"MUSIC_LIGHT",
		"SPEECH",
		"NONE",
	}
}

type Ac3LfeFilter string

// Enum values for Ac3LfeFilter
const (
	Ac3LfeFilterEnabled  Ac3LfeFilter = "ENABLED"
	Ac3LfeFilterDisabled Ac3LfeFilter = "DISABLED"
)

// Values returns all known values for Ac3LfeFilter. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Ac3LfeFilter) Values() []Ac3LfeFilter {
	return []Ac3LfeFilter{
		"ENABLED",
		"DISABLED",
	}
}

type Ac3MetadataControl string

// Enum values for Ac3MetadataControl
const (
	Ac3MetadataControlFollowInput   Ac3MetadataControl = "FOLLOW_INPUT"
	Ac3MetadataControlUseConfigured Ac3MetadataControl = "USE_CONFIGURED"
)

// Values returns all known values for Ac3MetadataControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Ac3MetadataControl) Values() []Ac3MetadataControl {
	return []Ac3MetadataControl{
		"FOLLOW_INPUT",
		"USE_CONFIGURED",
	}
}

type AccelerationMode string

// Enum values for AccelerationMode
const (
	AccelerationModeDisabled  AccelerationMode = "DISABLED"
	AccelerationModeEnabled   AccelerationMode = "ENABLED"
	AccelerationModePreferred AccelerationMode = "PREFERRED"
)

// Values returns all known values for AccelerationMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AccelerationMode) Values() []AccelerationMode {
	return []AccelerationMode{
		"DISABLED",
		"ENABLED",
		"PREFERRED",
	}
}

type AccelerationStatus string

// Enum values for AccelerationStatus
const (
	AccelerationStatusNotApplicable  AccelerationStatus = "NOT_APPLICABLE"
	AccelerationStatusInProgress     AccelerationStatus = "IN_PROGRESS"
	AccelerationStatusAccelerated    AccelerationStatus = "ACCELERATED"
	AccelerationStatusNotAccelerated AccelerationStatus = "NOT_ACCELERATED"
)

// Values returns all known values for AccelerationStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AccelerationStatus) Values() []AccelerationStatus {
	return []AccelerationStatus{
		"NOT_APPLICABLE",
		"IN_PROGRESS",
		"ACCELERATED",
		"NOT_ACCELERATED",
	}
}

type AdvancedInputFilter string

// Enum values for AdvancedInputFilter
const (
	AdvancedInputFilterEnabled  AdvancedInputFilter = "ENABLED"
	AdvancedInputFilterDisabled AdvancedInputFilter = "DISABLED"
)

// Values returns all known values for AdvancedInputFilter. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AdvancedInputFilter) Values() []AdvancedInputFilter {
	return []AdvancedInputFilter{
		"ENABLED",
		"DISABLED",
	}
}

type AdvancedInputFilterAddTexture string

// Enum values for AdvancedInputFilterAddTexture
const (
	AdvancedInputFilterAddTextureEnabled  AdvancedInputFilterAddTexture = "ENABLED"
	AdvancedInputFilterAddTextureDisabled AdvancedInputFilterAddTexture = "DISABLED"
)

// Values returns all known values for AdvancedInputFilterAddTexture. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AdvancedInputFilterAddTexture) Values() []AdvancedInputFilterAddTexture {
	return []AdvancedInputFilterAddTexture{
		"ENABLED",
		"DISABLED",
	}
}

type AdvancedInputFilterSharpen string

// Enum values for AdvancedInputFilterSharpen
const (
	AdvancedInputFilterSharpenOff  AdvancedInputFilterSharpen = "OFF"
	AdvancedInputFilterSharpenLow  AdvancedInputFilterSharpen = "LOW"
	AdvancedInputFilterSharpenHigh AdvancedInputFilterSharpen = "HIGH"
)

// Values returns all known values for AdvancedInputFilterSharpen. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AdvancedInputFilterSharpen) Values() []AdvancedInputFilterSharpen {
	return []AdvancedInputFilterSharpen{
		"OFF",
		"LOW",
		"HIGH",
	}
}

type AfdSignaling string

// Enum values for AfdSignaling
const (
	AfdSignalingNone  AfdSignaling = "NONE"
	AfdSignalingAuto  AfdSignaling = "AUTO"
	AfdSignalingFixed AfdSignaling = "FIXED"
)

// Values returns all known values for AfdSignaling. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AfdSignaling) Values() []AfdSignaling {
	return []AfdSignaling{
		"NONE",
		"AUTO",
		"FIXED",
	}
}

type AlphaBehavior string

// Enum values for AlphaBehavior
const (
	AlphaBehaviorDiscard     AlphaBehavior = "DISCARD"
	AlphaBehaviorRemapToLuma AlphaBehavior = "REMAP_TO_LUMA"
)

// Values returns all known values for AlphaBehavior. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AlphaBehavior) Values() []AlphaBehavior {
	return []AlphaBehavior{
		"DISCARD",
		"REMAP_TO_LUMA",
	}
}

type AncillaryConvert608To708 string

// Enum values for AncillaryConvert608To708
const (
	AncillaryConvert608To708Upconvert AncillaryConvert608To708 = "UPCONVERT"
	AncillaryConvert608To708Disabled  AncillaryConvert608To708 = "DISABLED"
)

// Values returns all known values for AncillaryConvert608To708. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AncillaryConvert608To708) Values() []AncillaryConvert608To708 {
	return []AncillaryConvert608To708{
		"UPCONVERT",
		"DISABLED",
	}
}

type AncillaryTerminateCaptions string

// Enum values for AncillaryTerminateCaptions
const (
	AncillaryTerminateCaptionsEndOfInput AncillaryTerminateCaptions = "END_OF_INPUT"
	AncillaryTerminateCaptionsDisabled   AncillaryTerminateCaptions = "DISABLED"
)

// Values returns all known values for AncillaryTerminateCaptions. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AncillaryTerminateCaptions) Values() []AncillaryTerminateCaptions {
	return []AncillaryTerminateCaptions{
		"END_OF_INPUT",
		"DISABLED",
	}
}

type AntiAlias string

// Enum values for AntiAlias
const (
	AntiAliasDisabled AntiAlias = "DISABLED"
	AntiAliasEnabled  AntiAlias = "ENABLED"
)

// Values returns all known values for AntiAlias. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AntiAlias) Values() []AntiAlias {
	return []AntiAlias{
		"DISABLED",
		"ENABLED",
	}
}

type AudioChannelTag string

// Enum values for AudioChannelTag
const (
	AudioChannelTagL    AudioChannelTag = "L"
	AudioChannelTagR    AudioChannelTag = "R"
	AudioChannelTagC    AudioChannelTag = "C"
	AudioChannelTagLfe  AudioChannelTag = "LFE"
	AudioChannelTagLs   AudioChannelTag = "LS"
	AudioChannelTagRs   AudioChannelTag = "RS"
	AudioChannelTagLc   AudioChannelTag = "LC"
	AudioChannelTagRc   AudioChannelTag = "RC"
	AudioChannelTagCs   AudioChannelTag = "CS"
	AudioChannelTagLsd  AudioChannelTag = "LSD"
	AudioChannelTagRsd  AudioChannelTag = "RSD"
	AudioChannelTagTcs  AudioChannelTag = "TCS"
	AudioChannelTagVhl  AudioChannelTag = "VHL"
	AudioChannelTagVhc  AudioChannelTag = "VHC"
	AudioChannelTagVhr  AudioChannelTag = "VHR"
	AudioChannelTagTbl  AudioChannelTag = "TBL"
	AudioChannelTagTbc  AudioChannelTag = "TBC"
	AudioChannelTagTbr  AudioChannelTag = "TBR"
	AudioChannelTagRsl  AudioChannelTag = "RSL"
	AudioChannelTagRsr  AudioChannelTag = "RSR"
	AudioChannelTagLw   AudioChannelTag = "LW"
	AudioChannelTagRw   AudioChannelTag = "RW"
	AudioChannelTagLfe2 AudioChannelTag = "LFE2"
	AudioChannelTagLt   AudioChannelTag = "LT"
	AudioChannelTagRt   AudioChannelTag = "RT"
	AudioChannelTagHi   AudioChannelTag = "HI"
	AudioChannelTagNar  AudioChannelTag = "NAR"
	AudioChannelTagM    AudioChannelTag = "M"
)

// Values returns all known values for AudioChannelTag. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AudioChannelTag) Values() []AudioChannelTag {
	return []AudioChannelTag{
		"L",
		"R",
		"C",
		"LFE",
		"LS",
		"RS",
		"LC",
		"RC",
		"CS",
		"LSD",
		"RSD",
		"TCS",
		"VHL",
		"VHC",
		"VHR",
		"TBL",
		"TBC",
		"TBR",
		"RSL",
		"RSR",
		"LW",
		"RW",
		"LFE2",
		"LT",
		"RT",
		"HI",
		"NAR",
		"M",
	}
}

type AudioCodec string

// Enum values for AudioCodec
const (
	AudioCodecAac         AudioCodec = "AAC"
	AudioCodecMp2         AudioCodec = "MP2"
	AudioCodecMp3         AudioCodec = "MP3"
	AudioCodecWav         AudioCodec = "WAV"
	AudioCodecAiff        AudioCodec = "AIFF"
	AudioCodecAc3         AudioCodec = "AC3"
	AudioCodecEac3        AudioCodec = "EAC3"
	AudioCodecEac3Atmos   AudioCodec = "EAC3_ATMOS"
	AudioCodecVorbis      AudioCodec = "VORBIS"
	AudioCodecOpus        AudioCodec = "OPUS"
	AudioCodecPassthrough AudioCodec = "PASSTHROUGH"
	AudioCodecFlac        AudioCodec = "FLAC"
)

// Values returns all known values for AudioCodec. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AudioCodec) Values() []AudioCodec {
	return []AudioCodec{
		"AAC",
		"MP2",
		"MP3",
		"WAV",
		"AIFF",
		"AC3",
		"EAC3",
		"EAC3_ATMOS",
		"VORBIS",
		"OPUS",
		"PASSTHROUGH",
		"FLAC",
	}
}

type AudioDefaultSelection string

// Enum values for AudioDefaultSelection
const (
	AudioDefaultSelectionDefault    AudioDefaultSelection = "DEFAULT"
	AudioDefaultSelectionNotDefault AudioDefaultSelection = "NOT_DEFAULT"
)

// Values returns all known values for AudioDefaultSelection. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AudioDefaultSelection) Values() []AudioDefaultSelection {
	return []AudioDefaultSelection{
		"DEFAULT",
		"NOT_DEFAULT",
	}
}

type AudioDurationCorrection string

// Enum values for AudioDurationCorrection
const (
	AudioDurationCorrectionDisabled AudioDurationCorrection = "DISABLED"
	AudioDurationCorrectionAuto     AudioDurationCorrection = "AUTO"
	AudioDurationCorrectionTrack    AudioDurationCorrection = "TRACK"
	AudioDurationCorrectionFrame    AudioDurationCorrection = "FRAME"
	AudioDurationCorrectionForce    AudioDurationCorrection = "FORCE"
)

// Values returns all known values for AudioDurationCorrection. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AudioDurationCorrection) Values() []AudioDurationCorrection {
	return []AudioDurationCorrection{
		"DISABLED",
		"AUTO",
		"TRACK",
		"FRAME",
		"FORCE",
	}
}

type AudioLanguageCodeControl string

// Enum values for AudioLanguageCodeControl
const (
	AudioLanguageCodeControlFollowInput   AudioLanguageCodeControl = "FOLLOW_INPUT"
	AudioLanguageCodeControlUseConfigured AudioLanguageCodeControl = "USE_CONFIGURED"
)

// Values returns all known values for AudioLanguageCodeControl. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AudioLanguageCodeControl) Values() []AudioLanguageCodeControl {
	return []AudioLanguageCodeControl{
		"FOLLOW_INPUT",
		"USE_CONFIGURED",
	}
}

type AudioNormalizationAlgorithm string

// Enum values for AudioNormalizationAlgorithm
const (
	AudioNormalizationAlgorithmItuBs17701 AudioNormalizationAlgorithm = "ITU_BS_1770_1"
	AudioNormalizationAlgorithmItuBs17702 AudioNormalizationAlgorithm = "ITU_BS_1770_2"
	AudioNormalizationAlgorithmItuBs17703 AudioNormalizationAlgorithm = "ITU_BS_1770_3"
	AudioNormalizationAlgorithmItuBs17704 AudioNormalizationAlgorithm = "ITU_BS_1770_4"
)

// Values returns all known values for AudioNormalizationAlgorithm. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AudioNormalizationAlgorithm) Values() []AudioNormalizationAlgorithm {
	return []AudioNormalizationAlgorithm{
		"ITU_BS_1770_1",
		"ITU_BS_1770_2",
		"ITU_BS_1770_3",
		"ITU_BS_1770_4",
	}
}

type AudioNormalizationAlgorithmControl string

// Enum values for AudioNormalizationAlgorithmControl
const (
	AudioNormalizationAlgorithmControlCorrectAudio AudioNormalizationAlgorithmControl = "CORRECT_AUDIO"
	AudioNormalizationAlgorithmControlMeasureOnly  AudioNormalizationAlgorithmControl = "MEASURE_ONLY"
)

// Values returns all known values for AudioNormalizationAlgorithmControl. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AudioNormalizationAlgorithmControl) Values() []AudioNormalizationAlgorithmControl {
	return []AudioNormalizationAlgorithmControl{
		"CORRECT_AUDIO",
		"MEASURE_ONLY",
	}
}

type AudioNormalizationLoudnessLogging string

// Enum values for AudioNormalizationLoudnessLogging
const (
	AudioNormalizationLoudnessLoggingLog     AudioNormalizationLoudnessLogging = "LOG"
	AudioNormalizationLoudnessLoggingDontLog AudioNormalizationLoudnessLogging = "DONT_LOG"
)

// Values returns all known values for AudioNormalizationLoudnessLogging. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AudioNormalizationLoudnessLogging) Values() []AudioNormalizationLoudnessLogging {
	return []AudioNormalizationLoudnessLogging{
		"LOG",
		"DONT_LOG",
	}
}

type AudioNormalizationPeakCalculation string

// Enum values for AudioNormalizationPeakCalculation
const (
	AudioNormalizationPeakCalculationTruePeak AudioNormalizationPeakCalculation = "TRUE_PEAK"
	AudioNormalizationPeakCalculationNone     AudioNormalizationPeakCalculation = "NONE"
)

// Values returns all known values for AudioNormalizationPeakCalculation. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AudioNormalizationPeakCalculation) Values() []AudioNormalizationPeakCalculation {
	return []AudioNormalizationPeakCalculation{
		"TRUE_PEAK",
		"NONE",
	}
}

type AudioSelectorType string

// Enum values for AudioSelectorType
const (
	AudioSelectorTypePid               AudioSelectorType = "PID"
	AudioSelectorTypeTrack             AudioSelectorType = "TRACK"
	AudioSelectorTypeLanguageCode      AudioSelectorType = "LANGUAGE_CODE"
	AudioSelectorTypeHlsRenditionGroup AudioSelectorType = "HLS_RENDITION_GROUP"
	AudioSelectorTypeAllPcm            AudioSelectorType = "ALL_PCM"
)

// Values returns all known values for AudioSelectorType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AudioSelectorType) Values() []AudioSelectorType {
	return []AudioSelectorType{
		"PID",
		"TRACK",
		"LANGUAGE_CODE",
		"HLS_RENDITION_GROUP",
		"ALL_PCM",
	}
}

type AudioTypeControl string

// Enum values for AudioTypeControl
const (
	AudioTypeControlFollowInput   AudioTypeControl = "FOLLOW_INPUT"
	AudioTypeControlUseConfigured AudioTypeControl = "USE_CONFIGURED"
)

// Values returns all known values for AudioTypeControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AudioTypeControl) Values() []AudioTypeControl {
	return []AudioTypeControl{
		"FOLLOW_INPUT",
		"USE_CONFIGURED",
	}
}

type Av1AdaptiveQuantization string

// Enum values for Av1AdaptiveQuantization
const (
	Av1AdaptiveQuantizationOff    Av1AdaptiveQuantization = "OFF"
	Av1AdaptiveQuantizationLow    Av1AdaptiveQuantization = "LOW"
	Av1AdaptiveQuantizationMedium Av1AdaptiveQuantization = "MEDIUM"
	Av1AdaptiveQuantizationHigh   Av1AdaptiveQuantization = "HIGH"
	Av1AdaptiveQuantizationHigher Av1AdaptiveQuantization = "HIGHER"
	Av1AdaptiveQuantizationMax    Av1AdaptiveQuantization = "MAX"
)

// Values returns all known values for Av1AdaptiveQuantization. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Av1AdaptiveQuantization) Values() []Av1AdaptiveQuantization {
	return []Av1AdaptiveQuantization{
		"OFF",
		"LOW",
		"MEDIUM",
		"HIGH",
		"HIGHER",
		"MAX",
	}
}

type Av1BitDepth string

// Enum values for Av1BitDepth
const (
	Av1BitDepthBit8  Av1BitDepth = "BIT_8"
	Av1BitDepthBit10 Av1BitDepth = "BIT_10"
)

// Values returns all known values for Av1BitDepth. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Av1BitDepth) Values() []Av1BitDepth {
	return []Av1BitDepth{
		"BIT_8",
		"BIT_10",
	}
}

type Av1FilmGrainSynthesis string

// Enum values for Av1FilmGrainSynthesis
const (
	Av1FilmGrainSynthesisDisabled Av1FilmGrainSynthesis = "DISABLED"
	Av1FilmGrainSynthesisEnabled  Av1FilmGrainSynthesis = "ENABLED"
)

// Values returns all known values for Av1FilmGrainSynthesis. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Av1FilmGrainSynthesis) Values() []Av1FilmGrainSynthesis {
	return []Av1FilmGrainSynthesis{
		"DISABLED",
		"ENABLED",
	}
}

type Av1FramerateControl string

// Enum values for Av1FramerateControl
const (
	Av1FramerateControlInitializeFromSource Av1FramerateControl = "INITIALIZE_FROM_SOURCE"
	Av1FramerateControlSpecified            Av1FramerateControl = "SPECIFIED"
)

// Values returns all known values for Av1FramerateControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Av1FramerateControl) Values() []Av1FramerateControl {
	return []Av1FramerateControl{
		"INITIALIZE_FROM_SOURCE",
		"SPECIFIED",
	}
}

type Av1FramerateConversionAlgorithm string

// Enum values for Av1FramerateConversionAlgorithm
const (
	Av1FramerateConversionAlgorithmDuplicateDrop      Av1FramerateConversionAlgorithm = "DUPLICATE_DROP"
	Av1FramerateConversionAlgorithmInterpolate        Av1FramerateConversionAlgorithm = "INTERPOLATE"
	Av1FramerateConversionAlgorithmFrameformer        Av1FramerateConversionAlgorithm = "FRAMEFORMER"
	Av1FramerateConversionAlgorithmMaintainFrameCount Av1FramerateConversionAlgorithm = "MAINTAIN_FRAME_COUNT"
)

// Values returns all known values for Av1FramerateConversionAlgorithm. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Av1FramerateConversionAlgorithm) Values() []Av1FramerateConversionAlgorithm {
	return []Av1FramerateConversionAlgorithm{
		"DUPLICATE_DROP",
		"INTERPOLATE",
		"FRAMEFORMER",
		"MAINTAIN_FRAME_COUNT",
	}
}

type Av1RateControlMode string

// Enum values for Av1RateControlMode
const (
	Av1RateControlModeQvbr Av1RateControlMode = "QVBR"
)

// Values returns all known values for Av1RateControlMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Av1RateControlMode) Values() []Av1RateControlMode {
	return []Av1RateControlMode{
		"QVBR",
	}
}

type Av1SpatialAdaptiveQuantization string

// Enum values for Av1SpatialAdaptiveQuantization
const (
	Av1SpatialAdaptiveQuantizationDisabled Av1SpatialAdaptiveQuantization = "DISABLED"
	Av1SpatialAdaptiveQuantizationEnabled  Av1SpatialAdaptiveQuantization = "ENABLED"
)

// Values returns all known values for Av1SpatialAdaptiveQuantization. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Av1SpatialAdaptiveQuantization) Values() []Av1SpatialAdaptiveQuantization {
	return []Av1SpatialAdaptiveQuantization{
		"DISABLED",
		"ENABLED",
	}
}

type AvcIntraClass string

// Enum values for AvcIntraClass
const (
	AvcIntraClassClass50   AvcIntraClass = "CLASS_50"
	AvcIntraClassClass100  AvcIntraClass = "CLASS_100"
	AvcIntraClassClass200  AvcIntraClass = "CLASS_200"
	AvcIntraClassClass4k2k AvcIntraClass = "CLASS_4K_2K"
)

// Values returns all known values for AvcIntraClass. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AvcIntraClass) Values() []AvcIntraClass {
	return []AvcIntraClass{
		"CLASS_50",
		"CLASS_100",
		"CLASS_200",
		"CLASS_4K_2K",
	}
}

type AvcIntraFramerateControl string

// Enum values for AvcIntraFramerateControl
const (
	AvcIntraFramerateControlInitializeFromSource AvcIntraFramerateControl = "INITIALIZE_FROM_SOURCE"
	AvcIntraFramerateControlSpecified            AvcIntraFramerateControl = "SPECIFIED"
)

// Values returns all known values for AvcIntraFramerateControl. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AvcIntraFramerateControl) Values() []AvcIntraFramerateControl {
	return []AvcIntraFramerateControl{
		"INITIALIZE_FROM_SOURCE",
		"SPECIFIED",
	}
}

type AvcIntraFramerateConversionAlgorithm string

// Enum values for AvcIntraFramerateConversionAlgorithm
const (
	AvcIntraFramerateConversionAlgorithmDuplicateDrop      AvcIntraFramerateConversionAlgorithm = "DUPLICATE_DROP"
	AvcIntraFramerateConversionAlgorithmInterpolate        AvcIntraFramerateConversionAlgorithm = "INTERPOLATE"
	AvcIntraFramerateConversionAlgorithmFrameformer        AvcIntraFramerateConversionAlgorithm = "FRAMEFORMER"
	AvcIntraFramerateConversionAlgorithmMaintainFrameCount AvcIntraFramerateConversionAlgorithm = "MAINTAIN_FRAME_COUNT"
)

// Values returns all known values for AvcIntraFramerateConversionAlgorithm. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AvcIntraFramerateConversionAlgorithm) Values() []AvcIntraFramerateConversionAlgorithm {
	return []AvcIntraFramerateConversionAlgorithm{
		"DUPLICATE_DROP",
		"INTERPOLATE",
		"FRAMEFORMER",
		"MAINTAIN_FRAME_COUNT",
	}
}

type AvcIntraInterlaceMode string

// Enum values for AvcIntraInterlaceMode
const (
	AvcIntraInterlaceModeProgressive       AvcIntraInterlaceMode = "PROGRESSIVE"
	AvcIntraInterlaceModeTopField          AvcIntraInterlaceMode = "TOP_FIELD"
	AvcIntraInterlaceModeBottomField       AvcIntraInterlaceMode = "BOTTOM_FIELD"
	AvcIntraInterlaceModeFollowTopField    AvcIntraInterlaceMode = "FOLLOW_TOP_FIELD"
	AvcIntraInterlaceModeFollowBottomField AvcIntraInterlaceMode = "FOLLOW_BOTTOM_FIELD"
)

// Values returns all known values for AvcIntraInterlaceMode. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AvcIntraInterlaceMode) Values() []AvcIntraInterlaceMode {
	return []AvcIntraInterlaceMode{
		"PROGRESSIVE",
		"TOP_FIELD",
		"BOTTOM_FIELD",
		"FOLLOW_TOP_FIELD",
		"FOLLOW_BOTTOM_FIELD",
	}
}

type AvcIntraScanTypeConversionMode string

// Enum values for AvcIntraScanTypeConversionMode
const (
	AvcIntraScanTypeConversionModeInterlaced         AvcIntraScanTypeConversionMode = "INTERLACED"
	AvcIntraScanTypeConversionModeInterlacedOptimize AvcIntraScanTypeConversionMode = "INTERLACED_OPTIMIZE"
)

// Values returns all known values for AvcIntraScanTypeConversionMode. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AvcIntraScanTypeConversionMode) Values() []AvcIntraScanTypeConversionMode {
	return []AvcIntraScanTypeConversionMode{
		"INTERLACED",
		"INTERLACED_OPTIMIZE",
	}
}

type AvcIntraSlowPal string

// Enum values for AvcIntraSlowPal
const (
	AvcIntraSlowPalDisabled AvcIntraSlowPal = "DISABLED"
	AvcIntraSlowPalEnabled  AvcIntraSlowPal = "ENABLED"
)

// Values returns all known values for AvcIntraSlowPal. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AvcIntraSlowPal) Values() []AvcIntraSlowPal {
	return []AvcIntraSlowPal{
		"DISABLED",
		"ENABLED",
	}
}

type AvcIntraTelecine string

// Enum values for AvcIntraTelecine
const (
	AvcIntraTelecineNone AvcIntraTelecine = "NONE"
	AvcIntraTelecineHard AvcIntraTelecine = "HARD"
)

// Values returns all known values for AvcIntraTelecine. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AvcIntraTelecine) Values() []AvcIntraTelecine {
	return []AvcIntraTelecine{
		"NONE",
		"HARD",
	}
}

type AvcIntraUhdQualityTuningLevel string

// Enum values for AvcIntraUhdQualityTuningLevel
const (
	AvcIntraUhdQualityTuningLevelSinglePass AvcIntraUhdQualityTuningLevel = "SINGLE_PASS"
	AvcIntraUhdQualityTuningLevelMultiPass  AvcIntraUhdQualityTuningLevel = "MULTI_PASS"
)

// Values returns all known values for AvcIntraUhdQualityTuningLevel. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AvcIntraUhdQualityTuningLevel) Values() []AvcIntraUhdQualityTuningLevel {
	return []AvcIntraUhdQualityTuningLevel{
		"SINGLE_PASS",
		"MULTI_PASS",
	}
}

type BandwidthReductionFilterSharpening string

// Enum values for BandwidthReductionFilterSharpening
const (
	BandwidthReductionFilterSharpeningLow    BandwidthReductionFilterSharpening = "LOW"
	BandwidthReductionFilterSharpeningMedium BandwidthReductionFilterSharpening = "MEDIUM"
	BandwidthReductionFilterSharpeningHigh   BandwidthReductionFilterSharpening = "HIGH"
	BandwidthReductionFilterSharpeningOff    BandwidthReductionFilterSharpening = "OFF"
)

// Values returns all known values for BandwidthReductionFilterSharpening. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (BandwidthReductionFilterSharpening) Values() []BandwidthReductionFilterSharpening {
	return []BandwidthReductionFilterSharpening{
		"LOW",
		"MEDIUM",
		"HIGH",
		"OFF",
	}
}

type BandwidthReductionFilterStrength string

// Enum values for BandwidthReductionFilterStrength
const (
	BandwidthReductionFilterStrengthLow    BandwidthReductionFilterStrength = "LOW"
	BandwidthReductionFilterStrengthMedium BandwidthReductionFilterStrength = "MEDIUM"
	BandwidthReductionFilterStrengthHigh   BandwidthReductionFilterStrength = "HIGH"
	BandwidthReductionFilterStrengthAuto   BandwidthReductionFilterStrength = "AUTO"
	BandwidthReductionFilterStrengthOff    BandwidthReductionFilterStrength = "OFF"
)

// Values returns all known values for BandwidthReductionFilterStrength. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (BandwidthReductionFilterStrength) Values() []BandwidthReductionFilterStrength {
	return []BandwidthReductionFilterStrength{
		"LOW",
		"MEDIUM",
		"HIGH",
		"AUTO",
		"OFF",
	}
}

type BillingTagsSource string

// Enum values for BillingTagsSource
const (
	BillingTagsSourceQueue       BillingTagsSource = "QUEUE"
	BillingTagsSourcePreset      BillingTagsSource = "PRESET"
	BillingTagsSourceJobTemplate BillingTagsSource = "JOB_TEMPLATE"
	BillingTagsSourceJob         BillingTagsSource = "JOB"
)

// Values returns all known values for BillingTagsSource. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (BillingTagsSource) Values() []BillingTagsSource {
	return []BillingTagsSource{
		"QUEUE",
		"PRESET",
		"JOB_TEMPLATE",
		"JOB",
	}
}

type BurninSubtitleAlignment string

// Enum values for BurninSubtitleAlignment
const (
	BurninSubtitleAlignmentCentered BurninSubtitleAlignment = "CENTERED"
	BurninSubtitleAlignmentLeft     BurninSubtitleAlignment = "LEFT"
	BurninSubtitleAlignmentAuto     BurninSubtitleAlignment = "AUTO"
)

// Values returns all known values for BurninSubtitleAlignment. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (BurninSubtitleAlignment) Values() []BurninSubtitleAlignment {
	return []BurninSubtitleAlignment{
		"CENTERED",
		"LEFT",
		"AUTO",
	}
}

type BurninSubtitleApplyFontColor string

// Enum values for BurninSubtitleApplyFontColor
const (
	BurninSubtitleApplyFontColorWhiteTextOnly BurninSubtitleApplyFontColor = "WHITE_TEXT_ONLY"
	BurninSubtitleApplyFontColorAllText       BurninSubtitleApplyFontColor = "ALL_TEXT"
)

// Values returns all known values for BurninSubtitleApplyFontColor. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (BurninSubtitleApplyFontColor) Values() []BurninSubtitleApplyFontColor {
	return []BurninSubtitleApplyFontColor{
		"WHITE_TEXT_ONLY",
		"ALL_TEXT",
	}
}

type BurninSubtitleBackgroundColor string

// Enum values for BurninSubtitleBackgroundColor
const (
	BurninSubtitleBackgroundColorNone  BurninSubtitleBackgroundColor = "NONE"
	BurninSubtitleBackgroundColorBlack BurninSubtitleBackgroundColor = "BLACK"
	BurninSubtitleBackgroundColorWhite BurninSubtitleBackgroundColor = "WHITE"
	BurninSubtitleBackgroundColorAuto  BurninSubtitleBackgroundColor = "AUTO"
)

// Values returns all known values for BurninSubtitleBackgroundColor. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (BurninSubtitleBackgroundColor) Values() []BurninSubtitleBackgroundColor {
	return []BurninSubtitleBackgroundColor{
		"NONE",
		"BLACK",
		"WHITE",
		"AUTO",
	}
}

type BurninSubtitleFallbackFont string

// Enum values for BurninSubtitleFallbackFont
const (
	BurninSubtitleFallbackFontBestMatch             BurninSubtitleFallbackFont = "BEST_MATCH"
	BurninSubtitleFallbackFontMonospacedSansserif   BurninSubtitleFallbackFont = "MONOSPACED_SANSSERIF"
	BurninSubtitleFallbackFontMonospacedSerif       BurninSubtitleFallbackFont = "MONOSPACED_SERIF"
	BurninSubtitleFallbackFontProportionalSansserif BurninSubtitleFallbackFont = "PROPORTIONAL_SANSSERIF"
	BurninSubtitleFallbackFontProportionalSerif     BurninSubtitleFallbackFont = "PROPORTIONAL_SERIF"
)

// Values returns all known values for BurninSubtitleFallbackFont. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (BurninSubtitleFallbackFont) Values() []BurninSubtitleFallbackFont {
	return []BurninSubtitleFallbackFont{
		"BEST_MATCH",
		"MONOSPACED_SANSSERIF",
		"MONOSPACED_SERIF",
		"PROPORTIONAL_SANSSERIF",
		"PROPORTIONAL_SERIF",
	}
}

type BurninSubtitleFontColor string

// Enum values for BurninSubtitleFontColor
const (
	BurninSubtitleFontColorWhite  BurninSubtitleFontColor = "WHITE"
	BurninSubtitleFontColorBlack  BurninSubtitleFontColor = "BLACK"
	BurninSubtitleFontColorYellow BurninSubtitleFontColor = "YELLOW"
	BurninSubtitleFontColorRed    BurninSubtitleFontColor = "RED"
	BurninSubtitleFontColorGreen  BurninSubtitleFontColor = "GREEN"
	BurninSubtitleFontColorBlue   BurninSubtitleFontColor = "BLUE"
	BurninSubtitleFontColorHex    BurninSubtitleFontColor = "HEX"
	BurninSubtitleFontColorAuto   BurninSubtitleFontColor = "AUTO"
)

// Values returns all known values for BurninSubtitleFontColor. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (BurninSubtitleFontColor) Values() []BurninSubtitleFontColor {
	return []BurninSubtitleFontColor{
		"WHITE",
		"BLACK",
		"YELLOW",
		"RED",
		"GREEN",
		"BLUE",
		"HEX",
		"AUTO",
	}
}

type BurninSubtitleOutlineColor string

// Enum values for BurninSubtitleOutlineColor
const (
	BurninSubtitleOutlineColorBlack  BurninSubtitleOutlineColor = "BLACK"
	BurninSubtitleOutlineColorWhite  BurninSubtitleOutlineColor = "WHITE"
	BurninSubtitleOutlineColorYellow BurninSubtitleOutlineColor = "YELLOW"
	BurninSubtitleOutlineColorRed    BurninSubtitleOutlineColor = "RED"
	BurninSubtitleOutlineColorGreen  BurninSubtitleOutlineColor = "GREEN"
	BurninSubtitleOutlineColorBlue   BurninSubtitleOutlineColor = "BLUE"
	BurninSubtitleOutlineColorAuto   BurninSubtitleOutlineColor = "AUTO"
)

// Values returns all known values for BurninSubtitleOutlineColor. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (BurninSubtitleOutlineColor) Values() []BurninSubtitleOutlineColor {
	return []BurninSubtitleOutlineColor{
		"BLACK",
		"WHITE",
		"YELLOW",
		"RED",
		"GREEN",
		"BLUE",
		"AUTO",
	}
}

type BurninSubtitleShadowColor string

// Enum values for BurninSubtitleShadowColor
const (
	BurninSubtitleShadowColorNone  BurninSubtitleShadowColor = "NONE"
	BurninSubtitleShadowColorBlack BurninSubtitleShadowColor = "BLACK"
	BurninSubtitleShadowColorWhite BurninSubtitleShadowColor = "WHITE"
	BurninSubtitleShadowColorAuto  BurninSubtitleShadowColor = "AUTO"
)

// Values returns all known values for BurninSubtitleShadowColor. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (BurninSubtitleShadowColor) Values() []BurninSubtitleShadowColor {
	return []BurninSubtitleShadowColor{
		"NONE",
		"BLACK",
		"WHITE",
		"AUTO",
	}
}

type BurnInSubtitleStylePassthrough string

// Enum values for BurnInSubtitleStylePassthrough
const (
	BurnInSubtitleStylePassthroughEnabled  BurnInSubtitleStylePassthrough = "ENABLED"
	BurnInSubtitleStylePassthroughDisabled BurnInSubtitleStylePassthrough = "DISABLED"
)

// Values returns all known values for BurnInSubtitleStylePassthrough. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (BurnInSubtitleStylePassthrough) Values() []BurnInSubtitleStylePassthrough {
	return []BurnInSubtitleStylePassthrough{
		"ENABLED",
		"DISABLED",
	}
}

type BurninSubtitleTeletextSpacing string

// Enum values for BurninSubtitleTeletextSpacing
const (
	BurninSubtitleTeletextSpacingFixedGrid    BurninSubtitleTeletextSpacing = "FIXED_GRID"
	BurninSubtitleTeletextSpacingProportional BurninSubtitleTeletextSpacing = "PROPORTIONAL"
	BurninSubtitleTeletextSpacingAuto         BurninSubtitleTeletextSpacing = "AUTO"
)

// Values returns all known values for BurninSubtitleTeletextSpacing. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (BurninSubtitleTeletextSpacing) Values() []BurninSubtitleTeletextSpacing {
	return []BurninSubtitleTeletextSpacing{
		"FIXED_GRID",
		"PROPORTIONAL",
		"AUTO",
	}
}

type CaptionDestinationType string

// Enum values for CaptionDestinationType
const (
	CaptionDestinationTypeBurnIn             CaptionDestinationType = "BURN_IN"
	CaptionDestinationTypeDvbSub             CaptionDestinationType = "DVB_SUB"
	CaptionDestinationTypeEmbedded           CaptionDestinationType = "EMBEDDED"
	CaptionDestinationTypeEmbeddedPlusScte20 CaptionDestinationType = "EMBEDDED_PLUS_SCTE20"
	CaptionDestinationTypeImsc               CaptionDestinationType = "IMSC"
	CaptionDestinationTypeScte20PlusEmbedded CaptionDestinationType = "SCTE20_PLUS_EMBEDDED"
	CaptionDestinationTypeScc                CaptionDestinationType = "SCC"
	CaptionDestinationTypeSrt                CaptionDestinationType = "SRT"
	CaptionDestinationTypeSmi                CaptionDestinationType = "SMI"
	CaptionDestinationTypeTeletext           CaptionDestinationType = "TELETEXT"
	CaptionDestinationTypeTtml               CaptionDestinationType = "TTML"
	CaptionDestinationTypeWebvtt             CaptionDestinationType = "WEBVTT"
)

// Values returns all known values for CaptionDestinationType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CaptionDestinationType) Values() []CaptionDestinationType {
	return []CaptionDestinationType{
		"BURN_IN",
		"DVB_SUB",
		"EMBEDDED",
		"EMBEDDED_PLUS_SCTE20",
		"IMSC",
		"SCTE20_PLUS_EMBEDDED",
		"SCC",
		"SRT",
		"SMI",
		"TELETEXT",
		"TTML",
		"WEBVTT",
	}
}

type CaptionSourceByteRateLimit string

// Enum values for CaptionSourceByteRateLimit
const (
	CaptionSourceByteRateLimitEnabled  CaptionSourceByteRateLimit = "ENABLED"
	CaptionSourceByteRateLimitDisabled CaptionSourceByteRateLimit = "DISABLED"
)

// Values returns all known values for CaptionSourceByteRateLimit. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CaptionSourceByteRateLimit) Values() []CaptionSourceByteRateLimit {
	return []CaptionSourceByteRateLimit{
		"ENABLED",
		"DISABLED",
	}
}

type CaptionSourceConvertPaintOnToPopOn string

// Enum values for CaptionSourceConvertPaintOnToPopOn
const (
	CaptionSourceConvertPaintOnToPopOnEnabled  CaptionSourceConvertPaintOnToPopOn = "ENABLED"
	CaptionSourceConvertPaintOnToPopOnDisabled CaptionSourceConvertPaintOnToPopOn = "DISABLED"
)

// Values returns all known values for CaptionSourceConvertPaintOnToPopOn. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CaptionSourceConvertPaintOnToPopOn) Values() []CaptionSourceConvertPaintOnToPopOn {
	return []CaptionSourceConvertPaintOnToPopOn{
		"ENABLED",
		"DISABLED",
	}
}

type CaptionSourceType string

// Enum values for CaptionSourceType
const (
	CaptionSourceTypeAncillary  CaptionSourceType = "ANCILLARY"
	CaptionSourceTypeDvbSub     CaptionSourceType = "DVB_SUB"
	CaptionSourceTypeEmbedded   CaptionSourceType = "EMBEDDED"
	CaptionSourceTypeScte20     CaptionSourceType = "SCTE20"
	CaptionSourceTypeScc        CaptionSourceType = "SCC"
	CaptionSourceTypeTtml       CaptionSourceType = "TTML"
	CaptionSourceTypeStl        CaptionSourceType = "STL"
	CaptionSourceTypeSrt        CaptionSourceType = "SRT"
	CaptionSourceTypeSmi        CaptionSourceType = "SMI"
	CaptionSourceTypeSmpteTt    CaptionSourceType = "SMPTE_TT"
	CaptionSourceTypeTeletext   CaptionSourceType = "TELETEXT"
	CaptionSourceTypeNullSource CaptionSourceType = "NULL_SOURCE"
	CaptionSourceTypeImsc       CaptionSourceType = "IMSC"
	CaptionSourceTypeWebvtt     CaptionSourceType = "WEBVTT"
)

// Values returns all known values for CaptionSourceType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CaptionSourceType) Values() []CaptionSourceType {
	return []CaptionSourceType{
		"ANCILLARY",
		"DVB_SUB",
		"EMBEDDED",
		"SCTE20",
		"SCC",
		"TTML",
		"STL",
		"SRT",
		"SMI",
		"SMPTE_TT",
		"TELETEXT",
		"NULL_SOURCE",
		"IMSC",
		"WEBVTT",
	}
}

type CaptionSourceUpconvertSTLToTeletext string

// Enum values for CaptionSourceUpconvertSTLToTeletext
const (
	CaptionSourceUpconvertSTLToTeletextUpconvert CaptionSourceUpconvertSTLToTeletext = "UPCONVERT"
	CaptionSourceUpconvertSTLToTeletextDisabled  CaptionSourceUpconvertSTLToTeletext = "DISABLED"
)

// Values returns all known values for CaptionSourceUpconvertSTLToTeletext. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CaptionSourceUpconvertSTLToTeletext) Values() []CaptionSourceUpconvertSTLToTeletext {
	return []CaptionSourceUpconvertSTLToTeletext{
		"UPCONVERT",
		"DISABLED",
	}
}

type ChromaPositionMode string

// Enum values for ChromaPositionMode
const (
	ChromaPositionModeAuto         ChromaPositionMode = "AUTO"
	ChromaPositionModeForceCenter  ChromaPositionMode = "FORCE_CENTER"
	ChromaPositionModeForceTopLeft ChromaPositionMode = "FORCE_TOP_LEFT"
)

// Values returns all known values for ChromaPositionMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ChromaPositionMode) Values() []ChromaPositionMode {
	return []ChromaPositionMode{
		"AUTO",
		"FORCE_CENTER",
		"FORCE_TOP_LEFT",
	}
}

type CmafClientCache string

// Enum values for CmafClientCache
const (
	CmafClientCacheDisabled CmafClientCache = "DISABLED"
	CmafClientCacheEnabled  CmafClientCache = "ENABLED"
)

// Values returns all known values for CmafClientCache. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmafClientCache) Values() []CmafClientCache {
	return []CmafClientCache{
		"DISABLED",
		"ENABLED",
	}
}

type CmafCodecSpecification string

// Enum values for CmafCodecSpecification
const (
	CmafCodecSpecificationRfc6381 CmafCodecSpecification = "RFC_6381"
	CmafCodecSpecificationRfc4281 CmafCodecSpecification = "RFC_4281"
)

// Values returns all known values for CmafCodecSpecification. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmafCodecSpecification) Values() []CmafCodecSpecification {
	return []CmafCodecSpecification{
		"RFC_6381",
		"RFC_4281",
	}
}

type CmafEncryptionType string

// Enum values for CmafEncryptionType
const (
	CmafEncryptionTypeSampleAes CmafEncryptionType = "SAMPLE_AES"
	CmafEncryptionTypeAesCtr    CmafEncryptionType = "AES_CTR"
)

// Values returns all known values for CmafEncryptionType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmafEncryptionType) Values() []CmafEncryptionType {
	return []CmafEncryptionType{
		"SAMPLE_AES",
		"AES_CTR",
	}
}

type CmafImageBasedTrickPlay string

// Enum values for CmafImageBasedTrickPlay
const (
	CmafImageBasedTrickPlayNone                  CmafImageBasedTrickPlay = "NONE"
	CmafImageBasedTrickPlayThumbnail             CmafImageBasedTrickPlay = "THUMBNAIL"
	CmafImageBasedTrickPlayThumbnailAndFullframe CmafImageBasedTrickPlay = "THUMBNAIL_AND_FULLFRAME"
	CmafImageBasedTrickPlayAdvanced              CmafImageBasedTrickPlay = "ADVANCED"
)

// Values returns all known values for CmafImageBasedTrickPlay. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmafImageBasedTrickPlay) Values() []CmafImageBasedTrickPlay {
	return []CmafImageBasedTrickPlay{
		"NONE",
		"THUMBNAIL",
		"THUMBNAIL_AND_FULLFRAME",
		"ADVANCED",
	}
}

type CmafInitializationVectorInManifest string

// Enum values for CmafInitializationVectorInManifest
const (
	CmafInitializationVectorInManifestInclude CmafInitializationVectorInManifest = "INCLUDE"
	CmafInitializationVectorInManifestExclude CmafInitializationVectorInManifest = "EXCLUDE"
)

// Values returns all known values for CmafInitializationVectorInManifest. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmafInitializationVectorInManifest) Values() []CmafInitializationVectorInManifest {
	return []CmafInitializationVectorInManifest{
		"INCLUDE",
		"EXCLUDE",
	}
}

type CmafIntervalCadence string

// Enum values for CmafIntervalCadence
const (
	CmafIntervalCadenceFollowIframe CmafIntervalCadence = "FOLLOW_IFRAME"
	CmafIntervalCadenceFollowCustom CmafIntervalCadence = "FOLLOW_CUSTOM"
)

// Values returns all known values for CmafIntervalCadence. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmafIntervalCadence) Values() []CmafIntervalCadence {
	return []CmafIntervalCadence{
		"FOLLOW_IFRAME",
		"FOLLOW_CUSTOM",
	}
}

type CmafKeyProviderType string

// Enum values for CmafKeyProviderType
const (
	CmafKeyProviderTypeSpeke     CmafKeyProviderType = "SPEKE"
	CmafKeyProviderTypeStaticKey CmafKeyProviderType = "STATIC_KEY"
)

// Values returns all known values for CmafKeyProviderType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmafKeyProviderType) Values() []CmafKeyProviderType {
	return []CmafKeyProviderType{
		"SPEKE",
		"STATIC_KEY",
	}
}

type CmafManifestCompression string

// Enum values for CmafManifestCompression
const (
	CmafManifestCompressionGzip CmafManifestCompression = "GZIP"
	CmafManifestCompressionNone CmafManifestCompression = "NONE"
)

// Values returns all known values for CmafManifestCompression. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmafManifestCompression) Values() []CmafManifestCompression {
	return []CmafManifestCompression{
		"GZIP",
		"NONE",
	}
}

type CmafManifestDurationFormat string

// Enum values for CmafManifestDurationFormat
const (
	CmafManifestDurationFormatFloatingPoint CmafManifestDurationFormat = "FLOATING_POINT"
	CmafManifestDurationFormatInteger       CmafManifestDurationFormat = "INTEGER"
)

// Values returns all known values for CmafManifestDurationFormat. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmafManifestDurationFormat) Values() []CmafManifestDurationFormat {
	return []CmafManifestDurationFormat{
		"FLOATING_POINT",
		"INTEGER",
	}
}

type CmafMpdManifestBandwidthType string

// Enum values for CmafMpdManifestBandwidthType
const (
	CmafMpdManifestBandwidthTypeAverage CmafMpdManifestBandwidthType = "AVERAGE"
	CmafMpdManifestBandwidthTypeMax     CmafMpdManifestBandwidthType = "MAX"
)

// Values returns all known values for CmafMpdManifestBandwidthType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmafMpdManifestBandwidthType) Values() []CmafMpdManifestBandwidthType {
	return []CmafMpdManifestBandwidthType{
		"AVERAGE",
		"MAX",
	}
}

type CmafMpdProfile string

// Enum values for CmafMpdProfile
const (
	CmafMpdProfileMainProfile     CmafMpdProfile = "MAIN_PROFILE"
	CmafMpdProfileOnDemandProfile CmafMpdProfile = "ON_DEMAND_PROFILE"
)

// Values returns all known values for CmafMpdProfile. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmafMpdProfile) Values() []CmafMpdProfile {
	return []CmafMpdProfile{
		"MAIN_PROFILE",
		"ON_DEMAND_PROFILE",
	}
}

type CmafPtsOffsetHandlingForBFrames string

// Enum values for CmafPtsOffsetHandlingForBFrames
const (
	CmafPtsOffsetHandlingForBFramesZeroBased       CmafPtsOffsetHandlingForBFrames = "ZERO_BASED"
	CmafPtsOffsetHandlingForBFramesMatchInitialPts CmafPtsOffsetHandlingForBFrames = "MATCH_INITIAL_PTS"
)

// Values returns all known values for CmafPtsOffsetHandlingForBFrames. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmafPtsOffsetHandlingForBFrames) Values() []CmafPtsOffsetHandlingForBFrames {
	return []CmafPtsOffsetHandlingForBFrames{
		"ZERO_BASED",
		"MATCH_INITIAL_PTS",
	}
}

type CmafSegmentControl string

// Enum values for CmafSegmentControl
const (
	CmafSegmentControlSingleFile     CmafSegmentControl = "SINGLE_FILE"
	CmafSegmentControlSegmentedFiles CmafSegmentControl = "SEGMENTED_FILES"
)

// Values returns all known values for CmafSegmentControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmafSegmentControl) Values() []CmafSegmentControl {
	return []CmafSegmentControl{
		"SINGLE_FILE",
		"SEGMENTED_FILES",
	}
}

type CmafSegmentLengthControl string

// Enum values for CmafSegmentLengthControl
const (
	CmafSegmentLengthControlExact       CmafSegmentLengthControl = "EXACT"
	CmafSegmentLengthControlGopMultiple CmafSegmentLengthControl = "GOP_MULTIPLE"
	CmafSegmentLengthControlMatch       CmafSegmentLengthControl = "MATCH"
)

// Values returns all known values for CmafSegmentLengthControl. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmafSegmentLengthControl) Values() []CmafSegmentLengthControl {
	return []CmafSegmentLengthControl{
		"EXACT",
		"GOP_MULTIPLE",
		"MATCH",
	}
}

type CmafStreamInfResolution string

// Enum values for CmafStreamInfResolution
const (
	CmafStreamInfResolutionInclude CmafStreamInfResolution = "INCLUDE"
	CmafStreamInfResolutionExclude CmafStreamInfResolution = "EXCLUDE"
)

// Values returns all known values for CmafStreamInfResolution. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmafStreamInfResolution) Values() []CmafStreamInfResolution {
	return []CmafStreamInfResolution{
		"INCLUDE",
		"EXCLUDE",
	}
}

type CmafTargetDurationCompatibilityMode string

// Enum values for CmafTargetDurationCompatibilityMode
const (
	CmafTargetDurationCompatibilityModeLegacy        CmafTargetDurationCompatibilityMode = "LEGACY"
	CmafTargetDurationCompatibilityModeSpecCompliant CmafTargetDurationCompatibilityMode = "SPEC_COMPLIANT"
)

// Values returns all known values for CmafTargetDurationCompatibilityMode. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmafTargetDurationCompatibilityMode) Values() []CmafTargetDurationCompatibilityMode {
	return []CmafTargetDurationCompatibilityMode{
		"LEGACY",
		"SPEC_COMPLIANT",
	}
}

type CmafVideoCompositionOffsets string

// Enum values for CmafVideoCompositionOffsets
const (
	CmafVideoCompositionOffsetsSigned   CmafVideoCompositionOffsets = "SIGNED"
	CmafVideoCompositionOffsetsUnsigned CmafVideoCompositionOffsets = "UNSIGNED"
)

// Values returns all known values for CmafVideoCompositionOffsets. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmafVideoCompositionOffsets) Values() []CmafVideoCompositionOffsets {
	return []CmafVideoCompositionOffsets{
		"SIGNED",
		"UNSIGNED",
	}
}

type CmafWriteDASHManifest string

// Enum values for CmafWriteDASHManifest
const (
	CmafWriteDASHManifestDisabled CmafWriteDASHManifest = "DISABLED"
	CmafWriteDASHManifestEnabled  CmafWriteDASHManifest = "ENABLED"
)

// Values returns all known values for CmafWriteDASHManifest. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmafWriteDASHManifest) Values() []CmafWriteDASHManifest {
	return []CmafWriteDASHManifest{
		"DISABLED",
		"ENABLED",
	}
}

type CmafWriteHLSManifest string

// Enum values for CmafWriteHLSManifest
const (
	CmafWriteHLSManifestDisabled CmafWriteHLSManifest = "DISABLED"
	CmafWriteHLSManifestEnabled  CmafWriteHLSManifest = "ENABLED"
)

// Values returns all known values for CmafWriteHLSManifest. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmafWriteHLSManifest) Values() []CmafWriteHLSManifest {
	return []CmafWriteHLSManifest{
		"DISABLED",
		"ENABLED",
	}
}

type CmafWriteSegmentTimelineInRepresentation string

// Enum values for CmafWriteSegmentTimelineInRepresentation
const (
	CmafWriteSegmentTimelineInRepresentationEnabled  CmafWriteSegmentTimelineInRepresentation = "ENABLED"
	CmafWriteSegmentTimelineInRepresentationDisabled CmafWriteSegmentTimelineInRepresentation = "DISABLED"
)

// Values returns all known values for CmafWriteSegmentTimelineInRepresentation.
// Note that this can be expanded in the future, and so it is only as up to date as
// the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmafWriteSegmentTimelineInRepresentation) Values() []CmafWriteSegmentTimelineInRepresentation {
	return []CmafWriteSegmentTimelineInRepresentation{
		"ENABLED",
		"DISABLED",
	}
}

type CmfcAudioDuration string

// Enum values for CmfcAudioDuration
const (
	CmfcAudioDurationDefaultCodecDuration CmfcAudioDuration = "DEFAULT_CODEC_DURATION"
	CmfcAudioDurationMatchVideoDuration   CmfcAudioDuration = "MATCH_VIDEO_DURATION"
)

// Values returns all known values for CmfcAudioDuration. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmfcAudioDuration) Values() []CmfcAudioDuration {
	return []CmfcAudioDuration{
		"DEFAULT_CODEC_DURATION",
		"MATCH_VIDEO_DURATION",
	}
}

type CmfcAudioTrackType string

// Enum values for CmfcAudioTrackType
const (
	CmfcAudioTrackTypeAlternateAudioAutoSelectDefault CmfcAudioTrackType = "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT"
	CmfcAudioTrackTypeAlternateAudioAutoSelect        CmfcAudioTrackType = "ALTERNATE_AUDIO_AUTO_SELECT"
	CmfcAudioTrackTypeAlternateAudioNotAutoSelect     CmfcAudioTrackType = "ALTERNATE_AUDIO_NOT_AUTO_SELECT"
	CmfcAudioTrackTypeAudioOnlyVariantStream          CmfcAudioTrackType = "AUDIO_ONLY_VARIANT_STREAM"
)

// Values returns all known values for CmfcAudioTrackType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmfcAudioTrackType) Values() []CmfcAudioTrackType {
	return []CmfcAudioTrackType{
		"ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT",
		"ALTERNATE_AUDIO_AUTO_SELECT",
		"ALTERNATE_AUDIO_NOT_AUTO_SELECT",
		"AUDIO_ONLY_VARIANT_STREAM",
	}
}

type CmfcDescriptiveVideoServiceFlag string

// Enum values for CmfcDescriptiveVideoServiceFlag
const (
	CmfcDescriptiveVideoServiceFlagDontFlag CmfcDescriptiveVideoServiceFlag = "DONT_FLAG"
	CmfcDescriptiveVideoServiceFlagFlag     CmfcDescriptiveVideoServiceFlag = "FLAG"
)

// Values returns all known values for CmfcDescriptiveVideoServiceFlag. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmfcDescriptiveVideoServiceFlag) Values() []CmfcDescriptiveVideoServiceFlag {
	return []CmfcDescriptiveVideoServiceFlag{
		"DONT_FLAG",
		"FLAG",
	}
}

type CmfcIFrameOnlyManifest string

// Enum values for CmfcIFrameOnlyManifest
const (
	CmfcIFrameOnlyManifestInclude CmfcIFrameOnlyManifest = "INCLUDE"
	CmfcIFrameOnlyManifestExclude CmfcIFrameOnlyManifest = "EXCLUDE"
)

// Values returns all known values for CmfcIFrameOnlyManifest. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmfcIFrameOnlyManifest) Values() []CmfcIFrameOnlyManifest {
	return []CmfcIFrameOnlyManifest{
		"INCLUDE",
		"EXCLUDE",
	}
}

type CmfcKlvMetadata string

// Enum values for CmfcKlvMetadata
const (
	CmfcKlvMetadataPassthrough CmfcKlvMetadata = "PASSTHROUGH"
	CmfcKlvMetadataNone        CmfcKlvMetadata = "NONE"
)

// Values returns all known values for CmfcKlvMetadata. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmfcKlvMetadata) Values() []CmfcKlvMetadata {
	return []CmfcKlvMetadata{
		"PASSTHROUGH",
		"NONE",
	}
}

type CmfcManifestMetadataSignaling string

// Enum values for CmfcManifestMetadataSignaling
const (
	CmfcManifestMetadataSignalingEnabled  CmfcManifestMetadataSignaling = "ENABLED"
	CmfcManifestMetadataSignalingDisabled CmfcManifestMetadataSignaling = "DISABLED"
)

// Values returns all known values for CmfcManifestMetadataSignaling. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmfcManifestMetadataSignaling) Values() []CmfcManifestMetadataSignaling {
	return []CmfcManifestMetadataSignaling{
		"ENABLED",
		"DISABLED",
	}
}

type CmfcScte35Esam string

// Enum values for CmfcScte35Esam
const (
	CmfcScte35EsamInsert CmfcScte35Esam = "INSERT"
	CmfcScte35EsamNone   CmfcScte35Esam = "NONE"
)

// Values returns all known values for CmfcScte35Esam. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmfcScte35Esam) Values() []CmfcScte35Esam {
	return []CmfcScte35Esam{
		"INSERT",
		"NONE",
	}
}

type CmfcScte35Source string

// Enum values for CmfcScte35Source
const (
	CmfcScte35SourcePassthrough CmfcScte35Source = "PASSTHROUGH"
	CmfcScte35SourceNone        CmfcScte35Source = "NONE"
)

// Values returns all known values for CmfcScte35Source. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmfcScte35Source) Values() []CmfcScte35Source {
	return []CmfcScte35Source{
		"PASSTHROUGH",
		"NONE",
	}
}

type CmfcTimedMetadata string

// Enum values for CmfcTimedMetadata
const (
	CmfcTimedMetadataPassthrough CmfcTimedMetadata = "PASSTHROUGH"
	CmfcTimedMetadataNone        CmfcTimedMetadata = "NONE"
)

// Values returns all known values for CmfcTimedMetadata. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmfcTimedMetadata) Values() []CmfcTimedMetadata {
	return []CmfcTimedMetadata{
		"PASSTHROUGH",
		"NONE",
	}
}

type CmfcTimedMetadataBoxVersion string

// Enum values for CmfcTimedMetadataBoxVersion
const (
	CmfcTimedMetadataBoxVersionVersion0 CmfcTimedMetadataBoxVersion = "VERSION_0"
	CmfcTimedMetadataBoxVersionVersion1 CmfcTimedMetadataBoxVersion = "VERSION_1"
)

// Values returns all known values for CmfcTimedMetadataBoxVersion. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CmfcTimedMetadataBoxVersion) Values() []CmfcTimedMetadataBoxVersion {
	return []CmfcTimedMetadataBoxVersion{
		"VERSION_0",
		"VERSION_1",
	}
}

type Codec string

// Enum values for Codec
const (
	CodecUnknown Codec = "UNKNOWN"
	CodecAac     Codec = "AAC"
	CodecAc3     Codec = "AC3"
	CodecEac3    Codec = "EAC3"
	CodecFlac    Codec = "FLAC"
	CodecMp3     Codec = "MP3"
	CodecOpus    Codec = "OPUS"
	CodecPcm     Codec = "PCM"
	CodecVorbis  Codec = "VORBIS"
	CodecAv1     Codec = "AV1"
	CodecAvc     Codec = "AVC"
	CodecHevc    Codec = "HEVC"
	CodecMjpeg   Codec = "MJPEG"
	CodecMp4v    Codec = "MP4V"
	CodecMpeg2   Codec = "MPEG2"
	CodecProres  Codec = "PRORES"
	CodecTheora  Codec = "THEORA"
	CodecVp8     Codec = "VP8"
	CodecVp9     Codec = "VP9"
	CodecC608    Codec = "C608"
	CodecC708    Codec = "C708"
	CodecWebvtt  Codec = "WEBVTT"
)

// Values returns all known values for Codec. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Codec) Values() []Codec {
	return []Codec{
		"UNKNOWN",
		"AAC",
		"AC3",
		"EAC3",
		"FLAC",
		"MP3",
		"OPUS",
		"PCM",
		"VORBIS",
		"AV1",
		"AVC",
		"HEVC",
		"MJPEG",
		"MP4V",
		"MPEG2",
		"PRORES",
		"THEORA",
		"VP8",
		"VP9",
		"C608",
		"C708",
		"WEBVTT",
	}
}

type ColorMetadata string

// Enum values for ColorMetadata
const (
	ColorMetadataIgnore ColorMetadata = "IGNORE"
	ColorMetadataInsert ColorMetadata = "INSERT"
)

// Values returns all known values for ColorMetadata. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ColorMetadata) Values() []ColorMetadata {
	return []ColorMetadata{
		"IGNORE",
		"INSERT",
	}
}

type ColorPrimaries string

// Enum values for ColorPrimaries
const (
	ColorPrimariesItu709       ColorPrimaries = "ITU_709"
	ColorPrimariesUnspecified  ColorPrimaries = "UNSPECIFIED"
	ColorPrimariesReserved     ColorPrimaries = "RESERVED"
	ColorPrimariesItu470m      ColorPrimaries = "ITU_470M"
	ColorPrimariesItu470bg     ColorPrimaries = "ITU_470BG"
	ColorPrimariesSmpte170m    ColorPrimaries = "SMPTE_170M"
	ColorPrimariesSmpte240m    ColorPrimaries = "SMPTE_240M"
	ColorPrimariesGenericFilm  ColorPrimaries = "GENERIC_FILM"
	ColorPrimariesItu2020      ColorPrimaries = "ITU_2020"
	ColorPrimariesSmpte4281    ColorPrimaries = "SMPTE_428_1"
	ColorPrimariesSmpte4312    ColorPrimaries = "SMPTE_431_2"
	ColorPrimariesSmpteEg4321  ColorPrimaries = "SMPTE_EG_432_1"
	ColorPrimariesIpt          ColorPrimaries = "IPT"
	ColorPrimariesSmpte2067xyz ColorPrimaries = "SMPTE_2067XYZ"
	ColorPrimariesEbu3213E     ColorPrimaries = "EBU_3213_E"
	ColorPrimariesLast         ColorPrimaries = "LAST"
)

// Values returns all known values for ColorPrimaries. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ColorPrimaries) Values() []ColorPrimaries {
	return []ColorPrimaries{
		"ITU_709",
		"UNSPECIFIED",
		"RESERVED",
		"ITU_470M",
		"ITU_470BG",
		"SMPTE_170M",
		"SMPTE_240M",
		"GENERIC_FILM",
		"ITU_2020",
		"SMPTE_428_1",
		"SMPTE_431_2",
		"SMPTE_EG_432_1",
		"IPT",
		"SMPTE_2067XYZ",
		"EBU_3213_E",
		"LAST",
	}
}

type ColorSpace string

// Enum values for ColorSpace
const (
	ColorSpaceFollow   ColorSpace = "FOLLOW"
	ColorSpaceRec601   ColorSpace = "REC_601"
	ColorSpaceRec709   ColorSpace = "REC_709"
	ColorSpaceHdr10    ColorSpace = "HDR10"
	ColorSpaceHlg2020  ColorSpace = "HLG_2020"
	ColorSpaceP3dci    ColorSpace = "P3DCI"
	ColorSpaceP3d65Sdr ColorSpace = "P3D65_SDR"
	ColorSpaceP3d65Hdr ColorSpace = "P3D65_HDR"
)

// Values returns all known values for ColorSpace. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ColorSpace) Values() []ColorSpace {
	return []ColorSpace{
		"FOLLOW",
		"REC_601",
		"REC_709",
		"HDR10",
		"HLG_2020",
		"P3DCI",
		"P3D65_SDR",
		"P3D65_HDR",
	}
}

type ColorSpaceConversion string

// Enum values for ColorSpaceConversion
const (
	ColorSpaceConversionNone          ColorSpaceConversion = "NONE"
	ColorSpaceConversionForce601      ColorSpaceConversion = "FORCE_601"
	ColorSpaceConversionForce709      ColorSpaceConversion = "FORCE_709"
	ColorSpaceConversionForceHdr10    ColorSpaceConversion = "FORCE_HDR10"
	ColorSpaceConversionForceHlg2020  ColorSpaceConversion = "FORCE_HLG_2020"
	ColorSpaceConversionForceP3dci    ColorSpaceConversion = "FORCE_P3DCI"
	ColorSpaceConversionForceP3d65Sdr ColorSpaceConversion = "FORCE_P3D65_SDR"
	ColorSpaceConversionForceP3d65Hdr ColorSpaceConversion = "FORCE_P3D65_HDR"
)

// Values returns all known values for ColorSpaceConversion. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ColorSpaceConversion) Values() []ColorSpaceConversion {
	return []ColorSpaceConversion{
		"NONE",
		"FORCE_601",
		"FORCE_709",
		"FORCE_HDR10",
		"FORCE_HLG_2020",
		"FORCE_P3DCI",
		"FORCE_P3D65_SDR",
		"FORCE_P3D65_HDR",
	}
}

type ColorSpaceUsage string

// Enum values for ColorSpaceUsage
const (
	ColorSpaceUsageForce    ColorSpaceUsage = "FORCE"
	ColorSpaceUsageFallback ColorSpaceUsage = "FALLBACK"
)

// Values returns all known values for ColorSpaceUsage. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ColorSpaceUsage) Values() []ColorSpaceUsage {
	return []ColorSpaceUsage{
		"FORCE",
		"FALLBACK",
	}
}

type Commitment string

// Enum values for Commitment
const (
	CommitmentOneYear Commitment = "ONE_YEAR"
)

// Values returns all known values for Commitment. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Commitment) Values() []Commitment {
	return []Commitment{
		"ONE_YEAR",
	}
}

type ContainerType string

// Enum values for ContainerType
const (
	ContainerTypeF4v  ContainerType = "F4V"
	ContainerTypeGif  ContainerType = "GIF"
	ContainerTypeIsmv ContainerType = "ISMV"
	ContainerTypeM2ts ContainerType = "M2TS"
	ContainerTypeM3u8 ContainerType = "M3U8"
	ContainerTypeCmfc ContainerType = "CMFC"
	ContainerTypeMov  ContainerType = "MOV"
	ContainerTypeMp4  ContainerType = "MP4"
	ContainerTypeMpd  ContainerType = "MPD"
	ContainerTypeMxf  ContainerType = "MXF"
	ContainerTypeOgg  ContainerType = "OGG"
	ContainerTypeWebm ContainerType = "WEBM"
	ContainerTypeRaw  ContainerType = "RAW"
	ContainerTypeY4m  ContainerType = "Y4M"
)

// Values returns all known values for ContainerType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ContainerType) Values() []ContainerType {
	return []ContainerType{
		"F4V",
		"GIF",
		"ISMV",
		"M2TS",
		"M3U8",
		"CMFC",
		"MOV",
		"MP4",
		"MPD",
		"MXF",
		"OGG",
		"WEBM",
		"RAW",
		"Y4M",
	}
}

type CopyProtectionAction string

// Enum values for CopyProtectionAction
const (
	CopyProtectionActionPassthrough CopyProtectionAction = "PASSTHROUGH"
	CopyProtectionActionStrip       CopyProtectionAction = "STRIP"
)

// Values returns all known values for CopyProtectionAction. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (CopyProtectionAction) Values() []CopyProtectionAction {
	return []CopyProtectionAction{
		"PASSTHROUGH",
		"STRIP",
	}
}

type DashIsoGroupAudioChannelConfigSchemeIdUri string

// Enum values for DashIsoGroupAudioChannelConfigSchemeIdUri
const (
	DashIsoGroupAudioChannelConfigSchemeIdUriMpegChannelConfiguration  DashIsoGroupAudioChannelConfigSchemeIdUri = "MPEG_CHANNEL_CONFIGURATION"
	DashIsoGroupAudioChannelConfigSchemeIdUriDolbyChannelConfiguration DashIsoGroupAudioChannelConfigSchemeIdUri = "DOLBY_CHANNEL_CONFIGURATION"
)

// Values returns all known values for DashIsoGroupAudioChannelConfigSchemeIdUri.
// Note that this can be expanded in the future, and so it is only as up to date as
// the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DashIsoGroupAudioChannelConfigSchemeIdUri) Values() []DashIsoGroupAudioChannelConfigSchemeIdUri {
	return []DashIsoGroupAudioChannelConfigSchemeIdUri{
		"MPEG_CHANNEL_CONFIGURATION",
		"DOLBY_CHANNEL_CONFIGURATION",
	}
}

type DashIsoHbbtvCompliance string

// Enum values for DashIsoHbbtvCompliance
const (
	DashIsoHbbtvComplianceHbbtv15 DashIsoHbbtvCompliance = "HBBTV_1_5"
	DashIsoHbbtvComplianceNone    DashIsoHbbtvCompliance = "NONE"
)

// Values returns all known values for DashIsoHbbtvCompliance. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DashIsoHbbtvCompliance) Values() []DashIsoHbbtvCompliance {
	return []DashIsoHbbtvCompliance{
		"HBBTV_1_5",
		"NONE",
	}
}

type DashIsoImageBasedTrickPlay string

// Enum values for DashIsoImageBasedTrickPlay
const (
	DashIsoImageBasedTrickPlayNone                  DashIsoImageBasedTrickPlay = "NONE"
	DashIsoImageBasedTrickPlayThumbnail             DashIsoImageBasedTrickPlay = "THUMBNAIL"
	DashIsoImageBasedTrickPlayThumbnailAndFullframe DashIsoImageBasedTrickPlay = "THUMBNAIL_AND_FULLFRAME"
	DashIsoImageBasedTrickPlayAdvanced              DashIsoImageBasedTrickPlay = "ADVANCED"
)

// Values returns all known values for DashIsoImageBasedTrickPlay. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DashIsoImageBasedTrickPlay) Values() []DashIsoImageBasedTrickPlay {
	return []DashIsoImageBasedTrickPlay{
		"NONE",
		"THUMBNAIL",
		"THUMBNAIL_AND_FULLFRAME",
		"ADVANCED",
	}
}

type DashIsoIntervalCadence string

// Enum values for DashIsoIntervalCadence
const (
	DashIsoIntervalCadenceFollowIframe DashIsoIntervalCadence = "FOLLOW_IFRAME"
	DashIsoIntervalCadenceFollowCustom DashIsoIntervalCadence = "FOLLOW_CUSTOM"
)

// Values returns all known values for DashIsoIntervalCadence. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DashIsoIntervalCadence) Values() []DashIsoIntervalCadence {
	return []DashIsoIntervalCadence{
		"FOLLOW_IFRAME",
		"FOLLOW_CUSTOM",
	}
}

type DashIsoMpdManifestBandwidthType string

// Enum values for DashIsoMpdManifestBandwidthType
const (
	DashIsoMpdManifestBandwidthTypeAverage DashIsoMpdManifestBandwidthType = "AVERAGE"
	DashIsoMpdManifestBandwidthTypeMax     DashIsoMpdManifestBandwidthType = "MAX"
)

// Values returns all known values for DashIsoMpdManifestBandwidthType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DashIsoMpdManifestBandwidthType) Values() []DashIsoMpdManifestBandwidthType {
	return []DashIsoMpdManifestBandwidthType{
		"AVERAGE",
		"MAX",
	}
}

type DashIsoMpdProfile string

// Enum values for DashIsoMpdProfile
const (
	DashIsoMpdProfileMainProfile     DashIsoMpdProfile = "MAIN_PROFILE"
	DashIsoMpdProfileOnDemandProfile DashIsoMpdProfile = "ON_DEMAND_PROFILE"
)

// Values returns all known values for DashIsoMpdProfile. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DashIsoMpdProfile) Values() []DashIsoMpdProfile {
	return []DashIsoMpdProfile{
		"MAIN_PROFILE",
		"ON_DEMAND_PROFILE",
	}
}

type DashIsoPlaybackDeviceCompatibility string

// Enum values for DashIsoPlaybackDeviceCompatibility
const (
	DashIsoPlaybackDeviceCompatibilityCencV1         DashIsoPlaybackDeviceCompatibility = "CENC_V1"
	DashIsoPlaybackDeviceCompatibilityUnencryptedSei DashIsoPlaybackDeviceCompatibility = "UNENCRYPTED_SEI"
)

// Values returns all known values for DashIsoPlaybackDeviceCompatibility. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DashIsoPlaybackDeviceCompatibility) Values() []DashIsoPlaybackDeviceCompatibility {
	return []DashIsoPlaybackDeviceCompatibility{
		"CENC_V1",
		"UNENCRYPTED_SEI",
	}
}

type DashIsoPtsOffsetHandlingForBFrames string

// Enum values for DashIsoPtsOffsetHandlingForBFrames
const (
	DashIsoPtsOffsetHandlingForBFramesZeroBased       DashIsoPtsOffsetHandlingForBFrames = "ZERO_BASED"
	DashIsoPtsOffsetHandlingForBFramesMatchInitialPts DashIsoPtsOffsetHandlingForBFrames = "MATCH_INITIAL_PTS"
)

// Values returns all known values for DashIsoPtsOffsetHandlingForBFrames. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DashIsoPtsOffsetHandlingForBFrames) Values() []DashIsoPtsOffsetHandlingForBFrames {
	return []DashIsoPtsOffsetHandlingForBFrames{
		"ZERO_BASED",
		"MATCH_INITIAL_PTS",
	}
}

type DashIsoSegmentControl string

// Enum values for DashIsoSegmentControl
const (
	DashIsoSegmentControlSingleFile     DashIsoSegmentControl = "SINGLE_FILE"
	DashIsoSegmentControlSegmentedFiles DashIsoSegmentControl = "SEGMENTED_FILES"
)

// Values returns all known values for DashIsoSegmentControl. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DashIsoSegmentControl) Values() []DashIsoSegmentControl {
	return []DashIsoSegmentControl{
		"SINGLE_FILE",
		"SEGMENTED_FILES",
	}
}

type DashIsoSegmentLengthControl string

// Enum values for DashIsoSegmentLengthControl
const (
	DashIsoSegmentLengthControlExact       DashIsoSegmentLengthControl = "EXACT"
	DashIsoSegmentLengthControlGopMultiple DashIsoSegmentLengthControl = "GOP_MULTIPLE"
	DashIsoSegmentLengthControlMatch       DashIsoSegmentLengthControl = "MATCH"
)

// Values returns all known values for DashIsoSegmentLengthControl. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DashIsoSegmentLengthControl) Values() []DashIsoSegmentLengthControl {
	return []DashIsoSegmentLengthControl{
		"EXACT",
		"GOP_MULTIPLE",
		"MATCH",
	}
}

type DashIsoVideoCompositionOffsets string

// Enum values for DashIsoVideoCompositionOffsets
const (
	DashIsoVideoCompositionOffsetsSigned   DashIsoVideoCompositionOffsets = "SIGNED"
	DashIsoVideoCompositionOffsetsUnsigned DashIsoVideoCompositionOffsets = "UNSIGNED"
)

// Values returns all known values for DashIsoVideoCompositionOffsets. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DashIsoVideoCompositionOffsets) Values() []DashIsoVideoCompositionOffsets {
	return []DashIsoVideoCompositionOffsets{
		"SIGNED",
		"UNSIGNED",
	}
}

type DashIsoWriteSegmentTimelineInRepresentation string

// Enum values for DashIsoWriteSegmentTimelineInRepresentation
const (
	DashIsoWriteSegmentTimelineInRepresentationEnabled  DashIsoWriteSegmentTimelineInRepresentation = "ENABLED"
	DashIsoWriteSegmentTimelineInRepresentationDisabled DashIsoWriteSegmentTimelineInRepresentation = "DISABLED"
)

// Values returns all known values for
// DashIsoWriteSegmentTimelineInRepresentation. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DashIsoWriteSegmentTimelineInRepresentation) Values() []DashIsoWriteSegmentTimelineInRepresentation {
	return []DashIsoWriteSegmentTimelineInRepresentation{
		"ENABLED",
		"DISABLED",
	}
}

type DashManifestStyle string

// Enum values for DashManifestStyle
const (
	DashManifestStyleBasic    DashManifestStyle = "BASIC"
	DashManifestStyleCompact  DashManifestStyle = "COMPACT"
	DashManifestStyleDistinct DashManifestStyle = "DISTINCT"
)

// Values returns all known values for DashManifestStyle. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DashManifestStyle) Values() []DashManifestStyle {
	return []DashManifestStyle{
		"BASIC",
		"COMPACT",
		"DISTINCT",
	}
}

type DecryptionMode string

// Enum values for DecryptionMode
const (
	DecryptionModeAesCtr DecryptionMode = "AES_CTR"
	DecryptionModeAesCbc DecryptionMode = "AES_CBC"
	DecryptionModeAesGcm DecryptionMode = "AES_GCM"
)

// Values returns all known values for DecryptionMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DecryptionMode) Values() []DecryptionMode {
	return []DecryptionMode{
		"AES_CTR",
		"AES_CBC",
		"AES_GCM",
	}
}

type DeinterlaceAlgorithm string

// Enum values for DeinterlaceAlgorithm
const (
	DeinterlaceAlgorithmInterpolate         DeinterlaceAlgorithm = "INTERPOLATE"
	DeinterlaceAlgorithmInterpolateTicker   DeinterlaceAlgorithm = "INTERPOLATE_TICKER"
	DeinterlaceAlgorithmBlend               DeinterlaceAlgorithm = "BLEND"
	DeinterlaceAlgorithmBlendTicker         DeinterlaceAlgorithm = "BLEND_TICKER"
	DeinterlaceAlgorithmLinearInterpolation DeinterlaceAlgorithm = "LINEAR_INTERPOLATION"
)

// Values returns all known values for DeinterlaceAlgorithm. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DeinterlaceAlgorithm) Values() []DeinterlaceAlgorithm {
	return []DeinterlaceAlgorithm{
		"INTERPOLATE",
		"INTERPOLATE_TICKER",
		"BLEND",
		"BLEND_TICKER",
		"LINEAR_INTERPOLATION",
	}
}

type DeinterlacerControl string

// Enum values for DeinterlacerControl
const (
	DeinterlacerControlForceAllFrames DeinterlacerControl = "FORCE_ALL_FRAMES"
	DeinterlacerControlNormal         DeinterlacerControl = "NORMAL"
)

// Values returns all known values for DeinterlacerControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DeinterlacerControl) Values() []DeinterlacerControl {
	return []DeinterlacerControl{
		"FORCE_ALL_FRAMES",
		"NORMAL",
	}
}

type DeinterlacerMode string

// Enum values for DeinterlacerMode
const (
	DeinterlacerModeDeinterlace     DeinterlacerMode = "DEINTERLACE"
	DeinterlacerModeInverseTelecine DeinterlacerMode = "INVERSE_TELECINE"
	DeinterlacerModeAdaptive        DeinterlacerMode = "ADAPTIVE"
)

// Values returns all known values for DeinterlacerMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DeinterlacerMode) Values() []DeinterlacerMode {
	return []DeinterlacerMode{
		"DEINTERLACE",
		"INVERSE_TELECINE",
		"ADAPTIVE",
	}
}

type DescribeEndpointsMode string

// Enum values for DescribeEndpointsMode
const (
	DescribeEndpointsModeDefault DescribeEndpointsMode = "DEFAULT"
	DescribeEndpointsModeGetOnly DescribeEndpointsMode = "GET_ONLY"
)

// Values returns all known values for DescribeEndpointsMode. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DescribeEndpointsMode) Values() []DescribeEndpointsMode {
	return []DescribeEndpointsMode{
		"DEFAULT",
		"GET_ONLY",
	}
}

type DolbyVisionLevel6Mode string

// Enum values for DolbyVisionLevel6Mode
const (
	DolbyVisionLevel6ModePassthrough DolbyVisionLevel6Mode = "PASSTHROUGH"
	DolbyVisionLevel6ModeRecalculate DolbyVisionLevel6Mode = "RECALCULATE"
	DolbyVisionLevel6ModeSpecify     DolbyVisionLevel6Mode = "SPECIFY"
)

// Values returns all known values for DolbyVisionLevel6Mode. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DolbyVisionLevel6Mode) Values() []DolbyVisionLevel6Mode {
	return []DolbyVisionLevel6Mode{
		"PASSTHROUGH",
		"RECALCULATE",
		"SPECIFY",
	}
}

type DolbyVisionMapping string

// Enum values for DolbyVisionMapping
const (
	DolbyVisionMappingHdr10Nomap DolbyVisionMapping = "HDR10_NOMAP"
	DolbyVisionMappingHdr101000  DolbyVisionMapping = "HDR10_1000"
)

// Values returns all known values for DolbyVisionMapping. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DolbyVisionMapping) Values() []DolbyVisionMapping {
	return []DolbyVisionMapping{
		"HDR10_NOMAP",
		"HDR10_1000",
	}
}

type DolbyVisionProfile string

// Enum values for DolbyVisionProfile
const (
	DolbyVisionProfileProfile5  DolbyVisionProfile = "PROFILE_5"
	DolbyVisionProfileProfile81 DolbyVisionProfile = "PROFILE_8_1"
)

// Values returns all known values for DolbyVisionProfile. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DolbyVisionProfile) Values() []DolbyVisionProfile {
	return []DolbyVisionProfile{
		"PROFILE_5",
		"PROFILE_8_1",
	}
}

type DropFrameTimecode string

// Enum values for DropFrameTimecode
const (
	DropFrameTimecodeDisabled DropFrameTimecode = "DISABLED"
	DropFrameTimecodeEnabled  DropFrameTimecode = "ENABLED"
)

// Values returns all known values for DropFrameTimecode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DropFrameTimecode) Values() []DropFrameTimecode {
	return []DropFrameTimecode{
		"DISABLED",
		"ENABLED",
	}
}

type DvbddsHandling string

// Enum values for DvbddsHandling
const (
	DvbddsHandlingNone            DvbddsHandling = "NONE"
	DvbddsHandlingSpecified       DvbddsHandling = "SPECIFIED"
	DvbddsHandlingNoDisplayWindow DvbddsHandling = "NO_DISPLAY_WINDOW"
)

// Values returns all known values for DvbddsHandling. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DvbddsHandling) Values() []DvbddsHandling {
	return []DvbddsHandling{
		"NONE",
		"SPECIFIED",
		"NO_DISPLAY_WINDOW",
	}
}

type DvbSubSubtitleFallbackFont string

// Enum values for DvbSubSubtitleFallbackFont
const (
	DvbSubSubtitleFallbackFontBestMatch             DvbSubSubtitleFallbackFont = "BEST_MATCH"
	DvbSubSubtitleFallbackFontMonospacedSansserif   DvbSubSubtitleFallbackFont = "MONOSPACED_SANSSERIF"
	DvbSubSubtitleFallbackFontMonospacedSerif       DvbSubSubtitleFallbackFont = "MONOSPACED_SERIF"
	DvbSubSubtitleFallbackFontProportionalSansserif DvbSubSubtitleFallbackFont = "PROPORTIONAL_SANSSERIF"
	DvbSubSubtitleFallbackFontProportionalSerif     DvbSubSubtitleFallbackFont = "PROPORTIONAL_SERIF"
)

// Values returns all known values for DvbSubSubtitleFallbackFont. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DvbSubSubtitleFallbackFont) Values() []DvbSubSubtitleFallbackFont {
	return []DvbSubSubtitleFallbackFont{
		"BEST_MATCH",
		"MONOSPACED_SANSSERIF",
		"MONOSPACED_SERIF",
		"PROPORTIONAL_SANSSERIF",
		"PROPORTIONAL_SERIF",
	}
}

type DvbSubtitleAlignment string

// Enum values for DvbSubtitleAlignment
const (
	DvbSubtitleAlignmentCentered DvbSubtitleAlignment = "CENTERED"
	DvbSubtitleAlignmentLeft     DvbSubtitleAlignment = "LEFT"
	DvbSubtitleAlignmentAuto     DvbSubtitleAlignment = "AUTO"
)

// Values returns all known values for DvbSubtitleAlignment. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DvbSubtitleAlignment) Values() []DvbSubtitleAlignment {
	return []DvbSubtitleAlignment{
		"CENTERED",
		"LEFT",
		"AUTO",
	}
}

type DvbSubtitleApplyFontColor string

// Enum values for DvbSubtitleApplyFontColor
const (
	DvbSubtitleApplyFontColorWhiteTextOnly DvbSubtitleApplyFontColor = "WHITE_TEXT_ONLY"
	DvbSubtitleApplyFontColorAllText       DvbSubtitleApplyFontColor = "ALL_TEXT"
)

// Values returns all known values for DvbSubtitleApplyFontColor. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DvbSubtitleApplyFontColor) Values() []DvbSubtitleApplyFontColor {
	return []DvbSubtitleApplyFontColor{
		"WHITE_TEXT_ONLY",
		"ALL_TEXT",
	}
}

type DvbSubtitleBackgroundColor string

// Enum values for DvbSubtitleBackgroundColor
const (
	DvbSubtitleBackgroundColorNone  DvbSubtitleBackgroundColor = "NONE"
	DvbSubtitleBackgroundColorBlack DvbSubtitleBackgroundColor = "BLACK"
	DvbSubtitleBackgroundColorWhite DvbSubtitleBackgroundColor = "WHITE"
	DvbSubtitleBackgroundColorAuto  DvbSubtitleBackgroundColor = "AUTO"
)

// Values returns all known values for DvbSubtitleBackgroundColor. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DvbSubtitleBackgroundColor) Values() []DvbSubtitleBackgroundColor {
	return []DvbSubtitleBackgroundColor{
		"NONE",
		"BLACK",
		"WHITE",
		"AUTO",
	}
}

type DvbSubtitleFontColor string

// Enum values for DvbSubtitleFontColor
const (
	DvbSubtitleFontColorWhite  DvbSubtitleFontColor = "WHITE"
	DvbSubtitleFontColorBlack  DvbSubtitleFontColor = "BLACK"
	DvbSubtitleFontColorYellow DvbSubtitleFontColor = "YELLOW"
	DvbSubtitleFontColorRed    DvbSubtitleFontColor = "RED"
	DvbSubtitleFontColorGreen  DvbSubtitleFontColor = "GREEN"
	DvbSubtitleFontColorBlue   DvbSubtitleFontColor = "BLUE"
	DvbSubtitleFontColorHex    DvbSubtitleFontColor = "HEX"
	DvbSubtitleFontColorAuto   DvbSubtitleFontColor = "AUTO"
)

// Values returns all known values for DvbSubtitleFontColor. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DvbSubtitleFontColor) Values() []DvbSubtitleFontColor {
	return []DvbSubtitleFontColor{
		"WHITE",
		"BLACK",
		"YELLOW",
		"RED",
		"GREEN",
		"BLUE",
		"HEX",
		"AUTO",
	}
}

type DvbSubtitleOutlineColor string

// Enum values for DvbSubtitleOutlineColor
const (
	DvbSubtitleOutlineColorBlack  DvbSubtitleOutlineColor = "BLACK"
	DvbSubtitleOutlineColorWhite  DvbSubtitleOutlineColor = "WHITE"
	DvbSubtitleOutlineColorYellow DvbSubtitleOutlineColor = "YELLOW"
	DvbSubtitleOutlineColorRed    DvbSubtitleOutlineColor = "RED"
	DvbSubtitleOutlineColorGreen  DvbSubtitleOutlineColor = "GREEN"
	DvbSubtitleOutlineColorBlue   DvbSubtitleOutlineColor = "BLUE"
	DvbSubtitleOutlineColorAuto   DvbSubtitleOutlineColor = "AUTO"
)

// Values returns all known values for DvbSubtitleOutlineColor. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DvbSubtitleOutlineColor) Values() []DvbSubtitleOutlineColor {
	return []DvbSubtitleOutlineColor{
		"BLACK",
		"WHITE",
		"YELLOW",
		"RED",
		"GREEN",
		"BLUE",
		"AUTO",
	}
}

type DvbSubtitleShadowColor string

// Enum values for DvbSubtitleShadowColor
const (
	DvbSubtitleShadowColorNone  DvbSubtitleShadowColor = "NONE"
	DvbSubtitleShadowColorBlack DvbSubtitleShadowColor = "BLACK"
	DvbSubtitleShadowColorWhite DvbSubtitleShadowColor = "WHITE"
	DvbSubtitleShadowColorAuto  DvbSubtitleShadowColor = "AUTO"
)

// Values returns all known values for DvbSubtitleShadowColor. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DvbSubtitleShadowColor) Values() []DvbSubtitleShadowColor {
	return []DvbSubtitleShadowColor{
		"NONE",
		"BLACK",
		"WHITE",
		"AUTO",
	}
}

type DvbSubtitleStylePassthrough string

// Enum values for DvbSubtitleStylePassthrough
const (
	DvbSubtitleStylePassthroughEnabled  DvbSubtitleStylePassthrough = "ENABLED"
	DvbSubtitleStylePassthroughDisabled DvbSubtitleStylePassthrough = "DISABLED"
)

// Values returns all known values for DvbSubtitleStylePassthrough. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DvbSubtitleStylePassthrough) Values() []DvbSubtitleStylePassthrough {
	return []DvbSubtitleStylePassthrough{
		"ENABLED",
		"DISABLED",
	}
}

type DvbSubtitleTeletextSpacing string

// Enum values for DvbSubtitleTeletextSpacing
const (
	DvbSubtitleTeletextSpacingFixedGrid    DvbSubtitleTeletextSpacing = "FIXED_GRID"
	DvbSubtitleTeletextSpacingProportional DvbSubtitleTeletextSpacing = "PROPORTIONAL"
	DvbSubtitleTeletextSpacingAuto         DvbSubtitleTeletextSpacing = "AUTO"
)

// Values returns all known values for DvbSubtitleTeletextSpacing. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DvbSubtitleTeletextSpacing) Values() []DvbSubtitleTeletextSpacing {
	return []DvbSubtitleTeletextSpacing{
		"FIXED_GRID",
		"PROPORTIONAL",
		"AUTO",
	}
}

type DvbSubtitlingType string

// Enum values for DvbSubtitlingType
const (
	DvbSubtitlingTypeHearingImpaired DvbSubtitlingType = "HEARING_IMPAIRED"
	DvbSubtitlingTypeStandard        DvbSubtitlingType = "STANDARD"
)

// Values returns all known values for DvbSubtitlingType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DvbSubtitlingType) Values() []DvbSubtitlingType {
	return []DvbSubtitlingType{
		"HEARING_IMPAIRED",
		"STANDARD",
	}
}

type DynamicAudioSelectorType string

// Enum values for DynamicAudioSelectorType
const (
	DynamicAudioSelectorTypeAllTracks    DynamicAudioSelectorType = "ALL_TRACKS"
	DynamicAudioSelectorTypeLanguageCode DynamicAudioSelectorType = "LANGUAGE_CODE"
)

// Values returns all known values for DynamicAudioSelectorType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DynamicAudioSelectorType) Values() []DynamicAudioSelectorType {
	return []DynamicAudioSelectorType{
		"ALL_TRACKS",
		"LANGUAGE_CODE",
	}
}

type Eac3AtmosBitstreamMode string

// Enum values for Eac3AtmosBitstreamMode
const (
	Eac3AtmosBitstreamModeCompleteMain Eac3AtmosBitstreamMode = "COMPLETE_MAIN"
)

// Values returns all known values for Eac3AtmosBitstreamMode. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Eac3AtmosBitstreamMode) Values() []Eac3AtmosBitstreamMode {
	return []Eac3AtmosBitstreamMode{
		"COMPLETE_MAIN",
	}
}

type Eac3AtmosCodingMode string

// Enum values for Eac3AtmosCodingMode
const (
	Eac3AtmosCodingModeCodingModeAuto Eac3AtmosCodingMode = "CODING_MODE_AUTO"
	Eac3AtmosCodingModeCodingMode514  Eac3AtmosCodingMode = "CODING_MODE_5_1_4"
	Eac3AtmosCodingModeCodingMode714  Eac3AtmosCodingMode = "CODING_MODE_7_1_4"
	Eac3AtmosCodingModeCodingMode916  Eac3AtmosCodingMode = "CODING_MODE_9_1_6"
)

// Values returns all known values for Eac3AtmosCodingMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Eac3AtmosCodingMode) Values() []Eac3AtmosCodingMode {
	return []Eac3AtmosCodingMode{
		"CODING_MODE_AUTO",
		"CODING_MODE_5_1_4",
		"CODING_MODE_7_1_4",
		"CODING_MODE_9_1_6",
	}
}

type Eac3AtmosDialogueIntelligence string

// Enum values for Eac3AtmosDialogueIntelligence
const (
	Eac3AtmosDialogueIntelligenceEnabled  Eac3AtmosDialogueIntelligence = "ENABLED"
	Eac3AtmosDialogueIntelligenceDisabled Eac3AtmosDialogueIntelligence = "DISABLED"
)

// Values returns all known values for Eac3AtmosDialogueIntelligence. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Eac3AtmosDialogueIntelligence) Values() []Eac3AtmosDialogueIntelligence {
	return []Eac3AtmosDialogueIntelligence{
		"ENABLED",
		"DISABLED",
	}
}

type Eac3AtmosDownmixControl string

// Enum values for Eac3AtmosDownmixControl
const (
	Eac3AtmosDownmixControlSpecified            Eac3AtmosDownmixControl = "SPECIFIED"
	Eac3AtmosDownmixControlInitializeFromSource Eac3AtmosDownmixControl = "INITIALIZE_FROM_SOURCE"
)

// Values returns all known values for Eac3AtmosDownmixControl. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Eac3AtmosDownmixControl) Values() []Eac3AtmosDownmixControl {
	return []Eac3AtmosDownmixControl{
		"SPECIFIED",
		"INITIALIZE_FROM_SOURCE",
	}
}

type Eac3AtmosDynamicRangeCompressionLine string

// Enum values for Eac3AtmosDynamicRangeCompressionLine
const (
	Eac3AtmosDynamicRangeCompressionLineNone          Eac3AtmosDynamicRangeCompressionLine = "NONE"
	Eac3AtmosDynamicRangeCompressionLineFilmStandard  Eac3AtmosDynamicRangeCompressionLine = "FILM_STANDARD"
	Eac3AtmosDynamicRangeCompressionLineFilmLight     Eac3AtmosDynamicRangeCompressionLine = "FILM_LIGHT"
	Eac3AtmosDynamicRangeCompressionLineMusicStandard Eac3AtmosDynamicRangeCompressionLine = "MUSIC_STANDARD"
	Eac3AtmosDynamicRangeCompressionLineMusicLight    Eac3AtmosDynamicRangeCompressionLine = "MUSIC_LIGHT"
	Eac3AtmosDynamicRangeCompressionLineSpeech        Eac3AtmosDynamicRangeCompressionLine = "SPEECH"
)

// Values returns all known values for Eac3AtmosDynamicRangeCompressionLine. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Eac3AtmosDynamicRangeCompressionLine) Values() []Eac3AtmosDynamicRangeCompressionLine {
	return []Eac3AtmosDynamicRangeCompressionLine{
		"NONE",
		"FILM_STANDARD",
		"FILM_LIGHT",
		"MUSIC_STANDARD",
		"MUSIC_LIGHT",
		"SPEECH",
	}
}

type Eac3AtmosDynamicRangeCompressionRf string

// Enum values for Eac3AtmosDynamicRangeCompressionRf
const (
	Eac3AtmosDynamicRangeCompressionRfNone          Eac3AtmosDynamicRangeCompressionRf = "NONE"
	Eac3AtmosDynamicRangeCompressionRfFilmStandard  Eac3AtmosDynamicRangeCompressionRf = "FILM_STANDARD"
	Eac3AtmosDynamicRangeCompressionRfFilmLight     Eac3AtmosDynamicRangeCompressionRf = "FILM_LIGHT"
	Eac3AtmosDynamicRangeCompressionRfMusicStandard Eac3AtmosDynamicRangeCompressionRf = "MUSIC_STANDARD"
	Eac3AtmosDynamicRangeCompressionRfMusicLight    Eac3AtmosDynamicRangeCompressionRf = "MUSIC_LIGHT"
	Eac3AtmosDynamicRangeCompressionRfSpeech        Eac3AtmosDynamicRangeCompressionRf = "SPEECH"
)

// Values returns all known values for Eac3AtmosDynamicRangeCompressionRf. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Eac3AtmosDynamicRangeCompressionRf) Values() []Eac3AtmosDynamicRangeCompressionRf {
	return []Eac3AtmosDynamicRangeCompressionRf{
		"NONE",
		"FILM_STANDARD",
		"FILM_LIGHT",
		"MUSIC_STANDARD",
		"MUSIC_LIGHT",
		"SPEECH",
	}
}

type Eac3AtmosDynamicRangeControl string

// Enum values for Eac3AtmosDynamicRangeControl
const (
	Eac3AtmosDynamicRangeControlSpecified            Eac3AtmosDynamicRangeControl = "SPECIFIED"
	Eac3AtmosDynamicRangeControlInitializeFromSource Eac3AtmosDynamicRangeControl = "INITIALIZE_FROM_SOURCE"
)

// Values returns all known values for Eac3AtmosDynamicRangeControl. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Eac3AtmosDynamicRangeControl) Values() []Eac3AtmosDynamicRangeControl {
	return []Eac3AtmosDynamicRangeControl{
		"SPECIFIED",
		"INITIALIZE_FROM_SOURCE",
	}
}

type Eac3AtmosMeteringMode string

// Enum values for Eac3AtmosMeteringMode
const (
	Eac3AtmosMeteringModeLeqA       Eac3AtmosMeteringMode = "LEQ_A"
	Eac3AtmosMeteringModeItuBs17701 Eac3AtmosMeteringMode = "ITU_BS_1770_1"
	Eac3AtmosMeteringModeItuBs17702 Eac3AtmosMeteringMode = "ITU_BS_1770_2"
	Eac3AtmosMeteringModeItuBs17703 Eac3AtmosMeteringMode = "ITU_BS_1770_3"
	Eac3AtmosMeteringModeItuBs17704 Eac3AtmosMeteringMode = "ITU_BS_1770_4"
)

// Values returns all known values for Eac3AtmosMeteringMode. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Eac3AtmosMeteringMode) Values() []Eac3AtmosMeteringMode {
	return []Eac3AtmosMeteringMode{
		"LEQ_A",
		"ITU_BS_1770_1",
		"ITU_BS_1770_2",
		"ITU_BS_1770_3",
		"ITU_BS_1770_4",
	}
}

type Eac3AtmosStereoDownmix string

// Enum values for Eac3AtmosStereoDownmix
const (
	Eac3AtmosStereoDownmixNotIndicated Eac3AtmosStereoDownmix = "NOT_INDICATED"
	Eac3AtmosStereoDownmixStereo       Eac3AtmosStereoDownmix = "STEREO"
	Eac3AtmosStereoDownmixSurround     Eac3AtmosStereoDownmix = "SURROUND"
	Eac3AtmosStereoDownmixDpl2         Eac3AtmosStereoDownmix = "DPL2"
)

// Values returns all known values for Eac3AtmosStereoDownmix. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Eac3AtmosStereoDownmix) Values() []Eac3AtmosStereoDownmix {
	return []Eac3AtmosStereoDownmix{
		"NOT_INDICATED",
		"STEREO",
		"SURROUND",
		"DPL2",
	}
}

type Eac3AtmosSurroundExMode string

// Enum values for Eac3AtmosSurroundExMode
const (
	Eac3AtmosSurroundExModeNotIndicated Eac3AtmosSurroundExMode = "NOT_INDICATED"
	Eac3AtmosSurroundExModeEnabled      Eac3AtmosSurroundExMode = "ENABLED"
	Eac3AtmosSurroundExModeDisabled     Eac3AtmosSurroundExMode = "DISABLED"
)

// Values returns all known values for Eac3AtmosSurroundExMode. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Eac3AtmosSurroundExMode) Values() []Eac3AtmosSurroundExMode {
	return []Eac3AtmosSurroundExMode{
		"NOT_INDICATED",
		"ENABLED",
		"DISABLED",
	}
}

type Eac3AttenuationControl string

// Enum values for Eac3AttenuationControl
const (
	Eac3AttenuationControlAttenuate3Db Eac3AttenuationControl = "ATTENUATE_3_DB"
	Eac3AttenuationControlNone         Eac3AttenuationControl = "NONE"
)

// Values returns all known values for Eac3AttenuationControl. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Eac3AttenuationControl) Values() []Eac3AttenuationControl {
	return []Eac3AttenuationControl{
		"ATTENUATE_3_DB",
		"NONE",
	}
}

type Eac3BitstreamMode string

// Enum values for Eac3BitstreamMode
const (
	Eac3BitstreamModeCompleteMain     Eac3BitstreamMode = "COMPLETE_MAIN"
	Eac3BitstreamModeCommentary       Eac3BitstreamMode = "COMMENTARY"
	Eac3BitstreamModeEmergency        Eac3BitstreamMode = "EMERGENCY"
	Eac3BitstreamModeHearingImpaired  Eac3BitstreamMode = "HEARING_IMPAIRED"
	Eac3BitstreamModeVisuallyImpaired Eac3BitstreamMode = "VISUALLY_IMPAIRED"
)

// Values returns all known values for Eac3BitstreamMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Eac3BitstreamMode) Values() []Eac3BitstreamMode {
	return []Eac3BitstreamMode{
		"COMPLETE_MAIN",
		"COMMENTARY",
		"EMERGENCY",
		"HEARING_IMPAIRED",
		"VISUALLY_IMPAIRED",
	}
}

type Eac3CodingMode string

// Enum values for Eac3CodingMode
const (
	Eac3CodingModeCodingMode10 Eac3CodingMode = "CODING_MODE_1_0"
	Eac3CodingModeCodingMode20 Eac3CodingMode = "CODING_MODE_2_0"
	Eac3CodingModeCodingMode32 Eac3CodingMode = "CODING_MODE_3_2"
)

// Values returns all known values for Eac3CodingMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Eac3CodingMode) Values() []Eac3CodingMode {
	return []Eac3CodingMode{
		"CODING_MODE_1_0",
		"CODING_MODE_2_0",
		"CODING_MODE_3_2",
	}
}

type Eac3DcFilter string

// Enum values for Eac3DcFilter
const (
	Eac3DcFilterEnabled  Eac3DcFilter = "ENABLED"
	Eac3DcFilterDisabled Eac3DcFilter = "DISABLED"
)

// Values returns all known values for Eac3DcFilter. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Eac3DcFilter) Values() []Eac3DcFilter {
	return []Eac3DcFilter{
		"ENABLED",
		"DISABLED",
	}
}

type Eac3DynamicRangeCompressionLine string

// Enum values for Eac3DynamicRangeCompressionLine
const (
	Eac3DynamicRangeCompressionLineNone          Eac3DynamicRangeCompressionLine = "NONE"
	Eac3DynamicRangeCompressionLineFilmStandard  Eac3DynamicRangeCompressionLine = "FILM_STANDARD"
	Eac3DynamicRangeCompressionLineFilmLight     Eac3DynamicRangeCompressionLine = "FILM_LIGHT"
	Eac3DynamicRangeCompressionLineMusicStandard Eac3DynamicRangeCompressionLine = "MUSIC_STANDARD"
	Eac3DynamicRangeCompressionLineMusicLight    Eac3DynamicRangeCompressionLine = "MUSIC_LIGHT"
	Eac3DynamicRangeCompressionLineSpeech        Eac3DynamicRangeCompressionLine = "SPEECH"
)

// Values returns all known values for Eac3DynamicRangeCompressionLine. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Eac3DynamicRangeCompressionLine) Values() []Eac3DynamicRangeCompressionLine {
	return []Eac3DynamicRangeCompressionLine{
		"NONE",
		"FILM_STANDARD",
		"FILM_LIGHT",
		"MUSIC_STANDARD",
		"MUSIC_LIGHT",
		"SPEECH",
	}
}

type Eac3DynamicRangeCompressionRf string

// Enum values for Eac3DynamicRangeCompressionRf
const (
	Eac3DynamicRangeCompressionRfNone          Eac3DynamicRangeCompressionRf = "NONE"
	Eac3DynamicRangeCompressionRfFilmStandard  Eac3DynamicRangeCompressionRf = "FILM_STANDARD"
	Eac3DynamicRangeCompressionRfFilmLight     Eac3DynamicRangeCompressionRf = "FILM_LIGHT"
	Eac3DynamicRangeCompressionRfMusicStandard Eac3DynamicRangeCompressionRf = "MUSIC_STANDARD"
	Eac3DynamicRangeCompressionRfMusicLight    Eac3DynamicRangeCompressionRf = "MUSIC_LIGHT"
	Eac3DynamicRangeCompressionRfSpeech        Eac3DynamicRangeCompressionRf = "SPEECH"
)

// Values returns all known values for Eac3DynamicRangeCompressionRf. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Eac3DynamicRangeCompressionRf) Values() []Eac3DynamicRangeCompressionRf {
	return []Eac3DynamicRangeCompressionRf{
		"NONE",
		"FILM_STANDARD",
		"FILM_LIGHT",
		"MUSIC_STANDARD",
		"MUSIC_LIGHT",
		"SPEECH",
	}
}

type Eac3LfeControl string

// Enum values for Eac3LfeControl
const (
	Eac3LfeControlLfe   Eac3LfeControl = "LFE"
	Eac3LfeControlNoLfe Eac3LfeControl = "NO_LFE"
)

// Values returns all known values for Eac3LfeControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Eac3LfeControl) Values() []Eac3LfeControl {
	return []Eac3LfeControl{
		"LFE",
		"NO_LFE",
	}
}

type Eac3LfeFilter string

// Enum values for Eac3LfeFilter
const (
	Eac3LfeFilterEnabled  Eac3LfeFilter = "ENABLED"
	Eac3LfeFilterDisabled Eac3LfeFilter = "DISABLED"
)

// Values returns all known values for Eac3LfeFilter. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Eac3LfeFilter) Values() []Eac3LfeFilter {
	return []Eac3LfeFilter{
		"ENABLED",
		"DISABLED",
	}
}

type Eac3MetadataControl string

// Enum values for Eac3MetadataControl
const (
	Eac3MetadataControlFollowInput   Eac3MetadataControl = "FOLLOW_INPUT"
	Eac3MetadataControlUseConfigured Eac3MetadataControl = "USE_CONFIGURED"
)

// Values returns all known values for Eac3MetadataControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Eac3MetadataControl) Values() []Eac3MetadataControl {
	return []Eac3MetadataControl{
		"FOLLOW_INPUT",
		"USE_CONFIGURED",
	}
}

type Eac3PassthroughControl string

// Enum values for Eac3PassthroughControl
const (
	Eac3PassthroughControlWhenPossible  Eac3PassthroughControl = "WHEN_POSSIBLE"
	Eac3PassthroughControlNoPassthrough Eac3PassthroughControl = "NO_PASSTHROUGH"
)

// Values returns all known values for Eac3PassthroughControl. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Eac3PassthroughControl) Values() []Eac3PassthroughControl {
	return []Eac3PassthroughControl{
		"WHEN_POSSIBLE",
		"NO_PASSTHROUGH",
	}
}

type Eac3PhaseControl string

// Enum values for Eac3PhaseControl
const (
	Eac3PhaseControlShift90Degrees Eac3PhaseControl = "SHIFT_90_DEGREES"
	Eac3PhaseControlNoShift        Eac3PhaseControl = "NO_SHIFT"
)

// Values returns all known values for Eac3PhaseControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Eac3PhaseControl) Values() []Eac3PhaseControl {
	return []Eac3PhaseControl{
		"SHIFT_90_DEGREES",
		"NO_SHIFT",
	}
}

type Eac3StereoDownmix string

// Enum values for Eac3StereoDownmix
const (
	Eac3StereoDownmixNotIndicated Eac3StereoDownmix = "NOT_INDICATED"
	Eac3StereoDownmixLoRo         Eac3StereoDownmix = "LO_RO"
	Eac3StereoDownmixLtRt         Eac3StereoDownmix = "LT_RT"
	Eac3StereoDownmixDpl2         Eac3StereoDownmix = "DPL2"
)

// Values returns all known values for Eac3StereoDownmix. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Eac3StereoDownmix) Values() []Eac3StereoDownmix {
	return []Eac3StereoDownmix{
		"NOT_INDICATED",
		"LO_RO",
		"LT_RT",
		"DPL2",
	}
}

type Eac3SurroundExMode string

// Enum values for Eac3SurroundExMode
const (
	Eac3SurroundExModeNotIndicated Eac3SurroundExMode = "NOT_INDICATED"
	Eac3SurroundExModeEnabled      Eac3SurroundExMode = "ENABLED"
	Eac3SurroundExModeDisabled     Eac3SurroundExMode = "DISABLED"
)

// Values returns all known values for Eac3SurroundExMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Eac3SurroundExMode) Values() []Eac3SurroundExMode {
	return []Eac3SurroundExMode{
		"NOT_INDICATED",
		"ENABLED",
		"DISABLED",
	}
}

type Eac3SurroundMode string

// Enum values for Eac3SurroundMode
const (
	Eac3SurroundModeNotIndicated Eac3SurroundMode = "NOT_INDICATED"
	Eac3SurroundModeEnabled      Eac3SurroundMode = "ENABLED"
	Eac3SurroundModeDisabled     Eac3SurroundMode = "DISABLED"
)

// Values returns all known values for Eac3SurroundMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Eac3SurroundMode) Values() []Eac3SurroundMode {
	return []Eac3SurroundMode{
		"NOT_INDICATED",
		"ENABLED",
		"DISABLED",
	}
}

type EmbeddedConvert608To708 string

// Enum values for EmbeddedConvert608To708
const (
	EmbeddedConvert608To708Upconvert EmbeddedConvert608To708 = "UPCONVERT"
	EmbeddedConvert608To708Disabled  EmbeddedConvert608To708 = "DISABLED"
)

// Values returns all known values for EmbeddedConvert608To708. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EmbeddedConvert608To708) Values() []EmbeddedConvert608To708 {
	return []EmbeddedConvert608To708{
		"UPCONVERT",
		"DISABLED",
	}
}

type EmbeddedTerminateCaptions string

// Enum values for EmbeddedTerminateCaptions
const (
	EmbeddedTerminateCaptionsEndOfInput EmbeddedTerminateCaptions = "END_OF_INPUT"
	EmbeddedTerminateCaptionsDisabled   EmbeddedTerminateCaptions = "DISABLED"
)

// Values returns all known values for EmbeddedTerminateCaptions. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EmbeddedTerminateCaptions) Values() []EmbeddedTerminateCaptions {
	return []EmbeddedTerminateCaptions{
		"END_OF_INPUT",
		"DISABLED",
	}
}

type EmbeddedTimecodeOverride string

// Enum values for EmbeddedTimecodeOverride
const (
	EmbeddedTimecodeOverrideNone    EmbeddedTimecodeOverride = "NONE"
	EmbeddedTimecodeOverrideUseMdpm EmbeddedTimecodeOverride = "USE_MDPM"
)

// Values returns all known values for EmbeddedTimecodeOverride. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EmbeddedTimecodeOverride) Values() []EmbeddedTimecodeOverride {
	return []EmbeddedTimecodeOverride{
		"NONE",
		"USE_MDPM",
	}
}

type F4vMoovPlacement string

// Enum values for F4vMoovPlacement
const (
	F4vMoovPlacementProgressiveDownload F4vMoovPlacement = "PROGRESSIVE_DOWNLOAD"
	F4vMoovPlacementNormal              F4vMoovPlacement = "NORMAL"
)

// Values returns all known values for F4vMoovPlacement. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (F4vMoovPlacement) Values() []F4vMoovPlacement {
	return []F4vMoovPlacement{
		"PROGRESSIVE_DOWNLOAD",
		"NORMAL",
	}
}

type FileSourceConvert608To708 string

// Enum values for FileSourceConvert608To708
const (
	FileSourceConvert608To708Upconvert FileSourceConvert608To708 = "UPCONVERT"
	FileSourceConvert608To708Disabled  FileSourceConvert608To708 = "DISABLED"
)

// Values returns all known values for FileSourceConvert608To708. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FileSourceConvert608To708) Values() []FileSourceConvert608To708 {
	return []FileSourceConvert608To708{
		"UPCONVERT",
		"DISABLED",
	}
}

type FileSourceTimeDeltaUnits string

// Enum values for FileSourceTimeDeltaUnits
const (
	FileSourceTimeDeltaUnitsSeconds      FileSourceTimeDeltaUnits = "SECONDS"
	FileSourceTimeDeltaUnitsMilliseconds FileSourceTimeDeltaUnits = "MILLISECONDS"
)

// Values returns all known values for FileSourceTimeDeltaUnits. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FileSourceTimeDeltaUnits) Values() []FileSourceTimeDeltaUnits {
	return []FileSourceTimeDeltaUnits{
		"SECONDS",
		"MILLISECONDS",
	}
}

type FontScript string

// Enum values for FontScript
const (
	FontScriptAutomatic FontScript = "AUTOMATIC"
	FontScriptHans      FontScript = "HANS"
	FontScriptHant      FontScript = "HANT"
)

// Values returns all known values for FontScript. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FontScript) Values() []FontScript {
	return []FontScript{
		"AUTOMATIC",
		"HANS",
		"HANT",
	}
}

type Format string

// Enum values for Format
const (
	FormatMp4       Format = "mp4"
	FormatQuicktime Format = "quicktime"
	FormatMatroska  Format = "matroska"
	FormatWebm      Format = "webm"
)

// Values returns all known values for Format. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Format) Values() []Format {
	return []Format{
		"mp4",
		"quicktime",
		"matroska",
		"webm",
	}
}

type FrameMetricType string

// Enum values for FrameMetricType
const (
	FrameMetricTypePsnr    FrameMetricType = "PSNR"
	FrameMetricTypeSsim    FrameMetricType = "SSIM"
	FrameMetricTypeMsSsim  FrameMetricType = "MS_SSIM"
	FrameMetricTypePsnrHvs FrameMetricType = "PSNR_HVS"
	FrameMetricTypeVmaf    FrameMetricType = "VMAF"
	FrameMetricTypeQvbr    FrameMetricType = "QVBR"
)

// Values returns all known values for FrameMetricType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (FrameMetricType) Values() []FrameMetricType {
	return []FrameMetricType{
		"PSNR",
		"SSIM",
		"MS_SSIM",
		"PSNR_HVS",
		"VMAF",
		"QVBR",
	}
}

type GifFramerateControl string

// Enum values for GifFramerateControl
const (
	GifFramerateControlInitializeFromSource GifFramerateControl = "INITIALIZE_FROM_SOURCE"
	GifFramerateControlSpecified            GifFramerateControl = "SPECIFIED"
)

// Values returns all known values for GifFramerateControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GifFramerateControl) Values() []GifFramerateControl {
	return []GifFramerateControl{
		"INITIALIZE_FROM_SOURCE",
		"SPECIFIED",
	}
}

type GifFramerateConversionAlgorithm string

// Enum values for GifFramerateConversionAlgorithm
const (
	GifFramerateConversionAlgorithmDuplicateDrop GifFramerateConversionAlgorithm = "DUPLICATE_DROP"
	GifFramerateConversionAlgorithmInterpolate   GifFramerateConversionAlgorithm = "INTERPOLATE"
)

// Values returns all known values for GifFramerateConversionAlgorithm. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (GifFramerateConversionAlgorithm) Values() []GifFramerateConversionAlgorithm {
	return []GifFramerateConversionAlgorithm{
		"DUPLICATE_DROP",
		"INTERPOLATE",
	}
}

type H264AdaptiveQuantization string

// Enum values for H264AdaptiveQuantization
const (
	H264AdaptiveQuantizationOff    H264AdaptiveQuantization = "OFF"
	H264AdaptiveQuantizationAuto   H264AdaptiveQuantization = "AUTO"
	H264AdaptiveQuantizationLow    H264AdaptiveQuantization = "LOW"
	H264AdaptiveQuantizationMedium H264AdaptiveQuantization = "MEDIUM"
	H264AdaptiveQuantizationHigh   H264AdaptiveQuantization = "HIGH"
	H264AdaptiveQuantizationHigher H264AdaptiveQuantization = "HIGHER"
	H264AdaptiveQuantizationMax    H264AdaptiveQuantization = "MAX"
)

// Values returns all known values for H264AdaptiveQuantization. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264AdaptiveQuantization) Values() []H264AdaptiveQuantization {
	return []H264AdaptiveQuantization{
		"OFF",
		"AUTO",
		"LOW",
		"MEDIUM",
		"HIGH",
		"HIGHER",
		"MAX",
	}
}

type H264CodecLevel string

// Enum values for H264CodecLevel
const (
	H264CodecLevelAuto    H264CodecLevel = "AUTO"
	H264CodecLevelLevel1  H264CodecLevel = "LEVEL_1"
	H264CodecLevelLevel11 H264CodecLevel = "LEVEL_1_1"
	H264CodecLevelLevel12 H264CodecLevel = "LEVEL_1_2"
	H264CodecLevelLevel13 H264CodecLevel = "LEVEL_1_3"
	H264CodecLevelLevel2  H264CodecLevel = "LEVEL_2"
	H264CodecLevelLevel21 H264CodecLevel = "LEVEL_2_1"
	H264CodecLevelLevel22 H264CodecLevel = "LEVEL_2_2"
	H264CodecLevelLevel3  H264CodecLevel = "LEVEL_3"
	H264CodecLevelLevel31 H264CodecLevel = "LEVEL_3_1"
	H264CodecLevelLevel32 H264CodecLevel = "LEVEL_3_2"
	H264CodecLevelLevel4  H264CodecLevel = "LEVEL_4"
	H264CodecLevelLevel41 H264CodecLevel = "LEVEL_4_1"
	H264CodecLevelLevel42 H264CodecLevel = "LEVEL_4_2"
	H264CodecLevelLevel5  H264CodecLevel = "LEVEL_5"
	H264CodecLevelLevel51 H264CodecLevel = "LEVEL_5_1"
	H264CodecLevelLevel52 H264CodecLevel = "LEVEL_5_2"
)

// Values returns all known values for H264CodecLevel. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264CodecLevel) Values() []H264CodecLevel {
	return []H264CodecLevel{
		"AUTO",
		"LEVEL_1",
		"LEVEL_1_1",
		"LEVEL_1_2",
		"LEVEL_1_3",
		"LEVEL_2",
		"LEVEL_2_1",
		"LEVEL_2_2",
		"LEVEL_3",
		"LEVEL_3_1",
		"LEVEL_3_2",
		"LEVEL_4",
		"LEVEL_4_1",
		"LEVEL_4_2",
		"LEVEL_5",
		"LEVEL_5_1",
		"LEVEL_5_2",
	}
}

type H264CodecProfile string

// Enum values for H264CodecProfile
const (
	H264CodecProfileBaseline     H264CodecProfile = "BASELINE"
	H264CodecProfileHigh         H264CodecProfile = "HIGH"
	H264CodecProfileHigh10bit    H264CodecProfile = "HIGH_10BIT"
	H264CodecProfileHigh422      H264CodecProfile = "HIGH_422"
	H264CodecProfileHigh42210bit H264CodecProfile = "HIGH_422_10BIT"
	H264CodecProfileMain         H264CodecProfile = "MAIN"
)

// Values returns all known values for H264CodecProfile. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264CodecProfile) Values() []H264CodecProfile {
	return []H264CodecProfile{
		"BASELINE",
		"HIGH",
		"HIGH_10BIT",
		"HIGH_422",
		"HIGH_422_10BIT",
		"MAIN",
	}
}

type H264DynamicSubGop string

// Enum values for H264DynamicSubGop
const (
	H264DynamicSubGopAdaptive H264DynamicSubGop = "ADAPTIVE"
	H264DynamicSubGopStatic   H264DynamicSubGop = "STATIC"
)

// Values returns all known values for H264DynamicSubGop. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264DynamicSubGop) Values() []H264DynamicSubGop {
	return []H264DynamicSubGop{
		"ADAPTIVE",
		"STATIC",
	}
}

type H264EndOfStreamMarkers string

// Enum values for H264EndOfStreamMarkers
const (
	H264EndOfStreamMarkersInclude  H264EndOfStreamMarkers = "INCLUDE"
	H264EndOfStreamMarkersSuppress H264EndOfStreamMarkers = "SUPPRESS"
)

// Values returns all known values for H264EndOfStreamMarkers. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264EndOfStreamMarkers) Values() []H264EndOfStreamMarkers {
	return []H264EndOfStreamMarkers{
		"INCLUDE",
		"SUPPRESS",
	}
}

type H264EntropyEncoding string

// Enum values for H264EntropyEncoding
const (
	H264EntropyEncodingCabac H264EntropyEncoding = "CABAC"
	H264EntropyEncodingCavlc H264EntropyEncoding = "CAVLC"
)

// Values returns all known values for H264EntropyEncoding. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264EntropyEncoding) Values() []H264EntropyEncoding {
	return []H264EntropyEncoding{
		"CABAC",
		"CAVLC",
	}
}

type H264FieldEncoding string

// Enum values for H264FieldEncoding
const (
	H264FieldEncodingPaff       H264FieldEncoding = "PAFF"
	H264FieldEncodingForceField H264FieldEncoding = "FORCE_FIELD"
	H264FieldEncodingMbaff      H264FieldEncoding = "MBAFF"
)

// Values returns all known values for H264FieldEncoding. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264FieldEncoding) Values() []H264FieldEncoding {
	return []H264FieldEncoding{
		"PAFF",
		"FORCE_FIELD",
		"MBAFF",
	}
}

type H264FlickerAdaptiveQuantization string

// Enum values for H264FlickerAdaptiveQuantization
const (
	H264FlickerAdaptiveQuantizationDisabled H264FlickerAdaptiveQuantization = "DISABLED"
	H264FlickerAdaptiveQuantizationEnabled  H264FlickerAdaptiveQuantization = "ENABLED"
)

// Values returns all known values for H264FlickerAdaptiveQuantization. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264FlickerAdaptiveQuantization) Values() []H264FlickerAdaptiveQuantization {
	return []H264FlickerAdaptiveQuantization{
		"DISABLED",
		"ENABLED",
	}
}

type H264FramerateControl string

// Enum values for H264FramerateControl
const (
	H264FramerateControlInitializeFromSource H264FramerateControl = "INITIALIZE_FROM_SOURCE"
	H264FramerateControlSpecified            H264FramerateControl = "SPECIFIED"
)

// Values returns all known values for H264FramerateControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264FramerateControl) Values() []H264FramerateControl {
	return []H264FramerateControl{
		"INITIALIZE_FROM_SOURCE",
		"SPECIFIED",
	}
}

type H264FramerateConversionAlgorithm string

// Enum values for H264FramerateConversionAlgorithm
const (
	H264FramerateConversionAlgorithmDuplicateDrop      H264FramerateConversionAlgorithm = "DUPLICATE_DROP"
	H264FramerateConversionAlgorithmInterpolate        H264FramerateConversionAlgorithm = "INTERPOLATE"
	H264FramerateConversionAlgorithmFrameformer        H264FramerateConversionAlgorithm = "FRAMEFORMER"
	H264FramerateConversionAlgorithmMaintainFrameCount H264FramerateConversionAlgorithm = "MAINTAIN_FRAME_COUNT"
)

// Values returns all known values for H264FramerateConversionAlgorithm. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264FramerateConversionAlgorithm) Values() []H264FramerateConversionAlgorithm {
	return []H264FramerateConversionAlgorithm{
		"DUPLICATE_DROP",
		"INTERPOLATE",
		"FRAMEFORMER",
		"MAINTAIN_FRAME_COUNT",
	}
}

type H264GopBReference string

// Enum values for H264GopBReference
const (
	H264GopBReferenceDisabled H264GopBReference = "DISABLED"
	H264GopBReferenceEnabled  H264GopBReference = "ENABLED"
)

// Values returns all known values for H264GopBReference. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264GopBReference) Values() []H264GopBReference {
	return []H264GopBReference{
		"DISABLED",
		"ENABLED",
	}
}

type H264GopSizeUnits string

// Enum values for H264GopSizeUnits
const (
	H264GopSizeUnitsFrames  H264GopSizeUnits = "FRAMES"
	H264GopSizeUnitsSeconds H264GopSizeUnits = "SECONDS"
	H264GopSizeUnitsAuto    H264GopSizeUnits = "AUTO"
)

// Values returns all known values for H264GopSizeUnits. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264GopSizeUnits) Values() []H264GopSizeUnits {
	return []H264GopSizeUnits{
		"FRAMES",
		"SECONDS",
		"AUTO",
	}
}

type H264InterlaceMode string

// Enum values for H264InterlaceMode
const (
	H264InterlaceModeProgressive       H264InterlaceMode = "PROGRESSIVE"
	H264InterlaceModeTopField          H264InterlaceMode = "TOP_FIELD"
	H264InterlaceModeBottomField       H264InterlaceMode = "BOTTOM_FIELD"
	H264InterlaceModeFollowTopField    H264InterlaceMode = "FOLLOW_TOP_FIELD"
	H264InterlaceModeFollowBottomField H264InterlaceMode = "FOLLOW_BOTTOM_FIELD"
)

// Values returns all known values for H264InterlaceMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264InterlaceMode) Values() []H264InterlaceMode {
	return []H264InterlaceMode{
		"PROGRESSIVE",
		"TOP_FIELD",
		"BOTTOM_FIELD",
		"FOLLOW_TOP_FIELD",
		"FOLLOW_BOTTOM_FIELD",
	}
}

type H264ParControl string

// Enum values for H264ParControl
const (
	H264ParControlInitializeFromSource H264ParControl = "INITIALIZE_FROM_SOURCE"
	H264ParControlSpecified            H264ParControl = "SPECIFIED"
)

// Values returns all known values for H264ParControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264ParControl) Values() []H264ParControl {
	return []H264ParControl{
		"INITIALIZE_FROM_SOURCE",
		"SPECIFIED",
	}
}

type H264QualityTuningLevel string

// Enum values for H264QualityTuningLevel
const (
	H264QualityTuningLevelSinglePass   H264QualityTuningLevel = "SINGLE_PASS"
	H264QualityTuningLevelSinglePassHq H264QualityTuningLevel = "SINGLE_PASS_HQ"
	H264QualityTuningLevelMultiPassHq  H264QualityTuningLevel = "MULTI_PASS_HQ"
)

// Values returns all known values for H264QualityTuningLevel. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264QualityTuningLevel) Values() []H264QualityTuningLevel {
	return []H264QualityTuningLevel{
		"SINGLE_PASS",
		"SINGLE_PASS_HQ",
		"MULTI_PASS_HQ",
	}
}

type H264RateControlMode string

// Enum values for H264RateControlMode
const (
	H264RateControlModeVbr  H264RateControlMode = "VBR"
	H264RateControlModeCbr  H264RateControlMode = "CBR"
	H264RateControlModeQvbr H264RateControlMode = "QVBR"
)

// Values returns all known values for H264RateControlMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264RateControlMode) Values() []H264RateControlMode {
	return []H264RateControlMode{
		"VBR",
		"CBR",
		"QVBR",
	}
}

type H264RepeatPps string

// Enum values for H264RepeatPps
const (
	H264RepeatPpsDisabled H264RepeatPps = "DISABLED"
	H264RepeatPpsEnabled  H264RepeatPps = "ENABLED"
)

// Values returns all known values for H264RepeatPps. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264RepeatPps) Values() []H264RepeatPps {
	return []H264RepeatPps{
		"DISABLED",
		"ENABLED",
	}
}

type H264SaliencyAwareEncoding string

// Enum values for H264SaliencyAwareEncoding
const (
	H264SaliencyAwareEncodingDisabled  H264SaliencyAwareEncoding = "DISABLED"
	H264SaliencyAwareEncodingPreferred H264SaliencyAwareEncoding = "PREFERRED"
)

// Values returns all known values for H264SaliencyAwareEncoding. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264SaliencyAwareEncoding) Values() []H264SaliencyAwareEncoding {
	return []H264SaliencyAwareEncoding{
		"DISABLED",
		"PREFERRED",
	}
}

type H264ScanTypeConversionMode string

// Enum values for H264ScanTypeConversionMode
const (
	H264ScanTypeConversionModeInterlaced         H264ScanTypeConversionMode = "INTERLACED"
	H264ScanTypeConversionModeInterlacedOptimize H264ScanTypeConversionMode = "INTERLACED_OPTIMIZE"
)

// Values returns all known values for H264ScanTypeConversionMode. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264ScanTypeConversionMode) Values() []H264ScanTypeConversionMode {
	return []H264ScanTypeConversionMode{
		"INTERLACED",
		"INTERLACED_OPTIMIZE",
	}
}

type H264SceneChangeDetect string

// Enum values for H264SceneChangeDetect
const (
	H264SceneChangeDetectDisabled            H264SceneChangeDetect = "DISABLED"
	H264SceneChangeDetectEnabled             H264SceneChangeDetect = "ENABLED"
	H264SceneChangeDetectTransitionDetection H264SceneChangeDetect = "TRANSITION_DETECTION"
)

// Values returns all known values for H264SceneChangeDetect. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264SceneChangeDetect) Values() []H264SceneChangeDetect {
	return []H264SceneChangeDetect{
		"DISABLED",
		"ENABLED",
		"TRANSITION_DETECTION",
	}
}

type H264SlowPal string

// Enum values for H264SlowPal
const (
	H264SlowPalDisabled H264SlowPal = "DISABLED"
	H264SlowPalEnabled  H264SlowPal = "ENABLED"
)

// Values returns all known values for H264SlowPal. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264SlowPal) Values() []H264SlowPal {
	return []H264SlowPal{
		"DISABLED",
		"ENABLED",
	}
}

type H264SpatialAdaptiveQuantization string

// Enum values for H264SpatialAdaptiveQuantization
const (
	H264SpatialAdaptiveQuantizationDisabled H264SpatialAdaptiveQuantization = "DISABLED"
	H264SpatialAdaptiveQuantizationEnabled  H264SpatialAdaptiveQuantization = "ENABLED"
)

// Values returns all known values for H264SpatialAdaptiveQuantization. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264SpatialAdaptiveQuantization) Values() []H264SpatialAdaptiveQuantization {
	return []H264SpatialAdaptiveQuantization{
		"DISABLED",
		"ENABLED",
	}
}

type H264Syntax string

// Enum values for H264Syntax
const (
	H264SyntaxDefault H264Syntax = "DEFAULT"
	H264SyntaxRp2027  H264Syntax = "RP2027"
)

// Values returns all known values for H264Syntax. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264Syntax) Values() []H264Syntax {
	return []H264Syntax{
		"DEFAULT",
		"RP2027",
	}
}

type H264Telecine string

// Enum values for H264Telecine
const (
	H264TelecineNone H264Telecine = "NONE"
	H264TelecineSoft H264Telecine = "SOFT"
	H264TelecineHard H264Telecine = "HARD"
)

// Values returns all known values for H264Telecine. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264Telecine) Values() []H264Telecine {
	return []H264Telecine{
		"NONE",
		"SOFT",
		"HARD",
	}
}

type H264TemporalAdaptiveQuantization string

// Enum values for H264TemporalAdaptiveQuantization
const (
	H264TemporalAdaptiveQuantizationDisabled H264TemporalAdaptiveQuantization = "DISABLED"
	H264TemporalAdaptiveQuantizationEnabled  H264TemporalAdaptiveQuantization = "ENABLED"
)

// Values returns all known values for H264TemporalAdaptiveQuantization. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264TemporalAdaptiveQuantization) Values() []H264TemporalAdaptiveQuantization {
	return []H264TemporalAdaptiveQuantization{
		"DISABLED",
		"ENABLED",
	}
}

type H264UnregisteredSeiTimecode string

// Enum values for H264UnregisteredSeiTimecode
const (
	H264UnregisteredSeiTimecodeDisabled H264UnregisteredSeiTimecode = "DISABLED"
	H264UnregisteredSeiTimecodeEnabled  H264UnregisteredSeiTimecode = "ENABLED"
)

// Values returns all known values for H264UnregisteredSeiTimecode. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264UnregisteredSeiTimecode) Values() []H264UnregisteredSeiTimecode {
	return []H264UnregisteredSeiTimecode{
		"DISABLED",
		"ENABLED",
	}
}

type H264WriteMp4PackagingType string

// Enum values for H264WriteMp4PackagingType
const (
	H264WriteMp4PackagingTypeAvc1 H264WriteMp4PackagingType = "AVC1"
	H264WriteMp4PackagingTypeAvc3 H264WriteMp4PackagingType = "AVC3"
)

// Values returns all known values for H264WriteMp4PackagingType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H264WriteMp4PackagingType) Values() []H264WriteMp4PackagingType {
	return []H264WriteMp4PackagingType{
		"AVC1",
		"AVC3",
	}
}

type H265AdaptiveQuantization string

// Enum values for H265AdaptiveQuantization
const (
	H265AdaptiveQuantizationOff    H265AdaptiveQuantization = "OFF"
	H265AdaptiveQuantizationLow    H265AdaptiveQuantization = "LOW"
	H265AdaptiveQuantizationMedium H265AdaptiveQuantization = "MEDIUM"
	H265AdaptiveQuantizationHigh   H265AdaptiveQuantization = "HIGH"
	H265AdaptiveQuantizationHigher H265AdaptiveQuantization = "HIGHER"
	H265AdaptiveQuantizationMax    H265AdaptiveQuantization = "MAX"
	H265AdaptiveQuantizationAuto   H265AdaptiveQuantization = "AUTO"
)

// Values returns all known values for H265AdaptiveQuantization. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265AdaptiveQuantization) Values() []H265AdaptiveQuantization {
	return []H265AdaptiveQuantization{
		"OFF",
		"LOW",
		"MEDIUM",
		"HIGH",
		"HIGHER",
		"MAX",
		"AUTO",
	}
}

type H265AlternateTransferFunctionSei string

// Enum values for H265AlternateTransferFunctionSei
const (
	H265AlternateTransferFunctionSeiDisabled H265AlternateTransferFunctionSei = "DISABLED"
	H265AlternateTransferFunctionSeiEnabled  H265AlternateTransferFunctionSei = "ENABLED"
)

// Values returns all known values for H265AlternateTransferFunctionSei. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265AlternateTransferFunctionSei) Values() []H265AlternateTransferFunctionSei {
	return []H265AlternateTransferFunctionSei{
		"DISABLED",
		"ENABLED",
	}
}

type H265CodecLevel string

// Enum values for H265CodecLevel
const (
	H265CodecLevelAuto    H265CodecLevel = "AUTO"
	H265CodecLevelLevel1  H265CodecLevel = "LEVEL_1"
	H265CodecLevelLevel2  H265CodecLevel = "LEVEL_2"
	H265CodecLevelLevel21 H265CodecLevel = "LEVEL_2_1"
	H265CodecLevelLevel3  H265CodecLevel = "LEVEL_3"
	H265CodecLevelLevel31 H265CodecLevel = "LEVEL_3_1"
	H265CodecLevelLevel4  H265CodecLevel = "LEVEL_4"
	H265CodecLevelLevel41 H265CodecLevel = "LEVEL_4_1"
	H265CodecLevelLevel5  H265CodecLevel = "LEVEL_5"
	H265CodecLevelLevel51 H265CodecLevel = "LEVEL_5_1"
	H265CodecLevelLevel52 H265CodecLevel = "LEVEL_5_2"
	H265CodecLevelLevel6  H265CodecLevel = "LEVEL_6"
	H265CodecLevelLevel61 H265CodecLevel = "LEVEL_6_1"
	H265CodecLevelLevel62 H265CodecLevel = "LEVEL_6_2"
)

// Values returns all known values for H265CodecLevel. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265CodecLevel) Values() []H265CodecLevel {
	return []H265CodecLevel{
		"AUTO",
		"LEVEL_1",
		"LEVEL_2",
		"LEVEL_2_1",
		"LEVEL_3",
		"LEVEL_3_1",
		"LEVEL_4",
		"LEVEL_4_1",
		"LEVEL_5",
		"LEVEL_5_1",
		"LEVEL_5_2",
		"LEVEL_6",
		"LEVEL_6_1",
		"LEVEL_6_2",
	}
}

type H265CodecProfile string

// Enum values for H265CodecProfile
const (
	H265CodecProfileMainMain         H265CodecProfile = "MAIN_MAIN"
	H265CodecProfileMainHigh         H265CodecProfile = "MAIN_HIGH"
	H265CodecProfileMain10Main       H265CodecProfile = "MAIN10_MAIN"
	H265CodecProfileMain10High       H265CodecProfile = "MAIN10_HIGH"
	H265CodecProfileMain4228bitMain  H265CodecProfile = "MAIN_422_8BIT_MAIN"
	H265CodecProfileMain4228bitHigh  H265CodecProfile = "MAIN_422_8BIT_HIGH"
	H265CodecProfileMain42210bitMain H265CodecProfile = "MAIN_422_10BIT_MAIN"
	H265CodecProfileMain42210bitHigh H265CodecProfile = "MAIN_422_10BIT_HIGH"
)

// Values returns all known values for H265CodecProfile. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265CodecProfile) Values() []H265CodecProfile {
	return []H265CodecProfile{
		"MAIN_MAIN",
		"MAIN_HIGH",
		"MAIN10_MAIN",
		"MAIN10_HIGH",
		"MAIN_422_8BIT_MAIN",
		"MAIN_422_8BIT_HIGH",
		"MAIN_422_10BIT_MAIN",
		"MAIN_422_10BIT_HIGH",
	}
}

type H265Deblocking string

// Enum values for H265Deblocking
const (
	H265DeblockingEnabled  H265Deblocking = "ENABLED"
	H265DeblockingDisabled H265Deblocking = "DISABLED"
)

// Values returns all known values for H265Deblocking. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265Deblocking) Values() []H265Deblocking {
	return []H265Deblocking{
		"ENABLED",
		"DISABLED",
	}
}

type H265DynamicSubGop string

// Enum values for H265DynamicSubGop
const (
	H265DynamicSubGopAdaptive H265DynamicSubGop = "ADAPTIVE"
	H265DynamicSubGopStatic   H265DynamicSubGop = "STATIC"
)

// Values returns all known values for H265DynamicSubGop. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265DynamicSubGop) Values() []H265DynamicSubGop {
	return []H265DynamicSubGop{
		"ADAPTIVE",
		"STATIC",
	}
}

type H265EndOfStreamMarkers string

// Enum values for H265EndOfStreamMarkers
const (
	H265EndOfStreamMarkersInclude  H265EndOfStreamMarkers = "INCLUDE"
	H265EndOfStreamMarkersSuppress H265EndOfStreamMarkers = "SUPPRESS"
)

// Values returns all known values for H265EndOfStreamMarkers. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265EndOfStreamMarkers) Values() []H265EndOfStreamMarkers {
	return []H265EndOfStreamMarkers{
		"INCLUDE",
		"SUPPRESS",
	}
}

type H265FlickerAdaptiveQuantization string

// Enum values for H265FlickerAdaptiveQuantization
const (
	H265FlickerAdaptiveQuantizationDisabled H265FlickerAdaptiveQuantization = "DISABLED"
	H265FlickerAdaptiveQuantizationEnabled  H265FlickerAdaptiveQuantization = "ENABLED"
)

// Values returns all known values for H265FlickerAdaptiveQuantization. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265FlickerAdaptiveQuantization) Values() []H265FlickerAdaptiveQuantization {
	return []H265FlickerAdaptiveQuantization{
		"DISABLED",
		"ENABLED",
	}
}

type H265FramerateControl string

// Enum values for H265FramerateControl
const (
	H265FramerateControlInitializeFromSource H265FramerateControl = "INITIALIZE_FROM_SOURCE"
	H265FramerateControlSpecified            H265FramerateControl = "SPECIFIED"
)

// Values returns all known values for H265FramerateControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265FramerateControl) Values() []H265FramerateControl {
	return []H265FramerateControl{
		"INITIALIZE_FROM_SOURCE",
		"SPECIFIED",
	}
}

type H265FramerateConversionAlgorithm string

// Enum values for H265FramerateConversionAlgorithm
const (
	H265FramerateConversionAlgorithmDuplicateDrop      H265FramerateConversionAlgorithm = "DUPLICATE_DROP"
	H265FramerateConversionAlgorithmInterpolate        H265FramerateConversionAlgorithm = "INTERPOLATE"
	H265FramerateConversionAlgorithmFrameformer        H265FramerateConversionAlgorithm = "FRAMEFORMER"
	H265FramerateConversionAlgorithmMaintainFrameCount H265FramerateConversionAlgorithm = "MAINTAIN_FRAME_COUNT"
)

// Values returns all known values for H265FramerateConversionAlgorithm. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265FramerateConversionAlgorithm) Values() []H265FramerateConversionAlgorithm {
	return []H265FramerateConversionAlgorithm{
		"DUPLICATE_DROP",
		"INTERPOLATE",
		"FRAMEFORMER",
		"MAINTAIN_FRAME_COUNT",
	}
}

type H265GopBReference string

// Enum values for H265GopBReference
const (
	H265GopBReferenceDisabled H265GopBReference = "DISABLED"
	H265GopBReferenceEnabled  H265GopBReference = "ENABLED"
)

// Values returns all known values for H265GopBReference. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265GopBReference) Values() []H265GopBReference {
	return []H265GopBReference{
		"DISABLED",
		"ENABLED",
	}
}

type H265GopSizeUnits string

// Enum values for H265GopSizeUnits
const (
	H265GopSizeUnitsFrames  H265GopSizeUnits = "FRAMES"
	H265GopSizeUnitsSeconds H265GopSizeUnits = "SECONDS"
	H265GopSizeUnitsAuto    H265GopSizeUnits = "AUTO"
)

// Values returns all known values for H265GopSizeUnits. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265GopSizeUnits) Values() []H265GopSizeUnits {
	return []H265GopSizeUnits{
		"FRAMES",
		"SECONDS",
		"AUTO",
	}
}

type H265InterlaceMode string

// Enum values for H265InterlaceMode
const (
	H265InterlaceModeProgressive       H265InterlaceMode = "PROGRESSIVE"
	H265InterlaceModeTopField          H265InterlaceMode = "TOP_FIELD"
	H265InterlaceModeBottomField       H265InterlaceMode = "BOTTOM_FIELD"
	H265InterlaceModeFollowTopField    H265InterlaceMode = "FOLLOW_TOP_FIELD"
	H265InterlaceModeFollowBottomField H265InterlaceMode = "FOLLOW_BOTTOM_FIELD"
)

// Values returns all known values for H265InterlaceMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265InterlaceMode) Values() []H265InterlaceMode {
	return []H265InterlaceMode{
		"PROGRESSIVE",
		"TOP_FIELD",
		"BOTTOM_FIELD",
		"FOLLOW_TOP_FIELD",
		"FOLLOW_BOTTOM_FIELD",
	}
}

type H265ParControl string

// Enum values for H265ParControl
const (
	H265ParControlInitializeFromSource H265ParControl = "INITIALIZE_FROM_SOURCE"
	H265ParControlSpecified            H265ParControl = "SPECIFIED"
)

// Values returns all known values for H265ParControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265ParControl) Values() []H265ParControl {
	return []H265ParControl{
		"INITIALIZE_FROM_SOURCE",
		"SPECIFIED",
	}
}

type H265QualityTuningLevel string

// Enum values for H265QualityTuningLevel
const (
	H265QualityTuningLevelSinglePass   H265QualityTuningLevel = "SINGLE_PASS"
	H265QualityTuningLevelSinglePassHq H265QualityTuningLevel = "SINGLE_PASS_HQ"
	H265QualityTuningLevelMultiPassHq  H265QualityTuningLevel = "MULTI_PASS_HQ"
)

// Values returns all known values for H265QualityTuningLevel. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265QualityTuningLevel) Values() []H265QualityTuningLevel {
	return []H265QualityTuningLevel{
		"SINGLE_PASS",
		"SINGLE_PASS_HQ",
		"MULTI_PASS_HQ",
	}
}

type H265RateControlMode string

// Enum values for H265RateControlMode
const (
	H265RateControlModeVbr  H265RateControlMode = "VBR"
	H265RateControlModeCbr  H265RateControlMode = "CBR"
	H265RateControlModeQvbr H265RateControlMode = "QVBR"
)

// Values returns all known values for H265RateControlMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265RateControlMode) Values() []H265RateControlMode {
	return []H265RateControlMode{
		"VBR",
		"CBR",
		"QVBR",
	}
}

type H265SampleAdaptiveOffsetFilterMode string

// Enum values for H265SampleAdaptiveOffsetFilterMode
const (
	H265SampleAdaptiveOffsetFilterModeDefault  H265SampleAdaptiveOffsetFilterMode = "DEFAULT"
	H265SampleAdaptiveOffsetFilterModeAdaptive H265SampleAdaptiveOffsetFilterMode = "ADAPTIVE"
	H265SampleAdaptiveOffsetFilterModeOff      H265SampleAdaptiveOffsetFilterMode = "OFF"
)

// Values returns all known values for H265SampleAdaptiveOffsetFilterMode. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265SampleAdaptiveOffsetFilterMode) Values() []H265SampleAdaptiveOffsetFilterMode {
	return []H265SampleAdaptiveOffsetFilterMode{
		"DEFAULT",
		"ADAPTIVE",
		"OFF",
	}
}

type H265ScanTypeConversionMode string

// Enum values for H265ScanTypeConversionMode
const (
	H265ScanTypeConversionModeInterlaced         H265ScanTypeConversionMode = "INTERLACED"
	H265ScanTypeConversionModeInterlacedOptimize H265ScanTypeConversionMode = "INTERLACED_OPTIMIZE"
)

// Values returns all known values for H265ScanTypeConversionMode. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265ScanTypeConversionMode) Values() []H265ScanTypeConversionMode {
	return []H265ScanTypeConversionMode{
		"INTERLACED",
		"INTERLACED_OPTIMIZE",
	}
}

type H265SceneChangeDetect string

// Enum values for H265SceneChangeDetect
const (
	H265SceneChangeDetectDisabled            H265SceneChangeDetect = "DISABLED"
	H265SceneChangeDetectEnabled             H265SceneChangeDetect = "ENABLED"
	H265SceneChangeDetectTransitionDetection H265SceneChangeDetect = "TRANSITION_DETECTION"
)

// Values returns all known values for H265SceneChangeDetect. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265SceneChangeDetect) Values() []H265SceneChangeDetect {
	return []H265SceneChangeDetect{
		"DISABLED",
		"ENABLED",
		"TRANSITION_DETECTION",
	}
}

type H265SlowPal string

// Enum values for H265SlowPal
const (
	H265SlowPalDisabled H265SlowPal = "DISABLED"
	H265SlowPalEnabled  H265SlowPal = "ENABLED"
)

// Values returns all known values for H265SlowPal. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265SlowPal) Values() []H265SlowPal {
	return []H265SlowPal{
		"DISABLED",
		"ENABLED",
	}
}

type H265SpatialAdaptiveQuantization string

// Enum values for H265SpatialAdaptiveQuantization
const (
	H265SpatialAdaptiveQuantizationDisabled H265SpatialAdaptiveQuantization = "DISABLED"
	H265SpatialAdaptiveQuantizationEnabled  H265SpatialAdaptiveQuantization = "ENABLED"
)

// Values returns all known values for H265SpatialAdaptiveQuantization. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265SpatialAdaptiveQuantization) Values() []H265SpatialAdaptiveQuantization {
	return []H265SpatialAdaptiveQuantization{
		"DISABLED",
		"ENABLED",
	}
}

type H265Telecine string

// Enum values for H265Telecine
const (
	H265TelecineNone H265Telecine = "NONE"
	H265TelecineSoft H265Telecine = "SOFT"
	H265TelecineHard H265Telecine = "HARD"
)

// Values returns all known values for H265Telecine. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265Telecine) Values() []H265Telecine {
	return []H265Telecine{
		"NONE",
		"SOFT",
		"HARD",
	}
}

type H265TemporalAdaptiveQuantization string

// Enum values for H265TemporalAdaptiveQuantization
const (
	H265TemporalAdaptiveQuantizationDisabled H265TemporalAdaptiveQuantization = "DISABLED"
	H265TemporalAdaptiveQuantizationEnabled  H265TemporalAdaptiveQuantization = "ENABLED"
)

// Values returns all known values for H265TemporalAdaptiveQuantization. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265TemporalAdaptiveQuantization) Values() []H265TemporalAdaptiveQuantization {
	return []H265TemporalAdaptiveQuantization{
		"DISABLED",
		"ENABLED",
	}
}

type H265TemporalIds string

// Enum values for H265TemporalIds
const (
	H265TemporalIdsDisabled H265TemporalIds = "DISABLED"
	H265TemporalIdsEnabled  H265TemporalIds = "ENABLED"
)

// Values returns all known values for H265TemporalIds. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265TemporalIds) Values() []H265TemporalIds {
	return []H265TemporalIds{
		"DISABLED",
		"ENABLED",
	}
}

type H265Tiles string

// Enum values for H265Tiles
const (
	H265TilesDisabled H265Tiles = "DISABLED"
	H265TilesEnabled  H265Tiles = "ENABLED"
)

// Values returns all known values for H265Tiles. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265Tiles) Values() []H265Tiles {
	return []H265Tiles{
		"DISABLED",
		"ENABLED",
	}
}

type H265UnregisteredSeiTimecode string

// Enum values for H265UnregisteredSeiTimecode
const (
	H265UnregisteredSeiTimecodeDisabled H265UnregisteredSeiTimecode = "DISABLED"
	H265UnregisteredSeiTimecodeEnabled  H265UnregisteredSeiTimecode = "ENABLED"
)

// Values returns all known values for H265UnregisteredSeiTimecode. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265UnregisteredSeiTimecode) Values() []H265UnregisteredSeiTimecode {
	return []H265UnregisteredSeiTimecode{
		"DISABLED",
		"ENABLED",
	}
}

type H265WriteMp4PackagingType string

// Enum values for H265WriteMp4PackagingType
const (
	H265WriteMp4PackagingTypeHvc1 H265WriteMp4PackagingType = "HVC1"
	H265WriteMp4PackagingTypeHev1 H265WriteMp4PackagingType = "HEV1"
)

// Values returns all known values for H265WriteMp4PackagingType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (H265WriteMp4PackagingType) Values() []H265WriteMp4PackagingType {
	return []H265WriteMp4PackagingType{
		"HVC1",
		"HEV1",
	}
}

type HDRToSDRToneMapper string

// Enum values for HDRToSDRToneMapper
const (
	HDRToSDRToneMapperPreserveDetails HDRToSDRToneMapper = "PRESERVE_DETAILS"
	HDRToSDRToneMapperVibrant         HDRToSDRToneMapper = "VIBRANT"
)

// Values returns all known values for HDRToSDRToneMapper. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HDRToSDRToneMapper) Values() []HDRToSDRToneMapper {
	return []HDRToSDRToneMapper{
		"PRESERVE_DETAILS",
		"VIBRANT",
	}
}

type HlsAdMarkers string

// Enum values for HlsAdMarkers
const (
	HlsAdMarkersElemental       HlsAdMarkers = "ELEMENTAL"
	HlsAdMarkersElementalScte35 HlsAdMarkers = "ELEMENTAL_SCTE35"
)

// Values returns all known values for HlsAdMarkers. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsAdMarkers) Values() []HlsAdMarkers {
	return []HlsAdMarkers{
		"ELEMENTAL",
		"ELEMENTAL_SCTE35",
	}
}

type HlsAudioOnlyContainer string

// Enum values for HlsAudioOnlyContainer
const (
	HlsAudioOnlyContainerAutomatic HlsAudioOnlyContainer = "AUTOMATIC"
	HlsAudioOnlyContainerM2ts      HlsAudioOnlyContainer = "M2TS"
)

// Values returns all known values for HlsAudioOnlyContainer. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsAudioOnlyContainer) Values() []HlsAudioOnlyContainer {
	return []HlsAudioOnlyContainer{
		"AUTOMATIC",
		"M2TS",
	}
}

type HlsAudioOnlyHeader string

// Enum values for HlsAudioOnlyHeader
const (
	HlsAudioOnlyHeaderInclude HlsAudioOnlyHeader = "INCLUDE"
	HlsAudioOnlyHeaderExclude HlsAudioOnlyHeader = "EXCLUDE"
)

// Values returns all known values for HlsAudioOnlyHeader. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsAudioOnlyHeader) Values() []HlsAudioOnlyHeader {
	return []HlsAudioOnlyHeader{
		"INCLUDE",
		"EXCLUDE",
	}
}

type HlsAudioTrackType string

// Enum values for HlsAudioTrackType
const (
	HlsAudioTrackTypeAlternateAudioAutoSelectDefault HlsAudioTrackType = "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT"
	HlsAudioTrackTypeAlternateAudioAutoSelect        HlsAudioTrackType = "ALTERNATE_AUDIO_AUTO_SELECT"
	HlsAudioTrackTypeAlternateAudioNotAutoSelect     HlsAudioTrackType = "ALTERNATE_AUDIO_NOT_AUTO_SELECT"
	HlsAudioTrackTypeAudioOnlyVariantStream          HlsAudioTrackType = "AUDIO_ONLY_VARIANT_STREAM"
)

// Values returns all known values for HlsAudioTrackType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsAudioTrackType) Values() []HlsAudioTrackType {
	return []HlsAudioTrackType{
		"ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT",
		"ALTERNATE_AUDIO_AUTO_SELECT",
		"ALTERNATE_AUDIO_NOT_AUTO_SELECT",
		"AUDIO_ONLY_VARIANT_STREAM",
	}
}

type HlsCaptionLanguageSetting string

// Enum values for HlsCaptionLanguageSetting
const (
	HlsCaptionLanguageSettingInsert HlsCaptionLanguageSetting = "INSERT"
	HlsCaptionLanguageSettingOmit   HlsCaptionLanguageSetting = "OMIT"
	HlsCaptionLanguageSettingNone   HlsCaptionLanguageSetting = "NONE"
)

// Values returns all known values for HlsCaptionLanguageSetting. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsCaptionLanguageSetting) Values() []HlsCaptionLanguageSetting {
	return []HlsCaptionLanguageSetting{
		"INSERT",
		"OMIT",
		"NONE",
	}
}

type HlsCaptionSegmentLengthControl string

// Enum values for HlsCaptionSegmentLengthControl
const (
	HlsCaptionSegmentLengthControlLargeSegments HlsCaptionSegmentLengthControl = "LARGE_SEGMENTS"
	HlsCaptionSegmentLengthControlMatchVideo    HlsCaptionSegmentLengthControl = "MATCH_VIDEO"
)

// Values returns all known values for HlsCaptionSegmentLengthControl. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsCaptionSegmentLengthControl) Values() []HlsCaptionSegmentLengthControl {
	return []HlsCaptionSegmentLengthControl{
		"LARGE_SEGMENTS",
		"MATCH_VIDEO",
	}
}

type HlsClientCache string

// Enum values for HlsClientCache
const (
	HlsClientCacheDisabled HlsClientCache = "DISABLED"
	HlsClientCacheEnabled  HlsClientCache = "ENABLED"
)

// Values returns all known values for HlsClientCache. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsClientCache) Values() []HlsClientCache {
	return []HlsClientCache{
		"DISABLED",
		"ENABLED",
	}
}

type HlsCodecSpecification string

// Enum values for HlsCodecSpecification
const (
	HlsCodecSpecificationRfc6381 HlsCodecSpecification = "RFC_6381"
	HlsCodecSpecificationRfc4281 HlsCodecSpecification = "RFC_4281"
)

// Values returns all known values for HlsCodecSpecification. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsCodecSpecification) Values() []HlsCodecSpecification {
	return []HlsCodecSpecification{
		"RFC_6381",
		"RFC_4281",
	}
}

type HlsDescriptiveVideoServiceFlag string

// Enum values for HlsDescriptiveVideoServiceFlag
const (
	HlsDescriptiveVideoServiceFlagDontFlag HlsDescriptiveVideoServiceFlag = "DONT_FLAG"
	HlsDescriptiveVideoServiceFlagFlag     HlsDescriptiveVideoServiceFlag = "FLAG"
)

// Values returns all known values for HlsDescriptiveVideoServiceFlag. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsDescriptiveVideoServiceFlag) Values() []HlsDescriptiveVideoServiceFlag {
	return []HlsDescriptiveVideoServiceFlag{
		"DONT_FLAG",
		"FLAG",
	}
}

type HlsDirectoryStructure string

// Enum values for HlsDirectoryStructure
const (
	HlsDirectoryStructureSingleDirectory       HlsDirectoryStructure = "SINGLE_DIRECTORY"
	HlsDirectoryStructureSubdirectoryPerStream HlsDirectoryStructure = "SUBDIRECTORY_PER_STREAM"
)

// Values returns all known values for HlsDirectoryStructure. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsDirectoryStructure) Values() []HlsDirectoryStructure {
	return []HlsDirectoryStructure{
		"SINGLE_DIRECTORY",
		"SUBDIRECTORY_PER_STREAM",
	}
}

type HlsEncryptionType string

// Enum values for HlsEncryptionType
const (
	HlsEncryptionTypeAes128    HlsEncryptionType = "AES128"
	HlsEncryptionTypeSampleAes HlsEncryptionType = "SAMPLE_AES"
)

// Values returns all known values for HlsEncryptionType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsEncryptionType) Values() []HlsEncryptionType {
	return []HlsEncryptionType{
		"AES128",
		"SAMPLE_AES",
	}
}

type HlsIFrameOnlyManifest string

// Enum values for HlsIFrameOnlyManifest
const (
	HlsIFrameOnlyManifestInclude HlsIFrameOnlyManifest = "INCLUDE"
	HlsIFrameOnlyManifestExclude HlsIFrameOnlyManifest = "EXCLUDE"
)

// Values returns all known values for HlsIFrameOnlyManifest. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsIFrameOnlyManifest) Values() []HlsIFrameOnlyManifest {
	return []HlsIFrameOnlyManifest{
		"INCLUDE",
		"EXCLUDE",
	}
}

type HlsImageBasedTrickPlay string

// Enum values for HlsImageBasedTrickPlay
const (
	HlsImageBasedTrickPlayNone                  HlsImageBasedTrickPlay = "NONE"
	HlsImageBasedTrickPlayThumbnail             HlsImageBasedTrickPlay = "THUMBNAIL"
	HlsImageBasedTrickPlayThumbnailAndFullframe HlsImageBasedTrickPlay = "THUMBNAIL_AND_FULLFRAME"
	HlsImageBasedTrickPlayAdvanced              HlsImageBasedTrickPlay = "ADVANCED"
)

// Values returns all known values for HlsImageBasedTrickPlay. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsImageBasedTrickPlay) Values() []HlsImageBasedTrickPlay {
	return []HlsImageBasedTrickPlay{
		"NONE",
		"THUMBNAIL",
		"THUMBNAIL_AND_FULLFRAME",
		"ADVANCED",
	}
}

type HlsInitializationVectorInManifest string

// Enum values for HlsInitializationVectorInManifest
const (
	HlsInitializationVectorInManifestInclude HlsInitializationVectorInManifest = "INCLUDE"
	HlsInitializationVectorInManifestExclude HlsInitializationVectorInManifest = "EXCLUDE"
)

// Values returns all known values for HlsInitializationVectorInManifest. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsInitializationVectorInManifest) Values() []HlsInitializationVectorInManifest {
	return []HlsInitializationVectorInManifest{
		"INCLUDE",
		"EXCLUDE",
	}
}

type HlsIntervalCadence string

// Enum values for HlsIntervalCadence
const (
	HlsIntervalCadenceFollowIframe HlsIntervalCadence = "FOLLOW_IFRAME"
	HlsIntervalCadenceFollowCustom HlsIntervalCadence = "FOLLOW_CUSTOM"
)

// Values returns all known values for HlsIntervalCadence. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsIntervalCadence) Values() []HlsIntervalCadence {
	return []HlsIntervalCadence{
		"FOLLOW_IFRAME",
		"FOLLOW_CUSTOM",
	}
}

type HlsKeyProviderType string

// Enum values for HlsKeyProviderType
const (
	HlsKeyProviderTypeSpeke     HlsKeyProviderType = "SPEKE"
	HlsKeyProviderTypeStaticKey HlsKeyProviderType = "STATIC_KEY"
)

// Values returns all known values for HlsKeyProviderType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsKeyProviderType) Values() []HlsKeyProviderType {
	return []HlsKeyProviderType{
		"SPEKE",
		"STATIC_KEY",
	}
}

type HlsManifestCompression string

// Enum values for HlsManifestCompression
const (
	HlsManifestCompressionGzip HlsManifestCompression = "GZIP"
	HlsManifestCompressionNone HlsManifestCompression = "NONE"
)

// Values returns all known values for HlsManifestCompression. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsManifestCompression) Values() []HlsManifestCompression {
	return []HlsManifestCompression{
		"GZIP",
		"NONE",
	}
}

type HlsManifestDurationFormat string

// Enum values for HlsManifestDurationFormat
const (
	HlsManifestDurationFormatFloatingPoint HlsManifestDurationFormat = "FLOATING_POINT"
	HlsManifestDurationFormatInteger       HlsManifestDurationFormat = "INTEGER"
)

// Values returns all known values for HlsManifestDurationFormat. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsManifestDurationFormat) Values() []HlsManifestDurationFormat {
	return []HlsManifestDurationFormat{
		"FLOATING_POINT",
		"INTEGER",
	}
}

type HlsOfflineEncrypted string

// Enum values for HlsOfflineEncrypted
const (
	HlsOfflineEncryptedEnabled  HlsOfflineEncrypted = "ENABLED"
	HlsOfflineEncryptedDisabled HlsOfflineEncrypted = "DISABLED"
)

// Values returns all known values for HlsOfflineEncrypted. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsOfflineEncrypted) Values() []HlsOfflineEncrypted {
	return []HlsOfflineEncrypted{
		"ENABLED",
		"DISABLED",
	}
}

type HlsOutputSelection string

// Enum values for HlsOutputSelection
const (
	HlsOutputSelectionManifestsAndSegments HlsOutputSelection = "MANIFESTS_AND_SEGMENTS"
	HlsOutputSelectionSegmentsOnly         HlsOutputSelection = "SEGMENTS_ONLY"
)

// Values returns all known values for HlsOutputSelection. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsOutputSelection) Values() []HlsOutputSelection {
	return []HlsOutputSelection{
		"MANIFESTS_AND_SEGMENTS",
		"SEGMENTS_ONLY",
	}
}

type HlsProgramDateTime string

// Enum values for HlsProgramDateTime
const (
	HlsProgramDateTimeInclude HlsProgramDateTime = "INCLUDE"
	HlsProgramDateTimeExclude HlsProgramDateTime = "EXCLUDE"
)

// Values returns all known values for HlsProgramDateTime. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsProgramDateTime) Values() []HlsProgramDateTime {
	return []HlsProgramDateTime{
		"INCLUDE",
		"EXCLUDE",
	}
}

type HlsProgressiveWriteHlsManifest string

// Enum values for HlsProgressiveWriteHlsManifest
const (
	HlsProgressiveWriteHlsManifestEnabled  HlsProgressiveWriteHlsManifest = "ENABLED"
	HlsProgressiveWriteHlsManifestDisabled HlsProgressiveWriteHlsManifest = "DISABLED"
)

// Values returns all known values for HlsProgressiveWriteHlsManifest. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsProgressiveWriteHlsManifest) Values() []HlsProgressiveWriteHlsManifest {
	return []HlsProgressiveWriteHlsManifest{
		"ENABLED",
		"DISABLED",
	}
}

type HlsSegmentControl string

// Enum values for HlsSegmentControl
const (
	HlsSegmentControlSingleFile     HlsSegmentControl = "SINGLE_FILE"
	HlsSegmentControlSegmentedFiles HlsSegmentControl = "SEGMENTED_FILES"
)

// Values returns all known values for HlsSegmentControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsSegmentControl) Values() []HlsSegmentControl {
	return []HlsSegmentControl{
		"SINGLE_FILE",
		"SEGMENTED_FILES",
	}
}

type HlsSegmentLengthControl string

// Enum values for HlsSegmentLengthControl
const (
	HlsSegmentLengthControlExact       HlsSegmentLengthControl = "EXACT"
	HlsSegmentLengthControlGopMultiple HlsSegmentLengthControl = "GOP_MULTIPLE"
	HlsSegmentLengthControlMatch       HlsSegmentLengthControl = "MATCH"
)

// Values returns all known values for HlsSegmentLengthControl. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsSegmentLengthControl) Values() []HlsSegmentLengthControl {
	return []HlsSegmentLengthControl{
		"EXACT",
		"GOP_MULTIPLE",
		"MATCH",
	}
}

type HlsStreamInfResolution string

// Enum values for HlsStreamInfResolution
const (
	HlsStreamInfResolutionInclude HlsStreamInfResolution = "INCLUDE"
	HlsStreamInfResolutionExclude HlsStreamInfResolution = "EXCLUDE"
)

// Values returns all known values for HlsStreamInfResolution. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsStreamInfResolution) Values() []HlsStreamInfResolution {
	return []HlsStreamInfResolution{
		"INCLUDE",
		"EXCLUDE",
	}
}

type HlsTargetDurationCompatibilityMode string

// Enum values for HlsTargetDurationCompatibilityMode
const (
	HlsTargetDurationCompatibilityModeLegacy        HlsTargetDurationCompatibilityMode = "LEGACY"
	HlsTargetDurationCompatibilityModeSpecCompliant HlsTargetDurationCompatibilityMode = "SPEC_COMPLIANT"
)

// Values returns all known values for HlsTargetDurationCompatibilityMode. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsTargetDurationCompatibilityMode) Values() []HlsTargetDurationCompatibilityMode {
	return []HlsTargetDurationCompatibilityMode{
		"LEGACY",
		"SPEC_COMPLIANT",
	}
}

type HlsTimedMetadataId3Frame string

// Enum values for HlsTimedMetadataId3Frame
const (
	HlsTimedMetadataId3FrameNone HlsTimedMetadataId3Frame = "NONE"
	HlsTimedMetadataId3FramePriv HlsTimedMetadataId3Frame = "PRIV"
	HlsTimedMetadataId3FrameTdrl HlsTimedMetadataId3Frame = "TDRL"
)

// Values returns all known values for HlsTimedMetadataId3Frame. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (HlsTimedMetadataId3Frame) Values() []HlsTimedMetadataId3Frame {
	return []HlsTimedMetadataId3Frame{
		"NONE",
		"PRIV",
		"TDRL",
	}
}

type ImscAccessibilitySubs string

// Enum values for ImscAccessibilitySubs
const (
	ImscAccessibilitySubsDisabled ImscAccessibilitySubs = "DISABLED"
	ImscAccessibilitySubsEnabled  ImscAccessibilitySubs = "ENABLED"
)

// Values returns all known values for ImscAccessibilitySubs. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ImscAccessibilitySubs) Values() []ImscAccessibilitySubs {
	return []ImscAccessibilitySubs{
		"DISABLED",
		"ENABLED",
	}
}

type ImscStylePassthrough string

// Enum values for ImscStylePassthrough
const (
	ImscStylePassthroughEnabled  ImscStylePassthrough = "ENABLED"
	ImscStylePassthroughDisabled ImscStylePassthrough = "DISABLED"
)

// Values returns all known values for ImscStylePassthrough. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ImscStylePassthrough) Values() []ImscStylePassthrough {
	return []ImscStylePassthrough{
		"ENABLED",
		"DISABLED",
	}
}

type InputDeblockFilter string

// Enum values for InputDeblockFilter
const (
	InputDeblockFilterEnabled  InputDeblockFilter = "ENABLED"
	InputDeblockFilterDisabled InputDeblockFilter = "DISABLED"
)

// Values returns all known values for InputDeblockFilter. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InputDeblockFilter) Values() []InputDeblockFilter {
	return []InputDeblockFilter{
		"ENABLED",
		"DISABLED",
	}
}

type InputDenoiseFilter string

// Enum values for InputDenoiseFilter
const (
	InputDenoiseFilterEnabled  InputDenoiseFilter = "ENABLED"
	InputDenoiseFilterDisabled InputDenoiseFilter = "DISABLED"
)

// Values returns all known values for InputDenoiseFilter. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InputDenoiseFilter) Values() []InputDenoiseFilter {
	return []InputDenoiseFilter{
		"ENABLED",
		"DISABLED",
	}
}

type InputFilterEnable string

// Enum values for InputFilterEnable
const (
	InputFilterEnableAuto    InputFilterEnable = "AUTO"
	InputFilterEnableDisable InputFilterEnable = "DISABLE"
	InputFilterEnableForce   InputFilterEnable = "FORCE"
)

// Values returns all known values for InputFilterEnable. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InputFilterEnable) Values() []InputFilterEnable {
	return []InputFilterEnable{
		"AUTO",
		"DISABLE",
		"FORCE",
	}
}

type InputPolicy string

// Enum values for InputPolicy
const (
	InputPolicyAllowed    InputPolicy = "ALLOWED"
	InputPolicyDisallowed InputPolicy = "DISALLOWED"
)

// Values returns all known values for InputPolicy. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InputPolicy) Values() []InputPolicy {
	return []InputPolicy{
		"ALLOWED",
		"DISALLOWED",
	}
}

type InputPsiControl string

// Enum values for InputPsiControl
const (
	InputPsiControlIgnorePsi InputPsiControl = "IGNORE_PSI"
	InputPsiControlUsePsi    InputPsiControl = "USE_PSI"
)

// Values returns all known values for InputPsiControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InputPsiControl) Values() []InputPsiControl {
	return []InputPsiControl{
		"IGNORE_PSI",
		"USE_PSI",
	}
}

type InputRotate string

// Enum values for InputRotate
const (
	InputRotateDegree0    InputRotate = "DEGREE_0"
	InputRotateDegrees90  InputRotate = "DEGREES_90"
	InputRotateDegrees180 InputRotate = "DEGREES_180"
	InputRotateDegrees270 InputRotate = "DEGREES_270"
	InputRotateAuto       InputRotate = "AUTO"
)

// Values returns all known values for InputRotate. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InputRotate) Values() []InputRotate {
	return []InputRotate{
		"DEGREE_0",
		"DEGREES_90",
		"DEGREES_180",
		"DEGREES_270",
		"AUTO",
	}
}

type InputSampleRange string

// Enum values for InputSampleRange
const (
	InputSampleRangeFollow       InputSampleRange = "FOLLOW"
	InputSampleRangeFullRange    InputSampleRange = "FULL_RANGE"
	InputSampleRangeLimitedRange InputSampleRange = "LIMITED_RANGE"
)

// Values returns all known values for InputSampleRange. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InputSampleRange) Values() []InputSampleRange {
	return []InputSampleRange{
		"FOLLOW",
		"FULL_RANGE",
		"LIMITED_RANGE",
	}
}

type InputScanType string

// Enum values for InputScanType
const (
	InputScanTypeAuto InputScanType = "AUTO"
	InputScanTypePsf  InputScanType = "PSF"
)

// Values returns all known values for InputScanType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InputScanType) Values() []InputScanType {
	return []InputScanType{
		"AUTO",
		"PSF",
	}
}

type InputTimecodeSource string

// Enum values for InputTimecodeSource
const (
	InputTimecodeSourceEmbedded       InputTimecodeSource = "EMBEDDED"
	InputTimecodeSourceZerobased      InputTimecodeSource = "ZEROBASED"
	InputTimecodeSourceSpecifiedstart InputTimecodeSource = "SPECIFIEDSTART"
)

// Values returns all known values for InputTimecodeSource. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InputTimecodeSource) Values() []InputTimecodeSource {
	return []InputTimecodeSource{
		"EMBEDDED",
		"ZEROBASED",
		"SPECIFIEDSTART",
	}
}

type JobPhase string

// Enum values for JobPhase
const (
	JobPhaseProbing     JobPhase = "PROBING"
	JobPhaseTranscoding JobPhase = "TRANSCODING"
	JobPhaseUploading   JobPhase = "UPLOADING"
)

// Values returns all known values for JobPhase. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (JobPhase) Values() []JobPhase {
	return []JobPhase{
		"PROBING",
		"TRANSCODING",
		"UPLOADING",
	}
}

type JobStatus string

// Enum values for JobStatus
const (
	JobStatusSubmitted   JobStatus = "SUBMITTED"
	JobStatusProgressing JobStatus = "PROGRESSING"
	JobStatusComplete    JobStatus = "COMPLETE"
	JobStatusCanceled    JobStatus = "CANCELED"
	JobStatusError       JobStatus = "ERROR"
)

// Values returns all known values for JobStatus. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (JobStatus) Values() []JobStatus {
	return []JobStatus{
		"SUBMITTED",
		"PROGRESSING",
		"COMPLETE",
		"CANCELED",
		"ERROR",
	}
}

type JobTemplateListBy string

// Enum values for JobTemplateListBy
const (
	JobTemplateListByName         JobTemplateListBy = "NAME"
	JobTemplateListByCreationDate JobTemplateListBy = "CREATION_DATE"
	JobTemplateListBySystem       JobTemplateListBy = "SYSTEM"
)

// Values returns all known values for JobTemplateListBy. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (JobTemplateListBy) Values() []JobTemplateListBy {
	return []JobTemplateListBy{
		"NAME",
		"CREATION_DATE",
		"SYSTEM",
	}
}

type LanguageCode string

// Enum values for LanguageCode
const (
	LanguageCodeEng LanguageCode = "ENG"
	LanguageCodeSpa LanguageCode = "SPA"
	LanguageCodeFra LanguageCode = "FRA"
	LanguageCodeDeu LanguageCode = "DEU"
	LanguageCodeGer LanguageCode = "GER"
	LanguageCodeZho LanguageCode = "ZHO"
	LanguageCodeAra LanguageCode = "ARA"
	LanguageCodeHin LanguageCode = "HIN"
	LanguageCodeJpn LanguageCode = "JPN"
	LanguageCodeRus LanguageCode = "RUS"
	LanguageCodePor LanguageCode = "POR"
	LanguageCodeIta LanguageCode = "ITA"
	LanguageCodeUrd LanguageCode = "URD"
	LanguageCodeVie LanguageCode = "VIE"
	LanguageCodeKor LanguageCode = "KOR"
	LanguageCodePan LanguageCode = "PAN"
	LanguageCodeAbk LanguageCode = "ABK"
	LanguageCodeAar LanguageCode = "AAR"
	LanguageCodeAfr LanguageCode = "AFR"
	LanguageCodeAka LanguageCode = "AKA"
	LanguageCodeSqi LanguageCode = "SQI"
	LanguageCodeAmh LanguageCode = "AMH"
	LanguageCodeArg LanguageCode = "ARG"
	LanguageCodeHye LanguageCode = "HYE"
	LanguageCodeAsm LanguageCode = "ASM"
	LanguageCodeAva LanguageCode = "AVA"
	LanguageCodeAve LanguageCode = "AVE"
	LanguageCodeAym LanguageCode = "AYM"
	LanguageCodeAze LanguageCode = "AZE"
	LanguageCodeBam LanguageCode = "BAM"
	LanguageCodeBak LanguageCode = "BAK"
	LanguageCodeEus LanguageCode = "EUS"
	LanguageCodeBel LanguageCode = "BEL"
	LanguageCodeBen LanguageCode = "BEN"
	LanguageCodeBih LanguageCode = "BIH"
	LanguageCodeBis LanguageCode = "BIS"
	LanguageCodeBos LanguageCode = "BOS"
	LanguageCodeBre LanguageCode = "BRE"
	LanguageCodeBul LanguageCode = "BUL"
	LanguageCodeMya LanguageCode = "MYA"
	LanguageCodeCat LanguageCode = "CAT"
	LanguageCodeKhm LanguageCode = "KHM"
	LanguageCodeCha LanguageCode = "CHA"
	LanguageCodeChe LanguageCode = "CHE"
	LanguageCodeNya LanguageCode = "NYA"
	LanguageCodeChu LanguageCode = "CHU"
	LanguageCodeChv LanguageCode = "CHV"
	LanguageCodeCor LanguageCode = "COR"
	LanguageCodeCos LanguageCode = "COS"
	LanguageCodeCre LanguageCode = "CRE"
	LanguageCodeHrv LanguageCode = "HRV"
	LanguageCodeCes LanguageCode = "CES"
	LanguageCodeDan LanguageCode = "DAN"
	LanguageCodeDiv LanguageCode = "DIV"
	LanguageCodeNld LanguageCode = "NLD"
	LanguageCodeDzo LanguageCode = "DZO"
	LanguageCodeEnm LanguageCode = "ENM"
	LanguageCodeEpo LanguageCode = "EPO"
	LanguageCodeEst LanguageCode = "EST"
	LanguageCodeEwe LanguageCode = "EWE"
	LanguageCodeFao LanguageCode = "FAO"
	LanguageCodeFij LanguageCode = "FIJ"
	LanguageCodeFin LanguageCode = "FIN"
	LanguageCodeFrm LanguageCode = "FRM"
	LanguageCodeFul LanguageCode = "FUL"
	LanguageCodeGla LanguageCode = "GLA"
	LanguageCodeGlg LanguageCode = "GLG"
	LanguageCodeLug LanguageCode = "LUG"
	LanguageCodeKat LanguageCode = "KAT"
	LanguageCodeEll LanguageCode = "ELL"
	LanguageCodeGrn LanguageCode = "GRN"
	LanguageCodeGuj LanguageCode = "GUJ"
	LanguageCodeHat LanguageCode = "HAT"
	LanguageCodeHau LanguageCode = "HAU"
	LanguageCodeHeb LanguageCode = "HEB"
	LanguageCodeHer LanguageCode = "HER"
	LanguageCodeHmo LanguageCode = "HMO"
	LanguageCodeHun LanguageCode = "HUN"
	LanguageCodeIsl LanguageCode = "ISL"
	LanguageCodeIdo LanguageCode = "IDO"
	LanguageCodeIbo LanguageCode = "IBO"
	LanguageCodeInd LanguageCode = "IND"
	LanguageCodeIna LanguageCode = "INA"
	LanguageCodeIle LanguageCode = "ILE"
	LanguageCodeIku LanguageCode = "IKU"
	LanguageCodeIpk LanguageCode = "IPK"
	LanguageCodeGle LanguageCode = "GLE"
	LanguageCodeJav LanguageCode = "JAV"
	LanguageCodeKal LanguageCode = "KAL"
	LanguageCodeKan LanguageCode = "KAN"
	LanguageCodeKau LanguageCode = "KAU"
	LanguageCodeKas LanguageCode = "KAS"
	LanguageCodeKaz LanguageCode = "KAZ"
	LanguageCodeKik LanguageCode = "KIK"
	LanguageCodeKin LanguageCode = "KIN"
	LanguageCodeKir LanguageCode = "KIR"
	LanguageCodeKom LanguageCode = "KOM"
	LanguageCodeKon LanguageCode = "KON"
	LanguageCodeKua LanguageCode = "KUA"
	LanguageCodeKur LanguageCode = "KUR"
	LanguageCodeLao LanguageCode = "LAO"
	LanguageCodeLat LanguageCode = "LAT"
	LanguageCodeLav LanguageCode = "LAV"
	LanguageCodeLim LanguageCode = "LIM"
	LanguageCodeLin LanguageCode = "LIN"
	LanguageCodeLit LanguageCode = "LIT"
	LanguageCodeLub LanguageCode = "LUB"
	LanguageCodeLtz LanguageCode = "LTZ"
	LanguageCodeMkd LanguageCode = "MKD"
	LanguageCodeMlg LanguageCode = "MLG"
	LanguageCodeMsa LanguageCode = "MSA"
	LanguageCodeMal LanguageCode = "MAL"
	LanguageCodeMlt LanguageCode = "MLT"
	LanguageCodeGlv LanguageCode = "GLV"
	LanguageCodeMri LanguageCode = "MRI"
	LanguageCodeMar LanguageCode = "MAR"
	LanguageCodeMah LanguageCode = "MAH"
	LanguageCodeMon LanguageCode = "MON"
	LanguageCodeNau LanguageCode = "NAU"
	LanguageCodeNav LanguageCode = "NAV"
	LanguageCodeNde LanguageCode = "NDE"
	LanguageCodeNbl LanguageCode = "NBL"
	LanguageCodeNdo LanguageCode = "NDO"
	LanguageCodeNep LanguageCode = "NEP"
	LanguageCodeSme LanguageCode = "SME"
	LanguageCodeNor LanguageCode = "NOR"
	LanguageCodeNob LanguageCode = "NOB"
	LanguageCodeNno LanguageCode = "NNO"
	LanguageCodeOci LanguageCode = "OCI"
	LanguageCodeOji LanguageCode = "OJI"
	LanguageCodeOri LanguageCode = "ORI"
	LanguageCodeOrm LanguageCode = "ORM"
	LanguageCodeOss LanguageCode = "OSS"
	LanguageCodePli LanguageCode = "PLI"
	LanguageCodeFas LanguageCode = "FAS"
	LanguageCodePol LanguageCode = "POL"
	LanguageCodePus LanguageCode = "PUS"
	LanguageCodeQue LanguageCode = "QUE"
	LanguageCodeQaa LanguageCode = "QAA"
	LanguageCodeRon LanguageCode = "RON"
	LanguageCodeRoh LanguageCode = "ROH"
	LanguageCodeRun LanguageCode = "RUN"
	LanguageCodeSmo LanguageCode = "SMO"
	LanguageCodeSag LanguageCode = "SAG"
	LanguageCodeSan LanguageCode = "SAN"
	LanguageCodeSrd LanguageCode = "SRD"
	LanguageCodeSrb LanguageCode = "SRB"
	LanguageCodeSna LanguageCode = "SNA"
	LanguageCodeIii LanguageCode = "III"
	LanguageCodeSnd LanguageCode = "SND"
	LanguageCodeSin LanguageCode = "SIN"
	LanguageCodeSlk LanguageCode = "SLK"
	LanguageCodeSlv LanguageCode = "SLV"
	LanguageCodeSom LanguageCode = "SOM"
	LanguageCodeSot LanguageCode = "SOT"
	LanguageCodeSun LanguageCode = "SUN"
	LanguageCodeSwa LanguageCode = "SWA"
	LanguageCodeSsw LanguageCode = "SSW"
	LanguageCodeSwe LanguageCode = "SWE"
	LanguageCodeTgl LanguageCode = "TGL"
	LanguageCodeTah LanguageCode = "TAH"
	LanguageCodeTgk LanguageCode = "TGK"
	LanguageCodeTam LanguageCode = "TAM"
	LanguageCodeTat LanguageCode = "TAT"
	LanguageCodeTel LanguageCode = "TEL"
	LanguageCodeTha LanguageCode = "THA"
	LanguageCodeBod LanguageCode = "BOD"
	LanguageCodeTir LanguageCode = "TIR"
	LanguageCodeTon LanguageCode = "TON"
	LanguageCodeTso LanguageCode = "TSO"
	LanguageCodeTsn LanguageCode = "TSN"
	LanguageCodeTur LanguageCode = "TUR"
	LanguageCodeTuk LanguageCode = "TUK"
	LanguageCodeTwi LanguageCode = "TWI"
	LanguageCodeUig LanguageCode = "UIG"
	LanguageCodeUkr LanguageCode = "UKR"
	LanguageCodeUzb LanguageCode = "UZB"
	LanguageCodeVen LanguageCode = "VEN"
	LanguageCodeVol LanguageCode = "VOL"
	LanguageCodeWln LanguageCode = "WLN"
	LanguageCodeCym LanguageCode = "CYM"
	LanguageCodeFry LanguageCode = "FRY"
	LanguageCodeWol LanguageCode = "WOL"
	LanguageCodeXho LanguageCode = "XHO"
	LanguageCodeYid LanguageCode = "YID"
	LanguageCodeYor LanguageCode = "YOR"
	LanguageCodeZha LanguageCode = "ZHA"
	LanguageCodeZul LanguageCode = "ZUL"
	LanguageCodeOrj LanguageCode = "ORJ"
	LanguageCodeQpc LanguageCode = "QPC"
	LanguageCodeTng LanguageCode = "TNG"
	LanguageCodeSrp LanguageCode = "SRP"
)

// Values returns all known values for LanguageCode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LanguageCode) Values() []LanguageCode {
	return []LanguageCode{
		"ENG",
		"SPA",
		"FRA",
		"DEU",
		"GER",
		"ZHO",
		"ARA",
		"HIN",
		"JPN",
		"RUS",
		"POR",
		"ITA",
		"URD",
		"VIE",
		"KOR",
		"PAN",
		"ABK",
		"AAR",
		"AFR",
		"AKA",
		"SQI",
		"AMH",
		"ARG",
		"HYE",
		"ASM",
		"AVA",
		"AVE",
		"AYM",
		"AZE",
		"BAM",
		"BAK",
		"EUS",
		"BEL",
		"BEN",
		"BIH",
		"BIS",
		"BOS",
		"BRE",
		"BUL",
		"MYA",
		"CAT",
		"KHM",
		"CHA",
		"CHE",
		"NYA",
		"CHU",
		"CHV",
		"COR",
		"COS",
		"CRE",
		"HRV",
		"CES",
		"DAN",
		"DIV",
		"NLD",
		"DZO",
		"ENM",
		"EPO",
		"EST",
		"EWE",
		"FAO",
		"FIJ",
		"FIN",
		"FRM",
		"FUL",
		"GLA",
		"GLG",
		"LUG",
		"KAT",
		"ELL",
		"GRN",
		"GUJ",
		"HAT",
		"HAU",
		"HEB",
		"HER",
		"HMO",
		"HUN",
		"ISL",
		"IDO",
		"IBO",
		"IND",
		"INA",
		"ILE",
		"IKU",
		"IPK",
		"GLE",
		"JAV",
		"KAL",
		"KAN",
		"KAU",
		"KAS",
		"KAZ",
		"KIK",
		"KIN",
		"KIR",
		"KOM",
		"KON",
		"KUA",
		"KUR",
		"LAO",
		"LAT",
		"LAV",
		"LIM",
		"LIN",
		"LIT",
		"LUB",
		"LTZ",
		"MKD",
		"MLG",
		"MSA",
		"MAL",
		"MLT",
		"GLV",
		"MRI",
		"MAR",
		"MAH",
		"MON",
		"NAU",
		"NAV",
		"NDE",
		"NBL",
		"NDO",
		"NEP",
		"SME",
		"NOR",
		"NOB",
		"NNO",
		"OCI",
		"OJI",
		"ORI",
		"ORM",
		"OSS",
		"PLI",
		"FAS",
		"POL",
		"PUS",
		"QUE",
		"QAA",
		"RON",
		"ROH",
		"RUN",
		"SMO",
		"SAG",
		"SAN",
		"SRD",
		"SRB",
		"SNA",
		"III",
		"SND",
		"SIN",
		"SLK",
		"SLV",
		"SOM",
		"SOT",
		"SUN",
		"SWA",
		"SSW",
		"SWE",
		"TGL",
		"TAH",
		"TGK",
		"TAM",
		"TAT",
		"TEL",
		"THA",
		"BOD",
		"TIR",
		"TON",
		"TSO",
		"TSN",
		"TUR",
		"TUK",
		"TWI",
		"UIG",
		"UKR",
		"UZB",
		"VEN",
		"VOL",
		"WLN",
		"CYM",
		"FRY",
		"WOL",
		"XHO",
		"YID",
		"YOR",
		"ZHA",
		"ZUL",
		"ORJ",
		"QPC",
		"TNG",
		"SRP",
	}
}

type M2tsAudioBufferModel string

// Enum values for M2tsAudioBufferModel
const (
	M2tsAudioBufferModelDvb  M2tsAudioBufferModel = "DVB"
	M2tsAudioBufferModelAtsc M2tsAudioBufferModel = "ATSC"
)

// Values returns all known values for M2tsAudioBufferModel. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (M2tsAudioBufferModel) Values() []M2tsAudioBufferModel {
	return []M2tsAudioBufferModel{
		"DVB",
		"ATSC",
	}
}

type M2tsAudioDuration string

// Enum values for M2tsAudioDuration
const (
	M2tsAudioDurationDefaultCodecDuration M2tsAudioDuration = "DEFAULT_CODEC_DURATION"
	M2tsAudioDurationMatchVideoDuration   M2tsAudioDuration = "MATCH_VIDEO_DURATION"
)

// Values returns all known values for M2tsAudioDuration. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (M2tsAudioDuration) Values() []M2tsAudioDuration {
	return []M2tsAudioDuration{
		"DEFAULT_CODEC_DURATION",
		"MATCH_VIDEO_DURATION",
	}
}

type M2tsBufferModel string

// Enum values for M2tsBufferModel
const (
	M2tsBufferModelMultiplex M2tsBufferModel = "MULTIPLEX"
	M2tsBufferModelNone      M2tsBufferModel = "NONE"
)

// Values returns all known values for M2tsBufferModel. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (M2tsBufferModel) Values() []M2tsBufferModel {
	return []M2tsBufferModel{
		"MULTIPLEX",
		"NONE",
	}
}

type M2tsDataPtsControl string

// Enum values for M2tsDataPtsControl
const (
	M2tsDataPtsControlAuto         M2tsDataPtsControl = "AUTO"
	M2tsDataPtsControlAlignToVideo M2tsDataPtsControl = "ALIGN_TO_VIDEO"
)

// Values returns all known values for M2tsDataPtsControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (M2tsDataPtsControl) Values() []M2tsDataPtsControl {
	return []M2tsDataPtsControl{
		"AUTO",
		"ALIGN_TO_VIDEO",
	}
}

type M2tsEbpAudioInterval string

// Enum values for M2tsEbpAudioInterval
const (
	M2tsEbpAudioIntervalVideoAndFixedIntervals M2tsEbpAudioInterval = "VIDEO_AND_FIXED_INTERVALS"
	M2tsEbpAudioIntervalVideoInterval          M2tsEbpAudioInterval = "VIDEO_INTERVAL"
)

// Values returns all known values for M2tsEbpAudioInterval. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (M2tsEbpAudioInterval) Values() []M2tsEbpAudioInterval {
	return []M2tsEbpAudioInterval{
		"VIDEO_AND_FIXED_INTERVALS",
		"VIDEO_INTERVAL",
	}
}

type M2tsEbpPlacement string

// Enum values for M2tsEbpPlacement
const (
	M2tsEbpPlacementVideoAndAudioPids M2tsEbpPlacement = "VIDEO_AND_AUDIO_PIDS"
	M2tsEbpPlacementVideoPid          M2tsEbpPlacement = "VIDEO_PID"
)

// Values returns all known values for M2tsEbpPlacement. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (M2tsEbpPlacement) Values() []M2tsEbpPlacement {
	return []M2tsEbpPlacement{
		"VIDEO_AND_AUDIO_PIDS",
		"VIDEO_PID",
	}
}

type M2tsEsRateInPes string

// Enum values for M2tsEsRateInPes
const (
	M2tsEsRateInPesInclude M2tsEsRateInPes = "INCLUDE"
	M2tsEsRateInPesExclude M2tsEsRateInPes = "EXCLUDE"
)

// Values returns all known values for M2tsEsRateInPes. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (M2tsEsRateInPes) Values() []M2tsEsRateInPes {
	return []M2tsEsRateInPes{
		"INCLUDE",
		"EXCLUDE",
	}
}

type M2tsForceTsVideoEbpOrder string

// Enum values for M2tsForceTsVideoEbpOrder
const (
	M2tsForceTsVideoEbpOrderForce   M2tsForceTsVideoEbpOrder = "FORCE"
	M2tsForceTsVideoEbpOrderDefault M2tsForceTsVideoEbpOrder = "DEFAULT"
)

// Values returns all known values for M2tsForceTsVideoEbpOrder. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (M2tsForceTsVideoEbpOrder) Values() []M2tsForceTsVideoEbpOrder {
	return []M2tsForceTsVideoEbpOrder{
		"FORCE",
		"DEFAULT",
	}
}

type M2tsKlvMetadata string

// Enum values for M2tsKlvMetadata
const (
	M2tsKlvMetadataPassthrough M2tsKlvMetadata = "PASSTHROUGH"
	M2tsKlvMetadataNone        M2tsKlvMetadata = "NONE"
)

// Values returns all known values for M2tsKlvMetadata. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (M2tsKlvMetadata) Values() []M2tsKlvMetadata {
	return []M2tsKlvMetadata{
		"PASSTHROUGH",
		"NONE",
	}
}

type M2tsNielsenId3 string

// Enum values for M2tsNielsenId3
const (
	M2tsNielsenId3Insert M2tsNielsenId3 = "INSERT"
	M2tsNielsenId3None   M2tsNielsenId3 = "NONE"
)

// Values returns all known values for M2tsNielsenId3. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (M2tsNielsenId3) Values() []M2tsNielsenId3 {
	return []M2tsNielsenId3{
		"INSERT",
		"NONE",
	}
}

type M2tsPcrControl string

// Enum values for M2tsPcrControl
const (
	M2tsPcrControlPcrEveryPesPacket   M2tsPcrControl = "PCR_EVERY_PES_PACKET"
	M2tsPcrControlConfiguredPcrPeriod M2tsPcrControl = "CONFIGURED_PCR_PERIOD"
)

// Values returns all known values for M2tsPcrControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (M2tsPcrControl) Values() []M2tsPcrControl {
	return []M2tsPcrControl{
		"PCR_EVERY_PES_PACKET",
		"CONFIGURED_PCR_PERIOD",
	}
}

type M2tsPreventBufferUnderflow string

// Enum values for M2tsPreventBufferUnderflow
const (
	M2tsPreventBufferUnderflowDisabled M2tsPreventBufferUnderflow = "DISABLED"
	M2tsPreventBufferUnderflowEnabled  M2tsPreventBufferUnderflow = "ENABLED"
)

// Values returns all known values for M2tsPreventBufferUnderflow. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (M2tsPreventBufferUnderflow) Values() []M2tsPreventBufferUnderflow {
	return []M2tsPreventBufferUnderflow{
		"DISABLED",
		"ENABLED",
	}
}

type M2tsRateMode string

// Enum values for M2tsRateMode
const (
	M2tsRateModeVbr M2tsRateMode = "VBR"
	M2tsRateModeCbr M2tsRateMode = "CBR"
)

// Values returns all known values for M2tsRateMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (M2tsRateMode) Values() []M2tsRateMode {
	return []M2tsRateMode{
		"VBR",
		"CBR",
	}
}

type M2tsScte35Source string

// Enum values for M2tsScte35Source
const (
	M2tsScte35SourcePassthrough M2tsScte35Source = "PASSTHROUGH"
	M2tsScte35SourceNone        M2tsScte35Source = "NONE"
)

// Values returns all known values for M2tsScte35Source. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (M2tsScte35Source) Values() []M2tsScte35Source {
	return []M2tsScte35Source{
		"PASSTHROUGH",
		"NONE",
	}
}

type M2tsSegmentationMarkers string

// Enum values for M2tsSegmentationMarkers
const (
	M2tsSegmentationMarkersNone        M2tsSegmentationMarkers = "NONE"
	M2tsSegmentationMarkersRaiSegstart M2tsSegmentationMarkers = "RAI_SEGSTART"
	M2tsSegmentationMarkersRaiAdapt    M2tsSegmentationMarkers = "RAI_ADAPT"
	M2tsSegmentationMarkersPsiSegstart M2tsSegmentationMarkers = "PSI_SEGSTART"
	M2tsSegmentationMarkersEbp         M2tsSegmentationMarkers = "EBP"
	M2tsSegmentationMarkersEbpLegacy   M2tsSegmentationMarkers = "EBP_LEGACY"
)

// Values returns all known values for M2tsSegmentationMarkers. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (M2tsSegmentationMarkers) Values() []M2tsSegmentationMarkers {
	return []M2tsSegmentationMarkers{
		"NONE",
		"RAI_SEGSTART",
		"RAI_ADAPT",
		"PSI_SEGSTART",
		"EBP",
		"EBP_LEGACY",
	}
}

type M2tsSegmentationStyle string

// Enum values for M2tsSegmentationStyle
const (
	M2tsSegmentationStyleMaintainCadence M2tsSegmentationStyle = "MAINTAIN_CADENCE"
	M2tsSegmentationStyleResetCadence    M2tsSegmentationStyle = "RESET_CADENCE"
)

// Values returns all known values for M2tsSegmentationStyle. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (M2tsSegmentationStyle) Values() []M2tsSegmentationStyle {
	return []M2tsSegmentationStyle{
		"MAINTAIN_CADENCE",
		"RESET_CADENCE",
	}
}

type M3u8AudioDuration string

// Enum values for M3u8AudioDuration
const (
	M3u8AudioDurationDefaultCodecDuration M3u8AudioDuration = "DEFAULT_CODEC_DURATION"
	M3u8AudioDurationMatchVideoDuration   M3u8AudioDuration = "MATCH_VIDEO_DURATION"
)

// Values returns all known values for M3u8AudioDuration. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (M3u8AudioDuration) Values() []M3u8AudioDuration {
	return []M3u8AudioDuration{
		"DEFAULT_CODEC_DURATION",
		"MATCH_VIDEO_DURATION",
	}
}

type M3u8DataPtsControl string

// Enum values for M3u8DataPtsControl
const (
	M3u8DataPtsControlAuto         M3u8DataPtsControl = "AUTO"
	M3u8DataPtsControlAlignToVideo M3u8DataPtsControl = "ALIGN_TO_VIDEO"
)

// Values returns all known values for M3u8DataPtsControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (M3u8DataPtsControl) Values() []M3u8DataPtsControl {
	return []M3u8DataPtsControl{
		"AUTO",
		"ALIGN_TO_VIDEO",
	}
}

type M3u8NielsenId3 string

// Enum values for M3u8NielsenId3
const (
	M3u8NielsenId3Insert M3u8NielsenId3 = "INSERT"
	M3u8NielsenId3None   M3u8NielsenId3 = "NONE"
)

// Values returns all known values for M3u8NielsenId3. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (M3u8NielsenId3) Values() []M3u8NielsenId3 {
	return []M3u8NielsenId3{
		"INSERT",
		"NONE",
	}
}

type M3u8PcrControl string

// Enum values for M3u8PcrControl
const (
	M3u8PcrControlPcrEveryPesPacket   M3u8PcrControl = "PCR_EVERY_PES_PACKET"
	M3u8PcrControlConfiguredPcrPeriod M3u8PcrControl = "CONFIGURED_PCR_PERIOD"
)

// Values returns all known values for M3u8PcrControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (M3u8PcrControl) Values() []M3u8PcrControl {
	return []M3u8PcrControl{
		"PCR_EVERY_PES_PACKET",
		"CONFIGURED_PCR_PERIOD",
	}
}

type M3u8Scte35Source string

// Enum values for M3u8Scte35Source
const (
	M3u8Scte35SourcePassthrough M3u8Scte35Source = "PASSTHROUGH"
	M3u8Scte35SourceNone        M3u8Scte35Source = "NONE"
)

// Values returns all known values for M3u8Scte35Source. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (M3u8Scte35Source) Values() []M3u8Scte35Source {
	return []M3u8Scte35Source{
		"PASSTHROUGH",
		"NONE",
	}
}

type MatrixCoefficients string

// Enum values for MatrixCoefficients
const (
	MatrixCoefficientsRgb          MatrixCoefficients = "RGB"
	MatrixCoefficientsItu709       MatrixCoefficients = "ITU_709"
	MatrixCoefficientsUnspecified  MatrixCoefficients = "UNSPECIFIED"
	MatrixCoefficientsReserved     MatrixCoefficients = "RESERVED"
	MatrixCoefficientsFcc          MatrixCoefficients = "FCC"
	MatrixCoefficientsItu470bg     MatrixCoefficients = "ITU_470BG"
	MatrixCoefficientsSmpte170m    MatrixCoefficients = "SMPTE_170M"
	MatrixCoefficientsSmpte240m    MatrixCoefficients = "SMPTE_240M"
	MatrixCoefficientsYCgCo        MatrixCoefficients = "YCgCo"
	MatrixCoefficientsItu2020Ncl   MatrixCoefficients = "ITU_2020_NCL"
	MatrixCoefficientsItu2020Cl    MatrixCoefficients = "ITU_2020_CL"
	MatrixCoefficientsSmpte2085    MatrixCoefficients = "SMPTE_2085"
	MatrixCoefficientsCdNcl        MatrixCoefficients = "CD_NCL"
	MatrixCoefficientsCdCl         MatrixCoefficients = "CD_CL"
	MatrixCoefficientsItu2100ICtCp MatrixCoefficients = "ITU_2100ICtCp"
	MatrixCoefficientsIpt          MatrixCoefficients = "IPT"
	MatrixCoefficientsEbu3213      MatrixCoefficients = "EBU3213"
	MatrixCoefficientsLast         MatrixCoefficients = "LAST"
)

// Values returns all known values for MatrixCoefficients. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MatrixCoefficients) Values() []MatrixCoefficients {
	return []MatrixCoefficients{
		"RGB",
		"ITU_709",
		"UNSPECIFIED",
		"RESERVED",
		"FCC",
		"ITU_470BG",
		"SMPTE_170M",
		"SMPTE_240M",
		"YCgCo",
		"ITU_2020_NCL",
		"ITU_2020_CL",
		"SMPTE_2085",
		"CD_NCL",
		"CD_CL",
		"ITU_2100ICtCp",
		"IPT",
		"EBU3213",
		"LAST",
	}
}

type MotionImageInsertionMode string

// Enum values for MotionImageInsertionMode
const (
	MotionImageInsertionModeMov MotionImageInsertionMode = "MOV"
	MotionImageInsertionModePng MotionImageInsertionMode = "PNG"
)

// Values returns all known values for MotionImageInsertionMode. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MotionImageInsertionMode) Values() []MotionImageInsertionMode {
	return []MotionImageInsertionMode{
		"MOV",
		"PNG",
	}
}

type MotionImagePlayback string

// Enum values for MotionImagePlayback
const (
	MotionImagePlaybackOnce   MotionImagePlayback = "ONCE"
	MotionImagePlaybackRepeat MotionImagePlayback = "REPEAT"
)

// Values returns all known values for MotionImagePlayback. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MotionImagePlayback) Values() []MotionImagePlayback {
	return []MotionImagePlayback{
		"ONCE",
		"REPEAT",
	}
}

type MovClapAtom string

// Enum values for MovClapAtom
const (
	MovClapAtomInclude MovClapAtom = "INCLUDE"
	MovClapAtomExclude MovClapAtom = "EXCLUDE"
)

// Values returns all known values for MovClapAtom. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MovClapAtom) Values() []MovClapAtom {
	return []MovClapAtom{
		"INCLUDE",
		"EXCLUDE",
	}
}

type MovCslgAtom string

// Enum values for MovCslgAtom
const (
	MovCslgAtomInclude MovCslgAtom = "INCLUDE"
	MovCslgAtomExclude MovCslgAtom = "EXCLUDE"
)

// Values returns all known values for MovCslgAtom. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MovCslgAtom) Values() []MovCslgAtom {
	return []MovCslgAtom{
		"INCLUDE",
		"EXCLUDE",
	}
}

type MovMpeg2FourCCControl string

// Enum values for MovMpeg2FourCCControl
const (
	MovMpeg2FourCCControlXdcam MovMpeg2FourCCControl = "XDCAM"
	MovMpeg2FourCCControlMpeg  MovMpeg2FourCCControl = "MPEG"
)

// Values returns all known values for MovMpeg2FourCCControl. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MovMpeg2FourCCControl) Values() []MovMpeg2FourCCControl {
	return []MovMpeg2FourCCControl{
		"XDCAM",
		"MPEG",
	}
}

type MovPaddingControl string

// Enum values for MovPaddingControl
const (
	MovPaddingControlOmneon MovPaddingControl = "OMNEON"
	MovPaddingControlNone   MovPaddingControl = "NONE"
)

// Values returns all known values for MovPaddingControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MovPaddingControl) Values() []MovPaddingControl {
	return []MovPaddingControl{
		"OMNEON",
		"NONE",
	}
}

type MovReference string

// Enum values for MovReference
const (
	MovReferenceSelfContained MovReference = "SELF_CONTAINED"
	MovReferenceExternal      MovReference = "EXTERNAL"
)

// Values returns all known values for MovReference. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MovReference) Values() []MovReference {
	return []MovReference{
		"SELF_CONTAINED",
		"EXTERNAL",
	}
}

type Mp3RateControlMode string

// Enum values for Mp3RateControlMode
const (
	Mp3RateControlModeCbr Mp3RateControlMode = "CBR"
	Mp3RateControlModeVbr Mp3RateControlMode = "VBR"
)

// Values returns all known values for Mp3RateControlMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Mp3RateControlMode) Values() []Mp3RateControlMode {
	return []Mp3RateControlMode{
		"CBR",
		"VBR",
	}
}

type Mp4C2paManifest string

// Enum values for Mp4C2paManifest
const (
	Mp4C2paManifestInclude Mp4C2paManifest = "INCLUDE"
	Mp4C2paManifestExclude Mp4C2paManifest = "EXCLUDE"
)

// Values returns all known values for Mp4C2paManifest. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Mp4C2paManifest) Values() []Mp4C2paManifest {
	return []Mp4C2paManifest{
		"INCLUDE",
		"EXCLUDE",
	}
}

type Mp4CslgAtom string

// Enum values for Mp4CslgAtom
const (
	Mp4CslgAtomInclude Mp4CslgAtom = "INCLUDE"
	Mp4CslgAtomExclude Mp4CslgAtom = "EXCLUDE"
)

// Values returns all known values for Mp4CslgAtom. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Mp4CslgAtom) Values() []Mp4CslgAtom {
	return []Mp4CslgAtom{
		"INCLUDE",
		"EXCLUDE",
	}
}

type Mp4FreeSpaceBox string

// Enum values for Mp4FreeSpaceBox
const (
	Mp4FreeSpaceBoxInclude Mp4FreeSpaceBox = "INCLUDE"
	Mp4FreeSpaceBoxExclude Mp4FreeSpaceBox = "EXCLUDE"
)

// Values returns all known values for Mp4FreeSpaceBox. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Mp4FreeSpaceBox) Values() []Mp4FreeSpaceBox {
	return []Mp4FreeSpaceBox{
		"INCLUDE",
		"EXCLUDE",
	}
}

type Mp4MoovPlacement string

// Enum values for Mp4MoovPlacement
const (
	Mp4MoovPlacementProgressiveDownload Mp4MoovPlacement = "PROGRESSIVE_DOWNLOAD"
	Mp4MoovPlacementNormal              Mp4MoovPlacement = "NORMAL"
)

// Values returns all known values for Mp4MoovPlacement. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Mp4MoovPlacement) Values() []Mp4MoovPlacement {
	return []Mp4MoovPlacement{
		"PROGRESSIVE_DOWNLOAD",
		"NORMAL",
	}
}

type MpdAccessibilityCaptionHints string

// Enum values for MpdAccessibilityCaptionHints
const (
	MpdAccessibilityCaptionHintsInclude MpdAccessibilityCaptionHints = "INCLUDE"
	MpdAccessibilityCaptionHintsExclude MpdAccessibilityCaptionHints = "EXCLUDE"
)

// Values returns all known values for MpdAccessibilityCaptionHints. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MpdAccessibilityCaptionHints) Values() []MpdAccessibilityCaptionHints {
	return []MpdAccessibilityCaptionHints{
		"INCLUDE",
		"EXCLUDE",
	}
}

type MpdAudioDuration string

// Enum values for MpdAudioDuration
const (
	MpdAudioDurationDefaultCodecDuration MpdAudioDuration = "DEFAULT_CODEC_DURATION"
	MpdAudioDurationMatchVideoDuration   MpdAudioDuration = "MATCH_VIDEO_DURATION"
)

// Values returns all known values for MpdAudioDuration. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MpdAudioDuration) Values() []MpdAudioDuration {
	return []MpdAudioDuration{
		"DEFAULT_CODEC_DURATION",
		"MATCH_VIDEO_DURATION",
	}
}

type MpdCaptionContainerType string

// Enum values for MpdCaptionContainerType
const (
	MpdCaptionContainerTypeRaw           MpdCaptionContainerType = "RAW"
	MpdCaptionContainerTypeFragmentedMp4 MpdCaptionContainerType = "FRAGMENTED_MP4"
)

// Values returns all known values for MpdCaptionContainerType. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MpdCaptionContainerType) Values() []MpdCaptionContainerType {
	return []MpdCaptionContainerType{
		"RAW",
		"FRAGMENTED_MP4",
	}
}

type MpdKlvMetadata string

// Enum values for MpdKlvMetadata
const (
	MpdKlvMetadataNone        MpdKlvMetadata = "NONE"
	MpdKlvMetadataPassthrough MpdKlvMetadata = "PASSTHROUGH"
)

// Values returns all known values for MpdKlvMetadata. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MpdKlvMetadata) Values() []MpdKlvMetadata {
	return []MpdKlvMetadata{
		"NONE",
		"PASSTHROUGH",
	}
}

type MpdManifestMetadataSignaling string

// Enum values for MpdManifestMetadataSignaling
const (
	MpdManifestMetadataSignalingEnabled  MpdManifestMetadataSignaling = "ENABLED"
	MpdManifestMetadataSignalingDisabled MpdManifestMetadataSignaling = "DISABLED"
)

// Values returns all known values for MpdManifestMetadataSignaling. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MpdManifestMetadataSignaling) Values() []MpdManifestMetadataSignaling {
	return []MpdManifestMetadataSignaling{
		"ENABLED",
		"DISABLED",
	}
}

type MpdScte35Esam string

// Enum values for MpdScte35Esam
const (
	MpdScte35EsamInsert MpdScte35Esam = "INSERT"
	MpdScte35EsamNone   MpdScte35Esam = "NONE"
)

// Values returns all known values for MpdScte35Esam. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MpdScte35Esam) Values() []MpdScte35Esam {
	return []MpdScte35Esam{
		"INSERT",
		"NONE",
	}
}

type MpdScte35Source string

// Enum values for MpdScte35Source
const (
	MpdScte35SourcePassthrough MpdScte35Source = "PASSTHROUGH"
	MpdScte35SourceNone        MpdScte35Source = "NONE"
)

// Values returns all known values for MpdScte35Source. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MpdScte35Source) Values() []MpdScte35Source {
	return []MpdScte35Source{
		"PASSTHROUGH",
		"NONE",
	}
}

type MpdTimedMetadata string

// Enum values for MpdTimedMetadata
const (
	MpdTimedMetadataPassthrough MpdTimedMetadata = "PASSTHROUGH"
	MpdTimedMetadataNone        MpdTimedMetadata = "NONE"
)

// Values returns all known values for MpdTimedMetadata. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MpdTimedMetadata) Values() []MpdTimedMetadata {
	return []MpdTimedMetadata{
		"PASSTHROUGH",
		"NONE",
	}
}

type MpdTimedMetadataBoxVersion string

// Enum values for MpdTimedMetadataBoxVersion
const (
	MpdTimedMetadataBoxVersionVersion0 MpdTimedMetadataBoxVersion = "VERSION_0"
	MpdTimedMetadataBoxVersionVersion1 MpdTimedMetadataBoxVersion = "VERSION_1"
)

// Values returns all known values for MpdTimedMetadataBoxVersion. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MpdTimedMetadataBoxVersion) Values() []MpdTimedMetadataBoxVersion {
	return []MpdTimedMetadataBoxVersion{
		"VERSION_0",
		"VERSION_1",
	}
}

type Mpeg2AdaptiveQuantization string

// Enum values for Mpeg2AdaptiveQuantization
const (
	Mpeg2AdaptiveQuantizationOff    Mpeg2AdaptiveQuantization = "OFF"
	Mpeg2AdaptiveQuantizationLow    Mpeg2AdaptiveQuantization = "LOW"
	Mpeg2AdaptiveQuantizationMedium Mpeg2AdaptiveQuantization = "MEDIUM"
	Mpeg2AdaptiveQuantizationHigh   Mpeg2AdaptiveQuantization = "HIGH"
)

// Values returns all known values for Mpeg2AdaptiveQuantization. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Mpeg2AdaptiveQuantization) Values() []Mpeg2AdaptiveQuantization {
	return []Mpeg2AdaptiveQuantization{
		"OFF",
		"LOW",
		"MEDIUM",
		"HIGH",
	}
}

type Mpeg2CodecLevel string

// Enum values for Mpeg2CodecLevel
const (
	Mpeg2CodecLevelAuto     Mpeg2CodecLevel = "AUTO"
	Mpeg2CodecLevelLow      Mpeg2CodecLevel = "LOW"
	Mpeg2CodecLevelMain     Mpeg2CodecLevel = "MAIN"
	Mpeg2CodecLevelHigh1440 Mpeg2CodecLevel = "HIGH1440"
	Mpeg2CodecLevelHigh     Mpeg2CodecLevel = "HIGH"
)

// Values returns all known values for Mpeg2CodecLevel. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Mpeg2CodecLevel) Values() []Mpeg2CodecLevel {
	return []Mpeg2CodecLevel{
		"AUTO",
		"LOW",
		"MAIN",
		"HIGH1440",
		"HIGH",
	}
}

type Mpeg2CodecProfile string

// Enum values for Mpeg2CodecProfile
const (
	Mpeg2CodecProfileMain       Mpeg2CodecProfile = "MAIN"
	Mpeg2CodecProfileProfile422 Mpeg2CodecProfile = "PROFILE_422"
)

// Values returns all known values for Mpeg2CodecProfile. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Mpeg2CodecProfile) Values() []Mpeg2CodecProfile {
	return []Mpeg2CodecProfile{
		"MAIN",
		"PROFILE_422",
	}
}

type Mpeg2DynamicSubGop string

// Enum values for Mpeg2DynamicSubGop
const (
	Mpeg2DynamicSubGopAdaptive Mpeg2DynamicSubGop = "ADAPTIVE"
	Mpeg2DynamicSubGopStatic   Mpeg2DynamicSubGop = "STATIC"
)

// Values returns all known values for Mpeg2DynamicSubGop. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Mpeg2DynamicSubGop) Values() []Mpeg2DynamicSubGop {
	return []Mpeg2DynamicSubGop{
		"ADAPTIVE",
		"STATIC",
	}
}

type Mpeg2FramerateControl string

// Enum values for Mpeg2FramerateControl
const (
	Mpeg2FramerateControlInitializeFromSource Mpeg2FramerateControl = "INITIALIZE_FROM_SOURCE"
	Mpeg2FramerateControlSpecified            Mpeg2FramerateControl = "SPECIFIED"
)

// Values returns all known values for Mpeg2FramerateControl. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Mpeg2FramerateControl) Values() []Mpeg2FramerateControl {
	return []Mpeg2FramerateControl{
		"INITIALIZE_FROM_SOURCE",
		"SPECIFIED",
	}
}

type Mpeg2FramerateConversionAlgorithm string

// Enum values for Mpeg2FramerateConversionAlgorithm
const (
	Mpeg2FramerateConversionAlgorithmDuplicateDrop      Mpeg2FramerateConversionAlgorithm = "DUPLICATE_DROP"
	Mpeg2FramerateConversionAlgorithmInterpolate        Mpeg2FramerateConversionAlgorithm = "INTERPOLATE"
	Mpeg2FramerateConversionAlgorithmFrameformer        Mpeg2FramerateConversionAlgorithm = "FRAMEFORMER"
	Mpeg2FramerateConversionAlgorithmMaintainFrameCount Mpeg2FramerateConversionAlgorithm = "MAINTAIN_FRAME_COUNT"
)

// Values returns all known values for Mpeg2FramerateConversionAlgorithm. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Mpeg2FramerateConversionAlgorithm) Values() []Mpeg2FramerateConversionAlgorithm {
	return []Mpeg2FramerateConversionAlgorithm{
		"DUPLICATE_DROP",
		"INTERPOLATE",
		"FRAMEFORMER",
		"MAINTAIN_FRAME_COUNT",
	}
}

type Mpeg2GopSizeUnits string

// Enum values for Mpeg2GopSizeUnits
const (
	Mpeg2GopSizeUnitsFrames  Mpeg2GopSizeUnits = "FRAMES"
	Mpeg2GopSizeUnitsSeconds Mpeg2GopSizeUnits = "SECONDS"
)

// Values returns all known values for Mpeg2GopSizeUnits. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Mpeg2GopSizeUnits) Values() []Mpeg2GopSizeUnits {
	return []Mpeg2GopSizeUnits{
		"FRAMES",
		"SECONDS",
	}
}

type Mpeg2InterlaceMode string

// Enum values for Mpeg2InterlaceMode
const (
	Mpeg2InterlaceModeProgressive       Mpeg2InterlaceMode = "PROGRESSIVE"
	Mpeg2InterlaceModeTopField          Mpeg2InterlaceMode = "TOP_FIELD"
	Mpeg2InterlaceModeBottomField       Mpeg2InterlaceMode = "BOTTOM_FIELD"
	Mpeg2InterlaceModeFollowTopField    Mpeg2InterlaceMode = "FOLLOW_TOP_FIELD"
	Mpeg2InterlaceModeFollowBottomField Mpeg2InterlaceMode = "FOLLOW_BOTTOM_FIELD"
)

// Values returns all known values for Mpeg2InterlaceMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Mpeg2InterlaceMode) Values() []Mpeg2InterlaceMode {
	return []Mpeg2InterlaceMode{
		"PROGRESSIVE",
		"TOP_FIELD",
		"BOTTOM_FIELD",
		"FOLLOW_TOP_FIELD",
		"FOLLOW_BOTTOM_FIELD",
	}
}

type Mpeg2IntraDcPrecision string

// Enum values for Mpeg2IntraDcPrecision
const (
	Mpeg2IntraDcPrecisionAuto               Mpeg2IntraDcPrecision = "AUTO"
	Mpeg2IntraDcPrecisionIntraDcPrecision8  Mpeg2IntraDcPrecision = "INTRA_DC_PRECISION_8"
	Mpeg2IntraDcPrecisionIntraDcPrecision9  Mpeg2IntraDcPrecision = "INTRA_DC_PRECISION_9"
	Mpeg2IntraDcPrecisionIntraDcPrecision10 Mpeg2IntraDcPrecision = "INTRA_DC_PRECISION_10"
	Mpeg2IntraDcPrecisionIntraDcPrecision11 Mpeg2IntraDcPrecision = "INTRA_DC_PRECISION_11"
)

// Values returns all known values for Mpeg2IntraDcPrecision. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Mpeg2IntraDcPrecision) Values() []Mpeg2IntraDcPrecision {
	return []Mpeg2IntraDcPrecision{
		"AUTO",
		"INTRA_DC_PRECISION_8",
		"INTRA_DC_PRECISION_9",
		"INTRA_DC_PRECISION_10",
		"INTRA_DC_PRECISION_11",
	}
}

type Mpeg2ParControl string

// Enum values for Mpeg2ParControl
const (
	Mpeg2ParControlInitializeFromSource Mpeg2ParControl = "INITIALIZE_FROM_SOURCE"
	Mpeg2ParControlSpecified            Mpeg2ParControl = "SPECIFIED"
)

// Values returns all known values for Mpeg2ParControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Mpeg2ParControl) Values() []Mpeg2ParControl {
	return []Mpeg2ParControl{
		"INITIALIZE_FROM_SOURCE",
		"SPECIFIED",
	}
}

type Mpeg2QualityTuningLevel string

// Enum values for Mpeg2QualityTuningLevel
const (
	Mpeg2QualityTuningLevelSinglePass Mpeg2QualityTuningLevel = "SINGLE_PASS"
	Mpeg2QualityTuningLevelMultiPass  Mpeg2QualityTuningLevel = "MULTI_PASS"
)

// Values returns all known values for Mpeg2QualityTuningLevel. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Mpeg2QualityTuningLevel) Values() []Mpeg2QualityTuningLevel {
	return []Mpeg2QualityTuningLevel{
		"SINGLE_PASS",
		"MULTI_PASS",
	}
}

type Mpeg2RateControlMode string

// Enum values for Mpeg2RateControlMode
const (
	Mpeg2RateControlModeVbr Mpeg2RateControlMode = "VBR"
	Mpeg2RateControlModeCbr Mpeg2RateControlMode = "CBR"
)

// Values returns all known values for Mpeg2RateControlMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Mpeg2RateControlMode) Values() []Mpeg2RateControlMode {
	return []Mpeg2RateControlMode{
		"VBR",
		"CBR",
	}
}

type Mpeg2ScanTypeConversionMode string

// Enum values for Mpeg2ScanTypeConversionMode
const (
	Mpeg2ScanTypeConversionModeInterlaced         Mpeg2ScanTypeConversionMode = "INTERLACED"
	Mpeg2ScanTypeConversionModeInterlacedOptimize Mpeg2ScanTypeConversionMode = "INTERLACED_OPTIMIZE"
)

// Values returns all known values for Mpeg2ScanTypeConversionMode. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Mpeg2ScanTypeConversionMode) Values() []Mpeg2ScanTypeConversionMode {
	return []Mpeg2ScanTypeConversionMode{
		"INTERLACED",
		"INTERLACED_OPTIMIZE",
	}
}

type Mpeg2SceneChangeDetect string

// Enum values for Mpeg2SceneChangeDetect
const (
	Mpeg2SceneChangeDetectDisabled Mpeg2SceneChangeDetect = "DISABLED"
	Mpeg2SceneChangeDetectEnabled  Mpeg2SceneChangeDetect = "ENABLED"
)

// Values returns all known values for Mpeg2SceneChangeDetect. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Mpeg2SceneChangeDetect) Values() []Mpeg2SceneChangeDetect {
	return []Mpeg2SceneChangeDetect{
		"DISABLED",
		"ENABLED",
	}
}

type Mpeg2SlowPal string

// Enum values for Mpeg2SlowPal
const (
	Mpeg2SlowPalDisabled Mpeg2SlowPal = "DISABLED"
	Mpeg2SlowPalEnabled  Mpeg2SlowPal = "ENABLED"
)

// Values returns all known values for Mpeg2SlowPal. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Mpeg2SlowPal) Values() []Mpeg2SlowPal {
	return []Mpeg2SlowPal{
		"DISABLED",
		"ENABLED",
	}
}

type Mpeg2SpatialAdaptiveQuantization string

// Enum values for Mpeg2SpatialAdaptiveQuantization
const (
	Mpeg2SpatialAdaptiveQuantizationDisabled Mpeg2SpatialAdaptiveQuantization = "DISABLED"
	Mpeg2SpatialAdaptiveQuantizationEnabled  Mpeg2SpatialAdaptiveQuantization = "ENABLED"
)

// Values returns all known values for Mpeg2SpatialAdaptiveQuantization. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Mpeg2SpatialAdaptiveQuantization) Values() []Mpeg2SpatialAdaptiveQuantization {
	return []Mpeg2SpatialAdaptiveQuantization{
		"DISABLED",
		"ENABLED",
	}
}

type Mpeg2Syntax string

// Enum values for Mpeg2Syntax
const (
	Mpeg2SyntaxDefault Mpeg2Syntax = "DEFAULT"
	Mpeg2SyntaxD10     Mpeg2Syntax = "D_10"
)

// Values returns all known values for Mpeg2Syntax. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Mpeg2Syntax) Values() []Mpeg2Syntax {
	return []Mpeg2Syntax{
		"DEFAULT",
		"D_10",
	}
}

type Mpeg2Telecine string

// Enum values for Mpeg2Telecine
const (
	Mpeg2TelecineNone Mpeg2Telecine = "NONE"
	Mpeg2TelecineSoft Mpeg2Telecine = "SOFT"
	Mpeg2TelecineHard Mpeg2Telecine = "HARD"
)

// Values returns all known values for Mpeg2Telecine. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Mpeg2Telecine) Values() []Mpeg2Telecine {
	return []Mpeg2Telecine{
		"NONE",
		"SOFT",
		"HARD",
	}
}

type Mpeg2TemporalAdaptiveQuantization string

// Enum values for Mpeg2TemporalAdaptiveQuantization
const (
	Mpeg2TemporalAdaptiveQuantizationDisabled Mpeg2TemporalAdaptiveQuantization = "DISABLED"
	Mpeg2TemporalAdaptiveQuantizationEnabled  Mpeg2TemporalAdaptiveQuantization = "ENABLED"
)

// Values returns all known values for Mpeg2TemporalAdaptiveQuantization. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Mpeg2TemporalAdaptiveQuantization) Values() []Mpeg2TemporalAdaptiveQuantization {
	return []Mpeg2TemporalAdaptiveQuantization{
		"DISABLED",
		"ENABLED",
	}
}

type MsSmoothAudioDeduplication string

// Enum values for MsSmoothAudioDeduplication
const (
	MsSmoothAudioDeduplicationCombineDuplicateStreams MsSmoothAudioDeduplication = "COMBINE_DUPLICATE_STREAMS"
	MsSmoothAudioDeduplicationNone                    MsSmoothAudioDeduplication = "NONE"
)

// Values returns all known values for MsSmoothAudioDeduplication. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MsSmoothAudioDeduplication) Values() []MsSmoothAudioDeduplication {
	return []MsSmoothAudioDeduplication{
		"COMBINE_DUPLICATE_STREAMS",
		"NONE",
	}
}

type MsSmoothFragmentLengthControl string

// Enum values for MsSmoothFragmentLengthControl
const (
	MsSmoothFragmentLengthControlExact       MsSmoothFragmentLengthControl = "EXACT"
	MsSmoothFragmentLengthControlGopMultiple MsSmoothFragmentLengthControl = "GOP_MULTIPLE"
)

// Values returns all known values for MsSmoothFragmentLengthControl. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MsSmoothFragmentLengthControl) Values() []MsSmoothFragmentLengthControl {
	return []MsSmoothFragmentLengthControl{
		"EXACT",
		"GOP_MULTIPLE",
	}
}

type MsSmoothManifestEncoding string

// Enum values for MsSmoothManifestEncoding
const (
	MsSmoothManifestEncodingUtf8  MsSmoothManifestEncoding = "UTF8"
	MsSmoothManifestEncodingUtf16 MsSmoothManifestEncoding = "UTF16"
)

// Values returns all known values for MsSmoothManifestEncoding. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MsSmoothManifestEncoding) Values() []MsSmoothManifestEncoding {
	return []MsSmoothManifestEncoding{
		"UTF8",
		"UTF16",
	}
}

type MxfAfdSignaling string

// Enum values for MxfAfdSignaling
const (
	MxfAfdSignalingNoCopy        MxfAfdSignaling = "NO_COPY"
	MxfAfdSignalingCopyFromVideo MxfAfdSignaling = "COPY_FROM_VIDEO"
)

// Values returns all known values for MxfAfdSignaling. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MxfAfdSignaling) Values() []MxfAfdSignaling {
	return []MxfAfdSignaling{
		"NO_COPY",
		"COPY_FROM_VIDEO",
	}
}

type MxfProfile string

// Enum values for MxfProfile
const (
	MxfProfileD10       MxfProfile = "D_10"
	MxfProfileXdcam     MxfProfile = "XDCAM"
	MxfProfileOp1a      MxfProfile = "OP1A"
	MxfProfileXavc      MxfProfile = "XAVC"
	MxfProfileXdcamRdd9 MxfProfile = "XDCAM_RDD9"
)

// Values returns all known values for MxfProfile. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MxfProfile) Values() []MxfProfile {
	return []MxfProfile{
		"D_10",
		"XDCAM",
		"OP1A",
		"XAVC",
		"XDCAM_RDD9",
	}
}

type MxfXavcDurationMode string

// Enum values for MxfXavcDurationMode
const (
	MxfXavcDurationModeAllowAnyDuration        MxfXavcDurationMode = "ALLOW_ANY_DURATION"
	MxfXavcDurationModeDropFramesForCompliance MxfXavcDurationMode = "DROP_FRAMES_FOR_COMPLIANCE"
)

// Values returns all known values for MxfXavcDurationMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (MxfXavcDurationMode) Values() []MxfXavcDurationMode {
	return []MxfXavcDurationMode{
		"ALLOW_ANY_DURATION",
		"DROP_FRAMES_FOR_COMPLIANCE",
	}
}

type NielsenActiveWatermarkProcessType string

// Enum values for NielsenActiveWatermarkProcessType
const (
	NielsenActiveWatermarkProcessTypeNaes2AndNw        NielsenActiveWatermarkProcessType = "NAES2_AND_NW"
	NielsenActiveWatermarkProcessTypeCbet              NielsenActiveWatermarkProcessType = "CBET"
	NielsenActiveWatermarkProcessTypeNaes2AndNwAndCbet NielsenActiveWatermarkProcessType = "NAES2_AND_NW_AND_CBET"
)

// Values returns all known values for NielsenActiveWatermarkProcessType. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NielsenActiveWatermarkProcessType) Values() []NielsenActiveWatermarkProcessType {
	return []NielsenActiveWatermarkProcessType{
		"NAES2_AND_NW",
		"CBET",
		"NAES2_AND_NW_AND_CBET",
	}
}

type NielsenSourceWatermarkStatusType string

// Enum values for NielsenSourceWatermarkStatusType
const (
	NielsenSourceWatermarkStatusTypeClean       NielsenSourceWatermarkStatusType = "CLEAN"
	NielsenSourceWatermarkStatusTypeWatermarked NielsenSourceWatermarkStatusType = "WATERMARKED"
)

// Values returns all known values for NielsenSourceWatermarkStatusType. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NielsenSourceWatermarkStatusType) Values() []NielsenSourceWatermarkStatusType {
	return []NielsenSourceWatermarkStatusType{
		"CLEAN",
		"WATERMARKED",
	}
}

type NielsenUniqueTicPerAudioTrackType string

// Enum values for NielsenUniqueTicPerAudioTrackType
const (
	NielsenUniqueTicPerAudioTrackTypeReserveUniqueTicsPerTrack NielsenUniqueTicPerAudioTrackType = "RESERVE_UNIQUE_TICS_PER_TRACK"
	NielsenUniqueTicPerAudioTrackTypeSameTicsPerTrack          NielsenUniqueTicPerAudioTrackType = "SAME_TICS_PER_TRACK"
)

// Values returns all known values for NielsenUniqueTicPerAudioTrackType. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NielsenUniqueTicPerAudioTrackType) Values() []NielsenUniqueTicPerAudioTrackType {
	return []NielsenUniqueTicPerAudioTrackType{
		"RESERVE_UNIQUE_TICS_PER_TRACK",
		"SAME_TICS_PER_TRACK",
	}
}

type NoiseFilterPostTemporalSharpening string

// Enum values for NoiseFilterPostTemporalSharpening
const (
	NoiseFilterPostTemporalSharpeningDisabled NoiseFilterPostTemporalSharpening = "DISABLED"
	NoiseFilterPostTemporalSharpeningEnabled  NoiseFilterPostTemporalSharpening = "ENABLED"
	NoiseFilterPostTemporalSharpeningAuto     NoiseFilterPostTemporalSharpening = "AUTO"
)

// Values returns all known values for NoiseFilterPostTemporalSharpening. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NoiseFilterPostTemporalSharpening) Values() []NoiseFilterPostTemporalSharpening {
	return []NoiseFilterPostTemporalSharpening{
		"DISABLED",
		"ENABLED",
		"AUTO",
	}
}

type NoiseFilterPostTemporalSharpeningStrength string

// Enum values for NoiseFilterPostTemporalSharpeningStrength
const (
	NoiseFilterPostTemporalSharpeningStrengthLow    NoiseFilterPostTemporalSharpeningStrength = "LOW"
	NoiseFilterPostTemporalSharpeningStrengthMedium NoiseFilterPostTemporalSharpeningStrength = "MEDIUM"
	NoiseFilterPostTemporalSharpeningStrengthHigh   NoiseFilterPostTemporalSharpeningStrength = "HIGH"
)

// Values returns all known values for NoiseFilterPostTemporalSharpeningStrength.
// Note that this can be expanded in the future, and so it is only as up to date as
// the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NoiseFilterPostTemporalSharpeningStrength) Values() []NoiseFilterPostTemporalSharpeningStrength {
	return []NoiseFilterPostTemporalSharpeningStrength{
		"LOW",
		"MEDIUM",
		"HIGH",
	}
}

type NoiseReducerFilter string

// Enum values for NoiseReducerFilter
const (
	NoiseReducerFilterBilateral NoiseReducerFilter = "BILATERAL"
	NoiseReducerFilterMean      NoiseReducerFilter = "MEAN"
	NoiseReducerFilterGaussian  NoiseReducerFilter = "GAUSSIAN"
	NoiseReducerFilterLanczos   NoiseReducerFilter = "LANCZOS"
	NoiseReducerFilterSharpen   NoiseReducerFilter = "SHARPEN"
	NoiseReducerFilterConserve  NoiseReducerFilter = "CONSERVE"
	NoiseReducerFilterSpatial   NoiseReducerFilter = "SPATIAL"
	NoiseReducerFilterTemporal  NoiseReducerFilter = "TEMPORAL"
)

// Values returns all known values for NoiseReducerFilter. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (NoiseReducerFilter) Values() []NoiseReducerFilter {
	return []NoiseReducerFilter{
		"BILATERAL",
		"MEAN",
		"GAUSSIAN",
		"LANCZOS",
		"SHARPEN",
		"CONSERVE",
		"SPATIAL",
		"TEMPORAL",
	}
}

type Order string

// Enum values for Order
const (
	OrderAscending  Order = "ASCENDING"
	OrderDescending Order = "DESCENDING"
)

// Values returns all known values for Order. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Order) Values() []Order {
	return []Order{
		"ASCENDING",
		"DESCENDING",
	}
}

type OutputGroupType string

// Enum values for OutputGroupType
const (
	OutputGroupTypeHlsGroupSettings      OutputGroupType = "HLS_GROUP_SETTINGS"
	OutputGroupTypeDashIsoGroupSettings  OutputGroupType = "DASH_ISO_GROUP_SETTINGS"
	OutputGroupTypeFileGroupSettings     OutputGroupType = "FILE_GROUP_SETTINGS"
	OutputGroupTypeMsSmoothGroupSettings OutputGroupType = "MS_SMOOTH_GROUP_SETTINGS"
	OutputGroupTypeCmafGroupSettings     OutputGroupType = "CMAF_GROUP_SETTINGS"
)

// Values returns all known values for OutputGroupType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (OutputGroupType) Values() []OutputGroupType {
	return []OutputGroupType{
		"HLS_GROUP_SETTINGS",
		"DASH_ISO_GROUP_SETTINGS",
		"FILE_GROUP_SETTINGS",
		"MS_SMOOTH_GROUP_SETTINGS",
		"CMAF_GROUP_SETTINGS",
	}
}

type OutputSdt string

// Enum values for OutputSdt
const (
	OutputSdtSdtFollow          OutputSdt = "SDT_FOLLOW"
	OutputSdtSdtFollowIfPresent OutputSdt = "SDT_FOLLOW_IF_PRESENT"
	OutputSdtSdtManual          OutputSdt = "SDT_MANUAL"
	OutputSdtSdtNone            OutputSdt = "SDT_NONE"
)

// Values returns all known values for OutputSdt. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (OutputSdt) Values() []OutputSdt {
	return []OutputSdt{
		"SDT_FOLLOW",
		"SDT_FOLLOW_IF_PRESENT",
		"SDT_MANUAL",
		"SDT_NONE",
	}
}

type PadVideo string

// Enum values for PadVideo
const (
	PadVideoDisabled PadVideo = "DISABLED"
	PadVideoBlack    PadVideo = "BLACK"
)

// Values returns all known values for PadVideo. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PadVideo) Values() []PadVideo {
	return []PadVideo{
		"DISABLED",
		"BLACK",
	}
}

type PresetListBy string

// Enum values for PresetListBy
const (
	PresetListByName         PresetListBy = "NAME"
	PresetListByCreationDate PresetListBy = "CREATION_DATE"
	PresetListBySystem       PresetListBy = "SYSTEM"
)

// Values returns all known values for PresetListBy. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PresetListBy) Values() []PresetListBy {
	return []PresetListBy{
		"NAME",
		"CREATION_DATE",
		"SYSTEM",
	}
}

type PresetSpeke20Audio string

// Enum values for PresetSpeke20Audio
const (
	PresetSpeke20AudioPresetAudio1 PresetSpeke20Audio = "PRESET_AUDIO_1"
	PresetSpeke20AudioPresetAudio2 PresetSpeke20Audio = "PRESET_AUDIO_2"
	PresetSpeke20AudioPresetAudio3 PresetSpeke20Audio = "PRESET_AUDIO_3"
	PresetSpeke20AudioShared       PresetSpeke20Audio = "SHARED"
	PresetSpeke20AudioUnencrypted  PresetSpeke20Audio = "UNENCRYPTED"
)

// Values returns all known values for PresetSpeke20Audio. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PresetSpeke20Audio) Values() []PresetSpeke20Audio {
	return []PresetSpeke20Audio{
		"PRESET_AUDIO_1",
		"PRESET_AUDIO_2",
		"PRESET_AUDIO_3",
		"SHARED",
		"UNENCRYPTED",
	}
}

type PresetSpeke20Video string

// Enum values for PresetSpeke20Video
const (
	PresetSpeke20VideoPresetVideo1 PresetSpeke20Video = "PRESET_VIDEO_1"
	PresetSpeke20VideoPresetVideo2 PresetSpeke20Video = "PRESET_VIDEO_2"
	PresetSpeke20VideoPresetVideo3 PresetSpeke20Video = "PRESET_VIDEO_3"
	PresetSpeke20VideoPresetVideo4 PresetSpeke20Video = "PRESET_VIDEO_4"
	PresetSpeke20VideoPresetVideo5 PresetSpeke20Video = "PRESET_VIDEO_5"
	PresetSpeke20VideoPresetVideo6 PresetSpeke20Video = "PRESET_VIDEO_6"
	PresetSpeke20VideoPresetVideo7 PresetSpeke20Video = "PRESET_VIDEO_7"
	PresetSpeke20VideoPresetVideo8 PresetSpeke20Video = "PRESET_VIDEO_8"
	PresetSpeke20VideoShared       PresetSpeke20Video = "SHARED"
	PresetSpeke20VideoUnencrypted  PresetSpeke20Video = "UNENCRYPTED"
)

// Values returns all known values for PresetSpeke20Video. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PresetSpeke20Video) Values() []PresetSpeke20Video {
	return []PresetSpeke20Video{
		"PRESET_VIDEO_1",
		"PRESET_VIDEO_2",
		"PRESET_VIDEO_3",
		"PRESET_VIDEO_4",
		"PRESET_VIDEO_5",
		"PRESET_VIDEO_6",
		"PRESET_VIDEO_7",
		"PRESET_VIDEO_8",
		"SHARED",
		"UNENCRYPTED",
	}
}

type PricingPlan string

// Enum values for PricingPlan
const (
	PricingPlanOnDemand PricingPlan = "ON_DEMAND"
	PricingPlanReserved PricingPlan = "RESERVED"
)

// Values returns all known values for PricingPlan. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PricingPlan) Values() []PricingPlan {
	return []PricingPlan{
		"ON_DEMAND",
		"RESERVED",
	}
}

type ProresChromaSampling string

// Enum values for ProresChromaSampling
const (
	ProresChromaSamplingPreserve444Sampling ProresChromaSampling = "PRESERVE_444_SAMPLING"
	ProresChromaSamplingSubsampleTo422      ProresChromaSampling = "SUBSAMPLE_TO_422"
)

// Values returns all known values for ProresChromaSampling. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ProresChromaSampling) Values() []ProresChromaSampling {
	return []ProresChromaSampling{
		"PRESERVE_444_SAMPLING",
		"SUBSAMPLE_TO_422",
	}
}

type ProresCodecProfile string

// Enum values for ProresCodecProfile
const (
	ProresCodecProfileAppleProres422      ProresCodecProfile = "APPLE_PRORES_422"
	ProresCodecProfileAppleProres422Hq    ProresCodecProfile = "APPLE_PRORES_422_HQ"
	ProresCodecProfileAppleProres422Lt    ProresCodecProfile = "APPLE_PRORES_422_LT"
	ProresCodecProfileAppleProres422Proxy ProresCodecProfile = "APPLE_PRORES_422_PROXY"
	ProresCodecProfileAppleProres4444     ProresCodecProfile = "APPLE_PRORES_4444"
	ProresCodecProfileAppleProres4444Xq   ProresCodecProfile = "APPLE_PRORES_4444_XQ"
)

// Values returns all known values for ProresCodecProfile. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ProresCodecProfile) Values() []ProresCodecProfile {
	return []ProresCodecProfile{
		"APPLE_PRORES_422",
		"APPLE_PRORES_422_HQ",
		"APPLE_PRORES_422_LT",
		"APPLE_PRORES_422_PROXY",
		"APPLE_PRORES_4444",
		"APPLE_PRORES_4444_XQ",
	}
}

type ProresFramerateControl string

// Enum values for ProresFramerateControl
const (
	ProresFramerateControlInitializeFromSource ProresFramerateControl = "INITIALIZE_FROM_SOURCE"
	ProresFramerateControlSpecified            ProresFramerateControl = "SPECIFIED"
)

// Values returns all known values for ProresFramerateControl. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ProresFramerateControl) Values() []ProresFramerateControl {
	return []ProresFramerateControl{
		"INITIALIZE_FROM_SOURCE",
		"SPECIFIED",
	}
}

type ProresFramerateConversionAlgorithm string

// Enum values for ProresFramerateConversionAlgorithm
const (
	ProresFramerateConversionAlgorithmDuplicateDrop      ProresFramerateConversionAlgorithm = "DUPLICATE_DROP"
	ProresFramerateConversionAlgorithmInterpolate        ProresFramerateConversionAlgorithm = "INTERPOLATE"
	ProresFramerateConversionAlgorithmFrameformer        ProresFramerateConversionAlgorithm = "FRAMEFORMER"
	ProresFramerateConversionAlgorithmMaintainFrameCount ProresFramerateConversionAlgorithm = "MAINTAIN_FRAME_COUNT"
)

// Values returns all known values for ProresFramerateConversionAlgorithm. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ProresFramerateConversionAlgorithm) Values() []ProresFramerateConversionAlgorithm {
	return []ProresFramerateConversionAlgorithm{
		"DUPLICATE_DROP",
		"INTERPOLATE",
		"FRAMEFORMER",
		"MAINTAIN_FRAME_COUNT",
	}
}

type ProresInterlaceMode string

// Enum values for ProresInterlaceMode
const (
	ProresInterlaceModeProgressive       ProresInterlaceMode = "PROGRESSIVE"
	ProresInterlaceModeTopField          ProresInterlaceMode = "TOP_FIELD"
	ProresInterlaceModeBottomField       ProresInterlaceMode = "BOTTOM_FIELD"
	ProresInterlaceModeFollowTopField    ProresInterlaceMode = "FOLLOW_TOP_FIELD"
	ProresInterlaceModeFollowBottomField ProresInterlaceMode = "FOLLOW_BOTTOM_FIELD"
)

// Values returns all known values for ProresInterlaceMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ProresInterlaceMode) Values() []ProresInterlaceMode {
	return []ProresInterlaceMode{
		"PROGRESSIVE",
		"TOP_FIELD",
		"BOTTOM_FIELD",
		"FOLLOW_TOP_FIELD",
		"FOLLOW_BOTTOM_FIELD",
	}
}

type ProresParControl string

// Enum values for ProresParControl
const (
	ProresParControlInitializeFromSource ProresParControl = "INITIALIZE_FROM_SOURCE"
	ProresParControlSpecified            ProresParControl = "SPECIFIED"
)

// Values returns all known values for ProresParControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ProresParControl) Values() []ProresParControl {
	return []ProresParControl{
		"INITIALIZE_FROM_SOURCE",
		"SPECIFIED",
	}
}

type ProresScanTypeConversionMode string

// Enum values for ProresScanTypeConversionMode
const (
	ProresScanTypeConversionModeInterlaced         ProresScanTypeConversionMode = "INTERLACED"
	ProresScanTypeConversionModeInterlacedOptimize ProresScanTypeConversionMode = "INTERLACED_OPTIMIZE"
)

// Values returns all known values for ProresScanTypeConversionMode. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ProresScanTypeConversionMode) Values() []ProresScanTypeConversionMode {
	return []ProresScanTypeConversionMode{
		"INTERLACED",
		"INTERLACED_OPTIMIZE",
	}
}

type ProresSlowPal string

// Enum values for ProresSlowPal
const (
	ProresSlowPalDisabled ProresSlowPal = "DISABLED"
	ProresSlowPalEnabled  ProresSlowPal = "ENABLED"
)

// Values returns all known values for ProresSlowPal. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ProresSlowPal) Values() []ProresSlowPal {
	return []ProresSlowPal{
		"DISABLED",
		"ENABLED",
	}
}

type ProresTelecine string

// Enum values for ProresTelecine
const (
	ProresTelecineNone ProresTelecine = "NONE"
	ProresTelecineHard ProresTelecine = "HARD"
)

// Values returns all known values for ProresTelecine. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ProresTelecine) Values() []ProresTelecine {
	return []ProresTelecine{
		"NONE",
		"HARD",
	}
}

type QueueListBy string

// Enum values for QueueListBy
const (
	QueueListByName         QueueListBy = "NAME"
	QueueListByCreationDate QueueListBy = "CREATION_DATE"
)

// Values returns all known values for QueueListBy. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (QueueListBy) Values() []QueueListBy {
	return []QueueListBy{
		"NAME",
		"CREATION_DATE",
	}
}

type QueueStatus string

// Enum values for QueueStatus
const (
	QueueStatusActive QueueStatus = "ACTIVE"
	QueueStatusPaused QueueStatus = "PAUSED"
)

// Values returns all known values for QueueStatus. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (QueueStatus) Values() []QueueStatus {
	return []QueueStatus{
		"ACTIVE",
		"PAUSED",
	}
}

type RemoveRubyReserveAttributes string

// Enum values for RemoveRubyReserveAttributes
const (
	RemoveRubyReserveAttributesDisabled RemoveRubyReserveAttributes = "DISABLED"
	RemoveRubyReserveAttributesEnabled  RemoveRubyReserveAttributes = "ENABLED"
)

// Values returns all known values for RemoveRubyReserveAttributes. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RemoveRubyReserveAttributes) Values() []RemoveRubyReserveAttributes {
	return []RemoveRubyReserveAttributes{
		"DISABLED",
		"ENABLED",
	}
}

type RenewalType string

// Enum values for RenewalType
const (
	RenewalTypeAutoRenew RenewalType = "AUTO_RENEW"
	RenewalTypeExpire    RenewalType = "EXPIRE"
)

// Values returns all known values for RenewalType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RenewalType) Values() []RenewalType {
	return []RenewalType{
		"AUTO_RENEW",
		"EXPIRE",
	}
}

type RequiredFlag string

// Enum values for RequiredFlag
const (
	RequiredFlagEnabled  RequiredFlag = "ENABLED"
	RequiredFlagDisabled RequiredFlag = "DISABLED"
)

// Values returns all known values for RequiredFlag. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RequiredFlag) Values() []RequiredFlag {
	return []RequiredFlag{
		"ENABLED",
		"DISABLED",
	}
}

type ReservationPlanStatus string

// Enum values for ReservationPlanStatus
const (
	ReservationPlanStatusActive  ReservationPlanStatus = "ACTIVE"
	ReservationPlanStatusExpired ReservationPlanStatus = "EXPIRED"
)

// Values returns all known values for ReservationPlanStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ReservationPlanStatus) Values() []ReservationPlanStatus {
	return []ReservationPlanStatus{
		"ACTIVE",
		"EXPIRED",
	}
}

type RespondToAfd string

// Enum values for RespondToAfd
const (
	RespondToAfdNone        RespondToAfd = "NONE"
	RespondToAfdRespond     RespondToAfd = "RESPOND"
	RespondToAfdPassthrough RespondToAfd = "PASSTHROUGH"
)

// Values returns all known values for RespondToAfd. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RespondToAfd) Values() []RespondToAfd {
	return []RespondToAfd{
		"NONE",
		"RESPOND",
		"PASSTHROUGH",
	}
}

type RuleType string

// Enum values for RuleType
const (
	RuleTypeMinTopRenditionSize    RuleType = "MIN_TOP_RENDITION_SIZE"
	RuleTypeMinBottomRenditionSize RuleType = "MIN_BOTTOM_RENDITION_SIZE"
	RuleTypeForceIncludeRenditions RuleType = "FORCE_INCLUDE_RENDITIONS"
	RuleTypeAllowedRenditions      RuleType = "ALLOWED_RENDITIONS"
)

// Values returns all known values for RuleType. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RuleType) Values() []RuleType {
	return []RuleType{
		"MIN_TOP_RENDITION_SIZE",
		"MIN_BOTTOM_RENDITION_SIZE",
		"FORCE_INCLUDE_RENDITIONS",
		"ALLOWED_RENDITIONS",
	}
}

type S3ObjectCannedAcl string

// Enum values for S3ObjectCannedAcl
const (
	S3ObjectCannedAclPublicRead             S3ObjectCannedAcl = "PUBLIC_READ"
	S3ObjectCannedAclAuthenticatedRead      S3ObjectCannedAcl = "AUTHENTICATED_READ"
	S3ObjectCannedAclBucketOwnerRead        S3ObjectCannedAcl = "BUCKET_OWNER_READ"
	S3ObjectCannedAclBucketOwnerFullControl S3ObjectCannedAcl = "BUCKET_OWNER_FULL_CONTROL"
)

// Values returns all known values for S3ObjectCannedAcl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (S3ObjectCannedAcl) Values() []S3ObjectCannedAcl {
	return []S3ObjectCannedAcl{
		"PUBLIC_READ",
		"AUTHENTICATED_READ",
		"BUCKET_OWNER_READ",
		"BUCKET_OWNER_FULL_CONTROL",
	}
}

type S3ServerSideEncryptionType string

// Enum values for S3ServerSideEncryptionType
const (
	S3ServerSideEncryptionTypeServerSideEncryptionS3  S3ServerSideEncryptionType = "SERVER_SIDE_ENCRYPTION_S3"
	S3ServerSideEncryptionTypeServerSideEncryptionKms S3ServerSideEncryptionType = "SERVER_SIDE_ENCRYPTION_KMS"
)

// Values returns all known values for S3ServerSideEncryptionType. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (S3ServerSideEncryptionType) Values() []S3ServerSideEncryptionType {
	return []S3ServerSideEncryptionType{
		"SERVER_SIDE_ENCRYPTION_S3",
		"SERVER_SIDE_ENCRYPTION_KMS",
	}
}

type S3StorageClass string

// Enum values for S3StorageClass
const (
	S3StorageClassStandard           S3StorageClass = "STANDARD"
	S3StorageClassReducedRedundancy  S3StorageClass = "REDUCED_REDUNDANCY"
	S3StorageClassStandardIa         S3StorageClass = "STANDARD_IA"
	S3StorageClassOnezoneIa          S3StorageClass = "ONEZONE_IA"
	S3StorageClassIntelligentTiering S3StorageClass = "INTELLIGENT_TIERING"
	S3StorageClassGlacier            S3StorageClass = "GLACIER"
	S3StorageClassDeepArchive        S3StorageClass = "DEEP_ARCHIVE"
)

// Values returns all known values for S3StorageClass. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (S3StorageClass) Values() []S3StorageClass {
	return []S3StorageClass{
		"STANDARD",
		"REDUCED_REDUNDANCY",
		"STANDARD_IA",
		"ONEZONE_IA",
		"INTELLIGENT_TIERING",
		"GLACIER",
		"DEEP_ARCHIVE",
	}
}

type SampleRangeConversion string

// Enum values for SampleRangeConversion
const (
	SampleRangeConversionLimitedRangeSqueeze SampleRangeConversion = "LIMITED_RANGE_SQUEEZE"
	SampleRangeConversionNone                SampleRangeConversion = "NONE"
	SampleRangeConversionLimitedRangeClip    SampleRangeConversion = "LIMITED_RANGE_CLIP"
)

// Values returns all known values for SampleRangeConversion. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SampleRangeConversion) Values() []SampleRangeConversion {
	return []SampleRangeConversion{
		"LIMITED_RANGE_SQUEEZE",
		"NONE",
		"LIMITED_RANGE_CLIP",
	}
}

type ScalingBehavior string

// Enum values for ScalingBehavior
const (
	ScalingBehaviorDefault         ScalingBehavior = "DEFAULT"
	ScalingBehaviorStretchToOutput ScalingBehavior = "STRETCH_TO_OUTPUT"
	ScalingBehaviorFit             ScalingBehavior = "FIT"
	ScalingBehaviorFitNoUpscale    ScalingBehavior = "FIT_NO_UPSCALE"
	ScalingBehaviorFill            ScalingBehavior = "FILL"
)

// Values returns all known values for ScalingBehavior. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ScalingBehavior) Values() []ScalingBehavior {
	return []ScalingBehavior{
		"DEFAULT",
		"STRETCH_TO_OUTPUT",
		"FIT",
		"FIT_NO_UPSCALE",
		"FILL",
	}
}

type SccDestinationFramerate string

// Enum values for SccDestinationFramerate
const (
	SccDestinationFramerateFramerate2397             SccDestinationFramerate = "FRAMERATE_23_97"
	SccDestinationFramerateFramerate24               SccDestinationFramerate = "FRAMERATE_24"
	SccDestinationFramerateFramerate25               SccDestinationFramerate = "FRAMERATE_25"
	SccDestinationFramerateFramerate2997Dropframe    SccDestinationFramerate = "FRAMERATE_29_97_DROPFRAME"
	SccDestinationFramerateFramerate2997NonDropframe SccDestinationFramerate = "FRAMERATE_29_97_NON_DROPFRAME"
)

// Values returns all known values for SccDestinationFramerate. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SccDestinationFramerate) Values() []SccDestinationFramerate {
	return []SccDestinationFramerate{
		"FRAMERATE_23_97",
		"FRAMERATE_24",
		"FRAMERATE_25",
		"FRAMERATE_29_97_DROPFRAME",
		"FRAMERATE_29_97_NON_DROPFRAME",
	}
}

type SimulateReservedQueue string

// Enum values for SimulateReservedQueue
const (
	SimulateReservedQueueDisabled SimulateReservedQueue = "DISABLED"
	SimulateReservedQueueEnabled  SimulateReservedQueue = "ENABLED"
)

// Values returns all known values for SimulateReservedQueue. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SimulateReservedQueue) Values() []SimulateReservedQueue {
	return []SimulateReservedQueue{
		"DISABLED",
		"ENABLED",
	}
}

type SrtStylePassthrough string

// Enum values for SrtStylePassthrough
const (
	SrtStylePassthroughEnabled  SrtStylePassthrough = "ENABLED"
	SrtStylePassthroughDisabled SrtStylePassthrough = "DISABLED"
)

// Values returns all known values for SrtStylePassthrough. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SrtStylePassthrough) Values() []SrtStylePassthrough {
	return []SrtStylePassthrough{
		"ENABLED",
		"DISABLED",
	}
}

type StatusUpdateInterval string

// Enum values for StatusUpdateInterval
const (
	StatusUpdateIntervalSeconds10  StatusUpdateInterval = "SECONDS_10"
	StatusUpdateIntervalSeconds12  StatusUpdateInterval = "SECONDS_12"
	StatusUpdateIntervalSeconds15  StatusUpdateInterval = "SECONDS_15"
	StatusUpdateIntervalSeconds20  StatusUpdateInterval = "SECONDS_20"
	StatusUpdateIntervalSeconds30  StatusUpdateInterval = "SECONDS_30"
	StatusUpdateIntervalSeconds60  StatusUpdateInterval = "SECONDS_60"
	StatusUpdateIntervalSeconds120 StatusUpdateInterval = "SECONDS_120"
	StatusUpdateIntervalSeconds180 StatusUpdateInterval = "SECONDS_180"
	StatusUpdateIntervalSeconds240 StatusUpdateInterval = "SECONDS_240"
	StatusUpdateIntervalSeconds300 StatusUpdateInterval = "SECONDS_300"
	StatusUpdateIntervalSeconds360 StatusUpdateInterval = "SECONDS_360"
	StatusUpdateIntervalSeconds420 StatusUpdateInterval = "SECONDS_420"
	StatusUpdateIntervalSeconds480 StatusUpdateInterval = "SECONDS_480"
	StatusUpdateIntervalSeconds540 StatusUpdateInterval = "SECONDS_540"
	StatusUpdateIntervalSeconds600 StatusUpdateInterval = "SECONDS_600"
)

// Values returns all known values for StatusUpdateInterval. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (StatusUpdateInterval) Values() []StatusUpdateInterval {
	return []StatusUpdateInterval{
		"SECONDS_10",
		"SECONDS_12",
		"SECONDS_15",
		"SECONDS_20",
		"SECONDS_30",
		"SECONDS_60",
		"SECONDS_120",
		"SECONDS_180",
		"SECONDS_240",
		"SECONDS_300",
		"SECONDS_360",
		"SECONDS_420",
		"SECONDS_480",
		"SECONDS_540",
		"SECONDS_600",
	}
}

type TeletextPageType string

// Enum values for TeletextPageType
const (
	TeletextPageTypePageTypeInitial                 TeletextPageType = "PAGE_TYPE_INITIAL"
	TeletextPageTypePageTypeSubtitle                TeletextPageType = "PAGE_TYPE_SUBTITLE"
	TeletextPageTypePageTypeAddlInfo                TeletextPageType = "PAGE_TYPE_ADDL_INFO"
	TeletextPageTypePageTypeProgramSchedule         TeletextPageType = "PAGE_TYPE_PROGRAM_SCHEDULE"
	TeletextPageTypePageTypeHearingImpairedSubtitle TeletextPageType = "PAGE_TYPE_HEARING_IMPAIRED_SUBTITLE"
)

// Values returns all known values for TeletextPageType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TeletextPageType) Values() []TeletextPageType {
	return []TeletextPageType{
		"PAGE_TYPE_INITIAL",
		"PAGE_TYPE_SUBTITLE",
		"PAGE_TYPE_ADDL_INFO",
		"PAGE_TYPE_PROGRAM_SCHEDULE",
		"PAGE_TYPE_HEARING_IMPAIRED_SUBTITLE",
	}
}

type TimecodeBurninPosition string

// Enum values for TimecodeBurninPosition
const (
	TimecodeBurninPositionTopCenter    TimecodeBurninPosition = "TOP_CENTER"
	TimecodeBurninPositionTopLeft      TimecodeBurninPosition = "TOP_LEFT"
	TimecodeBurninPositionTopRight     TimecodeBurninPosition = "TOP_RIGHT"
	TimecodeBurninPositionMiddleLeft   TimecodeBurninPosition = "MIDDLE_LEFT"
	TimecodeBurninPositionMiddleCenter TimecodeBurninPosition = "MIDDLE_CENTER"
	TimecodeBurninPositionMiddleRight  TimecodeBurninPosition = "MIDDLE_RIGHT"
	TimecodeBurninPositionBottomLeft   TimecodeBurninPosition = "BOTTOM_LEFT"
	TimecodeBurninPositionBottomCenter TimecodeBurninPosition = "BOTTOM_CENTER"
	TimecodeBurninPositionBottomRight  TimecodeBurninPosition = "BOTTOM_RIGHT"
)

// Values returns all known values for TimecodeBurninPosition. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TimecodeBurninPosition) Values() []TimecodeBurninPosition {
	return []TimecodeBurninPosition{
		"TOP_CENTER",
		"TOP_LEFT",
		"TOP_RIGHT",
		"MIDDLE_LEFT",
		"MIDDLE_CENTER",
		"MIDDLE_RIGHT",
		"BOTTOM_LEFT",
		"BOTTOM_CENTER",
		"BOTTOM_RIGHT",
	}
}

type TimecodeSource string

// Enum values for TimecodeSource
const (
	TimecodeSourceEmbedded       TimecodeSource = "EMBEDDED"
	TimecodeSourceZerobased      TimecodeSource = "ZEROBASED"
	TimecodeSourceSpecifiedstart TimecodeSource = "SPECIFIEDSTART"
)

// Values returns all known values for TimecodeSource. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TimecodeSource) Values() []TimecodeSource {
	return []TimecodeSource{
		"EMBEDDED",
		"ZEROBASED",
		"SPECIFIEDSTART",
	}
}

type TimecodeTrack string

// Enum values for TimecodeTrack
const (
	TimecodeTrackDisabled TimecodeTrack = "DISABLED"
	TimecodeTrackEnabled  TimecodeTrack = "ENABLED"
)

// Values returns all known values for TimecodeTrack. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TimecodeTrack) Values() []TimecodeTrack {
	return []TimecodeTrack{
		"DISABLED",
		"ENABLED",
	}
}

type TimedMetadata string

// Enum values for TimedMetadata
const (
	TimedMetadataPassthrough TimedMetadata = "PASSTHROUGH"
	TimedMetadataNone        TimedMetadata = "NONE"
)

// Values returns all known values for TimedMetadata. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TimedMetadata) Values() []TimedMetadata {
	return []TimedMetadata{
		"PASSTHROUGH",
		"NONE",
	}
}

type TrackType string

// Enum values for TrackType
const (
	TrackTypeVideo TrackType = "video"
	TrackTypeAudio TrackType = "audio"
	TrackTypeData  TrackType = "data"
)

// Values returns all known values for TrackType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TrackType) Values() []TrackType {
	return []TrackType{
		"video",
		"audio",
		"data",
	}
}

type TransferCharacteristics string

// Enum values for TransferCharacteristics
const (
	TransferCharacteristicsItu709       TransferCharacteristics = "ITU_709"
	TransferCharacteristicsUnspecified  TransferCharacteristics = "UNSPECIFIED"
	TransferCharacteristicsReserved     TransferCharacteristics = "RESERVED"
	TransferCharacteristicsItu470m      TransferCharacteristics = "ITU_470M"
	TransferCharacteristicsItu470bg     TransferCharacteristics = "ITU_470BG"
	TransferCharacteristicsSmpte170m    TransferCharacteristics = "SMPTE_170M"
	TransferCharacteristicsSmpte240m    TransferCharacteristics = "SMPTE_240M"
	TransferCharacteristicsLinear       TransferCharacteristics = "LINEAR"
	TransferCharacteristicsLog102       TransferCharacteristics = "LOG10_2"
	TransferCharacteristicsLoc1025      TransferCharacteristics = "LOC10_2_5"
	TransferCharacteristicsIec6196624   TransferCharacteristics = "IEC_61966_2_4"
	TransferCharacteristicsItu1361      TransferCharacteristics = "ITU_1361"
	TransferCharacteristicsIec6196621   TransferCharacteristics = "IEC_61966_2_1"
	TransferCharacteristicsItu202010bit TransferCharacteristics = "ITU_2020_10bit"
	TransferCharacteristicsItu202012bit TransferCharacteristics = "ITU_2020_12bit"
	TransferCharacteristicsSmpte2084    TransferCharacteristics = "SMPTE_2084"
	TransferCharacteristicsSmpte4281    TransferCharacteristics = "SMPTE_428_1"
	TransferCharacteristicsAribB67      TransferCharacteristics = "ARIB_B67"
	TransferCharacteristicsLast         TransferCharacteristics = "LAST"
)

// Values returns all known values for TransferCharacteristics. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TransferCharacteristics) Values() []TransferCharacteristics {
	return []TransferCharacteristics{
		"ITU_709",
		"UNSPECIFIED",
		"RESERVED",
		"ITU_470M",
		"ITU_470BG",
		"SMPTE_170M",
		"SMPTE_240M",
		"LINEAR",
		"LOG10_2",
		"LOC10_2_5",
		"IEC_61966_2_4",
		"ITU_1361",
		"IEC_61966_2_1",
		"ITU_2020_10bit",
		"ITU_2020_12bit",
		"SMPTE_2084",
		"SMPTE_428_1",
		"ARIB_B67",
		"LAST",
	}
}

type TsPtsOffset string

// Enum values for TsPtsOffset
const (
	TsPtsOffsetAuto         TsPtsOffset = "AUTO"
	TsPtsOffsetSeconds      TsPtsOffset = "SECONDS"
	TsPtsOffsetMilliseconds TsPtsOffset = "MILLISECONDS"
)

// Values returns all known values for TsPtsOffset. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TsPtsOffset) Values() []TsPtsOffset {
	return []TsPtsOffset{
		"AUTO",
		"SECONDS",
		"MILLISECONDS",
	}
}

type TtmlStylePassthrough string

// Enum values for TtmlStylePassthrough
const (
	TtmlStylePassthroughEnabled  TtmlStylePassthrough = "ENABLED"
	TtmlStylePassthroughDisabled TtmlStylePassthrough = "DISABLED"
)

// Values returns all known values for TtmlStylePassthrough. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (TtmlStylePassthrough) Values() []TtmlStylePassthrough {
	return []TtmlStylePassthrough{
		"ENABLED",
		"DISABLED",
	}
}

type Type string

// Enum values for Type
const (
	TypeSystem Type = "SYSTEM"
	TypeCustom Type = "CUSTOM"
)

// Values returns all known values for Type. Note that this can be expanded in the
// future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Type) Values() []Type {
	return []Type{
		"SYSTEM",
		"CUSTOM",
	}
}

type UncompressedFourcc string

// Enum values for UncompressedFourcc
const (
	UncompressedFourccI420 UncompressedFourcc = "I420"
	UncompressedFourccI422 UncompressedFourcc = "I422"
	UncompressedFourccI444 UncompressedFourcc = "I444"
)

// Values returns all known values for UncompressedFourcc. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (UncompressedFourcc) Values() []UncompressedFourcc {
	return []UncompressedFourcc{
		"I420",
		"I422",
		"I444",
	}
}

type UncompressedFramerateControl string

// Enum values for UncompressedFramerateControl
const (
	UncompressedFramerateControlInitializeFromSource UncompressedFramerateControl = "INITIALIZE_FROM_SOURCE"
	UncompressedFramerateControlSpecified            UncompressedFramerateControl = "SPECIFIED"
)

// Values returns all known values for UncompressedFramerateControl. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (UncompressedFramerateControl) Values() []UncompressedFramerateControl {
	return []UncompressedFramerateControl{
		"INITIALIZE_FROM_SOURCE",
		"SPECIFIED",
	}
}

type UncompressedFramerateConversionAlgorithm string

// Enum values for UncompressedFramerateConversionAlgorithm
const (
	UncompressedFramerateConversionAlgorithmDuplicateDrop      UncompressedFramerateConversionAlgorithm = "DUPLICATE_DROP"
	UncompressedFramerateConversionAlgorithmInterpolate        UncompressedFramerateConversionAlgorithm = "INTERPOLATE"
	UncompressedFramerateConversionAlgorithmFrameformer        UncompressedFramerateConversionAlgorithm = "FRAMEFORMER"
	UncompressedFramerateConversionAlgorithmMaintainFrameCount UncompressedFramerateConversionAlgorithm = "MAINTAIN_FRAME_COUNT"
)

// Values returns all known values for UncompressedFramerateConversionAlgorithm.
// Note that this can be expanded in the future, and so it is only as up to date as
// the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (UncompressedFramerateConversionAlgorithm) Values() []UncompressedFramerateConversionAlgorithm {
	return []UncompressedFramerateConversionAlgorithm{
		"DUPLICATE_DROP",
		"INTERPOLATE",
		"FRAMEFORMER",
		"MAINTAIN_FRAME_COUNT",
	}
}

type UncompressedInterlaceMode string

// Enum values for UncompressedInterlaceMode
const (
	UncompressedInterlaceModeInterlaced  UncompressedInterlaceMode = "INTERLACED"
	UncompressedInterlaceModeProgressive UncompressedInterlaceMode = "PROGRESSIVE"
)

// Values returns all known values for UncompressedInterlaceMode. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (UncompressedInterlaceMode) Values() []UncompressedInterlaceMode {
	return []UncompressedInterlaceMode{
		"INTERLACED",
		"PROGRESSIVE",
	}
}

type UncompressedScanTypeConversionMode string

// Enum values for UncompressedScanTypeConversionMode
const (
	UncompressedScanTypeConversionModeInterlaced         UncompressedScanTypeConversionMode = "INTERLACED"
	UncompressedScanTypeConversionModeInterlacedOptimize UncompressedScanTypeConversionMode = "INTERLACED_OPTIMIZE"
)

// Values returns all known values for UncompressedScanTypeConversionMode. Note
// that this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (UncompressedScanTypeConversionMode) Values() []UncompressedScanTypeConversionMode {
	return []UncompressedScanTypeConversionMode{
		"INTERLACED",
		"INTERLACED_OPTIMIZE",
	}
}

type UncompressedSlowPal string

// Enum values for UncompressedSlowPal
const (
	UncompressedSlowPalDisabled UncompressedSlowPal = "DISABLED"
	UncompressedSlowPalEnabled  UncompressedSlowPal = "ENABLED"
)

// Values returns all known values for UncompressedSlowPal. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (UncompressedSlowPal) Values() []UncompressedSlowPal {
	return []UncompressedSlowPal{
		"DISABLED",
		"ENABLED",
	}
}

type UncompressedTelecine string

// Enum values for UncompressedTelecine
const (
	UncompressedTelecineNone UncompressedTelecine = "NONE"
	UncompressedTelecineHard UncompressedTelecine = "HARD"
)

// Values returns all known values for UncompressedTelecine. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (UncompressedTelecine) Values() []UncompressedTelecine {
	return []UncompressedTelecine{
		"NONE",
		"HARD",
	}
}

type Vc3Class string

// Enum values for Vc3Class
const (
	Vc3ClassClass1458bit  Vc3Class = "CLASS_145_8BIT"
	Vc3ClassClass2208bit  Vc3Class = "CLASS_220_8BIT"
	Vc3ClassClass22010bit Vc3Class = "CLASS_220_10BIT"
)

// Values returns all known values for Vc3Class. Note that this can be expanded in
// the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Vc3Class) Values() []Vc3Class {
	return []Vc3Class{
		"CLASS_145_8BIT",
		"CLASS_220_8BIT",
		"CLASS_220_10BIT",
	}
}

type Vc3FramerateControl string

// Enum values for Vc3FramerateControl
const (
	Vc3FramerateControlInitializeFromSource Vc3FramerateControl = "INITIALIZE_FROM_SOURCE"
	Vc3FramerateControlSpecified            Vc3FramerateControl = "SPECIFIED"
)

// Values returns all known values for Vc3FramerateControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Vc3FramerateControl) Values() []Vc3FramerateControl {
	return []Vc3FramerateControl{
		"INITIALIZE_FROM_SOURCE",
		"SPECIFIED",
	}
}

type Vc3FramerateConversionAlgorithm string

// Enum values for Vc3FramerateConversionAlgorithm
const (
	Vc3FramerateConversionAlgorithmDuplicateDrop      Vc3FramerateConversionAlgorithm = "DUPLICATE_DROP"
	Vc3FramerateConversionAlgorithmInterpolate        Vc3FramerateConversionAlgorithm = "INTERPOLATE"
	Vc3FramerateConversionAlgorithmFrameformer        Vc3FramerateConversionAlgorithm = "FRAMEFORMER"
	Vc3FramerateConversionAlgorithmMaintainFrameCount Vc3FramerateConversionAlgorithm = "MAINTAIN_FRAME_COUNT"
)

// Values returns all known values for Vc3FramerateConversionAlgorithm. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Vc3FramerateConversionAlgorithm) Values() []Vc3FramerateConversionAlgorithm {
	return []Vc3FramerateConversionAlgorithm{
		"DUPLICATE_DROP",
		"INTERPOLATE",
		"FRAMEFORMER",
		"MAINTAIN_FRAME_COUNT",
	}
}

type Vc3InterlaceMode string

// Enum values for Vc3InterlaceMode
const (
	Vc3InterlaceModeInterlaced  Vc3InterlaceMode = "INTERLACED"
	Vc3InterlaceModeProgressive Vc3InterlaceMode = "PROGRESSIVE"
)

// Values returns all known values for Vc3InterlaceMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Vc3InterlaceMode) Values() []Vc3InterlaceMode {
	return []Vc3InterlaceMode{
		"INTERLACED",
		"PROGRESSIVE",
	}
}

type Vc3ScanTypeConversionMode string

// Enum values for Vc3ScanTypeConversionMode
const (
	Vc3ScanTypeConversionModeInterlaced         Vc3ScanTypeConversionMode = "INTERLACED"
	Vc3ScanTypeConversionModeInterlacedOptimize Vc3ScanTypeConversionMode = "INTERLACED_OPTIMIZE"
)

// Values returns all known values for Vc3ScanTypeConversionMode. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Vc3ScanTypeConversionMode) Values() []Vc3ScanTypeConversionMode {
	return []Vc3ScanTypeConversionMode{
		"INTERLACED",
		"INTERLACED_OPTIMIZE",
	}
}

type Vc3SlowPal string

// Enum values for Vc3SlowPal
const (
	Vc3SlowPalDisabled Vc3SlowPal = "DISABLED"
	Vc3SlowPalEnabled  Vc3SlowPal = "ENABLED"
)

// Values returns all known values for Vc3SlowPal. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Vc3SlowPal) Values() []Vc3SlowPal {
	return []Vc3SlowPal{
		"DISABLED",
		"ENABLED",
	}
}

type Vc3Telecine string

// Enum values for Vc3Telecine
const (
	Vc3TelecineNone Vc3Telecine = "NONE"
	Vc3TelecineHard Vc3Telecine = "HARD"
)

// Values returns all known values for Vc3Telecine. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Vc3Telecine) Values() []Vc3Telecine {
	return []Vc3Telecine{
		"NONE",
		"HARD",
	}
}

type VchipAction string

// Enum values for VchipAction
const (
	VchipActionPassthrough VchipAction = "PASSTHROUGH"
	VchipActionStrip       VchipAction = "STRIP"
)

// Values returns all known values for VchipAction. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (VchipAction) Values() []VchipAction {
	return []VchipAction{
		"PASSTHROUGH",
		"STRIP",
	}
}

type VideoCodec string

// Enum values for VideoCodec
const (
	VideoCodecAv1          VideoCodec = "AV1"
	VideoCodecAvcIntra     VideoCodec = "AVC_INTRA"
	VideoCodecFrameCapture VideoCodec = "FRAME_CAPTURE"
	VideoCodecGif          VideoCodec = "GIF"
	VideoCodecH264         VideoCodec = "H_264"
	VideoCodecH265         VideoCodec = "H_265"
	VideoCodecMpeg2        VideoCodec = "MPEG2"
	VideoCodecPassthrough  VideoCodec = "PASSTHROUGH"
	VideoCodecProres       VideoCodec = "PRORES"
	VideoCodecUncompressed VideoCodec = "UNCOMPRESSED"
	VideoCodecVc3          VideoCodec = "VC3"
	VideoCodecVp8          VideoCodec = "VP8"
	VideoCodecVp9          VideoCodec = "VP9"
	VideoCodecXavc         VideoCodec = "XAVC"
)

// Values returns all known values for VideoCodec. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (VideoCodec) Values() []VideoCodec {
	return []VideoCodec{
		"AV1",
		"AVC_INTRA",
		"FRAME_CAPTURE",
		"GIF",
		"H_264",
		"H_265",
		"MPEG2",
		"PASSTHROUGH",
		"PRORES",
		"UNCOMPRESSED",
		"VC3",
		"VP8",
		"VP9",
		"XAVC",
	}
}

type VideoOverlayPlayBackMode string

// Enum values for VideoOverlayPlayBackMode
const (
	VideoOverlayPlayBackModeOnce   VideoOverlayPlayBackMode = "ONCE"
	VideoOverlayPlayBackModeRepeat VideoOverlayPlayBackMode = "REPEAT"
)

// Values returns all known values for VideoOverlayPlayBackMode. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (VideoOverlayPlayBackMode) Values() []VideoOverlayPlayBackMode {
	return []VideoOverlayPlayBackMode{
		"ONCE",
		"REPEAT",
	}
}

type VideoOverlayUnit string

// Enum values for VideoOverlayUnit
const (
	VideoOverlayUnitPixels     VideoOverlayUnit = "PIXELS"
	VideoOverlayUnitPercentage VideoOverlayUnit = "PERCENTAGE"
)

// Values returns all known values for VideoOverlayUnit. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (VideoOverlayUnit) Values() []VideoOverlayUnit {
	return []VideoOverlayUnit{
		"PIXELS",
		"PERCENTAGE",
	}
}

type VideoTimecodeInsertion string

// Enum values for VideoTimecodeInsertion
const (
	VideoTimecodeInsertionDisabled     VideoTimecodeInsertion = "DISABLED"
	VideoTimecodeInsertionPicTimingSei VideoTimecodeInsertion = "PIC_TIMING_SEI"
)

// Values returns all known values for VideoTimecodeInsertion. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (VideoTimecodeInsertion) Values() []VideoTimecodeInsertion {
	return []VideoTimecodeInsertion{
		"DISABLED",
		"PIC_TIMING_SEI",
	}
}

type Vp8FramerateControl string

// Enum values for Vp8FramerateControl
const (
	Vp8FramerateControlInitializeFromSource Vp8FramerateControl = "INITIALIZE_FROM_SOURCE"
	Vp8FramerateControlSpecified            Vp8FramerateControl = "SPECIFIED"
)

// Values returns all known values for Vp8FramerateControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Vp8FramerateControl) Values() []Vp8FramerateControl {
	return []Vp8FramerateControl{
		"INITIALIZE_FROM_SOURCE",
		"SPECIFIED",
	}
}

type Vp8FramerateConversionAlgorithm string

// Enum values for Vp8FramerateConversionAlgorithm
const (
	Vp8FramerateConversionAlgorithmDuplicateDrop      Vp8FramerateConversionAlgorithm = "DUPLICATE_DROP"
	Vp8FramerateConversionAlgorithmInterpolate        Vp8FramerateConversionAlgorithm = "INTERPOLATE"
	Vp8FramerateConversionAlgorithmFrameformer        Vp8FramerateConversionAlgorithm = "FRAMEFORMER"
	Vp8FramerateConversionAlgorithmMaintainFrameCount Vp8FramerateConversionAlgorithm = "MAINTAIN_FRAME_COUNT"
)

// Values returns all known values for Vp8FramerateConversionAlgorithm. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Vp8FramerateConversionAlgorithm) Values() []Vp8FramerateConversionAlgorithm {
	return []Vp8FramerateConversionAlgorithm{
		"DUPLICATE_DROP",
		"INTERPOLATE",
		"FRAMEFORMER",
		"MAINTAIN_FRAME_COUNT",
	}
}

type Vp8ParControl string

// Enum values for Vp8ParControl
const (
	Vp8ParControlInitializeFromSource Vp8ParControl = "INITIALIZE_FROM_SOURCE"
	Vp8ParControlSpecified            Vp8ParControl = "SPECIFIED"
)

// Values returns all known values for Vp8ParControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Vp8ParControl) Values() []Vp8ParControl {
	return []Vp8ParControl{
		"INITIALIZE_FROM_SOURCE",
		"SPECIFIED",
	}
}

type Vp8QualityTuningLevel string

// Enum values for Vp8QualityTuningLevel
const (
	Vp8QualityTuningLevelMultiPass   Vp8QualityTuningLevel = "MULTI_PASS"
	Vp8QualityTuningLevelMultiPassHq Vp8QualityTuningLevel = "MULTI_PASS_HQ"
)

// Values returns all known values for Vp8QualityTuningLevel. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Vp8QualityTuningLevel) Values() []Vp8QualityTuningLevel {
	return []Vp8QualityTuningLevel{
		"MULTI_PASS",
		"MULTI_PASS_HQ",
	}
}

type Vp8RateControlMode string

// Enum values for Vp8RateControlMode
const (
	Vp8RateControlModeVbr Vp8RateControlMode = "VBR"
)

// Values returns all known values for Vp8RateControlMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Vp8RateControlMode) Values() []Vp8RateControlMode {
	return []Vp8RateControlMode{
		"VBR",
	}
}

type Vp9FramerateControl string

// Enum values for Vp9FramerateControl
const (
	Vp9FramerateControlInitializeFromSource Vp9FramerateControl = "INITIALIZE_FROM_SOURCE"
	Vp9FramerateControlSpecified            Vp9FramerateControl = "SPECIFIED"
)

// Values returns all known values for Vp9FramerateControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Vp9FramerateControl) Values() []Vp9FramerateControl {
	return []Vp9FramerateControl{
		"INITIALIZE_FROM_SOURCE",
		"SPECIFIED",
	}
}

type Vp9FramerateConversionAlgorithm string

// Enum values for Vp9FramerateConversionAlgorithm
const (
	Vp9FramerateConversionAlgorithmDuplicateDrop      Vp9FramerateConversionAlgorithm = "DUPLICATE_DROP"
	Vp9FramerateConversionAlgorithmInterpolate        Vp9FramerateConversionAlgorithm = "INTERPOLATE"
	Vp9FramerateConversionAlgorithmFrameformer        Vp9FramerateConversionAlgorithm = "FRAMEFORMER"
	Vp9FramerateConversionAlgorithmMaintainFrameCount Vp9FramerateConversionAlgorithm = "MAINTAIN_FRAME_COUNT"
)

// Values returns all known values for Vp9FramerateConversionAlgorithm. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Vp9FramerateConversionAlgorithm) Values() []Vp9FramerateConversionAlgorithm {
	return []Vp9FramerateConversionAlgorithm{
		"DUPLICATE_DROP",
		"INTERPOLATE",
		"FRAMEFORMER",
		"MAINTAIN_FRAME_COUNT",
	}
}

type Vp9ParControl string

// Enum values for Vp9ParControl
const (
	Vp9ParControlInitializeFromSource Vp9ParControl = "INITIALIZE_FROM_SOURCE"
	Vp9ParControlSpecified            Vp9ParControl = "SPECIFIED"
)

// Values returns all known values for Vp9ParControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Vp9ParControl) Values() []Vp9ParControl {
	return []Vp9ParControl{
		"INITIALIZE_FROM_SOURCE",
		"SPECIFIED",
	}
}

type Vp9QualityTuningLevel string

// Enum values for Vp9QualityTuningLevel
const (
	Vp9QualityTuningLevelMultiPass   Vp9QualityTuningLevel = "MULTI_PASS"
	Vp9QualityTuningLevelMultiPassHq Vp9QualityTuningLevel = "MULTI_PASS_HQ"
)

// Values returns all known values for Vp9QualityTuningLevel. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Vp9QualityTuningLevel) Values() []Vp9QualityTuningLevel {
	return []Vp9QualityTuningLevel{
		"MULTI_PASS",
		"MULTI_PASS_HQ",
	}
}

type Vp9RateControlMode string

// Enum values for Vp9RateControlMode
const (
	Vp9RateControlModeVbr Vp9RateControlMode = "VBR"
)

// Values returns all known values for Vp9RateControlMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Vp9RateControlMode) Values() []Vp9RateControlMode {
	return []Vp9RateControlMode{
		"VBR",
	}
}

type WatermarkingStrength string

// Enum values for WatermarkingStrength
const (
	WatermarkingStrengthLightest  WatermarkingStrength = "LIGHTEST"
	WatermarkingStrengthLighter   WatermarkingStrength = "LIGHTER"
	WatermarkingStrengthDefault   WatermarkingStrength = "DEFAULT"
	WatermarkingStrengthStronger  WatermarkingStrength = "STRONGER"
	WatermarkingStrengthStrongest WatermarkingStrength = "STRONGEST"
)

// Values returns all known values for WatermarkingStrength. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (WatermarkingStrength) Values() []WatermarkingStrength {
	return []WatermarkingStrength{
		"LIGHTEST",
		"LIGHTER",
		"DEFAULT",
		"STRONGER",
		"STRONGEST",
	}
}

type WavFormat string

// Enum values for WavFormat
const (
	WavFormatRiff       WavFormat = "RIFF"
	WavFormatRf64       WavFormat = "RF64"
	WavFormatExtensible WavFormat = "EXTENSIBLE"
)

// Values returns all known values for WavFormat. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (WavFormat) Values() []WavFormat {
	return []WavFormat{
		"RIFF",
		"RF64",
		"EXTENSIBLE",
	}
}

type WebvttAccessibilitySubs string

// Enum values for WebvttAccessibilitySubs
const (
	WebvttAccessibilitySubsDisabled WebvttAccessibilitySubs = "DISABLED"
	WebvttAccessibilitySubsEnabled  WebvttAccessibilitySubs = "ENABLED"
)

// Values returns all known values for WebvttAccessibilitySubs. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (WebvttAccessibilitySubs) Values() []WebvttAccessibilitySubs {
	return []WebvttAccessibilitySubs{
		"DISABLED",
		"ENABLED",
	}
}

type WebvttStylePassthrough string

// Enum values for WebvttStylePassthrough
const (
	WebvttStylePassthroughEnabled  WebvttStylePassthrough = "ENABLED"
	WebvttStylePassthroughDisabled WebvttStylePassthrough = "DISABLED"
	WebvttStylePassthroughStrict   WebvttStylePassthrough = "STRICT"
	WebvttStylePassthroughMerge    WebvttStylePassthrough = "MERGE"
)

// Values returns all known values for WebvttStylePassthrough. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (WebvttStylePassthrough) Values() []WebvttStylePassthrough {
	return []WebvttStylePassthrough{
		"ENABLED",
		"DISABLED",
		"STRICT",
		"MERGE",
	}
}

type Xavc4kIntraCbgProfileClass string

// Enum values for Xavc4kIntraCbgProfileClass
const (
	Xavc4kIntraCbgProfileClassClass100 Xavc4kIntraCbgProfileClass = "CLASS_100"
	Xavc4kIntraCbgProfileClassClass300 Xavc4kIntraCbgProfileClass = "CLASS_300"
	Xavc4kIntraCbgProfileClassClass480 Xavc4kIntraCbgProfileClass = "CLASS_480"
)

// Values returns all known values for Xavc4kIntraCbgProfileClass. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Xavc4kIntraCbgProfileClass) Values() []Xavc4kIntraCbgProfileClass {
	return []Xavc4kIntraCbgProfileClass{
		"CLASS_100",
		"CLASS_300",
		"CLASS_480",
	}
}

type Xavc4kIntraVbrProfileClass string

// Enum values for Xavc4kIntraVbrProfileClass
const (
	Xavc4kIntraVbrProfileClassClass100 Xavc4kIntraVbrProfileClass = "CLASS_100"
	Xavc4kIntraVbrProfileClassClass300 Xavc4kIntraVbrProfileClass = "CLASS_300"
	Xavc4kIntraVbrProfileClassClass480 Xavc4kIntraVbrProfileClass = "CLASS_480"
)

// Values returns all known values for Xavc4kIntraVbrProfileClass. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Xavc4kIntraVbrProfileClass) Values() []Xavc4kIntraVbrProfileClass {
	return []Xavc4kIntraVbrProfileClass{
		"CLASS_100",
		"CLASS_300",
		"CLASS_480",
	}
}

type Xavc4kProfileBitrateClass string

// Enum values for Xavc4kProfileBitrateClass
const (
	Xavc4kProfileBitrateClassBitrateClass100 Xavc4kProfileBitrateClass = "BITRATE_CLASS_100"
	Xavc4kProfileBitrateClassBitrateClass140 Xavc4kProfileBitrateClass = "BITRATE_CLASS_140"
	Xavc4kProfileBitrateClassBitrateClass200 Xavc4kProfileBitrateClass = "BITRATE_CLASS_200"
)

// Values returns all known values for Xavc4kProfileBitrateClass. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Xavc4kProfileBitrateClass) Values() []Xavc4kProfileBitrateClass {
	return []Xavc4kProfileBitrateClass{
		"BITRATE_CLASS_100",
		"BITRATE_CLASS_140",
		"BITRATE_CLASS_200",
	}
}

type Xavc4kProfileCodecProfile string

// Enum values for Xavc4kProfileCodecProfile
const (
	Xavc4kProfileCodecProfileHigh    Xavc4kProfileCodecProfile = "HIGH"
	Xavc4kProfileCodecProfileHigh422 Xavc4kProfileCodecProfile = "HIGH_422"
)

// Values returns all known values for Xavc4kProfileCodecProfile. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Xavc4kProfileCodecProfile) Values() []Xavc4kProfileCodecProfile {
	return []Xavc4kProfileCodecProfile{
		"HIGH",
		"HIGH_422",
	}
}

type Xavc4kProfileQualityTuningLevel string

// Enum values for Xavc4kProfileQualityTuningLevel
const (
	Xavc4kProfileQualityTuningLevelSinglePass   Xavc4kProfileQualityTuningLevel = "SINGLE_PASS"
	Xavc4kProfileQualityTuningLevelSinglePassHq Xavc4kProfileQualityTuningLevel = "SINGLE_PASS_HQ"
	Xavc4kProfileQualityTuningLevelMultiPassHq  Xavc4kProfileQualityTuningLevel = "MULTI_PASS_HQ"
)

// Values returns all known values for Xavc4kProfileQualityTuningLevel. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (Xavc4kProfileQualityTuningLevel) Values() []Xavc4kProfileQualityTuningLevel {
	return []Xavc4kProfileQualityTuningLevel{
		"SINGLE_PASS",
		"SINGLE_PASS_HQ",
		"MULTI_PASS_HQ",
	}
}

type XavcAdaptiveQuantization string

// Enum values for XavcAdaptiveQuantization
const (
	XavcAdaptiveQuantizationOff    XavcAdaptiveQuantization = "OFF"
	XavcAdaptiveQuantizationAuto   XavcAdaptiveQuantization = "AUTO"
	XavcAdaptiveQuantizationLow    XavcAdaptiveQuantization = "LOW"
	XavcAdaptiveQuantizationMedium XavcAdaptiveQuantization = "MEDIUM"
	XavcAdaptiveQuantizationHigh   XavcAdaptiveQuantization = "HIGH"
	XavcAdaptiveQuantizationHigher XavcAdaptiveQuantization = "HIGHER"
	XavcAdaptiveQuantizationMax    XavcAdaptiveQuantization = "MAX"
)

// Values returns all known values for XavcAdaptiveQuantization. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (XavcAdaptiveQuantization) Values() []XavcAdaptiveQuantization {
	return []XavcAdaptiveQuantization{
		"OFF",
		"AUTO",
		"LOW",
		"MEDIUM",
		"HIGH",
		"HIGHER",
		"MAX",
	}
}

type XavcEntropyEncoding string

// Enum values for XavcEntropyEncoding
const (
	XavcEntropyEncodingAuto  XavcEntropyEncoding = "AUTO"
	XavcEntropyEncodingCabac XavcEntropyEncoding = "CABAC"
	XavcEntropyEncodingCavlc XavcEntropyEncoding = "CAVLC"
)

// Values returns all known values for XavcEntropyEncoding. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (XavcEntropyEncoding) Values() []XavcEntropyEncoding {
	return []XavcEntropyEncoding{
		"AUTO",
		"CABAC",
		"CAVLC",
	}
}

type XavcFlickerAdaptiveQuantization string

// Enum values for XavcFlickerAdaptiveQuantization
const (
	XavcFlickerAdaptiveQuantizationDisabled XavcFlickerAdaptiveQuantization = "DISABLED"
	XavcFlickerAdaptiveQuantizationEnabled  XavcFlickerAdaptiveQuantization = "ENABLED"
)

// Values returns all known values for XavcFlickerAdaptiveQuantization. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (XavcFlickerAdaptiveQuantization) Values() []XavcFlickerAdaptiveQuantization {
	return []XavcFlickerAdaptiveQuantization{
		"DISABLED",
		"ENABLED",
	}
}

type XavcFramerateControl string

// Enum values for XavcFramerateControl
const (
	XavcFramerateControlInitializeFromSource XavcFramerateControl = "INITIALIZE_FROM_SOURCE"
	XavcFramerateControlSpecified            XavcFramerateControl = "SPECIFIED"
)

// Values returns all known values for XavcFramerateControl. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (XavcFramerateControl) Values() []XavcFramerateControl {
	return []XavcFramerateControl{
		"INITIALIZE_FROM_SOURCE",
		"SPECIFIED",
	}
}

type XavcFramerateConversionAlgorithm string

// Enum values for XavcFramerateConversionAlgorithm
const (
	XavcFramerateConversionAlgorithmDuplicateDrop      XavcFramerateConversionAlgorithm = "DUPLICATE_DROP"
	XavcFramerateConversionAlgorithmInterpolate        XavcFramerateConversionAlgorithm = "INTERPOLATE"
	XavcFramerateConversionAlgorithmFrameformer        XavcFramerateConversionAlgorithm = "FRAMEFORMER"
	XavcFramerateConversionAlgorithmMaintainFrameCount XavcFramerateConversionAlgorithm = "MAINTAIN_FRAME_COUNT"
)

// Values returns all known values for XavcFramerateConversionAlgorithm. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (XavcFramerateConversionAlgorithm) Values() []XavcFramerateConversionAlgorithm {
	return []XavcFramerateConversionAlgorithm{
		"DUPLICATE_DROP",
		"INTERPOLATE",
		"FRAMEFORMER",
		"MAINTAIN_FRAME_COUNT",
	}
}

type XavcGopBReference string

// Enum values for XavcGopBReference
const (
	XavcGopBReferenceDisabled XavcGopBReference = "DISABLED"
	XavcGopBReferenceEnabled  XavcGopBReference = "ENABLED"
)

// Values returns all known values for XavcGopBReference. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (XavcGopBReference) Values() []XavcGopBReference {
	return []XavcGopBReference{
		"DISABLED",
		"ENABLED",
	}
}

type XavcHdIntraCbgProfileClass string

// Enum values for XavcHdIntraCbgProfileClass
const (
	XavcHdIntraCbgProfileClassClass50  XavcHdIntraCbgProfileClass = "CLASS_50"
	XavcHdIntraCbgProfileClassClass100 XavcHdIntraCbgProfileClass = "CLASS_100"
	XavcHdIntraCbgProfileClassClass200 XavcHdIntraCbgProfileClass = "CLASS_200"
)

// Values returns all known values for XavcHdIntraCbgProfileClass. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (XavcHdIntraCbgProfileClass) Values() []XavcHdIntraCbgProfileClass {
	return []XavcHdIntraCbgProfileClass{
		"CLASS_50",
		"CLASS_100",
		"CLASS_200",
	}
}

type XavcHdProfileBitrateClass string

// Enum values for XavcHdProfileBitrateClass
const (
	XavcHdProfileBitrateClassBitrateClass25 XavcHdProfileBitrateClass = "BITRATE_CLASS_25"
	XavcHdProfileBitrateClassBitrateClass35 XavcHdProfileBitrateClass = "BITRATE_CLASS_35"
	XavcHdProfileBitrateClassBitrateClass50 XavcHdProfileBitrateClass = "BITRATE_CLASS_50"
)

// Values returns all known values for XavcHdProfileBitrateClass. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (XavcHdProfileBitrateClass) Values() []XavcHdProfileBitrateClass {
	return []XavcHdProfileBitrateClass{
		"BITRATE_CLASS_25",
		"BITRATE_CLASS_35",
		"BITRATE_CLASS_50",
	}
}

type XavcHdProfileQualityTuningLevel string

// Enum values for XavcHdProfileQualityTuningLevel
const (
	XavcHdProfileQualityTuningLevelSinglePass   XavcHdProfileQualityTuningLevel = "SINGLE_PASS"
	XavcHdProfileQualityTuningLevelSinglePassHq XavcHdProfileQualityTuningLevel = "SINGLE_PASS_HQ"
	XavcHdProfileQualityTuningLevelMultiPassHq  XavcHdProfileQualityTuningLevel = "MULTI_PASS_HQ"
)

// Values returns all known values for XavcHdProfileQualityTuningLevel. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (XavcHdProfileQualityTuningLevel) Values() []XavcHdProfileQualityTuningLevel {
	return []XavcHdProfileQualityTuningLevel{
		"SINGLE_PASS",
		"SINGLE_PASS_HQ",
		"MULTI_PASS_HQ",
	}
}

type XavcHdProfileTelecine string

// Enum values for XavcHdProfileTelecine
const (
	XavcHdProfileTelecineNone XavcHdProfileTelecine = "NONE"
	XavcHdProfileTelecineHard XavcHdProfileTelecine = "HARD"
)

// Values returns all known values for XavcHdProfileTelecine. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (XavcHdProfileTelecine) Values() []XavcHdProfileTelecine {
	return []XavcHdProfileTelecine{
		"NONE",
		"HARD",
	}
}

type XavcInterlaceMode string

// Enum values for XavcInterlaceMode
const (
	XavcInterlaceModeProgressive       XavcInterlaceMode = "PROGRESSIVE"
	XavcInterlaceModeTopField          XavcInterlaceMode = "TOP_FIELD"
	XavcInterlaceModeBottomField       XavcInterlaceMode = "BOTTOM_FIELD"
	XavcInterlaceModeFollowTopField    XavcInterlaceMode = "FOLLOW_TOP_FIELD"
	XavcInterlaceModeFollowBottomField XavcInterlaceMode = "FOLLOW_BOTTOM_FIELD"
)

// Values returns all known values for XavcInterlaceMode. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (XavcInterlaceMode) Values() []XavcInterlaceMode {
	return []XavcInterlaceMode{
		"PROGRESSIVE",
		"TOP_FIELD",
		"BOTTOM_FIELD",
		"FOLLOW_TOP_FIELD",
		"FOLLOW_BOTTOM_FIELD",
	}
}

type XavcProfile string

// Enum values for XavcProfile
const (
	XavcProfileXavcHdIntraCbg XavcProfile = "XAVC_HD_INTRA_CBG"
	XavcProfileXavc4kIntraCbg XavcProfile = "XAVC_4K_INTRA_CBG"
	XavcProfileXavc4kIntraVbr XavcProfile = "XAVC_4K_INTRA_VBR"
	XavcProfileXavcHd         XavcProfile = "XAVC_HD"
	XavcProfileXavc4k         XavcProfile = "XAVC_4K"
)

// Values returns all known values for XavcProfile. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (XavcProfile) Values() []XavcProfile {
	return []XavcProfile{
		"XAVC_HD_INTRA_CBG",
		"XAVC_4K_INTRA_CBG",
		"XAVC_4K_INTRA_VBR",
		"XAVC_HD",
		"XAVC_4K",
	}
}

type XavcSlowPal string

// Enum values for XavcSlowPal
const (
	XavcSlowPalDisabled XavcSlowPal = "DISABLED"
	XavcSlowPalEnabled  XavcSlowPal = "ENABLED"
)

// Values returns all known values for XavcSlowPal. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (XavcSlowPal) Values() []XavcSlowPal {
	return []XavcSlowPal{
		"DISABLED",
		"ENABLED",
	}
}

type XavcSpatialAdaptiveQuantization string

// Enum values for XavcSpatialAdaptiveQuantization
const (
	XavcSpatialAdaptiveQuantizationDisabled XavcSpatialAdaptiveQuantization = "DISABLED"
	XavcSpatialAdaptiveQuantizationEnabled  XavcSpatialAdaptiveQuantization = "ENABLED"
)

// Values returns all known values for XavcSpatialAdaptiveQuantization. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (XavcSpatialAdaptiveQuantization) Values() []XavcSpatialAdaptiveQuantization {
	return []XavcSpatialAdaptiveQuantization{
		"DISABLED",
		"ENABLED",
	}
}

type XavcTemporalAdaptiveQuantization string

// Enum values for XavcTemporalAdaptiveQuantization
const (
	XavcTemporalAdaptiveQuantizationDisabled XavcTemporalAdaptiveQuantization = "DISABLED"
	XavcTemporalAdaptiveQuantizationEnabled  XavcTemporalAdaptiveQuantization = "ENABLED"
)

// Values returns all known values for XavcTemporalAdaptiveQuantization. Note that
// this can be expanded in the future, and so it is only as up to date as the
// client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (XavcTemporalAdaptiveQuantization) Values() []XavcTemporalAdaptiveQuantization {
	return []XavcTemporalAdaptiveQuantization{
		"DISABLED",
		"ENABLED",
	}
}
