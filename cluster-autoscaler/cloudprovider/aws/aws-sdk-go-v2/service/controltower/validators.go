// Code generated by smithy-go-codegen DO NOT EDIT.

package controltower

import (
	"context"
	"fmt"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/service/controltower/types"
	smithy "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/middleware"
)

type validateOpCreateLandingZone struct {
}

func (*validateOpCreateLandingZone) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpCreateLandingZone) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*CreateLandingZoneInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpCreateLandingZoneInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDeleteLandingZone struct {
}

func (*validateOpDeleteLandingZone) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDeleteLandingZone) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DeleteLandingZoneInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDeleteLandingZoneInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDisableBaseline struct {
}

func (*validateOpDisableBaseline) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDisableBaseline) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DisableBaselineInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDisableBaselineInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpDisableControl struct {
}

func (*validateOpDisableControl) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpDisableControl) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*DisableControlInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpDisableControlInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpEnableBaseline struct {
}

func (*validateOpEnableBaseline) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpEnableBaseline) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*EnableBaselineInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpEnableBaselineInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpEnableControl struct {
}

func (*validateOpEnableControl) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpEnableControl) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*EnableControlInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpEnableControlInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetBaseline struct {
}

func (*validateOpGetBaseline) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetBaseline) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetBaselineInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetBaselineInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetBaselineOperation struct {
}

func (*validateOpGetBaselineOperation) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetBaselineOperation) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetBaselineOperationInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetBaselineOperationInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetControlOperation struct {
}

func (*validateOpGetControlOperation) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetControlOperation) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetControlOperationInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetControlOperationInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetEnabledBaseline struct {
}

func (*validateOpGetEnabledBaseline) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetEnabledBaseline) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetEnabledBaselineInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetEnabledBaselineInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetEnabledControl struct {
}

func (*validateOpGetEnabledControl) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetEnabledControl) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetEnabledControlInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetEnabledControlInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetLandingZone struct {
}

func (*validateOpGetLandingZone) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetLandingZone) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetLandingZoneInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetLandingZoneInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetLandingZoneOperation struct {
}

func (*validateOpGetLandingZoneOperation) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetLandingZoneOperation) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetLandingZoneOperationInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetLandingZoneOperationInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpListTagsForResource struct {
}

func (*validateOpListTagsForResource) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpListTagsForResource) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ListTagsForResourceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpListTagsForResourceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpResetEnabledBaseline struct {
}

func (*validateOpResetEnabledBaseline) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpResetEnabledBaseline) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ResetEnabledBaselineInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpResetEnabledBaselineInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpResetEnabledControl struct {
}

func (*validateOpResetEnabledControl) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpResetEnabledControl) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ResetEnabledControlInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpResetEnabledControlInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpResetLandingZone struct {
}

func (*validateOpResetLandingZone) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpResetLandingZone) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*ResetLandingZoneInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpResetLandingZoneInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpTagResource struct {
}

func (*validateOpTagResource) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpTagResource) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*TagResourceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpTagResourceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUntagResource struct {
}

func (*validateOpUntagResource) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUntagResource) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UntagResourceInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUntagResourceInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateEnabledBaseline struct {
}

func (*validateOpUpdateEnabledBaseline) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateEnabledBaseline) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateEnabledBaselineInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateEnabledBaselineInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateEnabledControl struct {
}

func (*validateOpUpdateEnabledControl) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateEnabledControl) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateEnabledControlInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateEnabledControlInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpUpdateLandingZone struct {
}

func (*validateOpUpdateLandingZone) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpUpdateLandingZone) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*UpdateLandingZoneInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpUpdateLandingZoneInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

func addOpCreateLandingZoneValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpCreateLandingZone{}, middleware.After)
}

func addOpDeleteLandingZoneValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDeleteLandingZone{}, middleware.After)
}

func addOpDisableBaselineValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDisableBaseline{}, middleware.After)
}

func addOpDisableControlValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpDisableControl{}, middleware.After)
}

func addOpEnableBaselineValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpEnableBaseline{}, middleware.After)
}

func addOpEnableControlValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpEnableControl{}, middleware.After)
}

func addOpGetBaselineValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetBaseline{}, middleware.After)
}

func addOpGetBaselineOperationValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetBaselineOperation{}, middleware.After)
}

func addOpGetControlOperationValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetControlOperation{}, middleware.After)
}

func addOpGetEnabledBaselineValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetEnabledBaseline{}, middleware.After)
}

func addOpGetEnabledControlValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetEnabledControl{}, middleware.After)
}

func addOpGetLandingZoneValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetLandingZone{}, middleware.After)
}

func addOpGetLandingZoneOperationValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetLandingZoneOperation{}, middleware.After)
}

func addOpListTagsForResourceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpListTagsForResource{}, middleware.After)
}

func addOpResetEnabledBaselineValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpResetEnabledBaseline{}, middleware.After)
}

func addOpResetEnabledControlValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpResetEnabledControl{}, middleware.After)
}

func addOpResetLandingZoneValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpResetLandingZone{}, middleware.After)
}

func addOpTagResourceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpTagResource{}, middleware.After)
}

func addOpUntagResourceValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUntagResource{}, middleware.After)
}

func addOpUpdateEnabledBaselineValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateEnabledBaseline{}, middleware.After)
}

func addOpUpdateEnabledControlValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateEnabledControl{}, middleware.After)
}

func addOpUpdateLandingZoneValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpUpdateLandingZone{}, middleware.After)
}

func validateEnabledBaselineParameter(v *types.EnabledBaselineParameter) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "EnabledBaselineParameter"}
	if v.Key == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Key"))
	}
	if v.Value == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Value"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateEnabledBaselineParameters(v []types.EnabledBaselineParameter) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "EnabledBaselineParameters"}
	for i := range v {
		if err := validateEnabledBaselineParameter(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateEnabledControlParameter(v *types.EnabledControlParameter) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "EnabledControlParameter"}
	if v.Key == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Key"))
	}
	if v.Value == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Value"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateEnabledControlParameters(v []types.EnabledControlParameter) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "EnabledControlParameters"}
	for i := range v {
		if err := validateEnabledControlParameter(&v[i]); err != nil {
			invalidParams.AddNested(fmt.Sprintf("[%d]", i), err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpCreateLandingZoneInput(v *CreateLandingZoneInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "CreateLandingZoneInput"}
	if v.Version == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Version"))
	}
	if v.Manifest == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Manifest"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDeleteLandingZoneInput(v *DeleteLandingZoneInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DeleteLandingZoneInput"}
	if v.LandingZoneIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("LandingZoneIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDisableBaselineInput(v *DisableBaselineInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DisableBaselineInput"}
	if v.EnabledBaselineIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("EnabledBaselineIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpDisableControlInput(v *DisableControlInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "DisableControlInput"}
	if v.ControlIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ControlIdentifier"))
	}
	if v.TargetIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TargetIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpEnableBaselineInput(v *EnableBaselineInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "EnableBaselineInput"}
	if v.BaselineVersion == nil {
		invalidParams.Add(smithy.NewErrParamRequired("BaselineVersion"))
	}
	if v.Parameters != nil {
		if err := validateEnabledBaselineParameters(v.Parameters); err != nil {
			invalidParams.AddNested("Parameters", err.(smithy.InvalidParamsError))
		}
	}
	if v.BaselineIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("BaselineIdentifier"))
	}
	if v.TargetIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TargetIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpEnableControlInput(v *EnableControlInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "EnableControlInput"}
	if v.ControlIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ControlIdentifier"))
	}
	if v.TargetIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TargetIdentifier"))
	}
	if v.Parameters != nil {
		if err := validateEnabledControlParameters(v.Parameters); err != nil {
			invalidParams.AddNested("Parameters", err.(smithy.InvalidParamsError))
		}
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetBaselineInput(v *GetBaselineInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetBaselineInput"}
	if v.BaselineIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("BaselineIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetBaselineOperationInput(v *GetBaselineOperationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetBaselineOperationInput"}
	if v.OperationIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("OperationIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetControlOperationInput(v *GetControlOperationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetControlOperationInput"}
	if v.OperationIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("OperationIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetEnabledBaselineInput(v *GetEnabledBaselineInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetEnabledBaselineInput"}
	if v.EnabledBaselineIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("EnabledBaselineIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetEnabledControlInput(v *GetEnabledControlInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetEnabledControlInput"}
	if v.EnabledControlIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("EnabledControlIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetLandingZoneInput(v *GetLandingZoneInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetLandingZoneInput"}
	if v.LandingZoneIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("LandingZoneIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpGetLandingZoneOperationInput(v *GetLandingZoneOperationInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetLandingZoneOperationInput"}
	if v.OperationIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("OperationIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpListTagsForResourceInput(v *ListTagsForResourceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ListTagsForResourceInput"}
	if v.ResourceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ResourceArn"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpResetEnabledBaselineInput(v *ResetEnabledBaselineInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ResetEnabledBaselineInput"}
	if v.EnabledBaselineIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("EnabledBaselineIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpResetEnabledControlInput(v *ResetEnabledControlInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ResetEnabledControlInput"}
	if v.EnabledControlIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("EnabledControlIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpResetLandingZoneInput(v *ResetLandingZoneInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "ResetLandingZoneInput"}
	if v.LandingZoneIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("LandingZoneIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpTagResourceInput(v *TagResourceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "TagResourceInput"}
	if v.ResourceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ResourceArn"))
	}
	if v.Tags == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Tags"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUntagResourceInput(v *UntagResourceInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UntagResourceInput"}
	if v.ResourceArn == nil {
		invalidParams.Add(smithy.NewErrParamRequired("ResourceArn"))
	}
	if v.TagKeys == nil {
		invalidParams.Add(smithy.NewErrParamRequired("TagKeys"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateEnabledBaselineInput(v *UpdateEnabledBaselineInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateEnabledBaselineInput"}
	if v.BaselineVersion == nil {
		invalidParams.Add(smithy.NewErrParamRequired("BaselineVersion"))
	}
	if v.Parameters != nil {
		if err := validateEnabledBaselineParameters(v.Parameters); err != nil {
			invalidParams.AddNested("Parameters", err.(smithy.InvalidParamsError))
		}
	}
	if v.EnabledBaselineIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("EnabledBaselineIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateEnabledControlInput(v *UpdateEnabledControlInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateEnabledControlInput"}
	if v.Parameters == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Parameters"))
	} else if v.Parameters != nil {
		if err := validateEnabledControlParameters(v.Parameters); err != nil {
			invalidParams.AddNested("Parameters", err.(smithy.InvalidParamsError))
		}
	}
	if v.EnabledControlIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("EnabledControlIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}

func validateOpUpdateLandingZoneInput(v *UpdateLandingZoneInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "UpdateLandingZoneInput"}
	if v.Version == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Version"))
	}
	if v.Manifest == nil {
		invalidParams.Add(smithy.NewErrParamRequired("Manifest"))
	}
	if v.LandingZoneIdentifier == nil {
		invalidParams.Add(smithy.NewErrParamRequired("LandingZoneIdentifier"))
	}
	if invalidParams.Len() > 0 {
		return invalidParams
	} else {
		return nil
	}
}
