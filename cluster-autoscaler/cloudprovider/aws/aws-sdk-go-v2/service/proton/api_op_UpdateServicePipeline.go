// Code generated by smithy-go-codegen DO NOT EDIT.

package proton

import (
	"context"
	"fmt"
	awsmiddleware "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/aws/middleware"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/service/proton/types"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/middleware"
	smithyhttp "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/transport/http"
)

// Update the service pipeline.
//
// There are four modes for updating a service pipeline. The deploymentType field
// defines the mode.
//
//	NONE
//
// In this mode, a deployment doesn't occur. Only the requested metadata
// parameters are updated.
//
//	CURRENT_VERSION
//
// In this mode, the service pipeline is deployed and updated with the new spec
// that you provide. Only requested parameters are updated. Don’t include major or
// minor version parameters when you use this deployment-type .
//
//	MINOR_VERSION
//
// In this mode, the service pipeline is deployed and updated with the published,
// recommended (latest) minor version of the current major version in use, by
// default. You can specify a different minor version of the current major version
// in use.
//
//	MAJOR_VERSION
//
// In this mode, the service pipeline is deployed and updated with the published,
// recommended (latest) major and minor version of the current template by default.
// You can specify a different major version that's higher than the major version
// in use and a minor version.
func (c *Client) UpdateServicePipeline(ctx context.Context, params *UpdateServicePipelineInput, optFns ...func(*Options)) (*UpdateServicePipelineOutput, error) {
	if params == nil {
		params = &UpdateServicePipelineInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "UpdateServicePipeline", params, optFns, c.addOperationUpdateServicePipelineMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*UpdateServicePipelineOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type UpdateServicePipelineInput struct {

	// The deployment type.
	//
	// There are four modes for updating a service pipeline. The deploymentType field
	// defines the mode.
	//
	//     NONE
	//
	// In this mode, a deployment doesn't occur. Only the requested metadata
	// parameters are updated.
	//
	//     CURRENT_VERSION
	//
	// In this mode, the service pipeline is deployed and updated with the new spec
	// that you provide. Only requested parameters are updated. Don’t include major or
	// minor version parameters when you use this deployment-type .
	//
	//     MINOR_VERSION
	//
	// In this mode, the service pipeline is deployed and updated with the published,
	// recommended (latest) minor version of the current major version in use, by
	// default. You can specify a different minor version of the current major version
	// in use.
	//
	//     MAJOR_VERSION
	//
	// In this mode, the service pipeline is deployed and updated with the published,
	// recommended (latest) major and minor version of the current template, by
	// default. You can specify a different major version that's higher than the major
	// version in use and a minor version.
	//
	// This member is required.
	DeploymentType types.DeploymentUpdateType

	// The name of the service to that the pipeline is associated with.
	//
	// This member is required.
	ServiceName *string

	// The spec for the service pipeline to update.
	//
	// This value conforms to the media type: application/yaml
	//
	// This member is required.
	Spec *string

	// The major version of the service template that was used to create the service
	// that the pipeline is associated with.
	TemplateMajorVersion *string

	// The minor version of the service template that was used to create the service
	// that the pipeline is associated with.
	TemplateMinorVersion *string

	noSmithyDocumentSerde
}

type UpdateServicePipelineOutput struct {

	// The pipeline details that are returned by Proton.
	//
	// This member is required.
	Pipeline *types.ServicePipeline

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationUpdateServicePipelineMiddlewares(stack *middleware.Stack, options Options) (err error) {
	if err := stack.Serialize.Add(&setOperationInputMiddleware{}, middleware.After); err != nil {
		return err
	}
	err = stack.Serialize.Add(&awsAwsjson10_serializeOpUpdateServicePipeline{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsAwsjson10_deserializeOpUpdateServicePipeline{}, middleware.After)
	if err != nil {
		return err
	}
	if err := addProtocolFinalizerMiddlewares(stack, options, "UpdateServicePipeline"); err != nil {
		return fmt.Errorf("add protocol finalizers: %v", err)
	}

	if err = addlegacyEndpointContextSetter(stack, options); err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = addClientRequestID(stack); err != nil {
		return err
	}
	if err = addComputeContentLength(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = addComputePayloadSHA256(stack); err != nil {
		return err
	}
	if err = addRetry(stack, options); err != nil {
		return err
	}
	if err = addRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = addRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addSpanRetryLoop(stack, options); err != nil {
		return err
	}
	if err = addClientUserAgent(stack, options); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addSetLegacyContextSigningOptionsMiddleware(stack); err != nil {
		return err
	}
	if err = addTimeOffsetBuild(stack, c); err != nil {
		return err
	}
	if err = addUserAgentRetryMode(stack, options); err != nil {
		return err
	}
	if err = addCredentialSource(stack, options); err != nil {
		return err
	}
	if err = addOpUpdateServicePipelineValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opUpdateServicePipeline(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRecursionDetection(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	if err = addDisableHTTPSMiddleware(stack, options); err != nil {
		return err
	}
	if err = addSpanInitializeStart(stack); err != nil {
		return err
	}
	if err = addSpanInitializeEnd(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestStart(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestEnd(stack); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opUpdateServicePipeline(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		OperationName: "UpdateServicePipeline",
	}
}
