// Code generated by smithy-go-codegen DO NOT EDIT.

package apigatewayv2

import (
	"context"
	"fmt"
	awsmiddleware "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/aws/middleware"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/aws-sdk-go-v2/service/apigatewayv2/types"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/middleware"
	smithyhttp "k8s.io/autoscaler/cluster-autoscaler/cloudprovider/aws/smithy-go/transport/http"
)

// Creates a RoutingRule.
func (c *Client) CreateRoutingRule(ctx context.Context, params *CreateRoutingRuleInput, optFns ...func(*Options)) (*CreateRoutingRuleOutput, error) {
	if params == nil {
		params = &CreateRoutingRuleInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "CreateRoutingRule", params, optFns, c.addOperationCreateRoutingRuleMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*CreateRoutingRuleOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateRoutingRuleInput struct {

	// Represents a routing rule action. The only supported action is invokeApi.
	//
	// This member is required.
	Actions []types.RoutingRuleAction

	// Represents a condition. Conditions can contain up to two matchHeaders
	// conditions and one matchBasePaths conditions. API Gateway evaluates header
	// conditions and base path conditions together. You can only use AND between
	// header and base path conditions.
	//
	// This member is required.
	Conditions []types.RoutingRuleCondition

	// The domain name.
	//
	// This member is required.
	DomainName *string

	// Represents the priority of the routing rule.
	//
	// This member is required.
	Priority *int32

	// The domain name ID.
	DomainNameId *string

	noSmithyDocumentSerde
}

type CreateRoutingRuleOutput struct {

	// Represents a routing rule action. The only supported action is invokeApi.
	Actions []types.RoutingRuleAction

	// Represents a condition. Conditions can contain up to two matchHeaders
	// conditions and one matchBasePaths conditions. API Gateway evaluates header
	// conditions and base path conditions together. You can only use AND between
	// header and base path conditions.
	Conditions []types.RoutingRuleCondition

	// Represents the priority of the routing rule.
	Priority *int32

	// The ARN of the domain name.
	RoutingRuleArn *string

	// The routing rule ID.
	RoutingRuleId *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationCreateRoutingRuleMiddlewares(stack *middleware.Stack, options Options) (err error) {
	if err := stack.Serialize.Add(&setOperationInputMiddleware{}, middleware.After); err != nil {
		return err
	}
	err = stack.Serialize.Add(&awsRestjson1_serializeOpCreateRoutingRule{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpCreateRoutingRule{}, middleware.After)
	if err != nil {
		return err
	}
	if err := addProtocolFinalizerMiddlewares(stack, options, "CreateRoutingRule"); err != nil {
		return fmt.Errorf("add protocol finalizers: %v", err)
	}

	if err = addlegacyEndpointContextSetter(stack, options); err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = addClientRequestID(stack); err != nil {
		return err
	}
	if err = addComputeContentLength(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = addComputePayloadSHA256(stack); err != nil {
		return err
	}
	if err = addRetry(stack, options); err != nil {
		return err
	}
	if err = addRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = addRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addSpanRetryLoop(stack, options); err != nil {
		return err
	}
	if err = addClientUserAgent(stack, options); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addSetLegacyContextSigningOptionsMiddleware(stack); err != nil {
		return err
	}
	if err = addTimeOffsetBuild(stack, c); err != nil {
		return err
	}
	if err = addUserAgentRetryMode(stack, options); err != nil {
		return err
	}
	if err = addCredentialSource(stack, options); err != nil {
		return err
	}
	if err = addOpCreateRoutingRuleValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opCreateRoutingRule(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRecursionDetection(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	if err = addDisableHTTPSMiddleware(stack, options); err != nil {
		return err
	}
	if err = addSpanInitializeStart(stack); err != nil {
		return err
	}
	if err = addSpanInitializeEnd(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestStart(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestEnd(stack); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opCreateRoutingRule(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		OperationName: "CreateRoutingRule",
	}
}
