// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AuthorizationType string

// Enum values for AuthorizationType
const (
	AuthorizationTypeNone   AuthorizationType = "NONE"
	AuthorizationTypeAwsIam AuthorizationType = "AWS_IAM"
	AuthorizationTypeCustom AuthorizationType = "CUSTOM"
	AuthorizationTypeJwt    AuthorizationType = "JWT"
)

// Values returns all known values for AuthorizationType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AuthorizationType) Values() []AuthorizationType {
	return []AuthorizationType{
		"NONE",
		"AWS_IAM",
		"CUSTOM",
		"JWT",
	}
}

type AuthorizerType string

// Enum values for AuthorizerType
const (
	AuthorizerTypeRequest AuthorizerType = "REQUEST"
	AuthorizerTypeJwt     AuthorizerType = "JWT"
)

// Values returns all known values for AuthorizerType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AuthorizerType) Values() []AuthorizerType {
	return []AuthorizerType{
		"REQUEST",
		"JWT",
	}
}

type ConnectionType string

// Enum values for ConnectionType
const (
	ConnectionTypeInternet ConnectionType = "INTERNET"
	ConnectionTypeVpcLink  ConnectionType = "VPC_LINK"
)

// Values returns all known values for ConnectionType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ConnectionType) Values() []ConnectionType {
	return []ConnectionType{
		"INTERNET",
		"VPC_LINK",
	}
}

type ContentHandlingStrategy string

// Enum values for ContentHandlingStrategy
const (
	ContentHandlingStrategyConvertToBinary ContentHandlingStrategy = "CONVERT_TO_BINARY"
	ContentHandlingStrategyConvertToText   ContentHandlingStrategy = "CONVERT_TO_TEXT"
)

// Values returns all known values for ContentHandlingStrategy. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ContentHandlingStrategy) Values() []ContentHandlingStrategy {
	return []ContentHandlingStrategy{
		"CONVERT_TO_BINARY",
		"CONVERT_TO_TEXT",
	}
}

type DeploymentStatus string

// Enum values for DeploymentStatus
const (
	DeploymentStatusPending  DeploymentStatus = "PENDING"
	DeploymentStatusFailed   DeploymentStatus = "FAILED"
	DeploymentStatusDeployed DeploymentStatus = "DEPLOYED"
)

// Values returns all known values for DeploymentStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DeploymentStatus) Values() []DeploymentStatus {
	return []DeploymentStatus{
		"PENDING",
		"FAILED",
		"DEPLOYED",
	}
}

type DomainNameStatus string

// Enum values for DomainNameStatus
const (
	DomainNameStatusAvailable                    DomainNameStatus = "AVAILABLE"
	DomainNameStatusUpdating                     DomainNameStatus = "UPDATING"
	DomainNameStatusPendingCertificateReimport   DomainNameStatus = "PENDING_CERTIFICATE_REIMPORT"
	DomainNameStatusPendingOwnershipVerification DomainNameStatus = "PENDING_OWNERSHIP_VERIFICATION"
)

// Values returns all known values for DomainNameStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DomainNameStatus) Values() []DomainNameStatus {
	return []DomainNameStatus{
		"AVAILABLE",
		"UPDATING",
		"PENDING_CERTIFICATE_REIMPORT",
		"PENDING_OWNERSHIP_VERIFICATION",
	}
}

type EndpointType string

// Enum values for EndpointType
const (
	EndpointTypeRegional EndpointType = "REGIONAL"
	EndpointTypeEdge     EndpointType = "EDGE"
)

// Values returns all known values for EndpointType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EndpointType) Values() []EndpointType {
	return []EndpointType{
		"REGIONAL",
		"EDGE",
	}
}

type IntegrationType string

// Enum values for IntegrationType
const (
	IntegrationTypeAws       IntegrationType = "AWS"
	IntegrationTypeHttp      IntegrationType = "HTTP"
	IntegrationTypeMock      IntegrationType = "MOCK"
	IntegrationTypeHttpProxy IntegrationType = "HTTP_PROXY"
	IntegrationTypeAwsProxy  IntegrationType = "AWS_PROXY"
)

// Values returns all known values for IntegrationType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IntegrationType) Values() []IntegrationType {
	return []IntegrationType{
		"AWS",
		"HTTP",
		"MOCK",
		"HTTP_PROXY",
		"AWS_PROXY",
	}
}

type IpAddressType string

// Enum values for IpAddressType
const (
	IpAddressTypeIpv4      IpAddressType = "ipv4"
	IpAddressTypeDualstack IpAddressType = "dualstack"
)

// Values returns all known values for IpAddressType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (IpAddressType) Values() []IpAddressType {
	return []IpAddressType{
		"ipv4",
		"dualstack",
	}
}

type LoggingLevel string

// Enum values for LoggingLevel
const (
	LoggingLevelError LoggingLevel = "ERROR"
	LoggingLevelInfo  LoggingLevel = "INFO"
	LoggingLevelOff   LoggingLevel = "OFF"
)

// Values returns all known values for LoggingLevel. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LoggingLevel) Values() []LoggingLevel {
	return []LoggingLevel{
		"ERROR",
		"INFO",
		"OFF",
	}
}

type PassthroughBehavior string

// Enum values for PassthroughBehavior
const (
	PassthroughBehaviorWhenNoMatch     PassthroughBehavior = "WHEN_NO_MATCH"
	PassthroughBehaviorNever           PassthroughBehavior = "NEVER"
	PassthroughBehaviorWhenNoTemplates PassthroughBehavior = "WHEN_NO_TEMPLATES"
)

// Values returns all known values for PassthroughBehavior. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PassthroughBehavior) Values() []PassthroughBehavior {
	return []PassthroughBehavior{
		"WHEN_NO_MATCH",
		"NEVER",
		"WHEN_NO_TEMPLATES",
	}
}

type ProtocolType string

// Enum values for ProtocolType
const (
	ProtocolTypeWebsocket ProtocolType = "WEBSOCKET"
	ProtocolTypeHttp      ProtocolType = "HTTP"
)

// Values returns all known values for ProtocolType. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ProtocolType) Values() []ProtocolType {
	return []ProtocolType{
		"WEBSOCKET",
		"HTTP",
	}
}

type RoutingMode string

// Enum values for RoutingMode
const (
	RoutingModeApiMappingOnly            RoutingMode = "API_MAPPING_ONLY"
	RoutingModeRoutingRuleOnly           RoutingMode = "ROUTING_RULE_ONLY"
	RoutingModeRoutingRuleThenApiMapping RoutingMode = "ROUTING_RULE_THEN_API_MAPPING"
)

// Values returns all known values for RoutingMode. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (RoutingMode) Values() []RoutingMode {
	return []RoutingMode{
		"API_MAPPING_ONLY",
		"ROUTING_RULE_ONLY",
		"ROUTING_RULE_THEN_API_MAPPING",
	}
}

type SecurityPolicy string

// Enum values for SecurityPolicy
const (
	SecurityPolicyTls10 SecurityPolicy = "TLS_1_0"
	SecurityPolicyTls12 SecurityPolicy = "TLS_1_2"
)

// Values returns all known values for SecurityPolicy. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (SecurityPolicy) Values() []SecurityPolicy {
	return []SecurityPolicy{
		"TLS_1_0",
		"TLS_1_2",
	}
}

type VpcLinkStatus string

// Enum values for VpcLinkStatus
const (
	VpcLinkStatusPending   VpcLinkStatus = "PENDING"
	VpcLinkStatusAvailable VpcLinkStatus = "AVAILABLE"
	VpcLinkStatusDeleting  VpcLinkStatus = "DELETING"
	VpcLinkStatusFailed    VpcLinkStatus = "FAILED"
	VpcLinkStatusInactive  VpcLinkStatus = "INACTIVE"
)

// Values returns all known values for VpcLinkStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (VpcLinkStatus) Values() []VpcLinkStatus {
	return []VpcLinkStatus{
		"PENDING",
		"AVAILABLE",
		"DELETING",
		"FAILED",
		"INACTIVE",
	}
}

type VpcLinkVersion string

// Enum values for VpcLinkVersion
const (
	VpcLinkVersionV2 VpcLinkVersion = "V2"
)

// Values returns all known values for VpcLinkVersion. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (VpcLinkVersion) Values() []VpcLinkVersion {
	return []VpcLinkVersion{
		"V2",
	}
}
