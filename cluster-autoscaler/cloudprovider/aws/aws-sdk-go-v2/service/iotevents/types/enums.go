// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type AlarmModelVersionStatus string

// Enum values for AlarmModelVersionStatus
const (
	AlarmModelVersionStatusActive     AlarmModelVersionStatus = "ACTIVE"
	AlarmModelVersionStatusActivating AlarmModelVersionStatus = "ACTIVATING"
	AlarmModelVersionStatusInactive   AlarmModelVersionStatus = "INACTIVE"
	AlarmModelVersionStatusFailed     AlarmModelVersionStatus = "FAILED"
)

// Values returns all known values for AlarmModelVersionStatus. Note that this can
// be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AlarmModelVersionStatus) Values() []AlarmModelVersionStatus {
	return []AlarmModelVersionStatus{
		"ACTIVE",
		"ACTIVATING",
		"INACTIVE",
		"FAILED",
	}
}

type AnalysisResultLevel string

// Enum values for AnalysisResultLevel
const (
	AnalysisResultLevelInfo    AnalysisResultLevel = "INFO"
	AnalysisResultLevelWarning AnalysisResultLevel = "WARNING"
	AnalysisResultLevelError   AnalysisResultLevel = "ERROR"
)

// Values returns all known values for AnalysisResultLevel. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AnalysisResultLevel) Values() []AnalysisResultLevel {
	return []AnalysisResultLevel{
		"INFO",
		"WARNING",
		"ERROR",
	}
}

type AnalysisStatus string

// Enum values for AnalysisStatus
const (
	AnalysisStatusRunning  AnalysisStatus = "RUNNING"
	AnalysisStatusComplete AnalysisStatus = "COMPLETE"
	AnalysisStatusFailed   AnalysisStatus = "FAILED"
)

// Values returns all known values for AnalysisStatus. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (AnalysisStatus) Values() []AnalysisStatus {
	return []AnalysisStatus{
		"RUNNING",
		"COMPLETE",
		"FAILED",
	}
}

type ComparisonOperator string

// Enum values for ComparisonOperator
const (
	ComparisonOperatorGreater        ComparisonOperator = "GREATER"
	ComparisonOperatorGreaterOrEqual ComparisonOperator = "GREATER_OR_EQUAL"
	ComparisonOperatorLess           ComparisonOperator = "LESS"
	ComparisonOperatorLessOrEqual    ComparisonOperator = "LESS_OR_EQUAL"
	ComparisonOperatorEqual          ComparisonOperator = "EQUAL"
	ComparisonOperatorNotEqual       ComparisonOperator = "NOT_EQUAL"
)

// Values returns all known values for ComparisonOperator. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (ComparisonOperator) Values() []ComparisonOperator {
	return []ComparisonOperator{
		"GREATER",
		"GREATER_OR_EQUAL",
		"LESS",
		"LESS_OR_EQUAL",
		"EQUAL",
		"NOT_EQUAL",
	}
}

type DetectorModelVersionStatus string

// Enum values for DetectorModelVersionStatus
const (
	DetectorModelVersionStatusActive     DetectorModelVersionStatus = "ACTIVE"
	DetectorModelVersionStatusActivating DetectorModelVersionStatus = "ACTIVATING"
	DetectorModelVersionStatusInactive   DetectorModelVersionStatus = "INACTIVE"
	DetectorModelVersionStatusDeprecated DetectorModelVersionStatus = "DEPRECATED"
	DetectorModelVersionStatusDraft      DetectorModelVersionStatus = "DRAFT"
	DetectorModelVersionStatusPaused     DetectorModelVersionStatus = "PAUSED"
	DetectorModelVersionStatusFailed     DetectorModelVersionStatus = "FAILED"
)

// Values returns all known values for DetectorModelVersionStatus. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (DetectorModelVersionStatus) Values() []DetectorModelVersionStatus {
	return []DetectorModelVersionStatus{
		"ACTIVE",
		"ACTIVATING",
		"INACTIVE",
		"DEPRECATED",
		"DRAFT",
		"PAUSED",
		"FAILED",
	}
}

type EvaluationMethod string

// Enum values for EvaluationMethod
const (
	EvaluationMethodBatch  EvaluationMethod = "BATCH"
	EvaluationMethodSerial EvaluationMethod = "SERIAL"
)

// Values returns all known values for EvaluationMethod. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (EvaluationMethod) Values() []EvaluationMethod {
	return []EvaluationMethod{
		"BATCH",
		"SERIAL",
	}
}

type InputStatus string

// Enum values for InputStatus
const (
	InputStatusCreating InputStatus = "CREATING"
	InputStatusUpdating InputStatus = "UPDATING"
	InputStatusActive   InputStatus = "ACTIVE"
	InputStatusDeleting InputStatus = "DELETING"
)

// Values returns all known values for InputStatus. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (InputStatus) Values() []InputStatus {
	return []InputStatus{
		"CREATING",
		"UPDATING",
		"ACTIVE",
		"DELETING",
	}
}

type LoggingLevel string

// Enum values for LoggingLevel
const (
	LoggingLevelError LoggingLevel = "ERROR"
	LoggingLevelInfo  LoggingLevel = "INFO"
	LoggingLevelDebug LoggingLevel = "DEBUG"
)

// Values returns all known values for LoggingLevel. Note that this can be
// expanded in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (LoggingLevel) Values() []LoggingLevel {
	return []LoggingLevel{
		"ERROR",
		"INFO",
		"DEBUG",
	}
}

type PayloadType string

// Enum values for PayloadType
const (
	PayloadTypeString PayloadType = "STRING"
	PayloadTypeJson   PayloadType = "JSON"
)

// Values returns all known values for PayloadType. Note that this can be expanded
// in the future, and so it is only as up to date as the client.
//
// The ordering of this slice is not guaranteed to be stable across updates.
func (PayloadType) Values() []PayloadType {
	return []PayloadType{
		"STRING",
		"JSON",
	}
}
