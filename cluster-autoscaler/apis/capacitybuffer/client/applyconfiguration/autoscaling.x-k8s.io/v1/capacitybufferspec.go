/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	autoscalingxk8siov1 "k8s.io/autoscaler/cluster-autoscaler/apis/capacitybuffer/autoscaling.x-k8s.io/v1"
)

// CapacityBufferSpecApplyConfiguration represents a declarative configuration of the CapacityBufferSpec type for use
// with apply.
type CapacityBufferSpecApplyConfiguration struct {
	ProvisioningStrategy *string                           `json:"provisioningStrategy,omitempty"`
	PodTemplateRef       *LocalObjectRefApplyConfiguration `json:"podTemplateRef,omitempty"`
	ScalableRef          *ScalableRefApplyConfiguration    `json:"scalableRef,omitempty"`
	Replicas             *int32                            `json:"replicas,omitempty"`
	Percentage           *int32                            `json:"percentage,omitempty"`
	Limits               *autoscalingxk8siov1.ResourceList `json:"limits,omitempty"`
}

// CapacityBufferSpecApplyConfiguration constructs a declarative configuration of the CapacityBufferSpec type for use with
// apply.
func CapacityBufferSpec() *CapacityBufferSpecApplyConfiguration {
	return &CapacityBufferSpecApplyConfiguration{}
}

// WithProvisioningStrategy sets the ProvisioningStrategy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ProvisioningStrategy field is set to the value of the last call.
func (b *CapacityBufferSpecApplyConfiguration) WithProvisioningStrategy(value string) *CapacityBufferSpecApplyConfiguration {
	b.ProvisioningStrategy = &value
	return b
}

// WithPodTemplateRef sets the PodTemplateRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodTemplateRef field is set to the value of the last call.
func (b *CapacityBufferSpecApplyConfiguration) WithPodTemplateRef(value *LocalObjectRefApplyConfiguration) *CapacityBufferSpecApplyConfiguration {
	b.PodTemplateRef = value
	return b
}

// WithScalableRef sets the ScalableRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ScalableRef field is set to the value of the last call.
func (b *CapacityBufferSpecApplyConfiguration) WithScalableRef(value *ScalableRefApplyConfiguration) *CapacityBufferSpecApplyConfiguration {
	b.ScalableRef = value
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *CapacityBufferSpecApplyConfiguration) WithReplicas(value int32) *CapacityBufferSpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithPercentage sets the Percentage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Percentage field is set to the value of the last call.
func (b *CapacityBufferSpecApplyConfiguration) WithPercentage(value int32) *CapacityBufferSpecApplyConfiguration {
	b.Percentage = &value
	return b
}

// WithLimits sets the Limits field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Limits field is set to the value of the last call.
func (b *CapacityBufferSpecApplyConfiguration) WithLimits(value autoscalingxk8siov1.ResourceList) *CapacityBufferSpecApplyConfiguration {
	b.Limits = &value
	return b
}
